
Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003998  08003998  00004998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d8  080039d8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080039d8  080039d8  000049d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039e0  080039e0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039e0  080039e0  000049e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039e4  080039e4  000049e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080039e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  2000000c  080039f4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  080039f4  000053b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001044e  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a2  00000000  00000000  0001548a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00017a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a86  00000000  00000000  000187c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002629  00000000  00000000  0001924e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d71  00000000  00000000  0001b877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9d06  00000000  00000000  0002d5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e72ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003764  00000000  00000000  000e7334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000eaa98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003980 	.word	0x08003980

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003980 	.word	0x08003980

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	@ 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b2b      	ldr	r3, [pc, #172]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a2a      	ldr	r2, [pc, #168]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b28      	ldr	r3, [pc, #160]	@ (80005cc <MX_GPIO_Init+0xc4>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000536:	4b25      	ldr	r3, [pc, #148]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a24      	ldr	r2, [pc, #144]	@ (80005cc <MX_GPIO_Init+0xc4>)
 800053c:	f043 0320 	orr.w	r3, r3, #32
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b22      	ldr	r3, [pc, #136]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0320 	and.w	r3, r3, #32
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b1f      	ldr	r3, [pc, #124]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a1e      	ldr	r2, [pc, #120]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b1c      	ldr	r3, [pc, #112]	@ (80005cc <MX_GPIO_Init+0xc4>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b19      	ldr	r3, [pc, #100]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a18      	ldr	r2, [pc, #96]	@ (80005cc <MX_GPIO_Init+0xc4>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b16      	ldr	r3, [pc, #88]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2120      	movs	r1, #32
 8000582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000586:	f000 fef1 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000590:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	480b      	ldr	r0, [pc, #44]	@ (80005d0 <MX_GPIO_Init+0xc8>)
 80005a2:	f000 fd61 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005a6:	2320      	movs	r3, #32
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2300      	movs	r3, #0
 80005b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c0:	f000 fd52 	bl	8001068 <HAL_GPIO_Init>

}
 80005c4:	bf00      	nop
 80005c6:	3728      	adds	r7, #40	@ 0x28
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021000 	.word	0x40021000
 80005d0:	48000800 	.word	0x48000800

080005d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000648 <MX_I2C1_Init+0x74>)
 80005da:	4a1c      	ldr	r2, [pc, #112]	@ (800064c <MX_I2C1_Init+0x78>)
 80005dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 80005de:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <MX_I2C1_Init+0x74>)
 80005e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000650 <MX_I2C1_Init+0x7c>)
 80005e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005e4:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <MX_I2C1_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ea:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <MX_I2C1_Init+0x74>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f0:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <MX_I2C1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005f6:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <MX_I2C1_Init+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_I2C1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_I2C1_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_I2C1_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800060e:	480e      	ldr	r0, [pc, #56]	@ (8000648 <MX_I2C1_Init+0x74>)
 8000610:	f000 fec4 	bl	800139c <HAL_I2C_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800061a:	f000 f8d5 	bl	80007c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800061e:	2100      	movs	r1, #0
 8000620:	4809      	ldr	r0, [pc, #36]	@ (8000648 <MX_I2C1_Init+0x74>)
 8000622:	f001 fad9 	bl	8001bd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800062c:	f000 f8cc 	bl	80007c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000630:	2100      	movs	r1, #0
 8000632:	4805      	ldr	r0, [pc, #20]	@ (8000648 <MX_I2C1_Init+0x74>)
 8000634:	f001 fb1b 	bl	8001c6e <HAL_I2CEx_ConfigDigitalFilter>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800063e:	f000 f8c3 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000028 	.word	0x20000028
 800064c:	40005400 	.word	0x40005400
 8000650:	40b285c2 	.word	0x40b285c2

08000654 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09a      	sub	sp, #104	@ 0x68
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	2244      	movs	r2, #68	@ 0x44
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f003 f957 	bl	8003928 <memset>
  if(i2cHandle->Instance==I2C1)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a1f      	ldr	r2, [pc, #124]	@ (80006fc <HAL_I2C_MspInit+0xa8>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d136      	bne.n	80006f2 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000684:	2340      	movs	r3, #64	@ 0x40
 8000686:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000688:	2300      	movs	r3, #0
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4618      	mov	r0, r3
 8000692:	f002 f91b 	bl	80028cc <HAL_RCCEx_PeriphCLKConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800069c:	f000 f894 	bl	80007c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a0:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <HAL_I2C_MspInit+0xac>)
 80006a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a4:	4a16      	ldr	r2, [pc, #88]	@ (8000700 <HAL_I2C_MspInit+0xac>)
 80006a6:	f043 0302 	orr.w	r3, r3, #2
 80006aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ac:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <HAL_I2C_MspInit+0xac>)
 80006ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b0:	f003 0302 	and.w	r3, r3, #2
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80006b8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80006bc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006be:	2312      	movs	r3, #18
 80006c0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006ca:	2304      	movs	r3, #4
 80006cc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006d2:	4619      	mov	r1, r3
 80006d4:	480b      	ldr	r0, [pc, #44]	@ (8000704 <HAL_I2C_MspInit+0xb0>)
 80006d6:	f000 fcc7 	bl	8001068 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <HAL_I2C_MspInit+0xac>)
 80006dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006de:	4a08      	ldr	r2, [pc, #32]	@ (8000700 <HAL_I2C_MspInit+0xac>)
 80006e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <HAL_I2C_MspInit+0xac>)
 80006e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006f2:	bf00      	nop
 80006f4:	3768      	adds	r7, #104	@ 0x68
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40005400 	.word	0x40005400
 8000700:	40021000 	.word	0x40021000
 8000704:	48000400 	.word	0x48000400

08000708 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800070c:	f000 fb36 	bl	8000d7c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000710:	f000 f811 	bl	8000736 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000714:	f7ff fef8 	bl	8000508 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000718:	f000 f8c2 	bl	80008a0 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800071c:	f000 f90c 	bl	8000938 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8000720:	f7ff ff58 	bl	80005d4 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	//  X4_SendCommand(X4_CMD_GET_INFO); /**< Command to get device information */
	//  HAL_UART_Receive(&huart3, pData, Size, Timeout)
	ssd1306_Init();
 8000724:	f000 fa4e 	bl	8000bc4 <ssd1306_Init>
	ssd1306_Fill(White);
 8000728:	2001      	movs	r0, #1
 800072a:	f000 fab5 	bl	8000c98 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 800072e:	f000 facb 	bl	8000cc8 <ssd1306_UpdateScreen>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000732:	bf00      	nop
 8000734:	e7fd      	b.n	8000732 <main+0x2a>

08000736 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b094      	sub	sp, #80	@ 0x50
 800073a:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073c:	f107 0318 	add.w	r3, r7, #24
 8000740:	2238      	movs	r2, #56	@ 0x38
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f003 f8ef 	bl	8003928 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000758:	2000      	movs	r0, #0
 800075a:	f001 fad5 	bl	8001d08 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075e:	2301      	movs	r3, #1
 8000760:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000762:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000766:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076c:	2303      	movs	r3, #3
 800076e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000770:	2306      	movs	r3, #6
 8000772:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000774:	2355      	movs	r3, #85	@ 0x55
 8000776:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0318 	add.w	r3, r7, #24
 8000788:	4618      	mov	r0, r3
 800078a:	f001 fb71 	bl	8001e70 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000794:	f000 f818 	bl	80007c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2303      	movs	r3, #3
 800079e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2104      	movs	r1, #4
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fe6f 	bl	8002494 <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 80007bc:	f000 f804 	bl	80007c8 <Error_Handler>
	}
}
 80007c0:	bf00      	nop
 80007c2:	3750      	adds	r7, #80	@ 0x50
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <HAL_MspInit+0x44>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007de:	4a0e      	ldr	r2, [pc, #56]	@ (8000818 <HAL_MspInit+0x44>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80007e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <HAL_MspInit+0x44>)
 80007e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <HAL_MspInit+0x44>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f6:	4a08      	ldr	r2, [pc, #32]	@ (8000818 <HAL_MspInit+0x44>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_MspInit+0x44>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800080a:	f001 fb21 	bl	8001e50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <NMI_Handler+0x4>

08000824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <MemManage_Handler+0x4>

08000834 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <UsageFault_Handler+0x4>

08000844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000872:	f000 fad5 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <SystemInit+0x20>)
 8000882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000886:	4a05      	ldr	r2, [pc, #20]	@ (800089c <SystemInit+0x20>)
 8000888:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800088c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a4:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008a6:	4a23      	ldr	r2, [pc, #140]	@ (8000934 <MX_USART2_UART_Init+0x94>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008aa:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008be:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d6:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e2:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e8:	4811      	ldr	r0, [pc, #68]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008ea:	f002 f9df 	bl	8002cac <HAL_UART_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008f4:	f7ff ff68 	bl	80007c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f8:	2100      	movs	r1, #0
 80008fa:	480d      	ldr	r0, [pc, #52]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008fc:	f002 ff4a 	bl	8003794 <HAL_UARTEx_SetTxFifoThreshold>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000906:	f7ff ff5f 	bl	80007c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090a:	2100      	movs	r1, #0
 800090c:	4808      	ldr	r0, [pc, #32]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 800090e:	f002 ff7f 	bl	8003810 <HAL_UARTEx_SetRxFifoThreshold>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000918:	f7ff ff56 	bl	80007c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 800091e:	f002 ff00 	bl	8003722 <HAL_UARTEx_DisableFifoMode>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000928:	f7ff ff4e 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000007c 	.word	0x2000007c
 8000934:	40004400 	.word	0x40004400

08000938 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800093c:	4b22      	ldr	r3, [pc, #136]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 800093e:	4a23      	ldr	r2, [pc, #140]	@ (80009cc <MX_USART3_UART_Init+0x94>)
 8000940:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 128000;
 8000942:	4b21      	ldr	r3, [pc, #132]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 8000944:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8000948:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000956:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096e:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000980:	4811      	ldr	r0, [pc, #68]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 8000982:	f002 f993 	bl	8002cac <HAL_UART_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800098c:	f7ff ff1c 	bl	80007c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000990:	2100      	movs	r1, #0
 8000992:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 8000994:	f002 fefe 	bl	8003794 <HAL_UARTEx_SetTxFifoThreshold>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800099e:	f7ff ff13 	bl	80007c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4808      	ldr	r0, [pc, #32]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 80009a6:	f002 ff33 	bl	8003810 <HAL_UARTEx_SetRxFifoThreshold>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009b0:	f7ff ff0a 	bl	80007c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 80009b6:	f002 feb4 	bl	8003722 <HAL_UARTEx_DisableFifoMode>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009c0:	f7ff ff02 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000110 	.word	0x20000110
 80009cc:	40004800 	.word	0x40004800

080009d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b09c      	sub	sp, #112	@ 0x70
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e8:	f107 0318 	add.w	r3, r7, #24
 80009ec:	2244      	movs	r2, #68	@ 0x44
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 ff99 	bl	8003928 <memset>
  if(uartHandle->Instance==USART2)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a3d      	ldr	r2, [pc, #244]	@ (8000af0 <HAL_UART_MspInit+0x120>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d137      	bne.n	8000a70 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a08:	f107 0318 	add.w	r3, r7, #24
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 ff5d 	bl	80028cc <HAL_RCCEx_PeriphCLKConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a18:	f7ff fed6 	bl	80007c8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1c:	4b35      	ldr	r3, [pc, #212]	@ (8000af4 <HAL_UART_MspInit+0x124>)
 8000a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a20:	4a34      	ldr	r2, [pc, #208]	@ (8000af4 <HAL_UART_MspInit+0x124>)
 8000a22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a26:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a28:	4b32      	ldr	r3, [pc, #200]	@ (8000af4 <HAL_UART_MspInit+0x124>)
 8000a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b2f      	ldr	r3, [pc, #188]	@ (8000af4 <HAL_UART_MspInit+0x124>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a38:	4a2e      	ldr	r2, [pc, #184]	@ (8000af4 <HAL_UART_MspInit+0x124>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a40:	4b2c      	ldr	r3, [pc, #176]	@ (8000af4 <HAL_UART_MspInit+0x124>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f000 fafd 	bl	8001068 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a6e:	e03b      	b.n	8000ae8 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a20      	ldr	r2, [pc, #128]	@ (8000af8 <HAL_UART_MspInit+0x128>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d136      	bne.n	8000ae8 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 ff20 	bl	80028cc <HAL_RCCEx_PeriphCLKConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000a92:	f7ff fe99 	bl	80007c8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a96:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <HAL_UART_MspInit+0x124>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a9a:	4a16      	ldr	r2, [pc, #88]	@ (8000af4 <HAL_UART_MspInit+0x124>)
 8000a9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aa2:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <HAL_UART_MspInit+0x124>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <HAL_UART_MspInit+0x124>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab2:	4a10      	ldr	r2, [pc, #64]	@ (8000af4 <HAL_UART_MspInit+0x124>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <HAL_UART_MspInit+0x124>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ac6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000aca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4806      	ldr	r0, [pc, #24]	@ (8000afc <HAL_UART_MspInit+0x12c>)
 8000ae4:	f000 fac0 	bl	8001068 <HAL_GPIO_Init>
}
 8000ae8:	bf00      	nop
 8000aea:	3770      	adds	r7, #112	@ 0x70
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40004400 	.word	0x40004400
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40004800 	.word	0x40004800
 8000afc:	48000800 	.word	0x48000800

08000b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b00:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b04:	f7ff feba 	bl	800087c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0a:	490d      	ldr	r1, [pc, #52]	@ (8000b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <LoopForever+0xe>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b20:	4c0a      	ldr	r4, [pc, #40]	@ (8000b4c <LoopForever+0x16>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f002 ff03 	bl	8003938 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b32:	f7ff fde9 	bl	8000708 <main>

08000b36 <LoopForever>:

LoopForever:
    b LoopForever
 8000b36:	e7fe      	b.n	8000b36 <LoopForever>
  ldr   r0, =_estack
 8000b38:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b44:	080039e8 	.word	0x080039e8
  ldr r2, =_sbss
 8000b48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b4c:	200003b0 	.word	0x200003b0

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>

08000b52 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af04      	add	r7, sp, #16
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b6e:	9302      	str	r3, [sp, #8]
 8000b70:	2301      	movs	r3, #1
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2178      	movs	r1, #120	@ 0x78
 8000b7e:	4803      	ldr	r0, [pc, #12]	@ (8000b8c <ssd1306_WriteCommand+0x2c>)
 8000b80:	f000 fca8 	bl	80014d4 <HAL_I2C_Mem_Write>
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000028 	.word	0x20000028

08000b90 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af04      	add	r7, sp, #16
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ba2:	9202      	str	r2, [sp, #8]
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2301      	movs	r3, #1
 8000bac:	2240      	movs	r2, #64	@ 0x40
 8000bae:	2178      	movs	r1, #120	@ 0x78
 8000bb0:	4803      	ldr	r0, [pc, #12]	@ (8000bc0 <ssd1306_WriteData+0x30>)
 8000bb2:	f000 fc8f 	bl	80014d4 <HAL_I2C_Mem_Write>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000028 	.word	0x20000028

08000bc4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000bc8:	f7ff ffc3 	bl	8000b52 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000bcc:	2064      	movs	r0, #100	@ 0x64
 8000bce:	f000 f945 	bl	8000e5c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f000 f8b4 	bl	8000d40 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f7ff ffc1 	bl	8000b60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff ffbe 	bl	8000b60 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000be4:	20b0      	movs	r0, #176	@ 0xb0
 8000be6:	f7ff ffbb 	bl	8000b60 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000bea:	20c8      	movs	r0, #200	@ 0xc8
 8000bec:	f7ff ffb8 	bl	8000b60 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff ffb5 	bl	8000b60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000bf6:	2010      	movs	r0, #16
 8000bf8:	f7ff ffb2 	bl	8000b60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000bfc:	2040      	movs	r0, #64	@ 0x40
 8000bfe:	f7ff ffaf 	bl	8000b60 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000c02:	20ff      	movs	r0, #255	@ 0xff
 8000c04:	f000 f888 	bl	8000d18 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000c08:	20a1      	movs	r0, #161	@ 0xa1
 8000c0a:	f7ff ffa9 	bl	8000b60 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000c0e:	20a6      	movs	r0, #166	@ 0xa6
 8000c10:	f7ff ffa6 	bl	8000b60 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000c14:	20a8      	movs	r0, #168	@ 0xa8
 8000c16:	f7ff ffa3 	bl	8000b60 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8000c1a:	201f      	movs	r0, #31
 8000c1c:	f7ff ffa0 	bl	8000b60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c20:	20a4      	movs	r0, #164	@ 0xa4
 8000c22:	f7ff ff9d 	bl	8000b60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000c26:	20d3      	movs	r0, #211	@ 0xd3
 8000c28:	f7ff ff9a 	bl	8000b60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff ff97 	bl	8000b60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c32:	20d5      	movs	r0, #213	@ 0xd5
 8000c34:	f7ff ff94 	bl	8000b60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000c38:	20f0      	movs	r0, #240	@ 0xf0
 8000c3a:	f7ff ff91 	bl	8000b60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000c3e:	20d9      	movs	r0, #217	@ 0xd9
 8000c40:	f7ff ff8e 	bl	8000b60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000c44:	2022      	movs	r0, #34	@ 0x22
 8000c46:	f7ff ff8b 	bl	8000b60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000c4a:	20da      	movs	r0, #218	@ 0xda
 8000c4c:	f7ff ff88 	bl	8000b60 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8000c50:	2002      	movs	r0, #2
 8000c52:	f7ff ff85 	bl	8000b60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000c56:	20db      	movs	r0, #219	@ 0xdb
 8000c58:	f7ff ff82 	bl	8000b60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000c5c:	2020      	movs	r0, #32
 8000c5e:	f7ff ff7f 	bl	8000b60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000c62:	208d      	movs	r0, #141	@ 0x8d
 8000c64:	f7ff ff7c 	bl	8000b60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000c68:	2014      	movs	r0, #20
 8000c6a:	f7ff ff79 	bl	8000b60 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f000 f866 	bl	8000d40 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 f80f 	bl	8000c98 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000c7a:	f000 f825 	bl	8000cc8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c7e:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <ssd1306_Init+0xd0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c84:	4b03      	ldr	r3, [pc, #12]	@ (8000c94 <ssd1306_Init+0xd0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c8a:	4b02      	ldr	r3, [pc, #8]	@ (8000c94 <ssd1306_Init+0xd0>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	711a      	strb	r2, [r3, #4]
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200003a4 	.word	0x200003a4

08000c98 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d101      	bne.n	8000cac <ssd1306_Fill+0x14>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e000      	b.n	8000cae <ssd1306_Fill+0x16>
 8000cac:	23ff      	movs	r3, #255	@ 0xff
 8000cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4803      	ldr	r0, [pc, #12]	@ (8000cc4 <ssd1306_Fill+0x2c>)
 8000cb6:	f002 fe37 	bl	8003928 <memset>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200001a4 	.word	0x200001a4

08000cc8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000cce:	2300      	movs	r3, #0
 8000cd0:	71fb      	strb	r3, [r7, #7]
 8000cd2:	e016      	b.n	8000d02 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	3b50      	subs	r3, #80	@ 0x50
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff40 	bl	8000b60 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff ff3d 	bl	8000b60 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000ce6:	2010      	movs	r0, #16
 8000ce8:	f7ff ff3a 	bl	8000b60 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	01db      	lsls	r3, r3, #7
 8000cf0:	4a08      	ldr	r2, [pc, #32]	@ (8000d14 <ssd1306_UpdateScreen+0x4c>)
 8000cf2:	4413      	add	r3, r2
 8000cf4:	2180      	movs	r1, #128	@ 0x80
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff4a 	bl	8000b90 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	71fb      	strb	r3, [r7, #7]
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d9e5      	bls.n	8000cd4 <ssd1306_UpdateScreen+0xc>
    }
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200001a4 	.word	0x200001a4

08000d18 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000d22:	2381      	movs	r3, #129	@ 0x81
 8000d24:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff19 	bl	8000b60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff15 	bl	8000b60 <ssd1306_WriteCommand>
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d005      	beq.n	8000d5c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000d50:	23af      	movs	r3, #175	@ 0xaf
 8000d52:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <ssd1306_SetDisplayOn+0x38>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	715a      	strb	r2, [r3, #5]
 8000d5a:	e004      	b.n	8000d66 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000d5c:	23ae      	movs	r3, #174	@ 0xae
 8000d5e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <ssd1306_SetDisplayOn+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fef9 	bl	8000b60 <ssd1306_WriteCommand>
}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200003a4 	.word	0x200003a4

08000d7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d86:	2003      	movs	r0, #3
 8000d88:	f000 f93c 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f000 f80d 	bl	8000dac <HAL_InitTick>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d002      	beq.n	8000d9e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	e001      	b.n	8000da2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d9e:	f7ff fd19 	bl	80007d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da2:	79fb      	ldrb	r3, [r7, #7]

}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000db8:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <HAL_InitTick+0x68>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d022      	beq.n	8000e06 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000dc0:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <HAL_InitTick+0x6c>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <HAL_InitTick+0x68>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000dcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 f93a 	bl	800104e <HAL_SYSTICK_Config>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10f      	bne.n	8000e00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b0f      	cmp	r3, #15
 8000de4:	d809      	bhi.n	8000dfa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de6:	2200      	movs	r2, #0
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dee:	f000 f914 	bl	800101a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <HAL_InitTick+0x70>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	e007      	b.n	8000e0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	73fb      	strb	r3, [r7, #15]
 8000dfe:	e004      	b.n	8000e0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e001      	b.n	8000e0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000004 	.word	0x20000004

08000e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <HAL_IncTick+0x1c>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a03      	ldr	r2, [pc, #12]	@ (8000e3c <HAL_IncTick+0x1c>)
 8000e30:	6013      	str	r3, [r2, #0]
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	200003ac 	.word	0x200003ac
 8000e40:	20000008 	.word	0x20000008

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	@ (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200003ac 	.word	0x200003ac

08000e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff ffee 	bl	8000e44 <HAL_GetTick>
 8000e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e74:	d004      	beq.n	8000e80 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e76:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <HAL_Delay+0x40>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e80:	bf00      	nop
 8000e82:	f7ff ffdf 	bl	8000e44 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d8f7      	bhi.n	8000e82 <HAL_Delay+0x26>
  {
  }
}
 8000e92:	bf00      	nop
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	@ (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	@ (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	@ 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fe4:	f7ff ff8e 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff47 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff5e 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff90 	bl	8000f58 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5f 	bl	8000f04 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffb2 	bl	8000fc0 <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001076:	e15a      	b.n	800132e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	2101      	movs	r1, #1
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	fa01 f303 	lsl.w	r3, r1, r3
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 814c 	beq.w	8001328 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b01      	cmp	r3, #1
 800109a:	d005      	beq.n	80010a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d130      	bne.n	800110a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010de:	2201      	movs	r2, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	091b      	lsrs	r3, r3, #4
 80010f4:	f003 0201 	and.w	r2, r3, #1
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b03      	cmp	r3, #3
 8001114:	d017      	beq.n	8001146 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d123      	bne.n	800119a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	08da      	lsrs	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3208      	adds	r2, #8
 800115a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	220f      	movs	r2, #15
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	6939      	ldr	r1, [r7, #16]
 8001196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0203 	and.w	r2, r3, #3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 80a6 	beq.w	8001328 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011dc:	4b5b      	ldr	r3, [pc, #364]	@ (800134c <HAL_GPIO_Init+0x2e4>)
 80011de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e0:	4a5a      	ldr	r2, [pc, #360]	@ (800134c <HAL_GPIO_Init+0x2e4>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80011e8:	4b58      	ldr	r3, [pc, #352]	@ (800134c <HAL_GPIO_Init+0x2e4>)
 80011ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f4:	4a56      	ldr	r2, [pc, #344]	@ (8001350 <HAL_GPIO_Init+0x2e8>)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800121e:	d01f      	beq.n	8001260 <HAL_GPIO_Init+0x1f8>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a4c      	ldr	r2, [pc, #304]	@ (8001354 <HAL_GPIO_Init+0x2ec>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d019      	beq.n	800125c <HAL_GPIO_Init+0x1f4>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a4b      	ldr	r2, [pc, #300]	@ (8001358 <HAL_GPIO_Init+0x2f0>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d013      	beq.n	8001258 <HAL_GPIO_Init+0x1f0>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a4a      	ldr	r2, [pc, #296]	@ (800135c <HAL_GPIO_Init+0x2f4>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d00d      	beq.n	8001254 <HAL_GPIO_Init+0x1ec>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a49      	ldr	r2, [pc, #292]	@ (8001360 <HAL_GPIO_Init+0x2f8>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d007      	beq.n	8001250 <HAL_GPIO_Init+0x1e8>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a48      	ldr	r2, [pc, #288]	@ (8001364 <HAL_GPIO_Init+0x2fc>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d101      	bne.n	800124c <HAL_GPIO_Init+0x1e4>
 8001248:	2305      	movs	r3, #5
 800124a:	e00a      	b.n	8001262 <HAL_GPIO_Init+0x1fa>
 800124c:	2306      	movs	r3, #6
 800124e:	e008      	b.n	8001262 <HAL_GPIO_Init+0x1fa>
 8001250:	2304      	movs	r3, #4
 8001252:	e006      	b.n	8001262 <HAL_GPIO_Init+0x1fa>
 8001254:	2303      	movs	r3, #3
 8001256:	e004      	b.n	8001262 <HAL_GPIO_Init+0x1fa>
 8001258:	2302      	movs	r3, #2
 800125a:	e002      	b.n	8001262 <HAL_GPIO_Init+0x1fa>
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <HAL_GPIO_Init+0x1fa>
 8001260:	2300      	movs	r3, #0
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	f002 0203 	and.w	r2, r2, #3
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	4093      	lsls	r3, r2
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001272:	4937      	ldr	r1, [pc, #220]	@ (8001350 <HAL_GPIO_Init+0x2e8>)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001280:	4b39      	ldr	r3, [pc, #228]	@ (8001368 <HAL_GPIO_Init+0x300>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012a4:	4a30      	ldr	r2, [pc, #192]	@ (8001368 <HAL_GPIO_Init+0x300>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001368 <HAL_GPIO_Init+0x300>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ce:	4a26      	ldr	r2, [pc, #152]	@ (8001368 <HAL_GPIO_Init+0x300>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80012d4:	4b24      	ldr	r3, [pc, #144]	@ (8001368 <HAL_GPIO_Init+0x300>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001368 <HAL_GPIO_Init+0x300>)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <HAL_GPIO_Init+0x300>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001322:	4a11      	ldr	r2, [pc, #68]	@ (8001368 <HAL_GPIO_Init+0x300>)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3301      	adds	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	f47f ae9d 	bne.w	8001078 <HAL_GPIO_Init+0x10>
  }
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40021000 	.word	0x40021000
 8001350:	40010000 	.word	0x40010000
 8001354:	48000400 	.word	0x48000400
 8001358:	48000800 	.word	0x48000800
 800135c:	48000c00 	.word	0x48000c00
 8001360:	48001000 	.word	0x48001000
 8001364:	48001400 	.word	0x48001400
 8001368:	40010400 	.word	0x40010400

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001388:	e002      	b.n	8001390 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e08d      	b.n	80014ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d106      	bne.n	80013c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff f946 	bl	8000654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2224      	movs	r2, #36	@ 0x24
 80013cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0201 	bic.w	r2, r2, #1
 80013de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d107      	bne.n	8001416 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	e006      	b.n	8001424 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001422:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d108      	bne.n	800143e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	e007      	b.n	800144e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800144c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800145c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001460:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001470:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691a      	ldr	r2, [r3, #16]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69d9      	ldr	r1, [r3, #28]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1a      	ldr	r2, [r3, #32]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 0201 	orr.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2220      	movs	r2, #32
 80014b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af02      	add	r7, sp, #8
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	4608      	mov	r0, r1
 80014de:	4611      	mov	r1, r2
 80014e0:	461a      	mov	r2, r3
 80014e2:	4603      	mov	r3, r0
 80014e4:	817b      	strh	r3, [r7, #10]
 80014e6:	460b      	mov	r3, r1
 80014e8:	813b      	strh	r3, [r7, #8]
 80014ea:	4613      	mov	r3, r2
 80014ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b20      	cmp	r3, #32
 80014f8:	f040 80f9 	bne.w	80016ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d002      	beq.n	8001508 <HAL_I2C_Mem_Write+0x34>
 8001502:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001504:	2b00      	cmp	r3, #0
 8001506:	d105      	bne.n	8001514 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800150e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e0ed      	b.n	80016f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <HAL_I2C_Mem_Write+0x4e>
 800151e:	2302      	movs	r3, #2
 8001520:	e0e6      	b.n	80016f0 <HAL_I2C_Mem_Write+0x21c>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800152a:	f7ff fc8b 	bl	8000e44 <HAL_GetTick>
 800152e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2319      	movs	r3, #25
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 f955 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0d1      	b.n	80016f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2221      	movs	r2, #33	@ 0x21
 8001550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2240      	movs	r2, #64	@ 0x40
 8001558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6a3a      	ldr	r2, [r7, #32]
 8001566:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800156c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2200      	movs	r2, #0
 8001572:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001574:	88f8      	ldrh	r0, [r7, #6]
 8001576:	893a      	ldrh	r2, [r7, #8]
 8001578:	8979      	ldrh	r1, [r7, #10]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	4603      	mov	r3, r0
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f000 f8b9 	bl	80016fc <I2C_RequestMemoryWrite>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0a9      	b.n	80016f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2bff      	cmp	r3, #255	@ 0xff
 80015a4:	d90e      	bls.n	80015c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	22ff      	movs	r2, #255	@ 0xff
 80015aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	8979      	ldrh	r1, [r7, #10]
 80015b4:	2300      	movs	r3, #0
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f000 fad9 	bl	8001b74 <I2C_TransferConfig>
 80015c2:	e00f      	b.n	80015e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	8979      	ldrh	r1, [r7, #10]
 80015d6:	2300      	movs	r3, #0
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f000 fac8 	bl	8001b74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 f958 	bl	800189e <I2C_WaitOnTXISFlagUntilTimeout>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e07b      	b.n	80016f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fc:	781a      	ldrb	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001612:	b29b      	uxth	r3, r3
 8001614:	3b01      	subs	r3, #1
 8001616:	b29a      	uxth	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001620:	3b01      	subs	r3, #1
 8001622:	b29a      	uxth	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800162c:	b29b      	uxth	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d034      	beq.n	800169c <HAL_I2C_Mem_Write+0x1c8>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001636:	2b00      	cmp	r3, #0
 8001638:	d130      	bne.n	800169c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001640:	2200      	movs	r2, #0
 8001642:	2180      	movs	r1, #128	@ 0x80
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f8d1 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e04d      	b.n	80016f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001658:	b29b      	uxth	r3, r3
 800165a:	2bff      	cmp	r3, #255	@ 0xff
 800165c:	d90e      	bls.n	800167c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	22ff      	movs	r2, #255	@ 0xff
 8001662:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001668:	b2da      	uxtb	r2, r3
 800166a:	8979      	ldrh	r1, [r7, #10]
 800166c:	2300      	movs	r3, #0
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f000 fa7d 	bl	8001b74 <I2C_TransferConfig>
 800167a:	e00f      	b.n	800169c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001680:	b29a      	uxth	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800168a:	b2da      	uxtb	r2, r3
 800168c:	8979      	ldrh	r1, [r7, #10]
 800168e:	2300      	movs	r3, #0
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 fa6c 	bl	8001b74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d19e      	bne.n	80015e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 f93e 	bl	800192c <I2C_WaitOnSTOPFlagUntilTimeout>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e01a      	b.n	80016f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2220      	movs	r2, #32
 80016c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6859      	ldr	r1, [r3, #4]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <HAL_I2C_Mem_Write+0x224>)
 80016ce:	400b      	ands	r3, r1
 80016d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2220      	movs	r2, #32
 80016d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80016ee:	2302      	movs	r3, #2
  }
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	fe00e800 	.word	0xfe00e800

080016fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af02      	add	r7, sp, #8
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	4608      	mov	r0, r1
 8001706:	4611      	mov	r1, r2
 8001708:	461a      	mov	r2, r3
 800170a:	4603      	mov	r3, r0
 800170c:	817b      	strh	r3, [r7, #10]
 800170e:	460b      	mov	r3, r1
 8001710:	813b      	strh	r3, [r7, #8]
 8001712:	4613      	mov	r3, r2
 8001714:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	b2da      	uxtb	r2, r3
 800171a:	8979      	ldrh	r1, [r7, #10]
 800171c:	4b20      	ldr	r3, [pc, #128]	@ (80017a0 <I2C_RequestMemoryWrite+0xa4>)
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 fa25 	bl	8001b74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	69b9      	ldr	r1, [r7, #24]
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 f8b5 	bl	800189e <I2C_WaitOnTXISFlagUntilTimeout>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e02c      	b.n	8001798 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d105      	bne.n	8001750 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001744:	893b      	ldrh	r3, [r7, #8]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	629a      	str	r2, [r3, #40]	@ 0x28
 800174e:	e015      	b.n	800177c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001750:	893b      	ldrh	r3, [r7, #8]
 8001752:	0a1b      	lsrs	r3, r3, #8
 8001754:	b29b      	uxth	r3, r3
 8001756:	b2da      	uxtb	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	69b9      	ldr	r1, [r7, #24]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 f89b 	bl	800189e <I2C_WaitOnTXISFlagUntilTimeout>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e012      	b.n	8001798 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001772:	893b      	ldrh	r3, [r7, #8]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	2200      	movs	r2, #0
 8001784:	2180      	movs	r1, #128	@ 0x80
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 f830 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	80002000 	.word	0x80002000

080017a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d103      	bne.n	80017c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2200      	movs	r2, #0
 80017c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d007      	beq.n	80017e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699a      	ldr	r2, [r3, #24]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	619a      	str	r2, [r3, #24]
  }
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	4613      	mov	r3, r2
 80017fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017fc:	e03b      	b.n	8001876 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	6839      	ldr	r1, [r7, #0]
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 f8d6 	bl	80019b4 <I2C_IsErrorOccurred>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e041      	b.n	8001896 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001818:	d02d      	beq.n	8001876 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800181a:	f7ff fb13 	bl	8000e44 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d302      	bcc.n	8001830 <I2C_WaitOnFlagUntilTimeout+0x44>
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d122      	bne.n	8001876 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	699a      	ldr	r2, [r3, #24]
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	4013      	ands	r3, r2
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	429a      	cmp	r2, r3
 800183e:	bf0c      	ite	eq
 8001840:	2301      	moveq	r3, #1
 8001842:	2300      	movne	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	429a      	cmp	r2, r3
 800184c:	d113      	bne.n	8001876 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	f043 0220 	orr.w	r2, r3, #32
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2220      	movs	r2, #32
 800185e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e00f      	b.n	8001896 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	699a      	ldr	r2, [r3, #24]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4013      	ands	r3, r2
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	429a      	cmp	r2, r3
 8001884:	bf0c      	ite	eq
 8001886:	2301      	moveq	r3, #1
 8001888:	2300      	movne	r3, #0
 800188a:	b2db      	uxtb	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	429a      	cmp	r2, r3
 8001892:	d0b4      	beq.n	80017fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018aa:	e033      	b.n	8001914 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	68b9      	ldr	r1, [r7, #8]
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f000 f87f 	bl	80019b4 <I2C_IsErrorOccurred>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e031      	b.n	8001924 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018c6:	d025      	beq.n	8001914 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018c8:	f7ff fabc 	bl	8000e44 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d302      	bcc.n	80018de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d11a      	bne.n	8001914 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d013      	beq.n	8001914 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f0:	f043 0220 	orr.w	r2, r3, #32
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2220      	movs	r2, #32
 80018fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e007      	b.n	8001924 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b02      	cmp	r3, #2
 8001920:	d1c4      	bne.n	80018ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001938:	e02f      	b.n	800199a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 f838 	bl	80019b4 <I2C_IsErrorOccurred>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e02d      	b.n	80019aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800194e:	f7ff fa79 	bl	8000e44 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	429a      	cmp	r2, r3
 800195c:	d302      	bcc.n	8001964 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d11a      	bne.n	800199a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f003 0320 	and.w	r3, r3, #32
 800196e:	2b20      	cmp	r3, #32
 8001970:	d013      	beq.n	800199a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	f043 0220 	orr.w	r2, r3, #32
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2220      	movs	r2, #32
 8001982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e007      	b.n	80019aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0320 	and.w	r3, r3, #32
 80019a4:	2b20      	cmp	r3, #32
 80019a6:	d1c8      	bne.n	800193a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	@ 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	f003 0310 	and.w	r3, r3, #16
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d068      	beq.n	8001ab2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2210      	movs	r2, #16
 80019e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80019e8:	e049      	b.n	8001a7e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019f0:	d045      	beq.n	8001a7e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019f2:	f7ff fa27 	bl	8000e44 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d302      	bcc.n	8001a08 <I2C_IsErrorOccurred+0x54>
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d13a      	bne.n	8001a7e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a2a:	d121      	bne.n	8001a70 <I2C_IsErrorOccurred+0xbc>
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a32:	d01d      	beq.n	8001a70 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001a34:	7cfb      	ldrb	r3, [r7, #19]
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	d01a      	beq.n	8001a70 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001a4a:	f7ff f9fb 	bl	8000e44 <HAL_GetTick>
 8001a4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a50:	e00e      	b.n	8001a70 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001a52:	f7ff f9f7 	bl	8000e44 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b19      	cmp	r3, #25
 8001a5e:	d907      	bls.n	8001a70 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	f043 0320 	orr.w	r3, r3, #32
 8001a66:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001a6e:	e006      	b.n	8001a7e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f003 0320 	and.w	r3, r3, #32
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d1e9      	bne.n	8001a52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	2b20      	cmp	r3, #32
 8001a8a:	d003      	beq.n	8001a94 <I2C_IsErrorOccurred+0xe0>
 8001a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0aa      	beq.n	80019ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001a94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d103      	bne.n	8001aa4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	f043 0304 	orr.w	r3, r3, #4
 8001aaa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00b      	beq.n	8001adc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ad4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	f043 0308 	orr.w	r3, r3, #8
 8001aec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001af6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00b      	beq.n	8001b20 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	f043 0302 	orr.w	r3, r3, #2
 8001b0e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001b20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01c      	beq.n	8001b62 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f7ff fe3b 	bl	80017a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <I2C_IsErrorOccurred+0x1bc>)
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001b62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3728      	adds	r7, #40	@ 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	fe00e800 	.word	0xfe00e800

08001b74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	817b      	strh	r3, [r7, #10]
 8001b82:	4613      	mov	r3, r2
 8001b84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b86:	897b      	ldrh	r3, [r7, #10]
 8001b88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b8c:	7a7b      	ldrb	r3, [r7, #9]
 8001b8e:	041b      	lsls	r3, r3, #16
 8001b90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b94:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ba2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	0d5b      	lsrs	r3, r3, #21
 8001bae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001bb2:	4b08      	ldr	r3, [pc, #32]	@ (8001bd4 <I2C_TransferConfig+0x60>)
 8001bb4:	430b      	orrs	r3, r1
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	ea02 0103 	and.w	r1, r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001bc6:	bf00      	nop
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	03ff63ff 	.word	0x03ff63ff

08001bd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	d138      	bne.n	8001c60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e032      	b.n	8001c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2224      	movs	r2, #36	@ 0x24
 8001c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e000      	b.n	8001c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c60:	2302      	movs	r3, #2
  }
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b20      	cmp	r3, #32
 8001c82:	d139      	bne.n	8001cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e033      	b.n	8001cfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2224      	movs	r2, #36	@ 0x24
 8001c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0201 	bic.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001cc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e000      	b.n	8001cfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cf8:	2302      	movs	r3, #2
  }
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d141      	bne.n	8001d9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d16:	4b4b      	ldr	r3, [pc, #300]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d22:	d131      	bne.n	8001d88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d24:	4b47      	ldr	r3, [pc, #284]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d2a:	4a46      	ldr	r2, [pc, #280]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d34:	4b43      	ldr	r3, [pc, #268]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d3c:	4a41      	ldr	r2, [pc, #260]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d44:	4b40      	ldr	r3, [pc, #256]	@ (8001e48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2232      	movs	r2, #50	@ 0x32
 8001d4a:	fb02 f303 	mul.w	r3, r2, r3
 8001d4e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d50:	fba2 2303 	umull	r2, r3, r2, r3
 8001d54:	0c9b      	lsrs	r3, r3, #18
 8001d56:	3301      	adds	r3, #1
 8001d58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d5a:	e002      	b.n	8001d62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d62:	4b38      	ldr	r3, [pc, #224]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d6e:	d102      	bne.n	8001d76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f2      	bne.n	8001d5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d76:	4b33      	ldr	r3, [pc, #204]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d82:	d158      	bne.n	8001e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e057      	b.n	8001e38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d88:	4b2e      	ldr	r3, [pc, #184]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d98:	e04d      	b.n	8001e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001da0:	d141      	bne.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001da2:	4b28      	ldr	r3, [pc, #160]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dae:	d131      	bne.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001db0:	4b24      	ldr	r3, [pc, #144]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001db6:	4a23      	ldr	r2, [pc, #140]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dc0:	4b20      	ldr	r3, [pc, #128]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dc8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2232      	movs	r2, #50	@ 0x32
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	4a1c      	ldr	r2, [pc, #112]	@ (8001e4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8001de0:	0c9b      	lsrs	r3, r3, #18
 8001de2:	3301      	adds	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001de6:	e002      	b.n	8001dee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dee:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dfa:	d102      	bne.n	8001e02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f2      	bne.n	8001de8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e0e:	d112      	bne.n	8001e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e011      	b.n	8001e38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e24:	e007      	b.n	8001e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e26:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e2e:	4a05      	ldr	r2, [pc, #20]	@ (8001e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	40007000 	.word	0x40007000
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	431bde83 	.word	0x431bde83

08001e50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e5e:	6093      	str	r3, [r2, #8]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40007000 	.word	0x40007000

08001e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e2fe      	b.n	8002480 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d075      	beq.n	8001f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e8e:	4b97      	ldr	r3, [pc, #604]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e98:	4b94      	ldr	r3, [pc, #592]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	d102      	bne.n	8001eae <HAL_RCC_OscConfig+0x3e>
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d002      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x44>
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d10b      	bne.n	8001ecc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	4b8d      	ldr	r3, [pc, #564]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d05b      	beq.n	8001f78 <HAL_RCC_OscConfig+0x108>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d157      	bne.n	8001f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e2d9      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed4:	d106      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x74>
 8001ed6:	4b85      	ldr	r3, [pc, #532]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a84      	ldr	r2, [pc, #528]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e01d      	b.n	8001f20 <HAL_RCC_OscConfig+0xb0>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x98>
 8001eee:	4b7f      	ldr	r3, [pc, #508]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a7e      	ldr	r2, [pc, #504]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001ef4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4b7c      	ldr	r3, [pc, #496]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a7b      	ldr	r2, [pc, #492]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e00b      	b.n	8001f20 <HAL_RCC_OscConfig+0xb0>
 8001f08:	4b78      	ldr	r3, [pc, #480]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a77      	ldr	r2, [pc, #476]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b75      	ldr	r3, [pc, #468]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a74      	ldr	r2, [pc, #464]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7fe ff8c 	bl	8000e44 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f30:	f7fe ff88 	bl	8000e44 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	@ 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e29e      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f42:	4b6a      	ldr	r3, [pc, #424]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0xc0>
 8001f4e:	e014      	b.n	8001f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7fe ff78 	bl	8000e44 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f58:	f7fe ff74 	bl	8000e44 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	@ 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e28a      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f6a:	4b60      	ldr	r3, [pc, #384]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0xe8>
 8001f76:	e000      	b.n	8001f7a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d075      	beq.n	8002072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f86:	4b59      	ldr	r3, [pc, #356]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f90:	4b56      	ldr	r3, [pc, #344]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	2b0c      	cmp	r3, #12
 8001f9e:	d102      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x136>
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d002      	beq.n	8001fac <HAL_RCC_OscConfig+0x13c>
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d11f      	bne.n	8001fec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fac:	4b4f      	ldr	r3, [pc, #316]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x154>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e25d      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc4:	4b49      	ldr	r3, [pc, #292]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	4946      	ldr	r1, [pc, #280]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fd8:	4b45      	ldr	r3, [pc, #276]	@ (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fee5 	bl	8000dac <HAL_InitTick>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d043      	beq.n	8002070 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e249      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d023      	beq.n	800203c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff4:	4b3d      	ldr	r3, [pc, #244]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a3c      	ldr	r2, [pc, #240]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8001ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7fe ff20 	bl	8000e44 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002008:	f7fe ff1c 	bl	8000e44 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e232      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800201a:	4b34      	ldr	r3, [pc, #208]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	4b31      	ldr	r3, [pc, #196]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	061b      	lsls	r3, r3, #24
 8002034:	492d      	ldr	r1, [pc, #180]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
 800203a:	e01a      	b.n	8002072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203c:	4b2b      	ldr	r3, [pc, #172]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a2a      	ldr	r2, [pc, #168]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8002042:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7fe fefc 	bl	8000e44 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002050:	f7fe fef8 	bl	8000e44 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e20e      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002062:	4b22      	ldr	r3, [pc, #136]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x1e0>
 800206e:	e000      	b.n	8002072 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002070:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d041      	beq.n	8002102 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d01c      	beq.n	80020c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002086:	4b19      	ldr	r3, [pc, #100]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 8002088:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800208c:	4a17      	ldr	r2, [pc, #92]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002096:	f7fe fed5 	bl	8000e44 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800209e:	f7fe fed1 	bl	8000e44 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e1e7      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020b0:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 80020b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0ef      	beq.n	800209e <HAL_RCC_OscConfig+0x22e>
 80020be:	e020      	b.n	8002102 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c0:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 80020c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c6:	4a09      	ldr	r2, [pc, #36]	@ (80020ec <HAL_RCC_OscConfig+0x27c>)
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d0:	f7fe feb8 	bl	8000e44 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020d6:	e00d      	b.n	80020f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d8:	f7fe feb4 	bl	8000e44 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d906      	bls.n	80020f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e1ca      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020f4:	4b8c      	ldr	r3, [pc, #560]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80020f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1ea      	bne.n	80020d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80a6 	beq.w	800225c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002114:	4b84      	ldr	r3, [pc, #528]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_OscConfig+0x2b4>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x2b6>
 8002124:	2300      	movs	r3, #0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00d      	beq.n	8002146 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	4b7f      	ldr	r3, [pc, #508]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212e:	4a7e      	ldr	r2, [pc, #504]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002134:	6593      	str	r3, [r2, #88]	@ 0x58
 8002136:	4b7c      	ldr	r3, [pc, #496]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002142:	2301      	movs	r3, #1
 8002144:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002146:	4b79      	ldr	r3, [pc, #484]	@ (800232c <HAL_RCC_OscConfig+0x4bc>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d118      	bne.n	8002184 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002152:	4b76      	ldr	r3, [pc, #472]	@ (800232c <HAL_RCC_OscConfig+0x4bc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a75      	ldr	r2, [pc, #468]	@ (800232c <HAL_RCC_OscConfig+0x4bc>)
 8002158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800215c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215e:	f7fe fe71 	bl	8000e44 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002166:	f7fe fe6d 	bl	8000e44 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e183      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002178:	4b6c      	ldr	r3, [pc, #432]	@ (800232c <HAL_RCC_OscConfig+0x4bc>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d108      	bne.n	800219e <HAL_RCC_OscConfig+0x32e>
 800218c:	4b66      	ldr	r3, [pc, #408]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002192:	4a65      	ldr	r2, [pc, #404]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800219c:	e024      	b.n	80021e8 <HAL_RCC_OscConfig+0x378>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b05      	cmp	r3, #5
 80021a4:	d110      	bne.n	80021c8 <HAL_RCC_OscConfig+0x358>
 80021a6:	4b60      	ldr	r3, [pc, #384]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ac:	4a5e      	ldr	r2, [pc, #376]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021bc:	4a5a      	ldr	r2, [pc, #360]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021c6:	e00f      	b.n	80021e8 <HAL_RCC_OscConfig+0x378>
 80021c8:	4b57      	ldr	r3, [pc, #348]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ce:	4a56      	ldr	r2, [pc, #344]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021d8:	4b53      	ldr	r3, [pc, #332]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021de:	4a52      	ldr	r2, [pc, #328]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d016      	beq.n	800221e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7fe fe28 	bl	8000e44 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f6:	e00a      	b.n	800220e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f8:	f7fe fe24 	bl	8000e44 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e138      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800220e:	4b46      	ldr	r3, [pc, #280]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0ed      	beq.n	80021f8 <HAL_RCC_OscConfig+0x388>
 800221c:	e015      	b.n	800224a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7fe fe11 	bl	8000e44 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002224:	e00a      	b.n	800223c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7fe fe0d 	bl	8000e44 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e121      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800223c:	4b3a      	ldr	r3, [pc, #232]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1ed      	bne.n	8002226 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800224a:	7ffb      	ldrb	r3, [r7, #31]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d105      	bne.n	800225c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002250:	4b35      	ldr	r3, [pc, #212]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	4a34      	ldr	r2, [pc, #208]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002256:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800225a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	2b00      	cmp	r3, #0
 8002266:	d03c      	beq.n	80022e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01c      	beq.n	80022aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002270:	4b2d      	ldr	r3, [pc, #180]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002272:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002276:	4a2c      	ldr	r2, [pc, #176]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002280:	f7fe fde0 	bl	8000e44 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002288:	f7fe fddc 	bl	8000e44 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e0f2      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800229a:	4b23      	ldr	r3, [pc, #140]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 800229c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ef      	beq.n	8002288 <HAL_RCC_OscConfig+0x418>
 80022a8:	e01b      	b.n	80022e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80022ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80022b2:	f023 0301 	bic.w	r3, r3, #1
 80022b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ba:	f7fe fdc3 	bl	8000e44 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022c2:	f7fe fdbf 	bl	8000e44 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e0d5      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022d4:	4b14      	ldr	r3, [pc, #80]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80022d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1ef      	bne.n	80022c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80c9 	beq.w	800247e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b0c      	cmp	r3, #12
 80022f6:	f000 8083 	beq.w	8002400 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d15e      	bne.n	80023c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002302:	4b09      	ldr	r3, [pc, #36]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a08      	ldr	r2, [pc, #32]	@ (8002328 <HAL_RCC_OscConfig+0x4b8>)
 8002308:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800230c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7fe fd99 	bl	8000e44 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002314:	e00c      	b.n	8002330 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002316:	f7fe fd95 	bl	8000e44 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d905      	bls.n	8002330 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e0ab      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
 8002328:	40021000 	.word	0x40021000
 800232c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002330:	4b55      	ldr	r3, [pc, #340]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1ec      	bne.n	8002316 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233c:	4b52      	ldr	r3, [pc, #328]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	4b52      	ldr	r3, [pc, #328]	@ (800248c <HAL_RCC_OscConfig+0x61c>)
 8002342:	4013      	ands	r3, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6a11      	ldr	r1, [r2, #32]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800234c:	3a01      	subs	r2, #1
 800234e:	0112      	lsls	r2, r2, #4
 8002350:	4311      	orrs	r1, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002356:	0212      	lsls	r2, r2, #8
 8002358:	4311      	orrs	r1, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800235e:	0852      	lsrs	r2, r2, #1
 8002360:	3a01      	subs	r2, #1
 8002362:	0552      	lsls	r2, r2, #21
 8002364:	4311      	orrs	r1, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800236a:	0852      	lsrs	r2, r2, #1
 800236c:	3a01      	subs	r2, #1
 800236e:	0652      	lsls	r2, r2, #25
 8002370:	4311      	orrs	r1, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002376:	06d2      	lsls	r2, r2, #27
 8002378:	430a      	orrs	r2, r1
 800237a:	4943      	ldr	r1, [pc, #268]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 800237c:	4313      	orrs	r3, r2
 800237e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002380:	4b41      	ldr	r3, [pc, #260]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a40      	ldr	r2, [pc, #256]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800238a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800238c:	4b3e      	ldr	r3, [pc, #248]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a3d      	ldr	r2, [pc, #244]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 8002392:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002396:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7fe fd54 	bl	8000e44 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a0:	f7fe fd50 	bl	8000e44 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e066      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b2:	4b35      	ldr	r3, [pc, #212]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x530>
 80023be:	e05e      	b.n	800247e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c0:	4b31      	ldr	r3, [pc, #196]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a30      	ldr	r2, [pc, #192]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 80023c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe fd3a 	bl	8000e44 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d4:	f7fe fd36 	bl	8000e44 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e04c      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e6:	4b28      	ldr	r3, [pc, #160]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80023f2:	4b25      	ldr	r3, [pc, #148]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	4924      	ldr	r1, [pc, #144]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 80023f8:	4b25      	ldr	r3, [pc, #148]	@ (8002490 <HAL_RCC_OscConfig+0x620>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	60cb      	str	r3, [r1, #12]
 80023fe:	e03e      	b.n	800247e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e039      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800240c:	4b1e      	ldr	r3, [pc, #120]	@ (8002488 <HAL_RCC_OscConfig+0x618>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f003 0203 	and.w	r2, r3, #3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	429a      	cmp	r2, r3
 800241e:	d12c      	bne.n	800247a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	3b01      	subs	r3, #1
 800242c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242e:	429a      	cmp	r2, r3
 8002430:	d123      	bne.n	800247a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d11b      	bne.n	800247a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d113      	bne.n	800247a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245c:	085b      	lsrs	r3, r3, #1
 800245e:	3b01      	subs	r3, #1
 8002460:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d109      	bne.n	800247a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002470:	085b      	lsrs	r3, r3, #1
 8002472:	3b01      	subs	r3, #1
 8002474:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3720      	adds	r7, #32
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000
 800248c:	019f800c 	.word	0x019f800c
 8002490:	feeefffc 	.word	0xfeeefffc

08002494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e11e      	b.n	80026ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024ac:	4b91      	ldr	r3, [pc, #580]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d910      	bls.n	80024dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b8e      	ldr	r3, [pc, #568]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 020f 	bic.w	r2, r3, #15
 80024c2:	498c      	ldr	r1, [pc, #560]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ca:	4b8a      	ldr	r3, [pc, #552]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e106      	b.n	80026ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d073      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d129      	bne.n	8002544 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f0:	4b81      	ldr	r3, [pc, #516]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0f4      	b.n	80026ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002500:	f000 f99e 	bl	8002840 <RCC_GetSysClockFreqFromPLLSource>
 8002504:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4a7c      	ldr	r2, [pc, #496]	@ (80026fc <HAL_RCC_ClockConfig+0x268>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d93f      	bls.n	800258e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800250e:	4b7a      	ldr	r3, [pc, #488]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002522:	2b00      	cmp	r3, #0
 8002524:	d033      	beq.n	800258e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800252a:	2b00      	cmp	r3, #0
 800252c:	d12f      	bne.n	800258e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800252e:	4b72      	ldr	r3, [pc, #456]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002536:	4a70      	ldr	r2, [pc, #448]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 8002538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800253c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800253e:	2380      	movs	r3, #128	@ 0x80
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	e024      	b.n	800258e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d107      	bne.n	800255c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800254c:	4b6a      	ldr	r3, [pc, #424]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0c6      	b.n	80026ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800255c:	4b66      	ldr	r3, [pc, #408]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0be      	b.n	80026ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800256c:	f000 f8ce 	bl	800270c <HAL_RCC_GetSysClockFreq>
 8002570:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4a61      	ldr	r2, [pc, #388]	@ (80026fc <HAL_RCC_ClockConfig+0x268>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d909      	bls.n	800258e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800257a:	4b5f      	ldr	r3, [pc, #380]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002582:	4a5d      	ldr	r2, [pc, #372]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 8002584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002588:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800258a:	2380      	movs	r3, #128	@ 0x80
 800258c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800258e:	4b5a      	ldr	r3, [pc, #360]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f023 0203 	bic.w	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4957      	ldr	r1, [pc, #348]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800259c:	4313      	orrs	r3, r2
 800259e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a0:	f7fe fc50 	bl	8000e44 <HAL_GetTick>
 80025a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a6:	e00a      	b.n	80025be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a8:	f7fe fc4c 	bl	8000e44 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e095      	b.n	80026ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	4b4e      	ldr	r3, [pc, #312]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 020c 	and.w	r2, r3, #12
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d1eb      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d023      	beq.n	8002624 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e8:	4b43      	ldr	r3, [pc, #268]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	4a42      	ldr	r2, [pc, #264]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 80025ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002600:	4b3d      	ldr	r3, [pc, #244]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002608:	4a3b      	ldr	r2, [pc, #236]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800260a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800260e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002610:	4b39      	ldr	r3, [pc, #228]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4936      	ldr	r1, [pc, #216]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
 8002622:	e008      	b.n	8002636 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b80      	cmp	r3, #128	@ 0x80
 8002628:	d105      	bne.n	8002636 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800262a:	4b33      	ldr	r3, [pc, #204]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	4a32      	ldr	r2, [pc, #200]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 8002630:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002634:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002636:	4b2f      	ldr	r3, [pc, #188]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d21d      	bcs.n	8002680 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002644:	4b2b      	ldr	r3, [pc, #172]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 020f 	bic.w	r2, r3, #15
 800264c:	4929      	ldr	r1, [pc, #164]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002654:	f7fe fbf6 	bl	8000e44 <HAL_GetTick>
 8002658:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	e00a      	b.n	8002672 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800265c:	f7fe fbf2 	bl	8000e44 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e03b      	b.n	80026ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b20      	ldr	r3, [pc, #128]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d1ed      	bne.n	800265c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800268c:	4b1a      	ldr	r3, [pc, #104]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4917      	ldr	r1, [pc, #92]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026aa:	4b13      	ldr	r3, [pc, #76]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	490f      	ldr	r1, [pc, #60]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026be:	f000 f825 	bl	800270c <HAL_RCC_GetSysClockFreq>
 80026c2:	4602      	mov	r2, r0
 80026c4:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	490c      	ldr	r1, [pc, #48]	@ (8002700 <HAL_RCC_ClockConfig+0x26c>)
 80026d0:	5ccb      	ldrb	r3, [r1, r3]
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	fa22 f303 	lsr.w	r3, r2, r3
 80026da:	4a0a      	ldr	r2, [pc, #40]	@ (8002704 <HAL_RCC_ClockConfig+0x270>)
 80026dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026de:	4b0a      	ldr	r3, [pc, #40]	@ (8002708 <HAL_RCC_ClockConfig+0x274>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fb62 	bl	8000dac <HAL_InitTick>
 80026e8:	4603      	mov	r3, r0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40022000 	.word	0x40022000
 80026f8:	40021000 	.word	0x40021000
 80026fc:	04c4b400 	.word	0x04c4b400
 8002700:	08003998 	.word	0x08003998
 8002704:	20000000 	.word	0x20000000
 8002708:	20000004 	.word	0x20000004

0800270c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002712:	4b2c      	ldr	r3, [pc, #176]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b04      	cmp	r3, #4
 800271c:	d102      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800271e:	4b2a      	ldr	r3, [pc, #168]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	e047      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002724:	4b27      	ldr	r3, [pc, #156]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d102      	bne.n	8002736 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002730:	4b26      	ldr	r3, [pc, #152]	@ (80027cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	e03e      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002736:	4b23      	ldr	r3, [pc, #140]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d136      	bne.n	80027b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002742:	4b20      	ldr	r3, [pc, #128]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800274c:	4b1d      	ldr	r3, [pc, #116]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	3301      	adds	r3, #1
 8002758:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d10c      	bne.n	800277a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002760:	4a1a      	ldr	r2, [pc, #104]	@ (80027cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	4a16      	ldr	r2, [pc, #88]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800276a:	68d2      	ldr	r2, [r2, #12]
 800276c:	0a12      	lsrs	r2, r2, #8
 800276e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	617b      	str	r3, [r7, #20]
      break;
 8002778:	e00c      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800277a:	4a13      	ldr	r2, [pc, #76]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002782:	4a10      	ldr	r2, [pc, #64]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002784:	68d2      	ldr	r2, [r2, #12]
 8002786:	0a12      	lsrs	r2, r2, #8
 8002788:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800278c:	fb02 f303 	mul.w	r3, r2, r3
 8002790:	617b      	str	r3, [r7, #20]
      break;
 8002792:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002794:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	0e5b      	lsrs	r3, r3, #25
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	3301      	adds	r3, #1
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	e001      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027b4:	693b      	ldr	r3, [r7, #16]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	00f42400 	.word	0x00f42400
 80027cc:	016e3600 	.word	0x016e3600

080027d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d4:	4b03      	ldr	r3, [pc, #12]	@ (80027e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000000 	.word	0x20000000

080027e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027ec:	f7ff fff0 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b06      	ldr	r3, [pc, #24]	@ (800280c <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	4904      	ldr	r1, [pc, #16]	@ (8002810 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000
 8002810:	080039a8 	.word	0x080039a8

08002814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002818:	f7ff ffda 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	0adb      	lsrs	r3, r3, #11
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4904      	ldr	r1, [pc, #16]	@ (800283c <HAL_RCC_GetPCLK2Freq+0x28>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000
 800283c:	080039a8 	.word	0x080039a8

08002840 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002846:	4b1e      	ldr	r3, [pc, #120]	@ (80028c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002850:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	3301      	adds	r3, #1
 800285c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d10c      	bne.n	800287e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002864:	4a17      	ldr	r2, [pc, #92]	@ (80028c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	fbb2 f3f3 	udiv	r3, r2, r3
 800286c:	4a14      	ldr	r2, [pc, #80]	@ (80028c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800286e:	68d2      	ldr	r2, [r2, #12]
 8002870:	0a12      	lsrs	r2, r2, #8
 8002872:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	617b      	str	r3, [r7, #20]
    break;
 800287c:	e00c      	b.n	8002898 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800287e:	4a12      	ldr	r2, [pc, #72]	@ (80028c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	fbb2 f3f3 	udiv	r3, r2, r3
 8002886:	4a0e      	ldr	r2, [pc, #56]	@ (80028c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002888:	68d2      	ldr	r2, [r2, #12]
 800288a:	0a12      	lsrs	r2, r2, #8
 800288c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002890:	fb02 f303 	mul.w	r3, r2, r3
 8002894:	617b      	str	r3, [r7, #20]
    break;
 8002896:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002898:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0e5b      	lsrs	r3, r3, #25
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	3301      	adds	r3, #1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80028b2:	687b      	ldr	r3, [r7, #4]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	371c      	adds	r7, #28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	40021000 	.word	0x40021000
 80028c4:	016e3600 	.word	0x016e3600
 80028c8:	00f42400 	.word	0x00f42400

080028cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028d4:	2300      	movs	r3, #0
 80028d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028d8:	2300      	movs	r3, #0
 80028da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8098 	beq.w	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ee:	4b43      	ldr	r3, [pc, #268]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10d      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fa:	4b40      	ldr	r3, [pc, #256]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fe:	4a3f      	ldr	r2, [pc, #252]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002904:	6593      	str	r3, [r2, #88]	@ 0x58
 8002906:	4b3d      	ldr	r3, [pc, #244]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002912:	2301      	movs	r3, #1
 8002914:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002916:	4b3a      	ldr	r3, [pc, #232]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a39      	ldr	r2, [pc, #228]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002920:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002922:	f7fe fa8f 	bl	8000e44 <HAL_GetTick>
 8002926:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002928:	e009      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7fe fa8b 	bl	8000e44 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d902      	bls.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	74fb      	strb	r3, [r7, #19]
        break;
 800293c:	e005      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800293e:	4b30      	ldr	r3, [pc, #192]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0ef      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800294a:	7cfb      	ldrb	r3, [r7, #19]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d159      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002950:	4b2a      	ldr	r3, [pc, #168]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800295a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01e      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	429a      	cmp	r2, r3
 800296a:	d019      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800296c:	4b23      	ldr	r3, [pc, #140]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002972:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002976:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002978:	4b20      	ldr	r3, [pc, #128]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800297e:	4a1f      	ldr	r2, [pc, #124]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002984:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002988:	4b1c      	ldr	r3, [pc, #112]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298e:	4a1b      	ldr	r2, [pc, #108]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002990:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002998:	4a18      	ldr	r2, [pc, #96]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d016      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7fe fa4b 	bl	8000e44 <HAL_GetTick>
 80029ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b0:	e00b      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b2:	f7fe fa47 	bl	8000e44 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d902      	bls.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	74fb      	strb	r3, [r7, #19]
            break;
 80029c8:	e006      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ca:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0ec      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10b      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029de:	4b07      	ldr	r3, [pc, #28]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	4903      	ldr	r1, [pc, #12]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80029f4:	e008      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029f6:	7cfb      	ldrb	r3, [r7, #19]
 80029f8:	74bb      	strb	r3, [r7, #18]
 80029fa:	e005      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a08:	7c7b      	ldrb	r3, [r7, #17]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d105      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0e:	4ba6      	ldr	r3, [pc, #664]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a12:	4aa5      	ldr	r2, [pc, #660]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a18:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a26:	4ba0      	ldr	r3, [pc, #640]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2c:	f023 0203 	bic.w	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	499c      	ldr	r1, [pc, #624]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a48:	4b97      	ldr	r3, [pc, #604]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4e:	f023 020c 	bic.w	r2, r3, #12
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	4994      	ldr	r1, [pc, #592]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a6a:	4b8f      	ldr	r3, [pc, #572]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	498b      	ldr	r1, [pc, #556]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a8c:	4b86      	ldr	r3, [pc, #536]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	4983      	ldr	r1, [pc, #524]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aae:	4b7e      	ldr	r3, [pc, #504]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	497a      	ldr	r1, [pc, #488]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ad0:	4b75      	ldr	r3, [pc, #468]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	4972      	ldr	r1, [pc, #456]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002af2:	4b6d      	ldr	r3, [pc, #436]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	4969      	ldr	r1, [pc, #420]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b14:	4b64      	ldr	r3, [pc, #400]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	4961      	ldr	r1, [pc, #388]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b36:	4b5c      	ldr	r3, [pc, #368]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	4958      	ldr	r1, [pc, #352]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d015      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b58:	4b53      	ldr	r3, [pc, #332]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b66:	4950      	ldr	r1, [pc, #320]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b76:	d105      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4a4a      	ldr	r2, [pc, #296]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b82:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d015      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b90:	4b45      	ldr	r3, [pc, #276]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9e:	4942      	ldr	r1, [pc, #264]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002baa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bae:	d105      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4a3c      	ldr	r2, [pc, #240]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bba:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d015      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bc8:	4b37      	ldr	r3, [pc, #220]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	4934      	ldr	r1, [pc, #208]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002be6:	d105      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be8:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a2e      	ldr	r2, [pc, #184]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bf2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d015      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c00:	4b29      	ldr	r3, [pc, #164]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c0e:	4926      	ldr	r1, [pc, #152]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c20:	4b21      	ldr	r3, [pc, #132]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a20      	ldr	r2, [pc, #128]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c2a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d015      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c46:	4918      	ldr	r1, [pc, #96]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c56:	d105      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c58:	4b13      	ldr	r3, [pc, #76]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a12      	ldr	r2, [pc, #72]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d015      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c76:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c7e:	490a      	ldr	r1, [pc, #40]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c90:	4b05      	ldr	r3, [pc, #20]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a04      	ldr	r2, [pc, #16]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000

08002cac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e042      	b.n	8002d44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d106      	bne.n	8002cd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7fd fe7d 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2224      	movs	r2, #36	@ 0x24
 8002cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 faf4 	bl	80032e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f825 	bl	8002d4c <UART_SetConfig>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e01b      	b.n	8002d44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 fb73 	bl	8003428 <UART_CheckIdleState>
 8002d42:	4603      	mov	r3, r0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d50:	b08c      	sub	sp, #48	@ 0x30
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	4bab      	ldr	r3, [pc, #684]	@ (8003028 <UART_SetConfig+0x2dc>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d84:	430b      	orrs	r3, r1
 8002d86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4aa0      	ldr	r2, [pc, #640]	@ (800302c <UART_SetConfig+0x2e0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d004      	beq.n	8002db8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002db4:	4313      	orrs	r3, r2
 8002db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002dc2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd6:	f023 010f 	bic.w	r1, r3, #15
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a91      	ldr	r2, [pc, #580]	@ (8003030 <UART_SetConfig+0x2e4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d125      	bne.n	8002e3c <UART_SetConfig+0xf0>
 8002df0:	4b90      	ldr	r3, [pc, #576]	@ (8003034 <UART_SetConfig+0x2e8>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d81a      	bhi.n	8002e34 <UART_SetConfig+0xe8>
 8002dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8002e04 <UART_SetConfig+0xb8>)
 8002e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e04:	08002e15 	.word	0x08002e15
 8002e08:	08002e25 	.word	0x08002e25
 8002e0c:	08002e1d 	.word	0x08002e1d
 8002e10:	08002e2d 	.word	0x08002e2d
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e1a:	e0d6      	b.n	8002fca <UART_SetConfig+0x27e>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e22:	e0d2      	b.n	8002fca <UART_SetConfig+0x27e>
 8002e24:	2304      	movs	r3, #4
 8002e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e2a:	e0ce      	b.n	8002fca <UART_SetConfig+0x27e>
 8002e2c:	2308      	movs	r3, #8
 8002e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e32:	e0ca      	b.n	8002fca <UART_SetConfig+0x27e>
 8002e34:	2310      	movs	r3, #16
 8002e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e3a:	e0c6      	b.n	8002fca <UART_SetConfig+0x27e>
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a7d      	ldr	r2, [pc, #500]	@ (8003038 <UART_SetConfig+0x2ec>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d138      	bne.n	8002eb8 <UART_SetConfig+0x16c>
 8002e46:	4b7b      	ldr	r3, [pc, #492]	@ (8003034 <UART_SetConfig+0x2e8>)
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b0c      	cmp	r3, #12
 8002e52:	d82d      	bhi.n	8002eb0 <UART_SetConfig+0x164>
 8002e54:	a201      	add	r2, pc, #4	@ (adr r2, 8002e5c <UART_SetConfig+0x110>)
 8002e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5a:	bf00      	nop
 8002e5c:	08002e91 	.word	0x08002e91
 8002e60:	08002eb1 	.word	0x08002eb1
 8002e64:	08002eb1 	.word	0x08002eb1
 8002e68:	08002eb1 	.word	0x08002eb1
 8002e6c:	08002ea1 	.word	0x08002ea1
 8002e70:	08002eb1 	.word	0x08002eb1
 8002e74:	08002eb1 	.word	0x08002eb1
 8002e78:	08002eb1 	.word	0x08002eb1
 8002e7c:	08002e99 	.word	0x08002e99
 8002e80:	08002eb1 	.word	0x08002eb1
 8002e84:	08002eb1 	.word	0x08002eb1
 8002e88:	08002eb1 	.word	0x08002eb1
 8002e8c:	08002ea9 	.word	0x08002ea9
 8002e90:	2300      	movs	r3, #0
 8002e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e96:	e098      	b.n	8002fca <UART_SetConfig+0x27e>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e9e:	e094      	b.n	8002fca <UART_SetConfig+0x27e>
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ea6:	e090      	b.n	8002fca <UART_SetConfig+0x27e>
 8002ea8:	2308      	movs	r3, #8
 8002eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eae:	e08c      	b.n	8002fca <UART_SetConfig+0x27e>
 8002eb0:	2310      	movs	r3, #16
 8002eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eb6:	e088      	b.n	8002fca <UART_SetConfig+0x27e>
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a5f      	ldr	r2, [pc, #380]	@ (800303c <UART_SetConfig+0x2f0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d125      	bne.n	8002f0e <UART_SetConfig+0x1c2>
 8002ec2:	4b5c      	ldr	r3, [pc, #368]	@ (8003034 <UART_SetConfig+0x2e8>)
 8002ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ecc:	2b30      	cmp	r3, #48	@ 0x30
 8002ece:	d016      	beq.n	8002efe <UART_SetConfig+0x1b2>
 8002ed0:	2b30      	cmp	r3, #48	@ 0x30
 8002ed2:	d818      	bhi.n	8002f06 <UART_SetConfig+0x1ba>
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d00a      	beq.n	8002eee <UART_SetConfig+0x1a2>
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d814      	bhi.n	8002f06 <UART_SetConfig+0x1ba>
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <UART_SetConfig+0x19a>
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d008      	beq.n	8002ef6 <UART_SetConfig+0x1aa>
 8002ee4:	e00f      	b.n	8002f06 <UART_SetConfig+0x1ba>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eec:	e06d      	b.n	8002fca <UART_SetConfig+0x27e>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ef4:	e069      	b.n	8002fca <UART_SetConfig+0x27e>
 8002ef6:	2304      	movs	r3, #4
 8002ef8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002efc:	e065      	b.n	8002fca <UART_SetConfig+0x27e>
 8002efe:	2308      	movs	r3, #8
 8002f00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f04:	e061      	b.n	8002fca <UART_SetConfig+0x27e>
 8002f06:	2310      	movs	r3, #16
 8002f08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f0c:	e05d      	b.n	8002fca <UART_SetConfig+0x27e>
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a4b      	ldr	r2, [pc, #300]	@ (8003040 <UART_SetConfig+0x2f4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d125      	bne.n	8002f64 <UART_SetConfig+0x218>
 8002f18:	4b46      	ldr	r3, [pc, #280]	@ (8003034 <UART_SetConfig+0x2e8>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f22:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f24:	d016      	beq.n	8002f54 <UART_SetConfig+0x208>
 8002f26:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f28:	d818      	bhi.n	8002f5c <UART_SetConfig+0x210>
 8002f2a:	2b80      	cmp	r3, #128	@ 0x80
 8002f2c:	d00a      	beq.n	8002f44 <UART_SetConfig+0x1f8>
 8002f2e:	2b80      	cmp	r3, #128	@ 0x80
 8002f30:	d814      	bhi.n	8002f5c <UART_SetConfig+0x210>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <UART_SetConfig+0x1f0>
 8002f36:	2b40      	cmp	r3, #64	@ 0x40
 8002f38:	d008      	beq.n	8002f4c <UART_SetConfig+0x200>
 8002f3a:	e00f      	b.n	8002f5c <UART_SetConfig+0x210>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f42:	e042      	b.n	8002fca <UART_SetConfig+0x27e>
 8002f44:	2302      	movs	r3, #2
 8002f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f4a:	e03e      	b.n	8002fca <UART_SetConfig+0x27e>
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f52:	e03a      	b.n	8002fca <UART_SetConfig+0x27e>
 8002f54:	2308      	movs	r3, #8
 8002f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f5a:	e036      	b.n	8002fca <UART_SetConfig+0x27e>
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f62:	e032      	b.n	8002fca <UART_SetConfig+0x27e>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a30      	ldr	r2, [pc, #192]	@ (800302c <UART_SetConfig+0x2e0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d12a      	bne.n	8002fc4 <UART_SetConfig+0x278>
 8002f6e:	4b31      	ldr	r3, [pc, #196]	@ (8003034 <UART_SetConfig+0x2e8>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f7c:	d01a      	beq.n	8002fb4 <UART_SetConfig+0x268>
 8002f7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f82:	d81b      	bhi.n	8002fbc <UART_SetConfig+0x270>
 8002f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f88:	d00c      	beq.n	8002fa4 <UART_SetConfig+0x258>
 8002f8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f8e:	d815      	bhi.n	8002fbc <UART_SetConfig+0x270>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <UART_SetConfig+0x250>
 8002f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f98:	d008      	beq.n	8002fac <UART_SetConfig+0x260>
 8002f9a:	e00f      	b.n	8002fbc <UART_SetConfig+0x270>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fa2:	e012      	b.n	8002fca <UART_SetConfig+0x27e>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002faa:	e00e      	b.n	8002fca <UART_SetConfig+0x27e>
 8002fac:	2304      	movs	r3, #4
 8002fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fb2:	e00a      	b.n	8002fca <UART_SetConfig+0x27e>
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fba:	e006      	b.n	8002fca <UART_SetConfig+0x27e>
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fc2:	e002      	b.n	8002fca <UART_SetConfig+0x27e>
 8002fc4:	2310      	movs	r3, #16
 8002fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a17      	ldr	r2, [pc, #92]	@ (800302c <UART_SetConfig+0x2e0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	f040 80a8 	bne.w	8003126 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d834      	bhi.n	8003048 <UART_SetConfig+0x2fc>
 8002fde:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe4 <UART_SetConfig+0x298>)
 8002fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe4:	08003009 	.word	0x08003009
 8002fe8:	08003049 	.word	0x08003049
 8002fec:	08003011 	.word	0x08003011
 8002ff0:	08003049 	.word	0x08003049
 8002ff4:	08003017 	.word	0x08003017
 8002ff8:	08003049 	.word	0x08003049
 8002ffc:	08003049 	.word	0x08003049
 8003000:	08003049 	.word	0x08003049
 8003004:	0800301f 	.word	0x0800301f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003008:	f7ff fbee 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 800300c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800300e:	e021      	b.n	8003054 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003010:	4b0c      	ldr	r3, [pc, #48]	@ (8003044 <UART_SetConfig+0x2f8>)
 8003012:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003014:	e01e      	b.n	8003054 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003016:	f7ff fb79 	bl	800270c <HAL_RCC_GetSysClockFreq>
 800301a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800301c:	e01a      	b.n	8003054 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800301e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003024:	e016      	b.n	8003054 <UART_SetConfig+0x308>
 8003026:	bf00      	nop
 8003028:	cfff69f3 	.word	0xcfff69f3
 800302c:	40008000 	.word	0x40008000
 8003030:	40013800 	.word	0x40013800
 8003034:	40021000 	.word	0x40021000
 8003038:	40004400 	.word	0x40004400
 800303c:	40004800 	.word	0x40004800
 8003040:	40004c00 	.word	0x40004c00
 8003044:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003052:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 812a 	beq.w	80032b0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	4a9e      	ldr	r2, [pc, #632]	@ (80032dc <UART_SetConfig+0x590>)
 8003062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003066:	461a      	mov	r2, r3
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	fbb3 f3f2 	udiv	r3, r3, r2
 800306e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	429a      	cmp	r2, r3
 800307e:	d305      	bcc.n	800308c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	429a      	cmp	r2, r3
 800308a:	d903      	bls.n	8003094 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003092:	e10d      	b.n	80032b0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003096:	2200      	movs	r2, #0
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	60fa      	str	r2, [r7, #12]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	4a8e      	ldr	r2, [pc, #568]	@ (80032dc <UART_SetConfig+0x590>)
 80030a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2200      	movs	r2, #0
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030b6:	f7fd f8af 	bl	8000218 <__aeabi_uldivmod>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4610      	mov	r0, r2
 80030c0:	4619      	mov	r1, r3
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	020b      	lsls	r3, r1, #8
 80030cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030d0:	0202      	lsls	r2, r0, #8
 80030d2:	6979      	ldr	r1, [r7, #20]
 80030d4:	6849      	ldr	r1, [r1, #4]
 80030d6:	0849      	lsrs	r1, r1, #1
 80030d8:	2000      	movs	r0, #0
 80030da:	460c      	mov	r4, r1
 80030dc:	4605      	mov	r5, r0
 80030de:	eb12 0804 	adds.w	r8, r2, r4
 80030e2:	eb43 0905 	adc.w	r9, r3, r5
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	469a      	mov	sl, r3
 80030ee:	4693      	mov	fp, r2
 80030f0:	4652      	mov	r2, sl
 80030f2:	465b      	mov	r3, fp
 80030f4:	4640      	mov	r0, r8
 80030f6:	4649      	mov	r1, r9
 80030f8:	f7fd f88e 	bl	8000218 <__aeabi_uldivmod>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4613      	mov	r3, r2
 8003102:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800310a:	d308      	bcc.n	800311e <UART_SetConfig+0x3d2>
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003112:	d204      	bcs.n	800311e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6a3a      	ldr	r2, [r7, #32]
 800311a:	60da      	str	r2, [r3, #12]
 800311c:	e0c8      	b.n	80032b0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003124:	e0c4      	b.n	80032b0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800312e:	d167      	bne.n	8003200 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003130:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003134:	2b08      	cmp	r3, #8
 8003136:	d828      	bhi.n	800318a <UART_SetConfig+0x43e>
 8003138:	a201      	add	r2, pc, #4	@ (adr r2, 8003140 <UART_SetConfig+0x3f4>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003165 	.word	0x08003165
 8003144:	0800316d 	.word	0x0800316d
 8003148:	08003175 	.word	0x08003175
 800314c:	0800318b 	.word	0x0800318b
 8003150:	0800317b 	.word	0x0800317b
 8003154:	0800318b 	.word	0x0800318b
 8003158:	0800318b 	.word	0x0800318b
 800315c:	0800318b 	.word	0x0800318b
 8003160:	08003183 	.word	0x08003183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003164:	f7ff fb40 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 8003168:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800316a:	e014      	b.n	8003196 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800316c:	f7ff fb52 	bl	8002814 <HAL_RCC_GetPCLK2Freq>
 8003170:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003172:	e010      	b.n	8003196 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003174:	4b5a      	ldr	r3, [pc, #360]	@ (80032e0 <UART_SetConfig+0x594>)
 8003176:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003178:	e00d      	b.n	8003196 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800317a:	f7ff fac7 	bl	800270c <HAL_RCC_GetSysClockFreq>
 800317e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003180:	e009      	b.n	8003196 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003186:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003188:	e005      	b.n	8003196 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003194:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8089 	beq.w	80032b0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	4a4e      	ldr	r2, [pc, #312]	@ (80032dc <UART_SetConfig+0x590>)
 80031a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031a8:	461a      	mov	r2, r3
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80031b0:	005a      	lsls	r2, r3, #1
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	441a      	add	r2, r3
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	2b0f      	cmp	r3, #15
 80031c8:	d916      	bls.n	80031f8 <UART_SetConfig+0x4ac>
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d0:	d212      	bcs.n	80031f8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	f023 030f 	bic.w	r3, r3, #15
 80031da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	085b      	lsrs	r3, r3, #1
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	8bfb      	ldrh	r3, [r7, #30]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	8bfa      	ldrh	r2, [r7, #30]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	e05b      	b.n	80032b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80031fe:	e057      	b.n	80032b0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003200:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003204:	2b08      	cmp	r3, #8
 8003206:	d828      	bhi.n	800325a <UART_SetConfig+0x50e>
 8003208:	a201      	add	r2, pc, #4	@ (adr r2, 8003210 <UART_SetConfig+0x4c4>)
 800320a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320e:	bf00      	nop
 8003210:	08003235 	.word	0x08003235
 8003214:	0800323d 	.word	0x0800323d
 8003218:	08003245 	.word	0x08003245
 800321c:	0800325b 	.word	0x0800325b
 8003220:	0800324b 	.word	0x0800324b
 8003224:	0800325b 	.word	0x0800325b
 8003228:	0800325b 	.word	0x0800325b
 800322c:	0800325b 	.word	0x0800325b
 8003230:	08003253 	.word	0x08003253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003234:	f7ff fad8 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 8003238:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800323a:	e014      	b.n	8003266 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800323c:	f7ff faea 	bl	8002814 <HAL_RCC_GetPCLK2Freq>
 8003240:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003242:	e010      	b.n	8003266 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003244:	4b26      	ldr	r3, [pc, #152]	@ (80032e0 <UART_SetConfig+0x594>)
 8003246:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003248:	e00d      	b.n	8003266 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800324a:	f7ff fa5f 	bl	800270c <HAL_RCC_GetSysClockFreq>
 800324e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003250:	e009      	b.n	8003266 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003256:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003258:	e005      	b.n	8003266 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003264:	bf00      	nop
    }

    if (pclk != 0U)
 8003266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003268:	2b00      	cmp	r3, #0
 800326a:	d021      	beq.n	80032b0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003270:	4a1a      	ldr	r2, [pc, #104]	@ (80032dc <UART_SetConfig+0x590>)
 8003272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003276:	461a      	mov	r2, r3
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327a:	fbb3 f2f2 	udiv	r2, r3, r2
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	441a      	add	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	fbb2 f3f3 	udiv	r3, r2, r3
 800328e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	2b0f      	cmp	r3, #15
 8003294:	d909      	bls.n	80032aa <UART_SetConfig+0x55e>
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800329c:	d205      	bcs.n	80032aa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60da      	str	r2, [r3, #12]
 80032a8:	e002      	b.n	80032b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2200      	movs	r2, #0
 80032c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80032cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3730      	adds	r7, #48	@ 0x30
 80032d4:	46bd      	mov	sp, r7
 80032d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032da:	bf00      	nop
 80032dc:	080039b0 	.word	0x080039b0
 80032e0:	00f42400 	.word	0x00f42400

080032e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01a      	beq.n	80033fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033e2:	d10a      	bne.n	80033fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	605a      	str	r2, [r3, #4]
  }
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b098      	sub	sp, #96	@ 0x60
 800342c:	af02      	add	r7, sp, #8
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003438:	f7fd fd04 	bl	8000e44 <HAL_GetTick>
 800343c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b08      	cmp	r3, #8
 800344a:	d12f      	bne.n	80034ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800344c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003454:	2200      	movs	r2, #0
 8003456:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f88e 	bl	800357c <UART_WaitOnFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d022      	beq.n	80034ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003476:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800347a:	653b      	str	r3, [r7, #80]	@ 0x50
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003484:	647b      	str	r3, [r7, #68]	@ 0x44
 8003486:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003488:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800348a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800348c:	e841 2300 	strex	r3, r2, [r1]
 8003490:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e6      	bne.n	8003466 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e063      	b.n	8003574 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d149      	bne.n	800354e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c2:	2200      	movs	r2, #0
 80034c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f857 	bl	800357c <UART_WaitOnFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d03c      	beq.n	800354e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	623b      	str	r3, [r7, #32]
   return(result);
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80034f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e6      	bne.n	80034d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3308      	adds	r3, #8
 800350c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	e853 3f00 	ldrex	r3, [r3]
 8003514:	60fb      	str	r3, [r7, #12]
   return(result);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3308      	adds	r3, #8
 8003524:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003526:	61fa      	str	r2, [r7, #28]
 8003528:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352a:	69b9      	ldr	r1, [r7, #24]
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	617b      	str	r3, [r7, #20]
   return(result);
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e5      	bne.n	8003506 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e012      	b.n	8003574 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2220      	movs	r2, #32
 8003552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2220      	movs	r2, #32
 800355a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3758      	adds	r7, #88	@ 0x58
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	4613      	mov	r3, r2
 800358a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800358c:	e04f      	b.n	800362e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003594:	d04b      	beq.n	800362e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003596:	f7fd fc55 	bl	8000e44 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d302      	bcc.n	80035ac <UART_WaitOnFlagUntilTimeout+0x30>
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e04e      	b.n	800364e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d037      	beq.n	800362e <UART_WaitOnFlagUntilTimeout+0xb2>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b80      	cmp	r3, #128	@ 0x80
 80035c2:	d034      	beq.n	800362e <UART_WaitOnFlagUntilTimeout+0xb2>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b40      	cmp	r3, #64	@ 0x40
 80035c8:	d031      	beq.n	800362e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d110      	bne.n	80035fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2208      	movs	r2, #8
 80035de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f838 	bl	8003656 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2208      	movs	r2, #8
 80035ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e029      	b.n	800364e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003604:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003608:	d111      	bne.n	800362e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003612:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f81e 	bl	8003656 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e00f      	b.n	800364e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4013      	ands	r3, r2
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	429a      	cmp	r2, r3
 800363c:	bf0c      	ite	eq
 800363e:	2301      	moveq	r3, #1
 8003640:	2300      	movne	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	429a      	cmp	r2, r3
 800364a:	d0a0      	beq.n	800358e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003656:	b480      	push	{r7}
 8003658:	b095      	sub	sp, #84	@ 0x54
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800366c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800367c:	643b      	str	r3, [r7, #64]	@ 0x40
 800367e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003682:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800368a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e6      	bne.n	800365e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3308      	adds	r3, #8
 8003696:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	e853 3f00 	ldrex	r3, [r3]
 800369e:	61fb      	str	r3, [r7, #28]
   return(result);
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036a6:	f023 0301 	bic.w	r3, r3, #1
 80036aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3308      	adds	r3, #8
 80036b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036bc:	e841 2300 	strex	r3, r2, [r1]
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1e3      	bne.n	8003690 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d118      	bne.n	8003702 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f023 0310 	bic.w	r3, r3, #16
 80036e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f2:	6979      	ldr	r1, [r7, #20]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	e841 2300 	strex	r3, r2, [r1]
 80036fa:	613b      	str	r3, [r7, #16]
   return(result);
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1e6      	bne.n	80036d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003716:	bf00      	nop
 8003718:	3754      	adds	r7, #84	@ 0x54
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_UARTEx_DisableFifoMode+0x16>
 8003734:	2302      	movs	r3, #2
 8003736:	e027      	b.n	8003788 <HAL_UARTEx_DisableFifoMode+0x66>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2224      	movs	r2, #36	@ 0x24
 8003744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0201 	bic.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003766:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e02d      	b.n	8003808 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	@ 0x24
 80037b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f84f 	bl	800388c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003824:	2302      	movs	r3, #2
 8003826:	e02d      	b.n	8003884 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2224      	movs	r2, #36	@ 0x24
 8003834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0201 	bic.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f811 	bl	800388c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2220      	movs	r2, #32
 8003876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003898:	2b00      	cmp	r3, #0
 800389a:	d108      	bne.n	80038ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80038ac:	e031      	b.n	8003912 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80038ae:	2308      	movs	r3, #8
 80038b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80038b2:	2308      	movs	r3, #8
 80038b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	0e5b      	lsrs	r3, r3, #25
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	0f5b      	lsrs	r3, r3, #29
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038d6:	7bbb      	ldrb	r3, [r7, #14]
 80038d8:	7b3a      	ldrb	r2, [r7, #12]
 80038da:	4911      	ldr	r1, [pc, #68]	@ (8003920 <UARTEx_SetNbDataToProcess+0x94>)
 80038dc:	5c8a      	ldrb	r2, [r1, r2]
 80038de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038e2:	7b3a      	ldrb	r2, [r7, #12]
 80038e4:	490f      	ldr	r1, [pc, #60]	@ (8003924 <UARTEx_SetNbDataToProcess+0x98>)
 80038e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	7b7a      	ldrb	r2, [r7, #13]
 80038f8:	4909      	ldr	r1, [pc, #36]	@ (8003920 <UARTEx_SetNbDataToProcess+0x94>)
 80038fa:	5c8a      	ldrb	r2, [r1, r2]
 80038fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003900:	7b7a      	ldrb	r2, [r7, #13]
 8003902:	4908      	ldr	r1, [pc, #32]	@ (8003924 <UARTEx_SetNbDataToProcess+0x98>)
 8003904:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003906:	fb93 f3f2 	sdiv	r3, r3, r2
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003912:	bf00      	nop
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	080039c8 	.word	0x080039c8
 8003924:	080039d0 	.word	0x080039d0

08003928 <memset>:
 8003928:	4402      	add	r2, r0
 800392a:	4603      	mov	r3, r0
 800392c:	4293      	cmp	r3, r2
 800392e:	d100      	bne.n	8003932 <memset+0xa>
 8003930:	4770      	bx	lr
 8003932:	f803 1b01 	strb.w	r1, [r3], #1
 8003936:	e7f9      	b.n	800392c <memset+0x4>

08003938 <__libc_init_array>:
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	4d0d      	ldr	r5, [pc, #52]	@ (8003970 <__libc_init_array+0x38>)
 800393c:	4c0d      	ldr	r4, [pc, #52]	@ (8003974 <__libc_init_array+0x3c>)
 800393e:	1b64      	subs	r4, r4, r5
 8003940:	10a4      	asrs	r4, r4, #2
 8003942:	2600      	movs	r6, #0
 8003944:	42a6      	cmp	r6, r4
 8003946:	d109      	bne.n	800395c <__libc_init_array+0x24>
 8003948:	4d0b      	ldr	r5, [pc, #44]	@ (8003978 <__libc_init_array+0x40>)
 800394a:	4c0c      	ldr	r4, [pc, #48]	@ (800397c <__libc_init_array+0x44>)
 800394c:	f000 f818 	bl	8003980 <_init>
 8003950:	1b64      	subs	r4, r4, r5
 8003952:	10a4      	asrs	r4, r4, #2
 8003954:	2600      	movs	r6, #0
 8003956:	42a6      	cmp	r6, r4
 8003958:	d105      	bne.n	8003966 <__libc_init_array+0x2e>
 800395a:	bd70      	pop	{r4, r5, r6, pc}
 800395c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003960:	4798      	blx	r3
 8003962:	3601      	adds	r6, #1
 8003964:	e7ee      	b.n	8003944 <__libc_init_array+0xc>
 8003966:	f855 3b04 	ldr.w	r3, [r5], #4
 800396a:	4798      	blx	r3
 800396c:	3601      	adds	r6, #1
 800396e:	e7f2      	b.n	8003956 <__libc_init_array+0x1e>
 8003970:	080039e0 	.word	0x080039e0
 8003974:	080039e0 	.word	0x080039e0
 8003978:	080039e0 	.word	0x080039e0
 800397c:	080039e4 	.word	0x080039e4

08003980 <_init>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	bf00      	nop
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr

0800398c <_fini>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr
