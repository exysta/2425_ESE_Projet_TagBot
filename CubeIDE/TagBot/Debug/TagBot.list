
TagBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005270  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005448  08005448  00006448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005488  08005488  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005488  08005488  00006488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005490  08005490  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005490  08005490  00006490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005494  08005494  00006494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005498  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  2000000c  080054a4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  080054a4  00007378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001816d  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ffb  00000000  00000000  0001f1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  000221a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001165  00000000  00000000  00023800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ecf  00000000  00000000  00024965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a12d  00000000  00000000  00027834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da0db  00000000  00000000  00041961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ba3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fec  00000000  00000000  0011ba80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00121a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005430 	.word	0x08005430

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005430 	.word	0x08005430

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800050e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2220      	movs	r2, #32
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f004 ff59 	bl	80053d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000526:	4b32      	ldr	r3, [pc, #200]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000528:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800052c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800052e:	4b30      	ldr	r3, [pc, #192]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000530:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000536:	4b2e      	ldr	r3, [pc, #184]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053c:	4b2c      	ldr	r3, [pc, #176]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000542:	4b2b      	ldr	r3, [pc, #172]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000548:	4b29      	ldr	r3, [pc, #164]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054e:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000550:	2204      	movs	r2, #4
 8000552:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000554:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000556:	2200      	movs	r2, #0
 8000558:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800055a:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800055c:	2200      	movs	r2, #0
 800055e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000560:	4b23      	ldr	r3, [pc, #140]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000562:	2201      	movs	r2, #1
 8000564:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800056e:	4b20      	ldr	r3, [pc, #128]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000574:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800057a:	4b1d      	ldr	r3, [pc, #116]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000582:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000588:	4b19      	ldr	r3, [pc, #100]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	4817      	ldr	r0, [pc, #92]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000592:	f001 f8f9 	bl	8001788 <HAL_ADC_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800059c:	f000 fa22 	bl	80009e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005a8:	4619      	mov	r1, r3
 80005aa:	4811      	ldr	r0, [pc, #68]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005ac:	f001 fe86 	bl	80022bc <HAL_ADCEx_MultiModeConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005b6:	f000 fa15 	bl	80009e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <MX_ADC1_Init+0xec>)
 80005bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005be:	2306      	movs	r3, #6
 80005c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c6:	237f      	movs	r3, #127	@ 0x7f
 80005c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ca:	2304      	movs	r3, #4
 80005cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4619      	mov	r1, r3
 80005d6:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005d8:	f001 fa5a 	bl	8001a90 <HAL_ADC_ConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80005e2:	f000 f9ff 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	3730      	adds	r7, #48	@ 0x30
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028
 80005f4:	2e300800 	.word	0x2e300800

080005f8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	463b      	mov	r3, r7
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f004 fee7 	bl	80053d8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800060a:	4b2b      	ldr	r3, [pc, #172]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 800060c:	4a2b      	ldr	r2, [pc, #172]	@ (80006bc <MX_ADC2_Init+0xc4>)
 800060e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000610:	4b29      	ldr	r3, [pc, #164]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000612:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000616:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000618:	4b27      	ldr	r3, [pc, #156]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061e:	4b26      	ldr	r3, [pc, #152]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000624:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062a:	4b23      	ldr	r3, [pc, #140]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000630:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000632:	2204      	movs	r2, #4
 8000634:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000636:	4b20      	ldr	r3, [pc, #128]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000638:	2200      	movs	r2, #0
 800063a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 800063e:	2200      	movs	r2, #0
 8000640:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000642:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000644:	2201      	movs	r2, #1
 8000646:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000648:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000652:	2200      	movs	r2, #0
 8000654:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000658:	2200      	movs	r2, #0
 800065a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800065c:	4b16      	ldr	r3, [pc, #88]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 800065e:	2200      	movs	r2, #0
 8000660:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000664:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000666:	2200      	movs	r2, #0
 8000668:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800066a:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000672:	4811      	ldr	r0, [pc, #68]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000674:	f001 f888 	bl	8001788 <HAL_ADC_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800067e:	f000 f9b1 	bl	80009e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000682:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_ADC2_Init+0xc8>)
 8000684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000686:	2306      	movs	r3, #6
 8000688:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068e:	237f      	movs	r3, #127	@ 0x7f
 8000690:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000692:	2304      	movs	r3, #4
 8000694:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 80006a0:	f001 f9f6 	bl	8001a90 <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80006aa:	f000 f99b 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	3720      	adds	r7, #32
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000094 	.word	0x20000094
 80006bc:	50000100 	.word	0x50000100
 80006c0:	32601000 	.word	0x32601000

080006c4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b09c      	sub	sp, #112	@ 0x70
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	2244      	movs	r2, #68	@ 0x44
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f004 fe77 	bl	80053d8 <memset>
  if(adcHandle->Instance==ADC1)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80006f2:	d13e      	bne.n	8000772 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006fa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006fe:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000700:	f107 0318 	add.w	r3, r7, #24
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fedd 	bl	80034c4 <HAL_RCCEx_PeriphCLKConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000710:	f000 f968 	bl	80009e4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000714:	4b3a      	ldr	r3, [pc, #232]	@ (8000800 <HAL_ADC_MspInit+0x13c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	4a39      	ldr	r2, [pc, #228]	@ (8000800 <HAL_ADC_MspInit+0x13c>)
 800071c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800071e:	4b38      	ldr	r3, [pc, #224]	@ (8000800 <HAL_ADC_MspInit+0x13c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d10b      	bne.n	800073e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000726:	4b37      	ldr	r3, [pc, #220]	@ (8000804 <HAL_ADC_MspInit+0x140>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	4a36      	ldr	r2, [pc, #216]	@ (8000804 <HAL_ADC_MspInit+0x140>)
 800072c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000732:	4b34      	ldr	r3, [pc, #208]	@ (8000804 <HAL_ADC_MspInit+0x140>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b31      	ldr	r3, [pc, #196]	@ (8000804 <HAL_ADC_MspInit+0x140>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	4a30      	ldr	r2, [pc, #192]	@ (8000804 <HAL_ADC_MspInit+0x140>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074a:	4b2e      	ldr	r3, [pc, #184]	@ (8000804 <HAL_ADC_MspInit+0x140>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CAPTEUR_DIST_N_Pin|CAPTEUR_DIST_W_Pin;
 8000756:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800075a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075c:	2303      	movs	r3, #3
 800075e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000764:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000768:	4619      	mov	r1, r3
 800076a:	4827      	ldr	r0, [pc, #156]	@ (8000808 <HAL_ADC_MspInit+0x144>)
 800076c:	f001 ff2e 	bl	80025cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000770:	e042      	b.n	80007f8 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a25      	ldr	r2, [pc, #148]	@ (800080c <HAL_ADC_MspInit+0x148>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d13d      	bne.n	80007f8 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800077c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000780:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000782:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000786:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000788:	f107 0318 	add.w	r3, r7, #24
 800078c:	4618      	mov	r0, r3
 800078e:	f002 fe99 	bl	80034c4 <HAL_RCCEx_PeriphCLKConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8000798:	f000 f924 	bl	80009e4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800079c:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <HAL_ADC_MspInit+0x13c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	4a17      	ldr	r2, [pc, #92]	@ (8000800 <HAL_ADC_MspInit+0x13c>)
 80007a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <HAL_ADC_MspInit+0x13c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d10b      	bne.n	80007c6 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <HAL_ADC_MspInit+0x140>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	4a14      	ldr	r2, [pc, #80]	@ (8000804 <HAL_ADC_MspInit+0x140>)
 80007b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <HAL_ADC_MspInit+0x140>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <HAL_ADC_MspInit+0x140>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000804 <HAL_ADC_MspInit+0x140>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <HAL_ADC_MspInit+0x140>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CAPTEUR_DIST_S_Pin|CAPTEUR_DIST_E_Pin;
 80007de:	f248 0304 	movw	r3, #32772	@ 0x8004
 80007e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e4:	2303      	movs	r3, #3
 80007e6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007f0:	4619      	mov	r1, r3
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <HAL_ADC_MspInit+0x144>)
 80007f4:	f001 feea 	bl	80025cc <HAL_GPIO_Init>
}
 80007f8:	bf00      	nop
 80007fa:	3770      	adds	r7, #112	@ 0x70
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000100 	.word	0x20000100
 8000804:	40021000 	.word	0x40021000
 8000808:	48000400 	.word	0x48000400
 800080c:	50000100 	.word	0x50000100

08000810 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	@ 0x28
 8000814:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b3f      	ldr	r3, [pc, #252]	@ (8000924 <MX_GPIO_Init+0x114>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	4a3e      	ldr	r2, [pc, #248]	@ (8000924 <MX_GPIO_Init+0x114>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000832:	4b3c      	ldr	r3, [pc, #240]	@ (8000924 <MX_GPIO_Init+0x114>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800083e:	4b39      	ldr	r3, [pc, #228]	@ (8000924 <MX_GPIO_Init+0x114>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	4a38      	ldr	r2, [pc, #224]	@ (8000924 <MX_GPIO_Init+0x114>)
 8000844:	f043 0320 	orr.w	r3, r3, #32
 8000848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084a:	4b36      	ldr	r3, [pc, #216]	@ (8000924 <MX_GPIO_Init+0x114>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	f003 0320 	and.w	r3, r3, #32
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b33      	ldr	r3, [pc, #204]	@ (8000924 <MX_GPIO_Init+0x114>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	4a32      	ldr	r2, [pc, #200]	@ (8000924 <MX_GPIO_Init+0x114>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000862:	4b30      	ldr	r3, [pc, #192]	@ (8000924 <MX_GPIO_Init+0x114>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b2d      	ldr	r3, [pc, #180]	@ (8000924 <MX_GPIO_Init+0x114>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	4a2c      	ldr	r2, [pc, #176]	@ (8000924 <MX_GPIO_Init+0x114>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087a:	4b2a      	ldr	r3, [pc, #168]	@ (8000924 <MX_GPIO_Init+0x114>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CHAT_Pin|LED_SOURIS_Pin|LIDAR_M_EN_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f246 0110 	movw	r1, #24592	@ 0x6010
 800088c:	4826      	ldr	r0, [pc, #152]	@ (8000928 <MX_GPIO_Init+0x118>)
 800088e:	f002 f81f 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_1_Pin|USER_LED_2_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2103      	movs	r1, #3
 8000896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089a:	f002 f819 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIDAR_DEV_EN_GPIO_Port, LIDAR_DEV_EN_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2101      	movs	r1, #1
 80008a2:	4822      	ldr	r0, [pc, #136]	@ (800092c <MX_GPIO_Init+0x11c>)
 80008a4:	f002 f814 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_CHAT_Pin|LED_SOURIS_Pin|LIDAR_M_EN_Pin;
 80008a8:	f246 0310 	movw	r3, #24592	@ 0x6010
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	4819      	ldr	r0, [pc, #100]	@ (8000928 <MX_GPIO_Init+0x118>)
 80008c2:	f001 fe83 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USER_LED_1_Pin|USER_LED_2_Pin;
 80008c6:	2303      	movs	r3, #3
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e0:	f001 fe74 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Accelerometer_INT1_Pin|Accelerometer_INT2_Pin;
 80008e4:	230c      	movs	r3, #12
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008fc:	f001 fe66 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIDAR_DEV_EN_Pin;
 8000900:	2301      	movs	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LIDAR_DEV_EN_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_GPIO_Init+0x11c>)
 8000918:	f001 fe58 	bl	80025cc <HAL_GPIO_Init>

}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	@ 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40021000 	.word	0x40021000
 8000928:	48000800 	.word	0x48000800
 800092c:	48000400 	.word	0x48000400

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f000 fce1 	bl	80012fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f814 	bl	8000964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093c:	f7ff ff68 	bl	8000810 <MX_GPIO_Init>
  MX_UART4_Init();
 8000940:	f000 fb80 	bl	8001044 <MX_UART4_Init>
  MX_SPI1_Init();
 8000944:	f000 f854 	bl	80009f0 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000948:	f000 fa48 	bl	8000ddc <MX_TIM4_Init>
  MX_ADC1_Init();
 800094c:	f7ff fddc 	bl	8000508 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000950:	f7ff fe52 	bl	80005f8 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000954:	f000 f934 	bl	8000bc0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000958:	f000 f9ea 	bl	8000d30 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800095c:	f000 fbbe 	bl	80010dc <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <main+0x30>

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b094      	sub	sp, #80	@ 0x50
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	f107 0318 	add.w	r3, r7, #24
 800096e:	2238      	movs	r2, #56	@ 0x38
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f004 fd30 	bl	80053d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000986:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800098a:	f001 ffb9 	bl	8002900 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000992:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000998:	2340      	movs	r3, #64	@ 0x40
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800099c:	2300      	movs	r3, #0
 800099e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	f107 0318 	add.w	r3, r7, #24
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 f85f 	bl	8002a68 <HAL_RCC_OscConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80009b0:	f000 f818 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b4:	230f      	movs	r3, #15
 80009b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009b8:	2301      	movs	r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 fb5d 	bl	800308c <HAL_RCC_ClockConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80009d8:	f000 f804 	bl	80009e4 <Error_Handler>
  }
}
 80009dc:	bf00      	nop
 80009de:	3750      	adds	r7, #80	@ 0x50
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_Handler+0x8>

080009f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <MX_SPI1_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a68 <MX_SPI1_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <MX_SPI1_Init+0x74>)
 80009fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a02:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <MX_SPI1_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a08:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <MX_SPI1_Init+0x74>)
 8000a0a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000a0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a10:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <MX_SPI1_Init+0x74>)
 8000a12:	2202      	movs	r2, #2
 8000a14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a16:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <MX_SPI1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_SPI1_Init+0x74>)
 8000a1e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <MX_SPI1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <MX_SPI1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <MX_SPI1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <MX_SPI1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <MX_SPI1_Init+0x74>)
 8000a3e:	2207      	movs	r2, #7
 8000a40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <MX_SPI1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <MX_SPI1_Init+0x74>)
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_SPI1_Init+0x74>)
 8000a50:	f002 ff28 	bl	80038a4 <HAL_SPI_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f7ff ffc3 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000104 	.word	0x20000104
 8000a68:	40013000 	.word	0x40013000

08000a6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	@ 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a18      	ldr	r2, [pc, #96]	@ (8000aec <HAL_SPI_MspInit+0x80>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d129      	bne.n	8000ae2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a8e:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <HAL_SPI_MspInit+0x84>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a92:	4a17      	ldr	r2, [pc, #92]	@ (8000af0 <HAL_SPI_MspInit+0x84>)
 8000a94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <HAL_SPI_MspInit+0x84>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <HAL_SPI_MspInit+0x84>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	4a11      	ldr	r2, [pc, #68]	@ (8000af0 <HAL_SPI_MspInit+0x84>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <HAL_SPI_MspInit+0x84>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = Accelerometer_SCK_Pin|Accelerometer_MISO_Pin|Accelerometer_MOSI_Pin|Accelerometer_NSS_Pin;
 8000abe:	f248 03e0 	movw	r3, #32992	@ 0x80e0
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ad0:	2305      	movs	r3, #5
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ade:	f001 fd75 	bl	80025cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	@ 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40013000 	.word	0x40013000
 8000af0:	40021000 	.word	0x40021000

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <HAL_MspInit+0x44>)
 8000afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000afe:	4a0e      	ldr	r2, [pc, #56]	@ (8000b38 <HAL_MspInit+0x44>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b06:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <HAL_MspInit+0x44>)
 8000b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <HAL_MspInit+0x44>)
 8000b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b16:	4a08      	ldr	r2, [pc, #32]	@ (8000b38 <HAL_MspInit+0x44>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_MspInit+0x44>)
 8000b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b2a:	f001 ff8d 	bl	8002a48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <NMI_Handler+0x4>

08000b44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <MemManage_Handler+0x4>

08000b54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b92:	f000 fc05 	bl	80013a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	@ (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b098      	sub	sp, #96	@ 0x60
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]
 8000be2:	615a      	str	r2, [r3, #20]
 8000be4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2234      	movs	r2, #52	@ 0x34
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f004 fbf3 	bl	80053d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bf2:	4b4d      	ldr	r3, [pc, #308]	@ (8000d28 <MX_TIM1_Init+0x168>)
 8000bf4:	4a4d      	ldr	r2, [pc, #308]	@ (8000d2c <MX_TIM1_Init+0x16c>)
 8000bf6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bf8:	4b4b      	ldr	r3, [pc, #300]	@ (8000d28 <MX_TIM1_Init+0x168>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8000d28 <MX_TIM1_Init+0x168>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c04:	4b48      	ldr	r3, [pc, #288]	@ (8000d28 <MX_TIM1_Init+0x168>)
 8000c06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0c:	4b46      	ldr	r3, [pc, #280]	@ (8000d28 <MX_TIM1_Init+0x168>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c12:	4b45      	ldr	r3, [pc, #276]	@ (8000d28 <MX_TIM1_Init+0x168>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c18:	4b43      	ldr	r3, [pc, #268]	@ (8000d28 <MX_TIM1_Init+0x168>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c1e:	4842      	ldr	r0, [pc, #264]	@ (8000d28 <MX_TIM1_Init+0x168>)
 8000c20:	f002 feeb 	bl	80039fa <HAL_TIM_PWM_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000c2a:	f7ff fedb 	bl	80009e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c3a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4839      	ldr	r0, [pc, #228]	@ (8000d28 <MX_TIM1_Init+0x168>)
 8000c42:	f003 fc7d 	bl	8004540 <HAL_TIMEx_MasterConfigSynchronization>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c4c:	f7ff feca 	bl	80009e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c50:	2360      	movs	r3, #96	@ 0x60
 8000c52:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c6c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c70:	2200      	movs	r2, #0
 8000c72:	4619      	mov	r1, r3
 8000c74:	482c      	ldr	r0, [pc, #176]	@ (8000d28 <MX_TIM1_Init+0x168>)
 8000c76:	f002 ffbd 	bl	8003bf4 <HAL_TIM_PWM_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c80:	f7ff feb0 	bl	80009e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c84:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c88:	2204      	movs	r2, #4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4826      	ldr	r0, [pc, #152]	@ (8000d28 <MX_TIM1_Init+0x168>)
 8000c8e:	f002 ffb1 	bl	8003bf4 <HAL_TIM_PWM_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000c98:	f7ff fea4 	bl	80009e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c9c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ca0:	2208      	movs	r2, #8
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4820      	ldr	r0, [pc, #128]	@ (8000d28 <MX_TIM1_Init+0x168>)
 8000ca6:	f002 ffa5 	bl	8003bf4 <HAL_TIM_PWM_ConfigChannel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000cb0:	f7ff fe98 	bl	80009e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cb4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cb8:	220c      	movs	r2, #12
 8000cba:	4619      	mov	r1, r3
 8000cbc:	481a      	ldr	r0, [pc, #104]	@ (8000d28 <MX_TIM1_Init+0x168>)
 8000cbe:	f002 ff99 	bl	8003bf4 <HAL_TIM_PWM_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000cc8:	f7ff fe8c 	bl	80009e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	4807      	ldr	r0, [pc, #28]	@ (8000d28 <MX_TIM1_Init+0x168>)
 8000d0a:	f003 fc9b 	bl	8004644 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000d14:	f7ff fe66 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d18:	4803      	ldr	r0, [pc, #12]	@ (8000d28 <MX_TIM1_Init+0x168>)
 8000d1a:	f000 f949 	bl	8000fb0 <HAL_TIM_MspPostInit>

}
 8000d1e:	bf00      	nop
 8000d20:	3760      	adds	r7, #96	@ 0x60
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000168 	.word	0x20000168
 8000d2c:	40012c00 	.word	0x40012c00

08000d30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	@ 0x30
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	2224      	movs	r2, #36	@ 0x24
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f004 fb4a 	bl	80053d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	463b      	mov	r3, r7
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	@ (8000dd4 <MX_TIM3_Init+0xa4>)
 8000d50:	4a21      	ldr	r2, [pc, #132]	@ (8000dd8 <MX_TIM3_Init+0xa8>)
 8000d52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d54:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd4 <MX_TIM3_Init+0xa4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd4 <MX_TIM3_Init+0xa4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d60:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <MX_TIM3_Init+0xa4>)
 8000d62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <MX_TIM3_Init+0xa4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	@ (8000dd4 <MX_TIM3_Init+0xa4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480d      	ldr	r0, [pc, #52]	@ (8000dd4 <MX_TIM3_Init+0xa4>)
 8000da0:	f002 fe82 	bl	8003aa8 <HAL_TIM_Encoder_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000daa:	f7ff fe1b 	bl	80009e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000db6:	463b      	mov	r3, r7
 8000db8:	4619      	mov	r1, r3
 8000dba:	4806      	ldr	r0, [pc, #24]	@ (8000dd4 <MX_TIM3_Init+0xa4>)
 8000dbc:	f003 fbc0 	bl	8004540 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000dc6:	f7ff fe0d 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	3730      	adds	r7, #48	@ 0x30
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200001b4 	.word	0x200001b4
 8000dd8:	40000400 	.word	0x40000400

08000ddc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	@ 0x30
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	2224      	movs	r2, #36	@ 0x24
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f004 faf4 	bl	80053d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df0:	463b      	mov	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dfa:	4b21      	ldr	r3, [pc, #132]	@ (8000e80 <MX_TIM4_Init+0xa4>)
 8000dfc:	4a21      	ldr	r2, [pc, #132]	@ (8000e84 <MX_TIM4_Init+0xa8>)
 8000dfe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e00:	4b1f      	ldr	r3, [pc, #124]	@ (8000e80 <MX_TIM4_Init+0xa4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <MX_TIM4_Init+0xa4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <MX_TIM4_Init+0xa4>)
 8000e0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <MX_TIM4_Init+0xa4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <MX_TIM4_Init+0xa4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480d      	ldr	r0, [pc, #52]	@ (8000e80 <MX_TIM4_Init+0xa4>)
 8000e4c:	f002 fe2c 	bl	8003aa8 <HAL_TIM_Encoder_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000e56:	f7ff fdc5 	bl	80009e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	@ (8000e80 <MX_TIM4_Init+0xa4>)
 8000e68:	f003 fb6a 	bl	8004540 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000e72:	f7ff fdb7 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	3730      	adds	r7, #48	@ 0x30
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000200 	.word	0x20000200
 8000e84:	40000800 	.word	0x40000800

08000e88 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <HAL_TIM_PWM_MspInit+0x38>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d10b      	bne.n	8000eb2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e9e:	4a09      	ldr	r2, [pc, #36]	@ (8000ec4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ea0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ea4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ea6:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40012c00 	.word	0x40012c00
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	@ 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a2e      	ldr	r2, [pc, #184]	@ (8000fa0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d128      	bne.n	8000f3c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eea:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eee:	4a2d      	ldr	r2, [pc, #180]	@ (8000fa4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	61bb      	str	r3, [r7, #24]
 8000f00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b28      	ldr	r3, [pc, #160]	@ (8000fa4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	4a27      	ldr	r2, [pc, #156]	@ (8000fa4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0e:	4b25      	ldr	r3, [pc, #148]	@ (8000fa4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LIDAR_M_SCTR_Pin|ENCODER_RIGHT_A_Pin|ENCODER_RIGHT_B_Pin;
 8000f1a:	2332      	movs	r3, #50	@ 0x32
 8000f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	481c      	ldr	r0, [pc, #112]	@ (8000fa8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f36:	f001 fb49 	bl	80025cc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000f3a:	e02c      	b.n	8000f96 <HAL_TIM_Encoder_MspInit+0xce>
  else if(tim_encoderHandle->Instance==TIM4)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a1a      	ldr	r2, [pc, #104]	@ (8000fac <HAL_TIM_Encoder_MspInit+0xe4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d127      	bne.n	8000f96 <HAL_TIM_Encoder_MspInit+0xce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4a:	4a16      	ldr	r2, [pc, #88]	@ (8000fa4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f52:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f62:	4a10      	ldr	r2, [pc, #64]	@ (8000fa4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_LEFT_A_Pin|ENCODER_LEFT_B_Pin;
 8000f76:	23c0      	movs	r3, #192	@ 0xc0
 8000f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f86:	2302      	movs	r3, #2
 8000f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f92:	f001 fb1b 	bl	80025cc <HAL_GPIO_Init>
}
 8000f96:	bf00      	nop
 8000f98:	3730      	adds	r7, #48	@ 0x30
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40000400 	.word	0x40000400
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	48000400 	.word	0x48000400
 8000fac:	40000800 	.word	0x40000800

08000fb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800103c <HAL_TIM_MspPostInit+0x8c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d12f      	bne.n	8001032 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001040 <HAL_TIM_MspPostInit+0x90>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8001040 <HAL_TIM_MspPostInit+0x90>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fde:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <HAL_TIM_MspPostInit+0x90>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = RIGHT_MOTOR_FWD_Pin|RIGHT_MOTOR_REV_Pin|LEFT_MOTOR_FWD_Pin;
 8000fea:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000fee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	4619      	mov	r1, r3
 8001006:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100a:	f001 fadf 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEFT_MOTOR_REV_Pin;
 800100e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001012:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8001020:	230b      	movs	r3, #11
 8001022:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LEFT_MOTOR_REV_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4619      	mov	r1, r3
 800102a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102e:	f001 facd 	bl	80025cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001032:	bf00      	nop
 8001034:	3720      	adds	r7, #32
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40012c00 	.word	0x40012c00
 8001040:	40021000 	.word	0x40021000

08001044 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001048:	4b22      	ldr	r3, [pc, #136]	@ (80010d4 <MX_UART4_Init+0x90>)
 800104a:	4a23      	ldr	r2, [pc, #140]	@ (80010d8 <MX_UART4_Init+0x94>)
 800104c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 800104e:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <MX_UART4_Init+0x90>)
 8001050:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8001054:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b1f      	ldr	r3, [pc, #124]	@ (80010d4 <MX_UART4_Init+0x90>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b1d      	ldr	r3, [pc, #116]	@ (80010d4 <MX_UART4_Init+0x90>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001062:	4b1c      	ldr	r3, [pc, #112]	@ (80010d4 <MX_UART4_Init+0x90>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <MX_UART4_Init+0x90>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <MX_UART4_Init+0x90>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <MX_UART4_Init+0x90>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107a:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <MX_UART4_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001080:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <MX_UART4_Init+0x90>)
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001086:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <MX_UART4_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800108c:	4811      	ldr	r0, [pc, #68]	@ (80010d4 <MX_UART4_Init+0x90>)
 800108e:	f003 fb65 	bl	800475c <HAL_UART_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001098:	f7ff fca4 	bl	80009e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800109c:	2100      	movs	r1, #0
 800109e:	480d      	ldr	r0, [pc, #52]	@ (80010d4 <MX_UART4_Init+0x90>)
 80010a0:	f004 f8d0 	bl	8005244 <HAL_UARTEx_SetTxFifoThreshold>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80010aa:	f7ff fc9b 	bl	80009e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ae:	2100      	movs	r1, #0
 80010b0:	4808      	ldr	r0, [pc, #32]	@ (80010d4 <MX_UART4_Init+0x90>)
 80010b2:	f004 f905 	bl	80052c0 <HAL_UARTEx_SetRxFifoThreshold>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80010bc:	f7ff fc92 	bl	80009e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	@ (80010d4 <MX_UART4_Init+0x90>)
 80010c2:	f004 f886 	bl	80051d2 <HAL_UARTEx_DisableFifoMode>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80010cc:	f7ff fc8a 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	2000024c 	.word	0x2000024c
 80010d8:	40004c00 	.word	0x40004c00

080010dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010e0:	4b22      	ldr	r3, [pc, #136]	@ (800116c <MX_USART3_UART_Init+0x90>)
 80010e2:	4a23      	ldr	r2, [pc, #140]	@ (8001170 <MX_USART3_UART_Init+0x94>)
 80010e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010e6:	4b21      	ldr	r3, [pc, #132]	@ (800116c <MX_USART3_UART_Init+0x90>)
 80010e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ee:	4b1f      	ldr	r3, [pc, #124]	@ (800116c <MX_USART3_UART_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	@ (800116c <MX_USART3_UART_Init+0x90>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010fa:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <MX_USART3_UART_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001100:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <MX_USART3_UART_Init+0x90>)
 8001102:	220c      	movs	r2, #12
 8001104:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001106:	4b19      	ldr	r3, [pc, #100]	@ (800116c <MX_USART3_UART_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800110c:	4b17      	ldr	r3, [pc, #92]	@ (800116c <MX_USART3_UART_Init+0x90>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001112:	4b16      	ldr	r3, [pc, #88]	@ (800116c <MX_USART3_UART_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <MX_USART3_UART_Init+0x90>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111e:	4b13      	ldr	r3, [pc, #76]	@ (800116c <MX_USART3_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001124:	4811      	ldr	r0, [pc, #68]	@ (800116c <MX_USART3_UART_Init+0x90>)
 8001126:	f003 fb19 	bl	800475c <HAL_UART_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001130:	f7ff fc58 	bl	80009e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001134:	2100      	movs	r1, #0
 8001136:	480d      	ldr	r0, [pc, #52]	@ (800116c <MX_USART3_UART_Init+0x90>)
 8001138:	f004 f884 	bl	8005244 <HAL_UARTEx_SetTxFifoThreshold>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001142:	f7ff fc4f 	bl	80009e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001146:	2100      	movs	r1, #0
 8001148:	4808      	ldr	r0, [pc, #32]	@ (800116c <MX_USART3_UART_Init+0x90>)
 800114a:	f004 f8b9 	bl	80052c0 <HAL_UARTEx_SetRxFifoThreshold>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001154:	f7ff fc46 	bl	80009e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	@ (800116c <MX_USART3_UART_Init+0x90>)
 800115a:	f004 f83a 	bl	80051d2 <HAL_UARTEx_DisableFifoMode>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001164:	f7ff fc3e 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200002e0 	.word	0x200002e0
 8001170:	40004800 	.word	0x40004800

08001174 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b09c      	sub	sp, #112	@ 0x70
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800118c:	f107 0318 	add.w	r3, r7, #24
 8001190:	2244      	movs	r2, #68	@ 0x44
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f004 f91f 	bl	80053d8 <memset>
  if(uartHandle->Instance==UART4)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a3d      	ldr	r2, [pc, #244]	@ (8001294 <HAL_UART_MspInit+0x120>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d137      	bne.n	8001214 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80011a4:	2308      	movs	r3, #8
 80011a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ac:	f107 0318 	add.w	r3, r7, #24
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 f987 	bl	80034c4 <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011bc:	f7ff fc12 	bl	80009e4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011c0:	4b35      	ldr	r3, [pc, #212]	@ (8001298 <HAL_UART_MspInit+0x124>)
 80011c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c4:	4a34      	ldr	r2, [pc, #208]	@ (8001298 <HAL_UART_MspInit+0x124>)
 80011c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80011cc:	4b32      	ldr	r3, [pc, #200]	@ (8001298 <HAL_UART_MspInit+0x124>)
 80011ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <HAL_UART_MspInit+0x124>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001298 <HAL_UART_MspInit+0x124>)
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <HAL_UART_MspInit+0x124>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80011f0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001202:	2305      	movs	r3, #5
 8001204:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001206:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800120a:	4619      	mov	r1, r3
 800120c:	4823      	ldr	r0, [pc, #140]	@ (800129c <HAL_UART_MspInit+0x128>)
 800120e:	f001 f9dd 	bl	80025cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001212:	e03b      	b.n	800128c <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a21      	ldr	r2, [pc, #132]	@ (80012a0 <HAL_UART_MspInit+0x12c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d136      	bne.n	800128c <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800121e:	2304      	movs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001226:	f107 0318 	add.w	r3, r7, #24
 800122a:	4618      	mov	r0, r3
 800122c:	f002 f94a 	bl	80034c4 <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001236:	f7ff fbd5 	bl	80009e4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800123a:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <HAL_UART_MspInit+0x124>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123e:	4a16      	ldr	r2, [pc, #88]	@ (8001298 <HAL_UART_MspInit+0x124>)
 8001240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001244:	6593      	str	r3, [r2, #88]	@ 0x58
 8001246:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <HAL_UART_MspInit+0x124>)
 8001248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <HAL_UART_MspInit+0x124>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	4a10      	ldr	r2, [pc, #64]	@ (8001298 <HAL_UART_MspInit+0x124>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <HAL_UART_MspInit+0x124>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_INPUT_Pin|LIDAR_OUTPUT_Pin;
 800126a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800126e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800127c:	2307      	movs	r3, #7
 800127e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001284:	4619      	mov	r1, r3
 8001286:	4807      	ldr	r0, [pc, #28]	@ (80012a4 <HAL_UART_MspInit+0x130>)
 8001288:	f001 f9a0 	bl	80025cc <HAL_GPIO_Init>
}
 800128c:	bf00      	nop
 800128e:	3770      	adds	r7, #112	@ 0x70
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40004c00 	.word	0x40004c00
 8001298:	40021000 	.word	0x40021000
 800129c:	48000800 	.word	0x48000800
 80012a0:	40004800 	.word	0x40004800
 80012a4:	48000400 	.word	0x48000400

080012a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012a8:	480d      	ldr	r0, [pc, #52]	@ (80012e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012aa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012ac:	f7ff fc76 	bl	8000b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b0:	480c      	ldr	r0, [pc, #48]	@ (80012e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80012b2:	490d      	ldr	r1, [pc, #52]	@ (80012e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012b4:	4a0d      	ldr	r2, [pc, #52]	@ (80012ec <LoopForever+0xe>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012b8:	e002      	b.n	80012c0 <LoopCopyDataInit>

080012ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012be:	3304      	adds	r3, #4

080012c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c4:	d3f9      	bcc.n	80012ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c6:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012c8:	4c0a      	ldr	r4, [pc, #40]	@ (80012f4 <LoopForever+0x16>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012cc:	e001      	b.n	80012d2 <LoopFillZerobss>

080012ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d0:	3204      	adds	r2, #4

080012d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d4:	d3fb      	bcc.n	80012ce <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80012d6:	f004 f887 	bl	80053e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012da:	f7ff fb29 	bl	8000930 <main>

080012de <LoopForever>:

LoopForever:
    b LoopForever
 80012de:	e7fe      	b.n	80012de <LoopForever>
  ldr   r0, =_estack
 80012e0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80012e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012ec:	08005498 	.word	0x08005498
  ldr r2, =_sbss
 80012f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012f4:	20000378 	.word	0x20000378

080012f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012f8:	e7fe      	b.n	80012f8 <ADC1_2_IRQHandler>

080012fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001300:	2300      	movs	r3, #0
 8001302:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001304:	2003      	movs	r0, #3
 8001306:	f001 f92f 	bl	8002568 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800130a:	200f      	movs	r0, #15
 800130c:	f000 f80e 	bl	800132c <HAL_InitTick>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	71fb      	strb	r3, [r7, #7]
 800131a:	e001      	b.n	8001320 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800131c:	f7ff fbea 	bl	8000af4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001320:	79fb      	ldrb	r3, [r7, #7]

}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001338:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <HAL_InitTick+0x68>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d022      	beq.n	8001386 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001340:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <HAL_InitTick+0x6c>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <HAL_InitTick+0x68>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800134c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001350:	fbb2 f3f3 	udiv	r3, r2, r3
 8001354:	4618      	mov	r0, r3
 8001356:	f001 f92c 	bl	80025b2 <HAL_SYSTICK_Config>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10f      	bne.n	8001380 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	d809      	bhi.n	800137a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001366:	2200      	movs	r2, #0
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800136e:	f001 f906 	bl	800257e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001372:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <HAL_InitTick+0x70>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	e007      	b.n	800138a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
 800137e:	e004      	b.n	800138a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e001      	b.n	800138a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000008 	.word	0x20000008
 8001398:	20000000 	.word	0x20000000
 800139c:	20000004 	.word	0x20000004

080013a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a4:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <HAL_IncTick+0x1c>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <HAL_IncTick+0x20>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4413      	add	r3, r2
 80013ae:	4a03      	ldr	r2, [pc, #12]	@ (80013bc <HAL_IncTick+0x1c>)
 80013b0:	6013      	str	r3, [r2, #0]
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	20000374 	.word	0x20000374
 80013c0:	20000008 	.word	0x20000008

080013c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return uwTick;
 80013c8:	4b03      	ldr	r3, [pc, #12]	@ (80013d8 <HAL_GetTick+0x14>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000374 	.word	0x20000374

080013dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	609a      	str	r2, [r3, #8]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	3360      	adds	r3, #96	@ 0x60
 8001456:	461a      	mov	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <LL_ADC_SetOffset+0x44>)
 8001466:	4013      	ands	r3, r2
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	4313      	orrs	r3, r2
 8001474:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800147c:	bf00      	nop
 800147e:	371c      	adds	r7, #28
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	03fff000 	.word	0x03fff000

0800148c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3360      	adds	r3, #96	@ 0x60
 800149a:	461a      	mov	r2, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3360      	adds	r3, #96	@ 0x60
 80014c8:	461a      	mov	r2, r3
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	431a      	orrs	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014e2:	bf00      	nop
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b087      	sub	sp, #28
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3360      	adds	r3, #96	@ 0x60
 80014fe:	461a      	mov	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	431a      	orrs	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001518:	bf00      	nop
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001524:	b480      	push	{r7}
 8001526:	b087      	sub	sp, #28
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3360      	adds	r3, #96	@ 0x60
 8001534:	461a      	mov	r2, r3
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	431a      	orrs	r2, r3
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800154e:	bf00      	nop
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	615a      	str	r2, [r3, #20]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3330      	adds	r3, #48	@ 0x30
 8001590:	461a      	mov	r2, r3
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	4413      	add	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	f003 031f 	and.w	r3, r3, #31
 80015aa:	211f      	movs	r1, #31
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	401a      	ands	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	0e9b      	lsrs	r3, r3, #26
 80015b8:	f003 011f 	and.w	r1, r3, #31
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	f003 031f 	and.w	r3, r3, #31
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	431a      	orrs	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015cc:	bf00      	nop
 80015ce:	371c      	adds	r7, #28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3314      	adds	r3, #20
 80015e8:	461a      	mov	r2, r3
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	0e5b      	lsrs	r3, r3, #25
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	4413      	add	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	0d1b      	lsrs	r3, r3, #20
 8001600:	f003 031f 	and.w	r3, r3, #31
 8001604:	2107      	movs	r1, #7
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	401a      	ands	r2, r3
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	0d1b      	lsrs	r3, r3, #20
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	431a      	orrs	r2, r3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001622:	bf00      	nop
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001648:	43db      	mvns	r3, r3
 800164a:	401a      	ands	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0318 	and.w	r3, r3, #24
 8001652:	4908      	ldr	r1, [pc, #32]	@ (8001674 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001654:	40d9      	lsrs	r1, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	400b      	ands	r3, r1
 800165a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800165e:	431a      	orrs	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	0007ffff 	.word	0x0007ffff

08001678 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001688:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6093      	str	r3, [r2, #8]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016b0:	d101      	bne.n	80016b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80016d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016d8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001700:	d101      	bne.n	8001706 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <LL_ADC_IsEnabled+0x18>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <LL_ADC_IsEnabled+0x1a>
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b04      	cmp	r3, #4
 800174c:	d101      	bne.n	8001752 <LL_ADC_REG_IsConversionOngoing+0x18>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b08      	cmp	r3, #8
 8001772:	d101      	bne.n	8001778 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b089      	sub	sp, #36	@ 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e167      	b.n	8001a72 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d109      	bne.n	80017c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7fe ff87 	bl	80006c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff67 	bl	800169c <LL_ADC_IsDeepPowerDownEnabled>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d004      	beq.n	80017de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff4d 	bl	8001678 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff82 	bl	80016ec <LL_ADC_IsInternalRegulatorEnabled>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d115      	bne.n	800181a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff66 	bl	80016c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017f8:	4ba0      	ldr	r3, [pc, #640]	@ (8001a7c <HAL_ADC_Init+0x2f4>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	099b      	lsrs	r3, r3, #6
 80017fe:	4aa0      	ldr	r2, [pc, #640]	@ (8001a80 <HAL_ADC_Init+0x2f8>)
 8001800:	fba2 2303 	umull	r2, r3, r2, r3
 8001804:	099b      	lsrs	r3, r3, #6
 8001806:	3301      	adds	r3, #1
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800180c:	e002      	b.n	8001814 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	3b01      	subs	r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f9      	bne.n	800180e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff64 	bl	80016ec <LL_ADC_IsInternalRegulatorEnabled>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10d      	bne.n	8001846 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800182e:	f043 0210 	orr.w	r2, r3, #16
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800183a:	f043 0201 	orr.w	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff75 	bl	800173a <LL_ADC_REG_IsConversionOngoing>
 8001850:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	2b00      	cmp	r3, #0
 800185c:	f040 8100 	bne.w	8001a60 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 80fc 	bne.w	8001a60 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800186c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001870:	f043 0202 	orr.w	r2, r3, #2
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff49 	bl	8001714 <LL_ADC_IsEnabled>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d111      	bne.n	80018ac <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001888:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800188c:	f7ff ff42 	bl	8001714 <LL_ADC_IsEnabled>
 8001890:	4604      	mov	r4, r0
 8001892:	487c      	ldr	r0, [pc, #496]	@ (8001a84 <HAL_ADC_Init+0x2fc>)
 8001894:	f7ff ff3e 	bl	8001714 <LL_ADC_IsEnabled>
 8001898:	4603      	mov	r3, r0
 800189a:	4323      	orrs	r3, r4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d105      	bne.n	80018ac <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	4619      	mov	r1, r3
 80018a6:	4878      	ldr	r0, [pc, #480]	@ (8001a88 <HAL_ADC_Init+0x300>)
 80018a8:	f7ff fd98 	bl	80013dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7f5b      	ldrb	r3, [r3, #29]
 80018b0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018b6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80018bc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80018c2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018ca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d106      	bne.n	80018e8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018de:	3b01      	subs	r3, #1
 80018e0:	045b      	lsls	r3, r3, #17
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d009      	beq.n	8001904 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	4b60      	ldr	r3, [pc, #384]	@ (8001a8c <HAL_ADC_Init+0x304>)
 800190c:	4013      	ands	r3, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	69b9      	ldr	r1, [r7, #24]
 8001914:	430b      	orrs	r3, r1
 8001916:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ff14 	bl	8001760 <LL_ADC_INJ_IsConversionOngoing>
 8001938:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d16d      	bne.n	8001a1c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d16a      	bne.n	8001a1c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800194a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001952:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001962:	f023 0302 	bic.w	r3, r3, #2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	69b9      	ldr	r1, [r7, #24]
 800196c:	430b      	orrs	r3, r1
 800196e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d017      	beq.n	80019a8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001986:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001990:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001994:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6911      	ldr	r1, [r2, #16]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	430b      	orrs	r3, r1
 80019a2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80019a6:	e013      	b.n	80019d0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80019b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80019c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019cc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d118      	bne.n	8001a0c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019f0:	4311      	orrs	r1, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80019f6:	4311      	orrs	r1, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019fc:	430a      	orrs	r2, r1
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0201 	orr.w	r2, r2, #1
 8001a08:	611a      	str	r2, [r3, #16]
 8001a0a:	e007      	b.n	8001a1c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	691a      	ldr	r2, [r3, #16]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d10c      	bne.n	8001a3e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	f023 010f 	bic.w	r1, r3, #15
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	1e5a      	subs	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a3c:	e007      	b.n	8001a4e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 020f 	bic.w	r2, r2, #15
 8001a4c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a52:	f023 0303 	bic.w	r3, r3, #3
 8001a56:	f043 0201 	orr.w	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a5e:	e007      	b.n	8001a70 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a64:	f043 0210 	orr.w	r2, r3, #16
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a70:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3724      	adds	r7, #36	@ 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd90      	pop	{r4, r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	053e2d63 	.word	0x053e2d63
 8001a84:	50000100 	.word	0x50000100
 8001a88:	50000300 	.word	0x50000300
 8001a8c:	fff04007 	.word	0xfff04007

08001a90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0b6      	sub	sp, #216	@ 0xd8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x22>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e3c8      	b.n	8002244 <HAL_ADC_ConfigChannel+0x7b4>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fe3b 	bl	800173a <LL_ADC_REG_IsConversionOngoing>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f040 83ad 	bne.w	8002226 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	f7ff fd51 	bl	8001580 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fe29 	bl	800173a <LL_ADC_REG_IsConversionOngoing>
 8001ae8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fe35 	bl	8001760 <LL_ADC_INJ_IsConversionOngoing>
 8001af6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001afa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f040 81d9 	bne.w	8001eb6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f040 81d4 	bne.w	8001eb6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b16:	d10f      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2200      	movs	r2, #0
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7ff fd58 	bl	80015d8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fd12 	bl	800155a <LL_ADC_SetSamplingTimeCommonConfig>
 8001b36:	e00e      	b.n	8001b56 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6819      	ldr	r1, [r3, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	461a      	mov	r2, r3
 8001b46:	f7ff fd47 	bl	80015d8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fd02 	bl	800155a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	08db      	lsrs	r3, r3, #3
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d022      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6919      	ldr	r1, [r3, #16]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001b88:	f7ff fc5c 	bl	8001444 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	6919      	ldr	r1, [r3, #16]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f7ff fca8 	bl	80014ee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d102      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x124>
 8001bae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bb2:	e000      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x126>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f7ff fcb4 	bl	8001524 <LL_ADC_SetOffsetSaturation>
 8001bbc:	e17b      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fc61 	bl	800148c <LL_ADC_GetOffsetChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10a      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x15a>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fc56 	bl	800148c <LL_ADC_GetOffsetChannel>
 8001be0:	4603      	mov	r3, r0
 8001be2:	0e9b      	lsrs	r3, r3, #26
 8001be4:	f003 021f 	and.w	r2, r3, #31
 8001be8:	e01e      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x198>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fc4b 	bl	800148c <LL_ADC_GetOffsetChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001c18:	2320      	movs	r3, #32
 8001c1a:	e004      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001c1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d105      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1b0>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	0e9b      	lsrs	r3, r3, #26
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	e018      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x1e2>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c4c:	fa93 f3a3 	rbit	r3, r3
 8001c50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001c5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001c64:	2320      	movs	r3, #32
 8001c66:	e004      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001c68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d106      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fc1a 	bl	80014b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fbfe 	bl	800148c <LL_ADC_GetOffsetChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10a      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x220>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fbf3 	bl	800148c <LL_ADC_GetOffsetChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	0e9b      	lsrs	r3, r3, #26
 8001caa:	f003 021f 	and.w	r2, r3, #31
 8001cae:	e01e      	b.n	8001cee <HAL_ADC_ConfigChannel+0x25e>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fbe8 	bl	800148c <LL_ADC_GetOffsetChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001cce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001cd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001cd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001cde:	2320      	movs	r3, #32
 8001ce0:	e004      	b.n	8001cec <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001ce2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x276>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	0e9b      	lsrs	r3, r3, #26
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	e018      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x2a8>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001d1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001d22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	e004      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001d2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d106      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2200      	movs	r2, #0
 8001d42:	2101      	movs	r1, #1
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fbb7 	bl	80014b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2102      	movs	r1, #2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fb9b 	bl	800148c <LL_ADC_GetOffsetChannel>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10a      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x2e6>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2102      	movs	r1, #2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fb90 	bl	800148c <LL_ADC_GetOffsetChannel>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	0e9b      	lsrs	r3, r3, #26
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	e01e      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x324>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fb85 	bl	800148c <LL_ADC_GetOffsetChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001d9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001da4:	2320      	movs	r3, #32
 8001da6:	e004      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001da8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d105      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x33c>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0e9b      	lsrs	r3, r3, #26
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	e016      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x36a>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001dde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001de0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001dec:	2320      	movs	r3, #32
 8001dee:	e004      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001df0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d106      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2200      	movs	r2, #0
 8001e04:	2102      	movs	r1, #2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fb56 	bl	80014b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2103      	movs	r1, #3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fb3a 	bl	800148c <LL_ADC_GetOffsetChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10a      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x3a8>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2103      	movs	r1, #3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fb2f 	bl	800148c <LL_ADC_GetOffsetChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	0e9b      	lsrs	r3, r3, #26
 8001e32:	f003 021f 	and.w	r2, r3, #31
 8001e36:	e017      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x3d8>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2103      	movs	r1, #3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fb24 	bl	800148c <LL_ADC_GetOffsetChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001e50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e52:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001e54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	e003      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001e5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x3f0>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0e9b      	lsrs	r3, r3, #26
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	e011      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x414>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001e8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e90:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001e92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001e98:	2320      	movs	r3, #32
 8001e9a:	e003      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001e9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d106      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2200      	movs	r2, #0
 8001eae:	2103      	movs	r1, #3
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fb01 	bl	80014b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fc2a 	bl	8001714 <LL_ADC_IsEnabled>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f040 8140 	bne.w	8002148 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6819      	ldr	r1, [r3, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f7ff fbab 	bl	8001630 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4a8f      	ldr	r2, [pc, #572]	@ (800211c <HAL_ADC_ConfigChannel+0x68c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	f040 8131 	bne.w	8002148 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10b      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x47e>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	0e9b      	lsrs	r3, r3, #26
 8001efc:	3301      	adds	r3, #1
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	2b09      	cmp	r3, #9
 8001f04:	bf94      	ite	ls
 8001f06:	2301      	movls	r3, #1
 8001f08:	2300      	movhi	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	e019      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x4b2>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001f1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f1e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001f20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001f26:	2320      	movs	r3, #32
 8001f28:	e003      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001f2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	2b09      	cmp	r3, #9
 8001f3a:	bf94      	ite	ls
 8001f3c:	2301      	movls	r3, #1
 8001f3e:	2300      	movhi	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d079      	beq.n	800203a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d107      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x4d2>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	0e9b      	lsrs	r3, r3, #26
 8001f58:	3301      	adds	r3, #1
 8001f5a:	069b      	lsls	r3, r3, #26
 8001f5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f60:	e015      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x4fe>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f72:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	e003      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	3301      	adds	r3, #1
 8001f88:	069b      	lsls	r3, r3, #26
 8001f8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x51e>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	0e9b      	lsrs	r3, r3, #26
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	e017      	b.n	8001fde <HAL_ADC_ConfigChannel+0x54e>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001fc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	e003      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	2101      	movs	r1, #1
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	ea42 0103 	orr.w	r1, r2, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10a      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x574>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	0e9b      	lsrs	r3, r3, #26
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f003 021f 	and.w	r2, r3, #31
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	051b      	lsls	r3, r3, #20
 8002002:	e018      	b.n	8002036 <HAL_ADC_ConfigChannel+0x5a6>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002014:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800201c:	2320      	movs	r3, #32
 800201e:	e003      	b.n	8002028 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	3301      	adds	r3, #1
 800202a:	f003 021f 	and.w	r2, r3, #31
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002036:	430b      	orrs	r3, r1
 8002038:	e081      	b.n	800213e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002042:	2b00      	cmp	r3, #0
 8002044:	d107      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x5c6>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	0e9b      	lsrs	r3, r3, #26
 800204c:	3301      	adds	r3, #1
 800204e:	069b      	lsls	r3, r3, #26
 8002050:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002054:	e015      	b.n	8002082 <HAL_ADC_ConfigChannel+0x5f2>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002066:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800206e:	2320      	movs	r3, #32
 8002070:	e003      	b.n	800207a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	3301      	adds	r3, #1
 800207c:	069b      	lsls	r3, r3, #26
 800207e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x612>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	0e9b      	lsrs	r3, r3, #26
 8002094:	3301      	adds	r3, #1
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	2101      	movs	r1, #1
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	e017      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x642>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	61fb      	str	r3, [r7, #28]
  return result;
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80020b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80020ba:	2320      	movs	r3, #32
 80020bc:	e003      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	fab3 f383 	clz	r3, r3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	3301      	adds	r3, #1
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	2101      	movs	r1, #1
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	ea42 0103 	orr.w	r1, r2, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10d      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x66e>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	0e9b      	lsrs	r3, r3, #26
 80020e8:	3301      	adds	r3, #1
 80020ea:	f003 021f 	and.w	r2, r3, #31
 80020ee:	4613      	mov	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	3b1e      	subs	r3, #30
 80020f6:	051b      	lsls	r3, r3, #20
 80020f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020fc:	e01e      	b.n	800213c <HAL_ADC_ConfigChannel+0x6ac>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	613b      	str	r3, [r7, #16]
  return result;
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d104      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002116:	2320      	movs	r3, #32
 8002118:	e006      	b.n	8002128 <HAL_ADC_ConfigChannel+0x698>
 800211a:	bf00      	nop
 800211c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	3301      	adds	r3, #1
 800212a:	f003 021f 	and.w	r2, r3, #31
 800212e:	4613      	mov	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4413      	add	r3, r2
 8002134:	3b1e      	subs	r3, #30
 8002136:	051b      	lsls	r3, r3, #20
 8002138:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800213c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002142:	4619      	mov	r1, r3
 8002144:	f7ff fa48 	bl	80015d8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b3f      	ldr	r3, [pc, #252]	@ (800224c <HAL_ADC_ConfigChannel+0x7bc>)
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d071      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002154:	483e      	ldr	r0, [pc, #248]	@ (8002250 <HAL_ADC_ConfigChannel+0x7c0>)
 8002156:	f7ff f967 	bl	8001428 <LL_ADC_GetCommonPathInternalCh>
 800215a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a3c      	ldr	r2, [pc, #240]	@ (8002254 <HAL_ADC_ConfigChannel+0x7c4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d004      	beq.n	8002172 <HAL_ADC_ConfigChannel+0x6e2>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a3a      	ldr	r2, [pc, #232]	@ (8002258 <HAL_ADC_ConfigChannel+0x7c8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d127      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002172:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d121      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002186:	d157      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002188:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800218c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002190:	4619      	mov	r1, r3
 8002192:	482f      	ldr	r0, [pc, #188]	@ (8002250 <HAL_ADC_ConfigChannel+0x7c0>)
 8002194:	f7ff f935 	bl	8001402 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002198:	4b30      	ldr	r3, [pc, #192]	@ (800225c <HAL_ADC_ConfigChannel+0x7cc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	099b      	lsrs	r3, r3, #6
 800219e:	4a30      	ldr	r2, [pc, #192]	@ (8002260 <HAL_ADC_ConfigChannel+0x7d0>)
 80021a0:	fba2 2303 	umull	r2, r3, r2, r3
 80021a4:	099b      	lsrs	r3, r3, #6
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021b2:	e002      	b.n	80021ba <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f9      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021c0:	e03a      	b.n	8002238 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a27      	ldr	r2, [pc, #156]	@ (8002264 <HAL_ADC_ConfigChannel+0x7d4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d113      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10d      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a22      	ldr	r2, [pc, #136]	@ (8002268 <HAL_ADC_ConfigChannel+0x7d8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d02a      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ea:	4619      	mov	r1, r3
 80021ec:	4818      	ldr	r0, [pc, #96]	@ (8002250 <HAL_ADC_ConfigChannel+0x7c0>)
 80021ee:	f7ff f908 	bl	8001402 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021f2:	e021      	b.n	8002238 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1c      	ldr	r2, [pc, #112]	@ (800226c <HAL_ADC_ConfigChannel+0x7dc>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d11c      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d116      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a16      	ldr	r2, [pc, #88]	@ (8002268 <HAL_ADC_ConfigChannel+0x7d8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d011      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002214:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002218:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800221c:	4619      	mov	r1, r3
 800221e:	480c      	ldr	r0, [pc, #48]	@ (8002250 <HAL_ADC_ConfigChannel+0x7c0>)
 8002220:	f7ff f8ef 	bl	8001402 <LL_ADC_SetCommonPathInternalCh>
 8002224:	e008      	b.n	8002238 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222a:	f043 0220 	orr.w	r2, r3, #32
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002240:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002244:	4618      	mov	r0, r3
 8002246:	37d8      	adds	r7, #216	@ 0xd8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	80080000 	.word	0x80080000
 8002250:	50000300 	.word	0x50000300
 8002254:	c3210000 	.word	0xc3210000
 8002258:	90c00010 	.word	0x90c00010
 800225c:	20000000 	.word	0x20000000
 8002260:	053e2d63 	.word	0x053e2d63
 8002264:	c7520000 	.word	0xc7520000
 8002268:	50000100 	.word	0x50000100
 800226c:	cb840000 	.word	0xcb840000

08002270 <LL_ADC_IsEnabled>:
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <LL_ADC_IsEnabled+0x18>
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <LL_ADC_IsEnabled+0x1a>
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <LL_ADC_REG_IsConversionOngoing>:
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d101      	bne.n	80022ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b0a1      	sub	sp, #132	@ 0x84
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e08b      	b.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80022e2:	2300      	movs	r3, #0
 80022e4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80022e6:	2300      	movs	r3, #0
 80022e8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022f2:	d102      	bne.n	80022fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80022f4:	4b41      	ldr	r3, [pc, #260]	@ (80023fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	e001      	b.n	80022fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10b      	bne.n	800231c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e06a      	b.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ffb9 	bl	8002296 <LL_ADC_REG_IsConversionOngoing>
 8002324:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ffb3 	bl	8002296 <LL_ADC_REG_IsConversionOngoing>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d14c      	bne.n	80023d0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002336:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002338:	2b00      	cmp	r3, #0
 800233a:	d149      	bne.n	80023d0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800233c:	4b30      	ldr	r3, [pc, #192]	@ (8002400 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800233e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d028      	beq.n	800239a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002348:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800235a:	035b      	lsls	r3, r3, #13
 800235c:	430b      	orrs	r3, r1
 800235e:	431a      	orrs	r2, r3
 8002360:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002362:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002364:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002368:	f7ff ff82 	bl	8002270 <LL_ADC_IsEnabled>
 800236c:	4604      	mov	r4, r0
 800236e:	4823      	ldr	r0, [pc, #140]	@ (80023fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002370:	f7ff ff7e 	bl	8002270 <LL_ADC_IsEnabled>
 8002374:	4603      	mov	r3, r0
 8002376:	4323      	orrs	r3, r4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d133      	bne.n	80023e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800237c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002384:	f023 030f 	bic.w	r3, r3, #15
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	6811      	ldr	r1, [r2, #0]
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	6892      	ldr	r2, [r2, #8]
 8002390:	430a      	orrs	r2, r1
 8002392:	431a      	orrs	r2, r3
 8002394:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002396:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002398:	e024      	b.n	80023e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800239a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023a4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023a6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80023aa:	f7ff ff61 	bl	8002270 <LL_ADC_IsEnabled>
 80023ae:	4604      	mov	r4, r0
 80023b0:	4812      	ldr	r0, [pc, #72]	@ (80023fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80023b2:	f7ff ff5d 	bl	8002270 <LL_ADC_IsEnabled>
 80023b6:	4603      	mov	r3, r0
 80023b8:	4323      	orrs	r3, r4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d112      	bne.n	80023e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80023be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80023c6:	f023 030f 	bic.w	r3, r3, #15
 80023ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80023cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023ce:	e009      	b.n	80023e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d4:	f043 0220 	orr.w	r2, r3, #32
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80023e2:	e000      	b.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80023ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3784      	adds	r7, #132	@ 0x84
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd90      	pop	{r4, r7, pc}
 80023fa:	bf00      	nop
 80023fc:	50000100 	.word	0x50000100
 8002400:	50000300 	.word	0x50000300

08002404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002420:	4013      	ands	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800242c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002436:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	60d3      	str	r3, [r2, #12]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002450:	4b04      	ldr	r3, [pc, #16]	@ (8002464 <__NVIC_GetPriorityGrouping+0x18>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	f003 0307 	and.w	r3, r3, #7
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	2b00      	cmp	r3, #0
 800247a:	db0a      	blt.n	8002492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	b2da      	uxtb	r2, r3
 8002480:	490c      	ldr	r1, [pc, #48]	@ (80024b4 <__NVIC_SetPriority+0x4c>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	0112      	lsls	r2, r2, #4
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	440b      	add	r3, r1
 800248c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002490:	e00a      	b.n	80024a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4908      	ldr	r1, [pc, #32]	@ (80024b8 <__NVIC_SetPriority+0x50>)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	3b04      	subs	r3, #4
 80024a0:	0112      	lsls	r2, r2, #4
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	440b      	add	r3, r1
 80024a6:	761a      	strb	r2, [r3, #24]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000e100 	.word	0xe000e100
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	@ 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f1c3 0307 	rsb	r3, r3, #7
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	bf28      	it	cs
 80024da:	2304      	movcs	r3, #4
 80024dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3304      	adds	r3, #4
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d902      	bls.n	80024ec <NVIC_EncodePriority+0x30>
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3b03      	subs	r3, #3
 80024ea:	e000      	b.n	80024ee <NVIC_EncodePriority+0x32>
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43da      	mvns	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	401a      	ands	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002504:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	43d9      	mvns	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	4313      	orrs	r3, r2
         );
}
 8002516:	4618      	mov	r0, r3
 8002518:	3724      	adds	r7, #36	@ 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002534:	d301      	bcc.n	800253a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002536:	2301      	movs	r3, #1
 8002538:	e00f      	b.n	800255a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800253a:	4a0a      	ldr	r2, [pc, #40]	@ (8002564 <SysTick_Config+0x40>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3b01      	subs	r3, #1
 8002540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002542:	210f      	movs	r1, #15
 8002544:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002548:	f7ff ff8e 	bl	8002468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800254c:	4b05      	ldr	r3, [pc, #20]	@ (8002564 <SysTick_Config+0x40>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002552:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <SysTick_Config+0x40>)
 8002554:	2207      	movs	r2, #7
 8002556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	e000e010 	.word	0xe000e010

08002568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ff47 	bl	8002404 <__NVIC_SetPriorityGrouping>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b086      	sub	sp, #24
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800258c:	f7ff ff5e 	bl	800244c <__NVIC_GetPriorityGrouping>
 8002590:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	6978      	ldr	r0, [r7, #20]
 8002598:	f7ff ff90 	bl	80024bc <NVIC_EncodePriority>
 800259c:	4602      	mov	r2, r0
 800259e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff5f 	bl	8002468 <__NVIC_SetPriority>
}
 80025aa:	bf00      	nop
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ffb2 	bl	8002524 <SysTick_Config>
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025da:	e15a      	b.n	8002892 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2101      	movs	r1, #1
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	4013      	ands	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 814c 	beq.w	800288c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d005      	beq.n	800260c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002608:	2b02      	cmp	r3, #2
 800260a:	d130      	bne.n	800266e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002642:	2201      	movs	r2, #1
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	f003 0201 	and.w	r2, r3, #1
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b03      	cmp	r3, #3
 8002678:	d017      	beq.n	80026aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d123      	bne.n	80026fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	08da      	lsrs	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3208      	adds	r2, #8
 80026be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	220f      	movs	r2, #15
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	08da      	lsrs	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3208      	adds	r2, #8
 80026f8:	6939      	ldr	r1, [r7, #16]
 80026fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0203 	and.w	r2, r3, #3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 80a6 	beq.w	800288c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002740:	4b5b      	ldr	r3, [pc, #364]	@ (80028b0 <HAL_GPIO_Init+0x2e4>)
 8002742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002744:	4a5a      	ldr	r2, [pc, #360]	@ (80028b0 <HAL_GPIO_Init+0x2e4>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6613      	str	r3, [r2, #96]	@ 0x60
 800274c:	4b58      	ldr	r3, [pc, #352]	@ (80028b0 <HAL_GPIO_Init+0x2e4>)
 800274e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002758:	4a56      	ldr	r2, [pc, #344]	@ (80028b4 <HAL_GPIO_Init+0x2e8>)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	220f      	movs	r2, #15
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002782:	d01f      	beq.n	80027c4 <HAL_GPIO_Init+0x1f8>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a4c      	ldr	r2, [pc, #304]	@ (80028b8 <HAL_GPIO_Init+0x2ec>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d019      	beq.n	80027c0 <HAL_GPIO_Init+0x1f4>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a4b      	ldr	r2, [pc, #300]	@ (80028bc <HAL_GPIO_Init+0x2f0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d013      	beq.n	80027bc <HAL_GPIO_Init+0x1f0>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a4a      	ldr	r2, [pc, #296]	@ (80028c0 <HAL_GPIO_Init+0x2f4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00d      	beq.n	80027b8 <HAL_GPIO_Init+0x1ec>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a49      	ldr	r2, [pc, #292]	@ (80028c4 <HAL_GPIO_Init+0x2f8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d007      	beq.n	80027b4 <HAL_GPIO_Init+0x1e8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a48      	ldr	r2, [pc, #288]	@ (80028c8 <HAL_GPIO_Init+0x2fc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_GPIO_Init+0x1e4>
 80027ac:	2305      	movs	r3, #5
 80027ae:	e00a      	b.n	80027c6 <HAL_GPIO_Init+0x1fa>
 80027b0:	2306      	movs	r3, #6
 80027b2:	e008      	b.n	80027c6 <HAL_GPIO_Init+0x1fa>
 80027b4:	2304      	movs	r3, #4
 80027b6:	e006      	b.n	80027c6 <HAL_GPIO_Init+0x1fa>
 80027b8:	2303      	movs	r3, #3
 80027ba:	e004      	b.n	80027c6 <HAL_GPIO_Init+0x1fa>
 80027bc:	2302      	movs	r3, #2
 80027be:	e002      	b.n	80027c6 <HAL_GPIO_Init+0x1fa>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <HAL_GPIO_Init+0x1fa>
 80027c4:	2300      	movs	r3, #0
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	f002 0203 	and.w	r2, r2, #3
 80027cc:	0092      	lsls	r2, r2, #2
 80027ce:	4093      	lsls	r3, r2
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d6:	4937      	ldr	r1, [pc, #220]	@ (80028b4 <HAL_GPIO_Init+0x2e8>)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	3302      	adds	r3, #2
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027e4:	4b39      	ldr	r3, [pc, #228]	@ (80028cc <HAL_GPIO_Init+0x300>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002808:	4a30      	ldr	r2, [pc, #192]	@ (80028cc <HAL_GPIO_Init+0x300>)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800280e:	4b2f      	ldr	r3, [pc, #188]	@ (80028cc <HAL_GPIO_Init+0x300>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002832:	4a26      	ldr	r2, [pc, #152]	@ (80028cc <HAL_GPIO_Init+0x300>)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002838:	4b24      	ldr	r3, [pc, #144]	@ (80028cc <HAL_GPIO_Init+0x300>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800285c:	4a1b      	ldr	r2, [pc, #108]	@ (80028cc <HAL_GPIO_Init+0x300>)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002862:	4b1a      	ldr	r3, [pc, #104]	@ (80028cc <HAL_GPIO_Init+0x300>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002886:	4a11      	ldr	r2, [pc, #68]	@ (80028cc <HAL_GPIO_Init+0x300>)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3301      	adds	r3, #1
 8002890:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	f47f ae9d 	bne.w	80025dc <HAL_GPIO_Init+0x10>
  }
}
 80028a2:	bf00      	nop
 80028a4:	bf00      	nop
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40010000 	.word	0x40010000
 80028b8:	48000400 	.word	0x48000400
 80028bc:	48000800 	.word	0x48000800
 80028c0:	48000c00 	.word	0x48000c00
 80028c4:	48001000 	.word	0x48001000
 80028c8:	48001400 	.word	0x48001400
 80028cc:	40010400 	.word	0x40010400

080028d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
 80028dc:	4613      	mov	r3, r2
 80028de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e0:	787b      	ldrb	r3, [r7, #1]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028ec:	e002      	b.n	80028f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d141      	bne.n	8002992 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800290e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002916:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800291a:	d131      	bne.n	8002980 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800291c:	4b47      	ldr	r3, [pc, #284]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800291e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002922:	4a46      	ldr	r2, [pc, #280]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002928:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800292c:	4b43      	ldr	r3, [pc, #268]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002934:	4a41      	ldr	r2, [pc, #260]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002936:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800293a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800293c:	4b40      	ldr	r3, [pc, #256]	@ (8002a40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2232      	movs	r2, #50	@ 0x32
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	4a3f      	ldr	r2, [pc, #252]	@ (8002a44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	0c9b      	lsrs	r3, r3, #18
 800294e:	3301      	adds	r3, #1
 8002950:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002952:	e002      	b.n	800295a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3b01      	subs	r3, #1
 8002958:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800295a:	4b38      	ldr	r3, [pc, #224]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002966:	d102      	bne.n	800296e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f2      	bne.n	8002954 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800296e:	4b33      	ldr	r3, [pc, #204]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800297a:	d158      	bne.n	8002a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e057      	b.n	8002a30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002980:	4b2e      	ldr	r3, [pc, #184]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002986:	4a2d      	ldr	r2, [pc, #180]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800298c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002990:	e04d      	b.n	8002a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002998:	d141      	bne.n	8002a1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800299a:	4b28      	ldr	r3, [pc, #160]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029a6:	d131      	bne.n	8002a0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029a8:	4b24      	ldr	r3, [pc, #144]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029ae:	4a23      	ldr	r2, [pc, #140]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029b8:	4b20      	ldr	r3, [pc, #128]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029c0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2232      	movs	r2, #50	@ 0x32
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029d4:	fba2 2303 	umull	r2, r3, r2, r3
 80029d8:	0c9b      	lsrs	r3, r3, #18
 80029da:	3301      	adds	r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029de:	e002      	b.n	80029e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029e6:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029f2:	d102      	bne.n	80029fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f2      	bne.n	80029e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029fa:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a06:	d112      	bne.n	8002a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e011      	b.n	8002a30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a12:	4a0a      	ldr	r2, [pc, #40]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a1c:	e007      	b.n	8002a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a1e:	4b07      	ldr	r3, [pc, #28]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a26:	4a05      	ldr	r2, [pc, #20]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40007000 	.word	0x40007000
 8002a40:	20000000 	.word	0x20000000
 8002a44:	431bde83 	.word	0x431bde83

08002a48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002a4c:	4b05      	ldr	r3, [pc, #20]	@ (8002a64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4a04      	ldr	r2, [pc, #16]	@ (8002a64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a56:	6093      	str	r3, [r2, #8]
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40007000 	.word	0x40007000

08002a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e2fe      	b.n	8003078 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d075      	beq.n	8002b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a86:	4b97      	ldr	r3, [pc, #604]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a90:	4b94      	ldr	r3, [pc, #592]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b0c      	cmp	r3, #12
 8002a9e:	d102      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x3e>
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d002      	beq.n	8002aac <HAL_RCC_OscConfig+0x44>
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	4b8d      	ldr	r3, [pc, #564]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d05b      	beq.n	8002b70 <HAL_RCC_OscConfig+0x108>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d157      	bne.n	8002b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e2d9      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002acc:	d106      	bne.n	8002adc <HAL_RCC_OscConfig+0x74>
 8002ace:	4b85      	ldr	r3, [pc, #532]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a84      	ldr	r2, [pc, #528]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e01d      	b.n	8002b18 <HAL_RCC_OscConfig+0xb0>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCC_OscConfig+0x98>
 8002ae6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a7e      	ldr	r2, [pc, #504]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b7c      	ldr	r3, [pc, #496]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a7b      	ldr	r2, [pc, #492]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e00b      	b.n	8002b18 <HAL_RCC_OscConfig+0xb0>
 8002b00:	4b78      	ldr	r3, [pc, #480]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a77      	ldr	r2, [pc, #476]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b75      	ldr	r3, [pc, #468]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a74      	ldr	r2, [pc, #464]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d013      	beq.n	8002b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe fc50 	bl	80013c4 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b28:	f7fe fc4c 	bl	80013c4 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	@ 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e29e      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0xc0>
 8002b46:	e014      	b.n	8002b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe fc3c 	bl	80013c4 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b50:	f7fe fc38 	bl	80013c4 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	@ 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e28a      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b62:	4b60      	ldr	r3, [pc, #384]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0xe8>
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d075      	beq.n	8002c6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b7e:	4b59      	ldr	r3, [pc, #356]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b88:	4b56      	ldr	r3, [pc, #344]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b0c      	cmp	r3, #12
 8002b96:	d102      	bne.n	8002b9e <HAL_RCC_OscConfig+0x136>
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d002      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x13c>
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d11f      	bne.n	8002be4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba4:	4b4f      	ldr	r3, [pc, #316]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_OscConfig+0x154>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e25d      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbc:	4b49      	ldr	r3, [pc, #292]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	061b      	lsls	r3, r3, #24
 8002bca:	4946      	ldr	r1, [pc, #280]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bd0:	4b45      	ldr	r3, [pc, #276]	@ (8002ce8 <HAL_RCC_OscConfig+0x280>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe fba9 	bl	800132c <HAL_InitTick>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d043      	beq.n	8002c68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e249      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d023      	beq.n	8002c34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bec:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a3c      	ldr	r2, [pc, #240]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fbe4 	bl	80013c4 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c00:	f7fe fbe0 	bl	80013c4 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e232      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c12:	4b34      	ldr	r3, [pc, #208]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1e:	4b31      	ldr	r3, [pc, #196]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	061b      	lsls	r3, r3, #24
 8002c2c:	492d      	ldr	r1, [pc, #180]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
 8002c32:	e01a      	b.n	8002c6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c34:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a2a      	ldr	r2, [pc, #168]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002c3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe fbc0 	bl	80013c4 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c48:	f7fe fbbc 	bl	80013c4 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e20e      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c5a:	4b22      	ldr	r3, [pc, #136]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x1e0>
 8002c66:	e000      	b.n	8002c6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d041      	beq.n	8002cfa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d01c      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c7e:	4b19      	ldr	r3, [pc, #100]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c84:	4a17      	ldr	r2, [pc, #92]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fb99 	bl	80013c4 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c96:	f7fe fb95 	bl	80013c4 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e1e7      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ef      	beq.n	8002c96 <HAL_RCC_OscConfig+0x22e>
 8002cb6:	e020      	b.n	8002cfa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cbe:	4a09      	ldr	r2, [pc, #36]	@ (8002ce4 <HAL_RCC_OscConfig+0x27c>)
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc8:	f7fe fb7c 	bl	80013c4 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cce:	e00d      	b.n	8002cec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd0:	f7fe fb78 	bl	80013c4 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d906      	bls.n	8002cec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e1ca      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cec:	4b8c      	ldr	r3, [pc, #560]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1ea      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 80a6 	beq.w	8002e54 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d0c:	4b84      	ldr	r3, [pc, #528]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_OscConfig+0x2b4>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x2b6>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00d      	beq.n	8002d3e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d22:	4b7f      	ldr	r3, [pc, #508]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d26:	4a7e      	ldr	r2, [pc, #504]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d2e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d3e:	4b79      	ldr	r3, [pc, #484]	@ (8002f24 <HAL_RCC_OscConfig+0x4bc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d118      	bne.n	8002d7c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d4a:	4b76      	ldr	r3, [pc, #472]	@ (8002f24 <HAL_RCC_OscConfig+0x4bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a75      	ldr	r2, [pc, #468]	@ (8002f24 <HAL_RCC_OscConfig+0x4bc>)
 8002d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d56:	f7fe fb35 	bl	80013c4 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5e:	f7fe fb31 	bl	80013c4 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e183      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d70:	4b6c      	ldr	r3, [pc, #432]	@ (8002f24 <HAL_RCC_OscConfig+0x4bc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d108      	bne.n	8002d96 <HAL_RCC_OscConfig+0x32e>
 8002d84:	4b66      	ldr	r3, [pc, #408]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8a:	4a65      	ldr	r2, [pc, #404]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d94:	e024      	b.n	8002de0 <HAL_RCC_OscConfig+0x378>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b05      	cmp	r3, #5
 8002d9c:	d110      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x358>
 8002d9e:	4b60      	ldr	r3, [pc, #384]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da4:	4a5e      	ldr	r2, [pc, #376]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002da6:	f043 0304 	orr.w	r3, r3, #4
 8002daa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dae:	4b5c      	ldr	r3, [pc, #368]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db4:	4a5a      	ldr	r2, [pc, #360]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dbe:	e00f      	b.n	8002de0 <HAL_RCC_OscConfig+0x378>
 8002dc0:	4b57      	ldr	r3, [pc, #348]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc6:	4a56      	ldr	r2, [pc, #344]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dd0:	4b53      	ldr	r3, [pc, #332]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd6:	4a52      	ldr	r2, [pc, #328]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d016      	beq.n	8002e16 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7fe faec 	bl	80013c4 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df0:	f7fe fae8 	bl	80013c4 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e138      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e06:	4b46      	ldr	r3, [pc, #280]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0ed      	beq.n	8002df0 <HAL_RCC_OscConfig+0x388>
 8002e14:	e015      	b.n	8002e42 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e16:	f7fe fad5 	bl	80013c4 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fe fad1 	bl	80013c4 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e121      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e34:	4b3a      	ldr	r3, [pc, #232]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1ed      	bne.n	8002e1e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e42:	7ffb      	ldrb	r3, [r7, #31]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d105      	bne.n	8002e54 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e48:	4b35      	ldr	r3, [pc, #212]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4c:	4a34      	ldr	r2, [pc, #208]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002e4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e52:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d03c      	beq.n	8002eda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01c      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e68:	4b2d      	ldr	r3, [pc, #180]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7fe faa4 	bl	80013c4 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e80:	f7fe faa0 	bl	80013c4 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e0f2      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e92:	4b23      	ldr	r3, [pc, #140]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ef      	beq.n	8002e80 <HAL_RCC_OscConfig+0x418>
 8002ea0:	e01b      	b.n	8002eda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002eaa:	f023 0301 	bic.w	r3, r3, #1
 8002eae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f7fe fa87 	bl	80013c4 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eba:	f7fe fa83 	bl	80013c4 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e0d5      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ecc:	4b14      	ldr	r3, [pc, #80]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1ef      	bne.n	8002eba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80c9 	beq.w	8003076 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b0c      	cmp	r3, #12
 8002eee:	f000 8083 	beq.w	8002ff8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d15e      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efa:	4b09      	ldr	r3, [pc, #36]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a08      	ldr	r2, [pc, #32]	@ (8002f20 <HAL_RCC_OscConfig+0x4b8>)
 8002f00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f06:	f7fe fa5d 	bl	80013c4 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f0c:	e00c      	b.n	8002f28 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7fe fa59 	bl	80013c4 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d905      	bls.n	8002f28 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0ab      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f28:	4b55      	ldr	r3, [pc, #340]	@ (8003080 <HAL_RCC_OscConfig+0x618>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1ec      	bne.n	8002f0e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f34:	4b52      	ldr	r3, [pc, #328]	@ (8003080 <HAL_RCC_OscConfig+0x618>)
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	4b52      	ldr	r3, [pc, #328]	@ (8003084 <HAL_RCC_OscConfig+0x61c>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6a11      	ldr	r1, [r2, #32]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f44:	3a01      	subs	r2, #1
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	4311      	orrs	r1, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002f4e:	0212      	lsls	r2, r2, #8
 8002f50:	4311      	orrs	r1, r2
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f56:	0852      	lsrs	r2, r2, #1
 8002f58:	3a01      	subs	r2, #1
 8002f5a:	0552      	lsls	r2, r2, #21
 8002f5c:	4311      	orrs	r1, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f62:	0852      	lsrs	r2, r2, #1
 8002f64:	3a01      	subs	r2, #1
 8002f66:	0652      	lsls	r2, r2, #25
 8002f68:	4311      	orrs	r1, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f6e:	06d2      	lsls	r2, r2, #27
 8002f70:	430a      	orrs	r2, r1
 8002f72:	4943      	ldr	r1, [pc, #268]	@ (8003080 <HAL_RCC_OscConfig+0x618>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f78:	4b41      	ldr	r3, [pc, #260]	@ (8003080 <HAL_RCC_OscConfig+0x618>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a40      	ldr	r2, [pc, #256]	@ (8003080 <HAL_RCC_OscConfig+0x618>)
 8002f7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f84:	4b3e      	ldr	r3, [pc, #248]	@ (8003080 <HAL_RCC_OscConfig+0x618>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4a3d      	ldr	r2, [pc, #244]	@ (8003080 <HAL_RCC_OscConfig+0x618>)
 8002f8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe fa18 	bl	80013c4 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f98:	f7fe fa14 	bl	80013c4 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e066      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002faa:	4b35      	ldr	r3, [pc, #212]	@ (8003080 <HAL_RCC_OscConfig+0x618>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x530>
 8002fb6:	e05e      	b.n	8003076 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb8:	4b31      	ldr	r3, [pc, #196]	@ (8003080 <HAL_RCC_OscConfig+0x618>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a30      	ldr	r2, [pc, #192]	@ (8003080 <HAL_RCC_OscConfig+0x618>)
 8002fbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe f9fe 	bl	80013c4 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fe f9fa 	bl	80013c4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e04c      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fde:	4b28      	ldr	r3, [pc, #160]	@ (8003080 <HAL_RCC_OscConfig+0x618>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002fea:	4b25      	ldr	r3, [pc, #148]	@ (8003080 <HAL_RCC_OscConfig+0x618>)
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	4924      	ldr	r1, [pc, #144]	@ (8003080 <HAL_RCC_OscConfig+0x618>)
 8002ff0:	4b25      	ldr	r3, [pc, #148]	@ (8003088 <HAL_RCC_OscConfig+0x620>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	60cb      	str	r3, [r1, #12]
 8002ff6:	e03e      	b.n	8003076 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e039      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003004:	4b1e      	ldr	r3, [pc, #120]	@ (8003080 <HAL_RCC_OscConfig+0x618>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f003 0203 	and.w	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	429a      	cmp	r2, r3
 8003016:	d12c      	bne.n	8003072 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	3b01      	subs	r3, #1
 8003024:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d123      	bne.n	8003072 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003034:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003036:	429a      	cmp	r2, r3
 8003038:	d11b      	bne.n	8003072 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003046:	429a      	cmp	r2, r3
 8003048:	d113      	bne.n	8003072 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003054:	085b      	lsrs	r3, r3, #1
 8003056:	3b01      	subs	r3, #1
 8003058:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800305a:	429a      	cmp	r2, r3
 800305c:	d109      	bne.n	8003072 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003068:	085b      	lsrs	r3, r3, #1
 800306a:	3b01      	subs	r3, #1
 800306c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	019f800c 	.word	0x019f800c
 8003088:	feeefffc 	.word	0xfeeefffc

0800308c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e11e      	b.n	80032e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030a4:	4b91      	ldr	r3, [pc, #580]	@ (80032ec <HAL_RCC_ClockConfig+0x260>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d910      	bls.n	80030d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b8e      	ldr	r3, [pc, #568]	@ (80032ec <HAL_RCC_ClockConfig+0x260>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 020f 	bic.w	r2, r3, #15
 80030ba:	498c      	ldr	r1, [pc, #560]	@ (80032ec <HAL_RCC_ClockConfig+0x260>)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	4313      	orrs	r3, r2
 80030c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c2:	4b8a      	ldr	r3, [pc, #552]	@ (80032ec <HAL_RCC_ClockConfig+0x260>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d001      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e106      	b.n	80032e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d073      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d129      	bne.n	800313c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e8:	4b81      	ldr	r3, [pc, #516]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0f4      	b.n	80032e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80030f8:	f000 f99e 	bl	8003438 <RCC_GetSysClockFreqFromPLLSource>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4a7c      	ldr	r2, [pc, #496]	@ (80032f4 <HAL_RCC_ClockConfig+0x268>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d93f      	bls.n	8003186 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003106:	4b7a      	ldr	r3, [pc, #488]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800311a:	2b00      	cmp	r3, #0
 800311c:	d033      	beq.n	8003186 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003122:	2b00      	cmp	r3, #0
 8003124:	d12f      	bne.n	8003186 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003126:	4b72      	ldr	r3, [pc, #456]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800312e:	4a70      	ldr	r2, [pc, #448]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 8003130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003134:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003136:	2380      	movs	r3, #128	@ 0x80
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e024      	b.n	8003186 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d107      	bne.n	8003154 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003144:	4b6a      	ldr	r3, [pc, #424]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d109      	bne.n	8003164 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0c6      	b.n	80032e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003154:	4b66      	ldr	r3, [pc, #408]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0be      	b.n	80032e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003164:	f000 f8ce 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8003168:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4a61      	ldr	r2, [pc, #388]	@ (80032f4 <HAL_RCC_ClockConfig+0x268>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d909      	bls.n	8003186 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003172:	4b5f      	ldr	r3, [pc, #380]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800317a:	4a5d      	ldr	r2, [pc, #372]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 800317c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003180:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003182:	2380      	movs	r3, #128	@ 0x80
 8003184:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003186:	4b5a      	ldr	r3, [pc, #360]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f023 0203 	bic.w	r2, r3, #3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4957      	ldr	r1, [pc, #348]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 8003194:	4313      	orrs	r3, r2
 8003196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003198:	f7fe f914 	bl	80013c4 <HAL_GetTick>
 800319c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a0:	f7fe f910 	bl	80013c4 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e095      	b.n	80032e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	4b4e      	ldr	r3, [pc, #312]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 020c 	and.w	r2, r3, #12
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d1eb      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d023      	beq.n	800321c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e0:	4b43      	ldr	r3, [pc, #268]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4a42      	ldr	r2, [pc, #264]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 80031e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80031f8:	4b3d      	ldr	r3, [pc, #244]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003200:	4a3b      	ldr	r2, [pc, #236]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 8003202:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003206:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003208:	4b39      	ldr	r3, [pc, #228]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	4936      	ldr	r1, [pc, #216]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
 800321a:	e008      	b.n	800322e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b80      	cmp	r3, #128	@ 0x80
 8003220:	d105      	bne.n	800322e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003222:	4b33      	ldr	r3, [pc, #204]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	4a32      	ldr	r2, [pc, #200]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 8003228:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800322c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800322e:	4b2f      	ldr	r3, [pc, #188]	@ (80032ec <HAL_RCC_ClockConfig+0x260>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d21d      	bcs.n	8003278 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323c:	4b2b      	ldr	r3, [pc, #172]	@ (80032ec <HAL_RCC_ClockConfig+0x260>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f023 020f 	bic.w	r2, r3, #15
 8003244:	4929      	ldr	r1, [pc, #164]	@ (80032ec <HAL_RCC_ClockConfig+0x260>)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800324c:	f7fe f8ba 	bl	80013c4 <HAL_GetTick>
 8003250:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	e00a      	b.n	800326a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003254:	f7fe f8b6 	bl	80013c4 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003262:	4293      	cmp	r3, r2
 8003264:	d901      	bls.n	800326a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e03b      	b.n	80032e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b20      	ldr	r3, [pc, #128]	@ (80032ec <HAL_RCC_ClockConfig+0x260>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d1ed      	bne.n	8003254 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003284:	4b1a      	ldr	r3, [pc, #104]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4917      	ldr	r1, [pc, #92]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032a2:	4b13      	ldr	r3, [pc, #76]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	490f      	ldr	r1, [pc, #60]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032b6:	f000 f825 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032ba:	4602      	mov	r2, r0
 80032bc:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <HAL_RCC_ClockConfig+0x264>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	490c      	ldr	r1, [pc, #48]	@ (80032f8 <HAL_RCC_ClockConfig+0x26c>)
 80032c8:	5ccb      	ldrb	r3, [r1, r3]
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	fa22 f303 	lsr.w	r3, r2, r3
 80032d2:	4a0a      	ldr	r2, [pc, #40]	@ (80032fc <HAL_RCC_ClockConfig+0x270>)
 80032d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80032d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003300 <HAL_RCC_ClockConfig+0x274>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe f826 	bl	800132c <HAL_InitTick>
 80032e0:	4603      	mov	r3, r0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40022000 	.word	0x40022000
 80032f0:	40021000 	.word	0x40021000
 80032f4:	04c4b400 	.word	0x04c4b400
 80032f8:	08005448 	.word	0x08005448
 80032fc:	20000000 	.word	0x20000000
 8003300:	20000004 	.word	0x20000004

08003304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800330a:	4b2c      	ldr	r3, [pc, #176]	@ (80033bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 030c 	and.w	r3, r3, #12
 8003312:	2b04      	cmp	r3, #4
 8003314:	d102      	bne.n	800331c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003316:	4b2a      	ldr	r3, [pc, #168]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	e047      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800331c:	4b27      	ldr	r3, [pc, #156]	@ (80033bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b08      	cmp	r3, #8
 8003326:	d102      	bne.n	800332e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003328:	4b26      	ldr	r3, [pc, #152]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	e03e      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800332e:	4b23      	ldr	r3, [pc, #140]	@ (80033bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b0c      	cmp	r3, #12
 8003338:	d136      	bne.n	80033a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800333a:	4b20      	ldr	r3, [pc, #128]	@ (80033bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003344:	4b1d      	ldr	r3, [pc, #116]	@ (80033bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	091b      	lsrs	r3, r3, #4
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	3301      	adds	r3, #1
 8003350:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d10c      	bne.n	8003372 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003358:	4a1a      	ldr	r2, [pc, #104]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	4a16      	ldr	r2, [pc, #88]	@ (80033bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003362:	68d2      	ldr	r2, [r2, #12]
 8003364:	0a12      	lsrs	r2, r2, #8
 8003366:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	617b      	str	r3, [r7, #20]
      break;
 8003370:	e00c      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003372:	4a13      	ldr	r2, [pc, #76]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	4a10      	ldr	r2, [pc, #64]	@ (80033bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800337c:	68d2      	ldr	r2, [r2, #12]
 800337e:	0a12      	lsrs	r2, r2, #8
 8003380:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003384:	fb02 f303 	mul.w	r3, r2, r3
 8003388:	617b      	str	r3, [r7, #20]
      break;
 800338a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800338c:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	0e5b      	lsrs	r3, r3, #25
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	3301      	adds	r3, #1
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	e001      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80033ac:	693b      	ldr	r3, [r7, #16]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	371c      	adds	r7, #28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	00f42400 	.word	0x00f42400
 80033c4:	007a1200 	.word	0x007a1200

080033c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033cc:	4b03      	ldr	r3, [pc, #12]	@ (80033dc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ce:	681b      	ldr	r3, [r3, #0]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000000 	.word	0x20000000

080033e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033e4:	f7ff fff0 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b06      	ldr	r3, [pc, #24]	@ (8003404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4904      	ldr	r1, [pc, #16]	@ (8003408 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	08005458 	.word	0x08005458

0800340c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003410:	f7ff ffda 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 8003414:	4602      	mov	r2, r0
 8003416:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	0adb      	lsrs	r3, r3, #11
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	4904      	ldr	r1, [pc, #16]	@ (8003434 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003422:	5ccb      	ldrb	r3, [r1, r3]
 8003424:	f003 031f 	and.w	r3, r3, #31
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800342c:	4618      	mov	r0, r3
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40021000 	.word	0x40021000
 8003434:	08005458 	.word	0x08005458

08003438 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800343e:	4b1e      	ldr	r3, [pc, #120]	@ (80034b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003448:	4b1b      	ldr	r3, [pc, #108]	@ (80034b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	3301      	adds	r3, #1
 8003454:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2b03      	cmp	r3, #3
 800345a:	d10c      	bne.n	8003476 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800345c:	4a17      	ldr	r2, [pc, #92]	@ (80034bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	4a14      	ldr	r2, [pc, #80]	@ (80034b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003466:	68d2      	ldr	r2, [r2, #12]
 8003468:	0a12      	lsrs	r2, r2, #8
 800346a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800346e:	fb02 f303 	mul.w	r3, r2, r3
 8003472:	617b      	str	r3, [r7, #20]
    break;
 8003474:	e00c      	b.n	8003490 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003476:	4a12      	ldr	r2, [pc, #72]	@ (80034c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	4a0e      	ldr	r2, [pc, #56]	@ (80034b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003480:	68d2      	ldr	r2, [r2, #12]
 8003482:	0a12      	lsrs	r2, r2, #8
 8003484:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003488:	fb02 f303 	mul.w	r3, r2, r3
 800348c:	617b      	str	r3, [r7, #20]
    break;
 800348e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003490:	4b09      	ldr	r3, [pc, #36]	@ (80034b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	0e5b      	lsrs	r3, r3, #25
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	3301      	adds	r3, #1
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80034aa:	687b      	ldr	r3, [r7, #4]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	40021000 	.word	0x40021000
 80034bc:	007a1200 	.word	0x007a1200
 80034c0:	00f42400 	.word	0x00f42400

080034c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034cc:	2300      	movs	r3, #0
 80034ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034d0:	2300      	movs	r3, #0
 80034d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 8098 	beq.w	8003612 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e2:	2300      	movs	r3, #0
 80034e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034e6:	4b43      	ldr	r3, [pc, #268]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10d      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f2:	4b40      	ldr	r3, [pc, #256]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f6:	4a3f      	ldr	r2, [pc, #252]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80034fe:	4b3d      	ldr	r3, [pc, #244]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800350a:	2301      	movs	r3, #1
 800350c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800350e:	4b3a      	ldr	r3, [pc, #232]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a39      	ldr	r2, [pc, #228]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003518:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800351a:	f7fd ff53 	bl	80013c4 <HAL_GetTick>
 800351e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003520:	e009      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003522:	f7fd ff4f 	bl	80013c4 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d902      	bls.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	74fb      	strb	r3, [r7, #19]
        break;
 8003534:	e005      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003536:	4b30      	ldr	r3, [pc, #192]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0ef      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003542:	7cfb      	ldrb	r3, [r7, #19]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d159      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003548:	4b2a      	ldr	r3, [pc, #168]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003552:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01e      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	429a      	cmp	r2, r3
 8003562:	d019      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003564:	4b23      	ldr	r3, [pc, #140]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800356e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003570:	4b20      	ldr	r3, [pc, #128]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003576:	4a1f      	ldr	r2, [pc, #124]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800357c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003580:	4b1c      	ldr	r3, [pc, #112]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003586:	4a1b      	ldr	r2, [pc, #108]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800358c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003590:	4a18      	ldr	r2, [pc, #96]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d016      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7fd ff0f 	bl	80013c4 <HAL_GetTick>
 80035a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a8:	e00b      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035aa:	f7fd ff0b 	bl	80013c4 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d902      	bls.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	74fb      	strb	r3, [r7, #19]
            break;
 80035c0:	e006      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035c2:	4b0c      	ldr	r3, [pc, #48]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0ec      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10b      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035d6:	4b07      	ldr	r3, [pc, #28]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e4:	4903      	ldr	r1, [pc, #12]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035ec:	e008      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035ee:	7cfb      	ldrb	r3, [r7, #19]
 80035f0:	74bb      	strb	r3, [r7, #18]
 80035f2:	e005      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003600:	7c7b      	ldrb	r3, [r7, #17]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d105      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003606:	4ba6      	ldr	r3, [pc, #664]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360a:	4aa5      	ldr	r2, [pc, #660]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800360c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003610:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800361e:	4ba0      	ldr	r3, [pc, #640]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003624:	f023 0203 	bic.w	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	499c      	ldr	r1, [pc, #624]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003640:	4b97      	ldr	r3, [pc, #604]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003646:	f023 020c 	bic.w	r2, r3, #12
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	4994      	ldr	r1, [pc, #592]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003662:	4b8f      	ldr	r3, [pc, #572]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003668:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	498b      	ldr	r1, [pc, #556]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003684:	4b86      	ldr	r3, [pc, #536]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	4983      	ldr	r1, [pc, #524]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036a6:	4b7e      	ldr	r3, [pc, #504]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	497a      	ldr	r1, [pc, #488]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036c8:	4b75      	ldr	r3, [pc, #468]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	4972      	ldr	r1, [pc, #456]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036ea:	4b6d      	ldr	r3, [pc, #436]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	4969      	ldr	r1, [pc, #420]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800370c:	4b64      	ldr	r3, [pc, #400]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003712:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	4961      	ldr	r1, [pc, #388]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800372e:	4b5c      	ldr	r3, [pc, #368]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003734:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	4958      	ldr	r1, [pc, #352]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800374c:	2b00      	cmp	r3, #0
 800374e:	d015      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003750:	4b53      	ldr	r3, [pc, #332]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003756:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375e:	4950      	ldr	r1, [pc, #320]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800376e:	d105      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003770:	4b4b      	ldr	r3, [pc, #300]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4a4a      	ldr	r2, [pc, #296]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800377a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003784:	2b00      	cmp	r3, #0
 8003786:	d015      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003788:	4b45      	ldr	r3, [pc, #276]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003796:	4942      	ldr	r1, [pc, #264]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037a6:	d105      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a8:	4b3d      	ldr	r3, [pc, #244]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	4a3c      	ldr	r2, [pc, #240]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037b2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d015      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037c0:	4b37      	ldr	r3, [pc, #220]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ce:	4934      	ldr	r1, [pc, #208]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037de:	d105      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e0:	4b2f      	ldr	r3, [pc, #188]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4a2e      	ldr	r2, [pc, #184]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d015      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037f8:	4b29      	ldr	r3, [pc, #164]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003806:	4926      	ldr	r1, [pc, #152]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003812:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003816:	d105      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003818:	4b21      	ldr	r3, [pc, #132]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	4a20      	ldr	r2, [pc, #128]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800381e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003822:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d015      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003830:	4b1b      	ldr	r3, [pc, #108]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003836:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383e:	4918      	ldr	r1, [pc, #96]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800384e:	d105      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003850:	4b13      	ldr	r3, [pc, #76]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4a12      	ldr	r2, [pc, #72]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800385a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d015      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003868:	4b0d      	ldr	r3, [pc, #52]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003876:	490a      	ldr	r1, [pc, #40]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003882:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003886:	d105      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003888:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4a04      	ldr	r2, [pc, #16]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800388e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003892:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003894:	7cbb      	ldrb	r3, [r7, #18]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000

080038a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e09d      	b.n	80039f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d108      	bne.n	80038d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038c6:	d009      	beq.n	80038dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	61da      	str	r2, [r3, #28]
 80038ce:	e005      	b.n	80038dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fd f8b8 	bl	8000a6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003912:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800391c:	d902      	bls.n	8003924 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	e002      	b.n	800392a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003924:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003928:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003932:	d007      	beq.n	8003944 <HAL_SPI_Init+0xa0>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800393c:	d002      	beq.n	8003944 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003986:	ea42 0103 	orr.w	r1, r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	0c1b      	lsrs	r3, r3, #16
 80039a0:	f003 0204 	and.w	r2, r3, #4
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80039c0:	ea42 0103 	orr.w	r1, r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69da      	ldr	r2, [r3, #28]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e049      	b.n	8003aa0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7fd fa31 	bl	8000e88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3304      	adds	r3, #4
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f000 f9ef 	bl	8003e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e097      	b.n	8003bec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d106      	bne.n	8003ad6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7fd f9f9 	bl	8000ec8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003aec:	f023 0307 	bic.w	r3, r3, #7
 8003af0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3304      	adds	r3, #4
 8003afa:	4619      	mov	r1, r3
 8003afc:	4610      	mov	r0, r2
 8003afe:	f000 f98d 	bl	8003e1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b2a:	f023 0303 	bic.w	r3, r3, #3
 8003b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003b48:	f023 030c 	bic.w	r3, r3, #12
 8003b4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	021b      	lsls	r3, r3, #8
 8003b64:	4313      	orrs	r3, r2
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	011a      	lsls	r2, r3, #4
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	031b      	lsls	r3, r3, #12
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003b86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003b8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e0ff      	b.n	8003e12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b14      	cmp	r3, #20
 8003c1e:	f200 80f0 	bhi.w	8003e02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c22:	a201      	add	r2, pc, #4	@ (adr r2, 8003c28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003c7d 	.word	0x08003c7d
 8003c2c:	08003e03 	.word	0x08003e03
 8003c30:	08003e03 	.word	0x08003e03
 8003c34:	08003e03 	.word	0x08003e03
 8003c38:	08003cbd 	.word	0x08003cbd
 8003c3c:	08003e03 	.word	0x08003e03
 8003c40:	08003e03 	.word	0x08003e03
 8003c44:	08003e03 	.word	0x08003e03
 8003c48:	08003cff 	.word	0x08003cff
 8003c4c:	08003e03 	.word	0x08003e03
 8003c50:	08003e03 	.word	0x08003e03
 8003c54:	08003e03 	.word	0x08003e03
 8003c58:	08003d3f 	.word	0x08003d3f
 8003c5c:	08003e03 	.word	0x08003e03
 8003c60:	08003e03 	.word	0x08003e03
 8003c64:	08003e03 	.word	0x08003e03
 8003c68:	08003d81 	.word	0x08003d81
 8003c6c:	08003e03 	.word	0x08003e03
 8003c70:	08003e03 	.word	0x08003e03
 8003c74:	08003e03 	.word	0x08003e03
 8003c78:	08003dc1 	.word	0x08003dc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68b9      	ldr	r1, [r7, #8]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 f966 	bl	8003f54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0208 	orr.w	r2, r2, #8
 8003c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0204 	bic.w	r2, r2, #4
 8003ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6999      	ldr	r1, [r3, #24]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	619a      	str	r2, [r3, #24]
      break;
 8003cba:	e0a5      	b.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f9d6 	bl	8004074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699a      	ldr	r2, [r3, #24]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6999      	ldr	r1, [r3, #24]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	021a      	lsls	r2, r3, #8
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	619a      	str	r2, [r3, #24]
      break;
 8003cfc:	e084      	b.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fa3f 	bl	8004188 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0208 	orr.w	r2, r2, #8
 8003d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0204 	bic.w	r2, r2, #4
 8003d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69d9      	ldr	r1, [r3, #28]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	61da      	str	r2, [r3, #28]
      break;
 8003d3c:	e064      	b.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 faa7 	bl	8004298 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69da      	ldr	r2, [r3, #28]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69d9      	ldr	r1, [r3, #28]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	021a      	lsls	r2, r3, #8
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	61da      	str	r2, [r3, #28]
      break;
 8003d7e:	e043      	b.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68b9      	ldr	r1, [r7, #8]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fb10 	bl	80043ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0208 	orr.w	r2, r2, #8
 8003d9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0204 	bic.w	r2, r2, #4
 8003daa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003dbe:	e023      	b.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68b9      	ldr	r1, [r7, #8]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fb54 	bl	8004474 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dda:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	021a      	lsls	r2, r3, #8
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e00:	e002      	b.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	75fb      	strb	r3, [r7, #23]
      break;
 8003e06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop

08003e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a42      	ldr	r2, [pc, #264]	@ (8003f38 <TIM_Base_SetConfig+0x11c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00f      	beq.n	8003e54 <TIM_Base_SetConfig+0x38>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e3a:	d00b      	beq.n	8003e54 <TIM_Base_SetConfig+0x38>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f3c <TIM_Base_SetConfig+0x120>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d007      	beq.n	8003e54 <TIM_Base_SetConfig+0x38>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a3e      	ldr	r2, [pc, #248]	@ (8003f40 <TIM_Base_SetConfig+0x124>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <TIM_Base_SetConfig+0x38>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a3d      	ldr	r2, [pc, #244]	@ (8003f44 <TIM_Base_SetConfig+0x128>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d108      	bne.n	8003e66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a33      	ldr	r2, [pc, #204]	@ (8003f38 <TIM_Base_SetConfig+0x11c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01b      	beq.n	8003ea6 <TIM_Base_SetConfig+0x8a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e74:	d017      	beq.n	8003ea6 <TIM_Base_SetConfig+0x8a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a30      	ldr	r2, [pc, #192]	@ (8003f3c <TIM_Base_SetConfig+0x120>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <TIM_Base_SetConfig+0x8a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2f      	ldr	r2, [pc, #188]	@ (8003f40 <TIM_Base_SetConfig+0x124>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00f      	beq.n	8003ea6 <TIM_Base_SetConfig+0x8a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a2e      	ldr	r2, [pc, #184]	@ (8003f44 <TIM_Base_SetConfig+0x128>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00b      	beq.n	8003ea6 <TIM_Base_SetConfig+0x8a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a2d      	ldr	r2, [pc, #180]	@ (8003f48 <TIM_Base_SetConfig+0x12c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d007      	beq.n	8003ea6 <TIM_Base_SetConfig+0x8a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2c      	ldr	r2, [pc, #176]	@ (8003f4c <TIM_Base_SetConfig+0x130>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <TIM_Base_SetConfig+0x8a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f50 <TIM_Base_SetConfig+0x134>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d108      	bne.n	8003eb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a16      	ldr	r2, [pc, #88]	@ (8003f38 <TIM_Base_SetConfig+0x11c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00f      	beq.n	8003f04 <TIM_Base_SetConfig+0xe8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a17      	ldr	r2, [pc, #92]	@ (8003f44 <TIM_Base_SetConfig+0x128>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00b      	beq.n	8003f04 <TIM_Base_SetConfig+0xe8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a16      	ldr	r2, [pc, #88]	@ (8003f48 <TIM_Base_SetConfig+0x12c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d007      	beq.n	8003f04 <TIM_Base_SetConfig+0xe8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a15      	ldr	r2, [pc, #84]	@ (8003f4c <TIM_Base_SetConfig+0x130>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d003      	beq.n	8003f04 <TIM_Base_SetConfig+0xe8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a14      	ldr	r2, [pc, #80]	@ (8003f50 <TIM_Base_SetConfig+0x134>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d103      	bne.n	8003f0c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d105      	bne.n	8003f2a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f023 0201 	bic.w	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	611a      	str	r2, [r3, #16]
  }
}
 8003f2a:	bf00      	nop
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40000800 	.word	0x40000800
 8003f44:	40013400 	.word	0x40013400
 8003f48:	40014000 	.word	0x40014000
 8003f4c:	40014400 	.word	0x40014400
 8003f50:	40014800 	.word	0x40014800

08003f54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	f023 0201 	bic.w	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f023 0302 	bic.w	r3, r3, #2
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a2c      	ldr	r2, [pc, #176]	@ (8004060 <TIM_OC1_SetConfig+0x10c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00f      	beq.n	8003fd4 <TIM_OC1_SetConfig+0x80>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8004064 <TIM_OC1_SetConfig+0x110>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00b      	beq.n	8003fd4 <TIM_OC1_SetConfig+0x80>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8004068 <TIM_OC1_SetConfig+0x114>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d007      	beq.n	8003fd4 <TIM_OC1_SetConfig+0x80>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a29      	ldr	r2, [pc, #164]	@ (800406c <TIM_OC1_SetConfig+0x118>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_OC1_SetConfig+0x80>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a28      	ldr	r2, [pc, #160]	@ (8004070 <TIM_OC1_SetConfig+0x11c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d10c      	bne.n	8003fee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f023 0308 	bic.w	r3, r3, #8
 8003fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f023 0304 	bic.w	r3, r3, #4
 8003fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8004060 <TIM_OC1_SetConfig+0x10c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00f      	beq.n	8004016 <TIM_OC1_SetConfig+0xc2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8004064 <TIM_OC1_SetConfig+0x110>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00b      	beq.n	8004016 <TIM_OC1_SetConfig+0xc2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a19      	ldr	r2, [pc, #100]	@ (8004068 <TIM_OC1_SetConfig+0x114>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <TIM_OC1_SetConfig+0xc2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a18      	ldr	r2, [pc, #96]	@ (800406c <TIM_OC1_SetConfig+0x118>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d003      	beq.n	8004016 <TIM_OC1_SetConfig+0xc2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a17      	ldr	r2, [pc, #92]	@ (8004070 <TIM_OC1_SetConfig+0x11c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d111      	bne.n	800403a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800401c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	621a      	str	r2, [r3, #32]
}
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40013400 	.word	0x40013400
 8004068:	40014000 	.word	0x40014000
 800406c:	40014400 	.word	0x40014400
 8004070:	40014800 	.word	0x40014800

08004074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f023 0210 	bic.w	r2, r3, #16
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0320 	bic.w	r3, r3, #32
 80040c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a28      	ldr	r2, [pc, #160]	@ (8004174 <TIM_OC2_SetConfig+0x100>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <TIM_OC2_SetConfig+0x6c>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a27      	ldr	r2, [pc, #156]	@ (8004178 <TIM_OC2_SetConfig+0x104>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d10d      	bne.n	80040fc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004174 <TIM_OC2_SetConfig+0x100>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00f      	beq.n	8004124 <TIM_OC2_SetConfig+0xb0>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a1c      	ldr	r2, [pc, #112]	@ (8004178 <TIM_OC2_SetConfig+0x104>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00b      	beq.n	8004124 <TIM_OC2_SetConfig+0xb0>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a1b      	ldr	r2, [pc, #108]	@ (800417c <TIM_OC2_SetConfig+0x108>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d007      	beq.n	8004124 <TIM_OC2_SetConfig+0xb0>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a1a      	ldr	r2, [pc, #104]	@ (8004180 <TIM_OC2_SetConfig+0x10c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d003      	beq.n	8004124 <TIM_OC2_SetConfig+0xb0>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a19      	ldr	r2, [pc, #100]	@ (8004184 <TIM_OC2_SetConfig+0x110>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d113      	bne.n	800414c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800412a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004132:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	621a      	str	r2, [r3, #32]
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40012c00 	.word	0x40012c00
 8004178:	40013400 	.word	0x40013400
 800417c:	40014000 	.word	0x40014000
 8004180:	40014400 	.word	0x40014400
 8004184:	40014800 	.word	0x40014800

08004188 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0303 	bic.w	r3, r3, #3
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a27      	ldr	r2, [pc, #156]	@ (8004284 <TIM_OC3_SetConfig+0xfc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d003      	beq.n	80041f2 <TIM_OC3_SetConfig+0x6a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a26      	ldr	r2, [pc, #152]	@ (8004288 <TIM_OC3_SetConfig+0x100>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d10d      	bne.n	800420e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	021b      	lsls	r3, r3, #8
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800420c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a1c      	ldr	r2, [pc, #112]	@ (8004284 <TIM_OC3_SetConfig+0xfc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00f      	beq.n	8004236 <TIM_OC3_SetConfig+0xae>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a1b      	ldr	r2, [pc, #108]	@ (8004288 <TIM_OC3_SetConfig+0x100>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00b      	beq.n	8004236 <TIM_OC3_SetConfig+0xae>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a1a      	ldr	r2, [pc, #104]	@ (800428c <TIM_OC3_SetConfig+0x104>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d007      	beq.n	8004236 <TIM_OC3_SetConfig+0xae>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a19      	ldr	r2, [pc, #100]	@ (8004290 <TIM_OC3_SetConfig+0x108>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d003      	beq.n	8004236 <TIM_OC3_SetConfig+0xae>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a18      	ldr	r2, [pc, #96]	@ (8004294 <TIM_OC3_SetConfig+0x10c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d113      	bne.n	800425e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800423c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	621a      	str	r2, [r3, #32]
}
 8004278:	bf00      	nop
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	40012c00 	.word	0x40012c00
 8004288:	40013400 	.word	0x40013400
 800428c:	40014000 	.word	0x40014000
 8004290:	40014400 	.word	0x40014400
 8004294:	40014800 	.word	0x40014800

08004298 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	031b      	lsls	r3, r3, #12
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a28      	ldr	r2, [pc, #160]	@ (8004398 <TIM_OC4_SetConfig+0x100>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_OC4_SetConfig+0x6c>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a27      	ldr	r2, [pc, #156]	@ (800439c <TIM_OC4_SetConfig+0x104>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d10d      	bne.n	8004320 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800430a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	031b      	lsls	r3, r3, #12
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4313      	orrs	r3, r2
 8004316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800431e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a1d      	ldr	r2, [pc, #116]	@ (8004398 <TIM_OC4_SetConfig+0x100>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00f      	beq.n	8004348 <TIM_OC4_SetConfig+0xb0>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a1c      	ldr	r2, [pc, #112]	@ (800439c <TIM_OC4_SetConfig+0x104>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00b      	beq.n	8004348 <TIM_OC4_SetConfig+0xb0>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a1b      	ldr	r2, [pc, #108]	@ (80043a0 <TIM_OC4_SetConfig+0x108>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d007      	beq.n	8004348 <TIM_OC4_SetConfig+0xb0>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a1a      	ldr	r2, [pc, #104]	@ (80043a4 <TIM_OC4_SetConfig+0x10c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_OC4_SetConfig+0xb0>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a19      	ldr	r2, [pc, #100]	@ (80043a8 <TIM_OC4_SetConfig+0x110>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d113      	bne.n	8004370 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800434e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004356:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	019b      	lsls	r3, r3, #6
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	019b      	lsls	r3, r3, #6
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40013400 	.word	0x40013400
 80043a0:	40014000 	.word	0x40014000
 80043a4:	40014400 	.word	0x40014400
 80043a8:	40014800 	.word	0x40014800

080043ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80043f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	041b      	lsls	r3, r3, #16
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a17      	ldr	r2, [pc, #92]	@ (8004460 <TIM_OC5_SetConfig+0xb4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00f      	beq.n	8004426 <TIM_OC5_SetConfig+0x7a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a16      	ldr	r2, [pc, #88]	@ (8004464 <TIM_OC5_SetConfig+0xb8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00b      	beq.n	8004426 <TIM_OC5_SetConfig+0x7a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a15      	ldr	r2, [pc, #84]	@ (8004468 <TIM_OC5_SetConfig+0xbc>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d007      	beq.n	8004426 <TIM_OC5_SetConfig+0x7a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a14      	ldr	r2, [pc, #80]	@ (800446c <TIM_OC5_SetConfig+0xc0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d003      	beq.n	8004426 <TIM_OC5_SetConfig+0x7a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a13      	ldr	r2, [pc, #76]	@ (8004470 <TIM_OC5_SetConfig+0xc4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d109      	bne.n	800443a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800442c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	621a      	str	r2, [r3, #32]
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	40012c00 	.word	0x40012c00
 8004464:	40013400 	.word	0x40013400
 8004468:	40014000 	.word	0x40014000
 800446c:	40014400 	.word	0x40014400
 8004470:	40014800 	.word	0x40014800

08004474 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80044ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	051b      	lsls	r3, r3, #20
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a18      	ldr	r2, [pc, #96]	@ (800452c <TIM_OC6_SetConfig+0xb8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00f      	beq.n	80044f0 <TIM_OC6_SetConfig+0x7c>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a17      	ldr	r2, [pc, #92]	@ (8004530 <TIM_OC6_SetConfig+0xbc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00b      	beq.n	80044f0 <TIM_OC6_SetConfig+0x7c>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a16      	ldr	r2, [pc, #88]	@ (8004534 <TIM_OC6_SetConfig+0xc0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d007      	beq.n	80044f0 <TIM_OC6_SetConfig+0x7c>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a15      	ldr	r2, [pc, #84]	@ (8004538 <TIM_OC6_SetConfig+0xc4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_OC6_SetConfig+0x7c>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a14      	ldr	r2, [pc, #80]	@ (800453c <TIM_OC6_SetConfig+0xc8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d109      	bne.n	8004504 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	029b      	lsls	r3, r3, #10
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	621a      	str	r2, [r3, #32]
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40012c00 	.word	0x40012c00
 8004530:	40013400 	.word	0x40013400
 8004534:	40014000 	.word	0x40014000
 8004538:	40014400 	.word	0x40014400
 800453c:	40014800 	.word	0x40014800

08004540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004554:	2302      	movs	r3, #2
 8004556:	e065      	b.n	8004624 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a2c      	ldr	r2, [pc, #176]	@ (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d004      	beq.n	800458c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a2b      	ldr	r2, [pc, #172]	@ (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d108      	bne.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004592:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80045a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d018      	beq.n	80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ce:	d013      	beq.n	80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a18      	ldr	r2, [pc, #96]	@ (8004638 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00e      	beq.n	80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a17      	ldr	r2, [pc, #92]	@ (800463c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d009      	beq.n	80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a12      	ldr	r2, [pc, #72]	@ (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a13      	ldr	r2, [pc, #76]	@ (8004640 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d10c      	bne.n	8004612 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	4313      	orrs	r3, r2
 8004608:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	40012c00 	.word	0x40012c00
 8004634:	40013400 	.word	0x40013400
 8004638:	40000400 	.word	0x40000400
 800463c:	40000800 	.word	0x40000800
 8004640:	40014000 	.word	0x40014000

08004644 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800465c:	2302      	movs	r3, #2
 800465e:	e073      	b.n	8004748 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4313      	orrs	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	041b      	lsls	r3, r3, #16
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a19      	ldr	r2, [pc, #100]	@ (8004754 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d004      	beq.n	80046fc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a18      	ldr	r2, [pc, #96]	@ (8004758 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d11c      	bne.n	8004736 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004706:	051b      	lsls	r3, r3, #20
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	40012c00 	.word	0x40012c00
 8004758:	40013400 	.word	0x40013400

0800475c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e042      	b.n	80047f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004774:	2b00      	cmp	r3, #0
 8004776:	d106      	bne.n	8004786 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7fc fcf7 	bl	8001174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2224      	movs	r2, #36	@ 0x24
 800478a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0201 	bic.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 faf4 	bl	8004d94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f825 	bl	80047fc <UART_SetConfig>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e01b      	b.n	80047f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fb73 	bl	8004ed8 <UART_CheckIdleState>
 80047f2:	4603      	mov	r3, r0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004800:	b08c      	sub	sp, #48	@ 0x30
 8004802:	af00      	add	r7, sp, #0
 8004804:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	431a      	orrs	r2, r3
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	431a      	orrs	r2, r3
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	4313      	orrs	r3, r2
 8004822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4bab      	ldr	r3, [pc, #684]	@ (8004ad8 <UART_SetConfig+0x2dc>)
 800482c:	4013      	ands	r3, r2
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004834:	430b      	orrs	r3, r1
 8004836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4aa0      	ldr	r2, [pc, #640]	@ (8004adc <UART_SetConfig+0x2e0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d004      	beq.n	8004868 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004864:	4313      	orrs	r3, r2
 8004866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004872:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	6812      	ldr	r2, [r2, #0]
 800487a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800487c:	430b      	orrs	r3, r1
 800487e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004886:	f023 010f 	bic.w	r1, r3, #15
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a91      	ldr	r2, [pc, #580]	@ (8004ae0 <UART_SetConfig+0x2e4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d125      	bne.n	80048ec <UART_SetConfig+0xf0>
 80048a0:	4b90      	ldr	r3, [pc, #576]	@ (8004ae4 <UART_SetConfig+0x2e8>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d81a      	bhi.n	80048e4 <UART_SetConfig+0xe8>
 80048ae:	a201      	add	r2, pc, #4	@ (adr r2, 80048b4 <UART_SetConfig+0xb8>)
 80048b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b4:	080048c5 	.word	0x080048c5
 80048b8:	080048d5 	.word	0x080048d5
 80048bc:	080048cd 	.word	0x080048cd
 80048c0:	080048dd 	.word	0x080048dd
 80048c4:	2301      	movs	r3, #1
 80048c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ca:	e0d6      	b.n	8004a7a <UART_SetConfig+0x27e>
 80048cc:	2302      	movs	r3, #2
 80048ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048d2:	e0d2      	b.n	8004a7a <UART_SetConfig+0x27e>
 80048d4:	2304      	movs	r3, #4
 80048d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048da:	e0ce      	b.n	8004a7a <UART_SetConfig+0x27e>
 80048dc:	2308      	movs	r3, #8
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048e2:	e0ca      	b.n	8004a7a <UART_SetConfig+0x27e>
 80048e4:	2310      	movs	r3, #16
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ea:	e0c6      	b.n	8004a7a <UART_SetConfig+0x27e>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a7d      	ldr	r2, [pc, #500]	@ (8004ae8 <UART_SetConfig+0x2ec>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d138      	bne.n	8004968 <UART_SetConfig+0x16c>
 80048f6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ae4 <UART_SetConfig+0x2e8>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fc:	f003 030c 	and.w	r3, r3, #12
 8004900:	2b0c      	cmp	r3, #12
 8004902:	d82d      	bhi.n	8004960 <UART_SetConfig+0x164>
 8004904:	a201      	add	r2, pc, #4	@ (adr r2, 800490c <UART_SetConfig+0x110>)
 8004906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490a:	bf00      	nop
 800490c:	08004941 	.word	0x08004941
 8004910:	08004961 	.word	0x08004961
 8004914:	08004961 	.word	0x08004961
 8004918:	08004961 	.word	0x08004961
 800491c:	08004951 	.word	0x08004951
 8004920:	08004961 	.word	0x08004961
 8004924:	08004961 	.word	0x08004961
 8004928:	08004961 	.word	0x08004961
 800492c:	08004949 	.word	0x08004949
 8004930:	08004961 	.word	0x08004961
 8004934:	08004961 	.word	0x08004961
 8004938:	08004961 	.word	0x08004961
 800493c:	08004959 	.word	0x08004959
 8004940:	2300      	movs	r3, #0
 8004942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004946:	e098      	b.n	8004a7a <UART_SetConfig+0x27e>
 8004948:	2302      	movs	r3, #2
 800494a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800494e:	e094      	b.n	8004a7a <UART_SetConfig+0x27e>
 8004950:	2304      	movs	r3, #4
 8004952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004956:	e090      	b.n	8004a7a <UART_SetConfig+0x27e>
 8004958:	2308      	movs	r3, #8
 800495a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800495e:	e08c      	b.n	8004a7a <UART_SetConfig+0x27e>
 8004960:	2310      	movs	r3, #16
 8004962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004966:	e088      	b.n	8004a7a <UART_SetConfig+0x27e>
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a5f      	ldr	r2, [pc, #380]	@ (8004aec <UART_SetConfig+0x2f0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d125      	bne.n	80049be <UART_SetConfig+0x1c2>
 8004972:	4b5c      	ldr	r3, [pc, #368]	@ (8004ae4 <UART_SetConfig+0x2e8>)
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004978:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800497c:	2b30      	cmp	r3, #48	@ 0x30
 800497e:	d016      	beq.n	80049ae <UART_SetConfig+0x1b2>
 8004980:	2b30      	cmp	r3, #48	@ 0x30
 8004982:	d818      	bhi.n	80049b6 <UART_SetConfig+0x1ba>
 8004984:	2b20      	cmp	r3, #32
 8004986:	d00a      	beq.n	800499e <UART_SetConfig+0x1a2>
 8004988:	2b20      	cmp	r3, #32
 800498a:	d814      	bhi.n	80049b6 <UART_SetConfig+0x1ba>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <UART_SetConfig+0x19a>
 8004990:	2b10      	cmp	r3, #16
 8004992:	d008      	beq.n	80049a6 <UART_SetConfig+0x1aa>
 8004994:	e00f      	b.n	80049b6 <UART_SetConfig+0x1ba>
 8004996:	2300      	movs	r3, #0
 8004998:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800499c:	e06d      	b.n	8004a7a <UART_SetConfig+0x27e>
 800499e:	2302      	movs	r3, #2
 80049a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049a4:	e069      	b.n	8004a7a <UART_SetConfig+0x27e>
 80049a6:	2304      	movs	r3, #4
 80049a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ac:	e065      	b.n	8004a7a <UART_SetConfig+0x27e>
 80049ae:	2308      	movs	r3, #8
 80049b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049b4:	e061      	b.n	8004a7a <UART_SetConfig+0x27e>
 80049b6:	2310      	movs	r3, #16
 80049b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049bc:	e05d      	b.n	8004a7a <UART_SetConfig+0x27e>
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a4b      	ldr	r2, [pc, #300]	@ (8004af0 <UART_SetConfig+0x2f4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d125      	bne.n	8004a14 <UART_SetConfig+0x218>
 80049c8:	4b46      	ldr	r3, [pc, #280]	@ (8004ae4 <UART_SetConfig+0x2e8>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80049d4:	d016      	beq.n	8004a04 <UART_SetConfig+0x208>
 80049d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80049d8:	d818      	bhi.n	8004a0c <UART_SetConfig+0x210>
 80049da:	2b80      	cmp	r3, #128	@ 0x80
 80049dc:	d00a      	beq.n	80049f4 <UART_SetConfig+0x1f8>
 80049de:	2b80      	cmp	r3, #128	@ 0x80
 80049e0:	d814      	bhi.n	8004a0c <UART_SetConfig+0x210>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <UART_SetConfig+0x1f0>
 80049e6:	2b40      	cmp	r3, #64	@ 0x40
 80049e8:	d008      	beq.n	80049fc <UART_SetConfig+0x200>
 80049ea:	e00f      	b.n	8004a0c <UART_SetConfig+0x210>
 80049ec:	2300      	movs	r3, #0
 80049ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049f2:	e042      	b.n	8004a7a <UART_SetConfig+0x27e>
 80049f4:	2302      	movs	r3, #2
 80049f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049fa:	e03e      	b.n	8004a7a <UART_SetConfig+0x27e>
 80049fc:	2304      	movs	r3, #4
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a02:	e03a      	b.n	8004a7a <UART_SetConfig+0x27e>
 8004a04:	2308      	movs	r3, #8
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a0a:	e036      	b.n	8004a7a <UART_SetConfig+0x27e>
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a12:	e032      	b.n	8004a7a <UART_SetConfig+0x27e>
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a30      	ldr	r2, [pc, #192]	@ (8004adc <UART_SetConfig+0x2e0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d12a      	bne.n	8004a74 <UART_SetConfig+0x278>
 8004a1e:	4b31      	ldr	r3, [pc, #196]	@ (8004ae4 <UART_SetConfig+0x2e8>)
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a2c:	d01a      	beq.n	8004a64 <UART_SetConfig+0x268>
 8004a2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a32:	d81b      	bhi.n	8004a6c <UART_SetConfig+0x270>
 8004a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a38:	d00c      	beq.n	8004a54 <UART_SetConfig+0x258>
 8004a3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a3e:	d815      	bhi.n	8004a6c <UART_SetConfig+0x270>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <UART_SetConfig+0x250>
 8004a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a48:	d008      	beq.n	8004a5c <UART_SetConfig+0x260>
 8004a4a:	e00f      	b.n	8004a6c <UART_SetConfig+0x270>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a52:	e012      	b.n	8004a7a <UART_SetConfig+0x27e>
 8004a54:	2302      	movs	r3, #2
 8004a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a5a:	e00e      	b.n	8004a7a <UART_SetConfig+0x27e>
 8004a5c:	2304      	movs	r3, #4
 8004a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a62:	e00a      	b.n	8004a7a <UART_SetConfig+0x27e>
 8004a64:	2308      	movs	r3, #8
 8004a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a6a:	e006      	b.n	8004a7a <UART_SetConfig+0x27e>
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a72:	e002      	b.n	8004a7a <UART_SetConfig+0x27e>
 8004a74:	2310      	movs	r3, #16
 8004a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a17      	ldr	r2, [pc, #92]	@ (8004adc <UART_SetConfig+0x2e0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	f040 80a8 	bne.w	8004bd6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d834      	bhi.n	8004af8 <UART_SetConfig+0x2fc>
 8004a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a94 <UART_SetConfig+0x298>)
 8004a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a94:	08004ab9 	.word	0x08004ab9
 8004a98:	08004af9 	.word	0x08004af9
 8004a9c:	08004ac1 	.word	0x08004ac1
 8004aa0:	08004af9 	.word	0x08004af9
 8004aa4:	08004ac7 	.word	0x08004ac7
 8004aa8:	08004af9 	.word	0x08004af9
 8004aac:	08004af9 	.word	0x08004af9
 8004ab0:	08004af9 	.word	0x08004af9
 8004ab4:	08004acf 	.word	0x08004acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab8:	f7fe fc92 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8004abc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004abe:	e021      	b.n	8004b04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8004af4 <UART_SetConfig+0x2f8>)
 8004ac2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ac4:	e01e      	b.n	8004b04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ac6:	f7fe fc1d 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004aca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004acc:	e01a      	b.n	8004b04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ace:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ad2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ad4:	e016      	b.n	8004b04 <UART_SetConfig+0x308>
 8004ad6:	bf00      	nop
 8004ad8:	cfff69f3 	.word	0xcfff69f3
 8004adc:	40008000 	.word	0x40008000
 8004ae0:	40013800 	.word	0x40013800
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	40004400 	.word	0x40004400
 8004aec:	40004800 	.word	0x40004800
 8004af0:	40004c00 	.word	0x40004c00
 8004af4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 812a 	beq.w	8004d60 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b10:	4a9e      	ldr	r2, [pc, #632]	@ (8004d8c <UART_SetConfig+0x590>)
 8004b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b16:	461a      	mov	r2, r3
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	4413      	add	r3, r2
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d305      	bcc.n	8004b3c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d903      	bls.n	8004b44 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b42:	e10d      	b.n	8004d60 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b46:	2200      	movs	r2, #0
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	60fa      	str	r2, [r7, #12]
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b50:	4a8e      	ldr	r2, [pc, #568]	@ (8004d8c <UART_SetConfig+0x590>)
 8004b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2200      	movs	r2, #0
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	607a      	str	r2, [r7, #4]
 8004b5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b66:	f7fb fb57 	bl	8000218 <__aeabi_uldivmod>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4619      	mov	r1, r3
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	020b      	lsls	r3, r1, #8
 8004b7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b80:	0202      	lsls	r2, r0, #8
 8004b82:	6979      	ldr	r1, [r7, #20]
 8004b84:	6849      	ldr	r1, [r1, #4]
 8004b86:	0849      	lsrs	r1, r1, #1
 8004b88:	2000      	movs	r0, #0
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	4605      	mov	r5, r0
 8004b8e:	eb12 0804 	adds.w	r8, r2, r4
 8004b92:	eb43 0905 	adc.w	r9, r3, r5
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	469a      	mov	sl, r3
 8004b9e:	4693      	mov	fp, r2
 8004ba0:	4652      	mov	r2, sl
 8004ba2:	465b      	mov	r3, fp
 8004ba4:	4640      	mov	r0, r8
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	f7fb fb36 	bl	8000218 <__aeabi_uldivmod>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bba:	d308      	bcc.n	8004bce <UART_SetConfig+0x3d2>
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bc2:	d204      	bcs.n	8004bce <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6a3a      	ldr	r2, [r7, #32]
 8004bca:	60da      	str	r2, [r3, #12]
 8004bcc:	e0c8      	b.n	8004d60 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004bd4:	e0c4      	b.n	8004d60 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bde:	d167      	bne.n	8004cb0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004be0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d828      	bhi.n	8004c3a <UART_SetConfig+0x43e>
 8004be8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf0 <UART_SetConfig+0x3f4>)
 8004bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bee:	bf00      	nop
 8004bf0:	08004c15 	.word	0x08004c15
 8004bf4:	08004c1d 	.word	0x08004c1d
 8004bf8:	08004c25 	.word	0x08004c25
 8004bfc:	08004c3b 	.word	0x08004c3b
 8004c00:	08004c2b 	.word	0x08004c2b
 8004c04:	08004c3b 	.word	0x08004c3b
 8004c08:	08004c3b 	.word	0x08004c3b
 8004c0c:	08004c3b 	.word	0x08004c3b
 8004c10:	08004c33 	.word	0x08004c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c14:	f7fe fbe4 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8004c18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c1a:	e014      	b.n	8004c46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c1c:	f7fe fbf6 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 8004c20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c22:	e010      	b.n	8004c46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c24:	4b5a      	ldr	r3, [pc, #360]	@ (8004d90 <UART_SetConfig+0x594>)
 8004c26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c28:	e00d      	b.n	8004c46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c2a:	f7fe fb6b 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004c2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c30:	e009      	b.n	8004c46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c38:	e005      	b.n	8004c46 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8089 	beq.w	8004d60 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c52:	4a4e      	ldr	r2, [pc, #312]	@ (8004d8c <UART_SetConfig+0x590>)
 8004c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c60:	005a      	lsls	r2, r3, #1
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	441a      	add	r2, r3
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	2b0f      	cmp	r3, #15
 8004c78:	d916      	bls.n	8004ca8 <UART_SetConfig+0x4ac>
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c80:	d212      	bcs.n	8004ca8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f023 030f 	bic.w	r3, r3, #15
 8004c8a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	085b      	lsrs	r3, r3, #1
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	8bfb      	ldrh	r3, [r7, #30]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	8bfa      	ldrh	r2, [r7, #30]
 8004ca4:	60da      	str	r2, [r3, #12]
 8004ca6:	e05b      	b.n	8004d60 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004cae:	e057      	b.n	8004d60 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cb0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d828      	bhi.n	8004d0a <UART_SetConfig+0x50e>
 8004cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc0 <UART_SetConfig+0x4c4>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004ce5 	.word	0x08004ce5
 8004cc4:	08004ced 	.word	0x08004ced
 8004cc8:	08004cf5 	.word	0x08004cf5
 8004ccc:	08004d0b 	.word	0x08004d0b
 8004cd0:	08004cfb 	.word	0x08004cfb
 8004cd4:	08004d0b 	.word	0x08004d0b
 8004cd8:	08004d0b 	.word	0x08004d0b
 8004cdc:	08004d0b 	.word	0x08004d0b
 8004ce0:	08004d03 	.word	0x08004d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce4:	f7fe fb7c 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8004ce8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cea:	e014      	b.n	8004d16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cec:	f7fe fb8e 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 8004cf0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cf2:	e010      	b.n	8004d16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf4:	4b26      	ldr	r3, [pc, #152]	@ (8004d90 <UART_SetConfig+0x594>)
 8004cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004cf8:	e00d      	b.n	8004d16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cfa:	f7fe fb03 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004cfe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d00:	e009      	b.n	8004d16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d08:	e005      	b.n	8004d16 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d14:	bf00      	nop
    }

    if (pclk != 0U)
 8004d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d021      	beq.n	8004d60 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d20:	4a1a      	ldr	r2, [pc, #104]	@ (8004d8c <UART_SetConfig+0x590>)
 8004d22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d26:	461a      	mov	r2, r3
 8004d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	085b      	lsrs	r3, r3, #1
 8004d34:	441a      	add	r2, r3
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	2b0f      	cmp	r3, #15
 8004d44:	d909      	bls.n	8004d5a <UART_SetConfig+0x55e>
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d4c:	d205      	bcs.n	8004d5a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60da      	str	r2, [r3, #12]
 8004d58:	e002      	b.n	8004d60 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2200      	movs	r2, #0
 8004d74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004d7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3730      	adds	r7, #48	@ 0x30
 8004d84:	46bd      	mov	sp, r7
 8004d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d8a:	bf00      	nop
 8004d8c:	08005460 	.word	0x08005460
 8004d90:	00f42400 	.word	0x00f42400

08004d94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d01a      	beq.n	8004eaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e92:	d10a      	bne.n	8004eaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	605a      	str	r2, [r3, #4]
  }
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b098      	sub	sp, #96	@ 0x60
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ee8:	f7fc fa6c 	bl	80013c4 <HAL_GetTick>
 8004eec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d12f      	bne.n	8004f5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004efc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f04:	2200      	movs	r2, #0
 8004f06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f88e 	bl	800502c <UART_WaitOnFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d022      	beq.n	8004f5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f34:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e6      	bne.n	8004f16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e063      	b.n	8005024 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d149      	bne.n	8004ffe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f72:	2200      	movs	r2, #0
 8004f74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f857 	bl	800502c <UART_WaitOnFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d03c      	beq.n	8004ffe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	623b      	str	r3, [r7, #32]
   return(result);
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fa2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e6      	bne.n	8004f84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3308      	adds	r3, #8
 8004fbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f023 0301 	bic.w	r3, r3, #1
 8004fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fd6:	61fa      	str	r2, [r7, #28]
 8004fd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	69b9      	ldr	r1, [r7, #24]
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	617b      	str	r3, [r7, #20]
   return(result);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e5      	bne.n	8004fb6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e012      	b.n	8005024 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3758      	adds	r7, #88	@ 0x58
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	4613      	mov	r3, r2
 800503a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800503c:	e04f      	b.n	80050de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005044:	d04b      	beq.n	80050de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005046:	f7fc f9bd 	bl	80013c4 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	429a      	cmp	r2, r3
 8005054:	d302      	bcc.n	800505c <UART_WaitOnFlagUntilTimeout+0x30>
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e04e      	b.n	80050fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	2b00      	cmp	r3, #0
 800506c:	d037      	beq.n	80050de <UART_WaitOnFlagUntilTimeout+0xb2>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b80      	cmp	r3, #128	@ 0x80
 8005072:	d034      	beq.n	80050de <UART_WaitOnFlagUntilTimeout+0xb2>
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b40      	cmp	r3, #64	@ 0x40
 8005078:	d031      	beq.n	80050de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b08      	cmp	r3, #8
 8005086:	d110      	bne.n	80050aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2208      	movs	r2, #8
 800508e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f838 	bl	8005106 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2208      	movs	r2, #8
 800509a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e029      	b.n	80050fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050b8:	d111      	bne.n	80050de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f81e 	bl	8005106 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e00f      	b.n	80050fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69da      	ldr	r2, [r3, #28]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4013      	ands	r3, r2
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	bf0c      	ite	eq
 80050ee:	2301      	moveq	r3, #1
 80050f0:	2300      	movne	r3, #0
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d0a0      	beq.n	800503e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005106:	b480      	push	{r7}
 8005108:	b095      	sub	sp, #84	@ 0x54
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800511c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800512c:	643b      	str	r3, [r7, #64]	@ 0x40
 800512e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005132:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800513a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e6      	bne.n	800510e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3308      	adds	r3, #8
 8005146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	e853 3f00 	ldrex	r3, [r3]
 800514e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3308      	adds	r3, #8
 8005162:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005164:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005166:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800516a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e3      	bne.n	8005140 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800517c:	2b01      	cmp	r3, #1
 800517e:	d118      	bne.n	80051b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	60bb      	str	r3, [r7, #8]
   return(result);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f023 0310 	bic.w	r3, r3, #16
 8005194:	647b      	str	r3, [r7, #68]	@ 0x44
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6979      	ldr	r1, [r7, #20]
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	613b      	str	r3, [r7, #16]
   return(result);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e6      	bne.n	8005180 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80051c6:	bf00      	nop
 80051c8:	3754      	adds	r7, #84	@ 0x54
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e027      	b.n	8005238 <HAL_UARTEx_DisableFifoMode+0x66>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2224      	movs	r2, #36	@ 0x24
 80051f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0201 	bic.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005216:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2220      	movs	r2, #32
 800522a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005258:	2302      	movs	r3, #2
 800525a:	e02d      	b.n	80052b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2224      	movs	r2, #36	@ 0x24
 8005268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0201 	bic.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f84f 	bl	800533c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e02d      	b.n	8005334 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2224      	movs	r2, #36	@ 0x24
 80052e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f811 	bl	800533c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005348:	2b00      	cmp	r3, #0
 800534a:	d108      	bne.n	800535e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800535c:	e031      	b.n	80053c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800535e:	2308      	movs	r3, #8
 8005360:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005362:	2308      	movs	r3, #8
 8005364:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	0e5b      	lsrs	r3, r3, #25
 800536e:	b2db      	uxtb	r3, r3
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	0f5b      	lsrs	r3, r3, #29
 800537e:	b2db      	uxtb	r3, r3
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005386:	7bbb      	ldrb	r3, [r7, #14]
 8005388:	7b3a      	ldrb	r2, [r7, #12]
 800538a:	4911      	ldr	r1, [pc, #68]	@ (80053d0 <UARTEx_SetNbDataToProcess+0x94>)
 800538c:	5c8a      	ldrb	r2, [r1, r2]
 800538e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005392:	7b3a      	ldrb	r2, [r7, #12]
 8005394:	490f      	ldr	r1, [pc, #60]	@ (80053d4 <UARTEx_SetNbDataToProcess+0x98>)
 8005396:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005398:	fb93 f3f2 	sdiv	r3, r3, r2
 800539c:	b29a      	uxth	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	7b7a      	ldrb	r2, [r7, #13]
 80053a8:	4909      	ldr	r1, [pc, #36]	@ (80053d0 <UARTEx_SetNbDataToProcess+0x94>)
 80053aa:	5c8a      	ldrb	r2, [r1, r2]
 80053ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053b0:	7b7a      	ldrb	r2, [r7, #13]
 80053b2:	4908      	ldr	r1, [pc, #32]	@ (80053d4 <UARTEx_SetNbDataToProcess+0x98>)
 80053b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80053c2:	bf00      	nop
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	08005478 	.word	0x08005478
 80053d4:	08005480 	.word	0x08005480

080053d8 <memset>:
 80053d8:	4402      	add	r2, r0
 80053da:	4603      	mov	r3, r0
 80053dc:	4293      	cmp	r3, r2
 80053de:	d100      	bne.n	80053e2 <memset+0xa>
 80053e0:	4770      	bx	lr
 80053e2:	f803 1b01 	strb.w	r1, [r3], #1
 80053e6:	e7f9      	b.n	80053dc <memset+0x4>

080053e8 <__libc_init_array>:
 80053e8:	b570      	push	{r4, r5, r6, lr}
 80053ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005420 <__libc_init_array+0x38>)
 80053ec:	4c0d      	ldr	r4, [pc, #52]	@ (8005424 <__libc_init_array+0x3c>)
 80053ee:	1b64      	subs	r4, r4, r5
 80053f0:	10a4      	asrs	r4, r4, #2
 80053f2:	2600      	movs	r6, #0
 80053f4:	42a6      	cmp	r6, r4
 80053f6:	d109      	bne.n	800540c <__libc_init_array+0x24>
 80053f8:	4d0b      	ldr	r5, [pc, #44]	@ (8005428 <__libc_init_array+0x40>)
 80053fa:	4c0c      	ldr	r4, [pc, #48]	@ (800542c <__libc_init_array+0x44>)
 80053fc:	f000 f818 	bl	8005430 <_init>
 8005400:	1b64      	subs	r4, r4, r5
 8005402:	10a4      	asrs	r4, r4, #2
 8005404:	2600      	movs	r6, #0
 8005406:	42a6      	cmp	r6, r4
 8005408:	d105      	bne.n	8005416 <__libc_init_array+0x2e>
 800540a:	bd70      	pop	{r4, r5, r6, pc}
 800540c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005410:	4798      	blx	r3
 8005412:	3601      	adds	r6, #1
 8005414:	e7ee      	b.n	80053f4 <__libc_init_array+0xc>
 8005416:	f855 3b04 	ldr.w	r3, [r5], #4
 800541a:	4798      	blx	r3
 800541c:	3601      	adds	r6, #1
 800541e:	e7f2      	b.n	8005406 <__libc_init_array+0x1e>
 8005420:	08005490 	.word	0x08005490
 8005424:	08005490 	.word	0x08005490
 8005428:	08005490 	.word	0x08005490
 800542c:	08005494 	.word	0x08005494

08005430 <_init>:
 8005430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005432:	bf00      	nop
 8005434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005436:	bc08      	pop	{r3}
 8005438:	469e      	mov	lr, r3
 800543a:	4770      	bx	lr

0800543c <_fini>:
 800543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543e:	bf00      	nop
 8005440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005442:	bc08      	pop	{r3}
 8005444:	469e      	mov	lr, r3
 8005446:	4770      	bx	lr
