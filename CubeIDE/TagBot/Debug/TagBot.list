
TagBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e974  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800eb54  0800eb54  0000fb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efdc  0800efdc  00010074  2**0
                  CONTENTS
  4 .ARM          00000008  0800efdc  0800efdc  0000ffdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efe4  0800efe4  00010074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efe4  0800efe4  0000ffe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800efe8  0800efe8  0000ffe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800efec  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000430c  20000074  0800f060  00010074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004380  0800f060  00010380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e388  00000000  00000000  000100a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000659a  00000000  00000000  0003e42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023e8  00000000  00000000  000449c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bc0  00000000  00000000  00046db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027010  00000000  00000000  00048970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d392  00000000  00000000  0006f980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eda1a  00000000  00000000  0009cd12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018a72c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3a4  00000000  00000000  0018a770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00194b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800eb3c 	.word	0x0800eb3c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	0800eb3c 	.word	0x0800eb3c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000678:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800067c:	f000 b96a 	b.w	8000954 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	460c      	mov	r4, r1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d14e      	bne.n	8000742 <__udivmoddi4+0xaa>
 80006a4:	4694      	mov	ip, r2
 80006a6:	458c      	cmp	ip, r1
 80006a8:	4686      	mov	lr, r0
 80006aa:	fab2 f282 	clz	r2, r2
 80006ae:	d962      	bls.n	8000776 <__udivmoddi4+0xde>
 80006b0:	b14a      	cbz	r2, 80006c6 <__udivmoddi4+0x2e>
 80006b2:	f1c2 0320 	rsb	r3, r2, #32
 80006b6:	4091      	lsls	r1, r2
 80006b8:	fa20 f303 	lsr.w	r3, r0, r3
 80006bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c0:	4319      	orrs	r1, r3
 80006c2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ca:	fa1f f68c 	uxth.w	r6, ip
 80006ce:	fbb1 f4f7 	udiv	r4, r1, r7
 80006d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006d6:	fb07 1114 	mls	r1, r7, r4, r1
 80006da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006de:	fb04 f106 	mul.w	r1, r4, r6
 80006e2:	4299      	cmp	r1, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x64>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80006ee:	f080 8112 	bcs.w	8000916 <__udivmoddi4+0x27e>
 80006f2:	4299      	cmp	r1, r3
 80006f4:	f240 810f 	bls.w	8000916 <__udivmoddi4+0x27e>
 80006f8:	3c02      	subs	r4, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a59      	subs	r1, r3, r1
 80006fe:	fa1f f38e 	uxth.w	r3, lr
 8000702:	fbb1 f0f7 	udiv	r0, r1, r7
 8000706:	fb07 1110 	mls	r1, r7, r0, r1
 800070a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800070e:	fb00 f606 	mul.w	r6, r0, r6
 8000712:	429e      	cmp	r6, r3
 8000714:	d90a      	bls.n	800072c <__udivmoddi4+0x94>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800071e:	f080 80fc 	bcs.w	800091a <__udivmoddi4+0x282>
 8000722:	429e      	cmp	r6, r3
 8000724:	f240 80f9 	bls.w	800091a <__udivmoddi4+0x282>
 8000728:	4463      	add	r3, ip
 800072a:	3802      	subs	r0, #2
 800072c:	1b9b      	subs	r3, r3, r6
 800072e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000732:	2100      	movs	r1, #0
 8000734:	b11d      	cbz	r5, 800073e <__udivmoddi4+0xa6>
 8000736:	40d3      	lsrs	r3, r2
 8000738:	2200      	movs	r2, #0
 800073a:	e9c5 3200 	strd	r3, r2, [r5]
 800073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000742:	428b      	cmp	r3, r1
 8000744:	d905      	bls.n	8000752 <__udivmoddi4+0xba>
 8000746:	b10d      	cbz	r5, 800074c <__udivmoddi4+0xb4>
 8000748:	e9c5 0100 	strd	r0, r1, [r5]
 800074c:	2100      	movs	r1, #0
 800074e:	4608      	mov	r0, r1
 8000750:	e7f5      	b.n	800073e <__udivmoddi4+0xa6>
 8000752:	fab3 f183 	clz	r1, r3
 8000756:	2900      	cmp	r1, #0
 8000758:	d146      	bne.n	80007e8 <__udivmoddi4+0x150>
 800075a:	42a3      	cmp	r3, r4
 800075c:	d302      	bcc.n	8000764 <__udivmoddi4+0xcc>
 800075e:	4290      	cmp	r0, r2
 8000760:	f0c0 80f0 	bcc.w	8000944 <__udivmoddi4+0x2ac>
 8000764:	1a86      	subs	r6, r0, r2
 8000766:	eb64 0303 	sbc.w	r3, r4, r3
 800076a:	2001      	movs	r0, #1
 800076c:	2d00      	cmp	r5, #0
 800076e:	d0e6      	beq.n	800073e <__udivmoddi4+0xa6>
 8000770:	e9c5 6300 	strd	r6, r3, [r5]
 8000774:	e7e3      	b.n	800073e <__udivmoddi4+0xa6>
 8000776:	2a00      	cmp	r2, #0
 8000778:	f040 8090 	bne.w	800089c <__udivmoddi4+0x204>
 800077c:	eba1 040c 	sub.w	r4, r1, ip
 8000780:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000784:	fa1f f78c 	uxth.w	r7, ip
 8000788:	2101      	movs	r1, #1
 800078a:	fbb4 f6f8 	udiv	r6, r4, r8
 800078e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000792:	fb08 4416 	mls	r4, r8, r6, r4
 8000796:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800079a:	fb07 f006 	mul.w	r0, r7, r6
 800079e:	4298      	cmp	r0, r3
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0x11c>
 80007a2:	eb1c 0303 	adds.w	r3, ip, r3
 80007a6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x11a>
 80007ac:	4298      	cmp	r0, r3
 80007ae:	f200 80cd 	bhi.w	800094c <__udivmoddi4+0x2b4>
 80007b2:	4626      	mov	r6, r4
 80007b4:	1a1c      	subs	r4, r3, r0
 80007b6:	fa1f f38e 	uxth.w	r3, lr
 80007ba:	fbb4 f0f8 	udiv	r0, r4, r8
 80007be:	fb08 4410 	mls	r4, r8, r0, r4
 80007c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007c6:	fb00 f707 	mul.w	r7, r0, r7
 80007ca:	429f      	cmp	r7, r3
 80007cc:	d908      	bls.n	80007e0 <__udivmoddi4+0x148>
 80007ce:	eb1c 0303 	adds.w	r3, ip, r3
 80007d2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80007d6:	d202      	bcs.n	80007de <__udivmoddi4+0x146>
 80007d8:	429f      	cmp	r7, r3
 80007da:	f200 80b0 	bhi.w	800093e <__udivmoddi4+0x2a6>
 80007de:	4620      	mov	r0, r4
 80007e0:	1bdb      	subs	r3, r3, r7
 80007e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007e6:	e7a5      	b.n	8000734 <__udivmoddi4+0x9c>
 80007e8:	f1c1 0620 	rsb	r6, r1, #32
 80007ec:	408b      	lsls	r3, r1
 80007ee:	fa22 f706 	lsr.w	r7, r2, r6
 80007f2:	431f      	orrs	r7, r3
 80007f4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007f8:	fa04 f301 	lsl.w	r3, r4, r1
 80007fc:	ea43 030c 	orr.w	r3, r3, ip
 8000800:	40f4      	lsrs	r4, r6
 8000802:	fa00 f801 	lsl.w	r8, r0, r1
 8000806:	0c38      	lsrs	r0, r7, #16
 8000808:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800080c:	fbb4 fef0 	udiv	lr, r4, r0
 8000810:	fa1f fc87 	uxth.w	ip, r7
 8000814:	fb00 441e 	mls	r4, r0, lr, r4
 8000818:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800081c:	fb0e f90c 	mul.w	r9, lr, ip
 8000820:	45a1      	cmp	r9, r4
 8000822:	fa02 f201 	lsl.w	r2, r2, r1
 8000826:	d90a      	bls.n	800083e <__udivmoddi4+0x1a6>
 8000828:	193c      	adds	r4, r7, r4
 800082a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800082e:	f080 8084 	bcs.w	800093a <__udivmoddi4+0x2a2>
 8000832:	45a1      	cmp	r9, r4
 8000834:	f240 8081 	bls.w	800093a <__udivmoddi4+0x2a2>
 8000838:	f1ae 0e02 	sub.w	lr, lr, #2
 800083c:	443c      	add	r4, r7
 800083e:	eba4 0409 	sub.w	r4, r4, r9
 8000842:	fa1f f983 	uxth.w	r9, r3
 8000846:	fbb4 f3f0 	udiv	r3, r4, r0
 800084a:	fb00 4413 	mls	r4, r0, r3, r4
 800084e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000852:	fb03 fc0c 	mul.w	ip, r3, ip
 8000856:	45a4      	cmp	ip, r4
 8000858:	d907      	bls.n	800086a <__udivmoddi4+0x1d2>
 800085a:	193c      	adds	r4, r7, r4
 800085c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000860:	d267      	bcs.n	8000932 <__udivmoddi4+0x29a>
 8000862:	45a4      	cmp	ip, r4
 8000864:	d965      	bls.n	8000932 <__udivmoddi4+0x29a>
 8000866:	3b02      	subs	r3, #2
 8000868:	443c      	add	r4, r7
 800086a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800086e:	fba0 9302 	umull	r9, r3, r0, r2
 8000872:	eba4 040c 	sub.w	r4, r4, ip
 8000876:	429c      	cmp	r4, r3
 8000878:	46ce      	mov	lr, r9
 800087a:	469c      	mov	ip, r3
 800087c:	d351      	bcc.n	8000922 <__udivmoddi4+0x28a>
 800087e:	d04e      	beq.n	800091e <__udivmoddi4+0x286>
 8000880:	b155      	cbz	r5, 8000898 <__udivmoddi4+0x200>
 8000882:	ebb8 030e 	subs.w	r3, r8, lr
 8000886:	eb64 040c 	sbc.w	r4, r4, ip
 800088a:	fa04 f606 	lsl.w	r6, r4, r6
 800088e:	40cb      	lsrs	r3, r1
 8000890:	431e      	orrs	r6, r3
 8000892:	40cc      	lsrs	r4, r1
 8000894:	e9c5 6400 	strd	r6, r4, [r5]
 8000898:	2100      	movs	r1, #0
 800089a:	e750      	b.n	800073e <__udivmoddi4+0xa6>
 800089c:	f1c2 0320 	rsb	r3, r2, #32
 80008a0:	fa20 f103 	lsr.w	r1, r0, r3
 80008a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80008a8:	fa24 f303 	lsr.w	r3, r4, r3
 80008ac:	4094      	lsls	r4, r2
 80008ae:	430c      	orrs	r4, r1
 80008b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b4:	fa00 fe02 	lsl.w	lr, r0, r2
 80008b8:	fa1f f78c 	uxth.w	r7, ip
 80008bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008c0:	fb08 3110 	mls	r1, r8, r0, r3
 80008c4:	0c23      	lsrs	r3, r4, #16
 80008c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ca:	fb00 f107 	mul.w	r1, r0, r7
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d908      	bls.n	80008e4 <__udivmoddi4+0x24c>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80008da:	d22c      	bcs.n	8000936 <__udivmoddi4+0x29e>
 80008dc:	4299      	cmp	r1, r3
 80008de:	d92a      	bls.n	8000936 <__udivmoddi4+0x29e>
 80008e0:	3802      	subs	r0, #2
 80008e2:	4463      	add	r3, ip
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008ec:	fb08 3311 	mls	r3, r8, r1, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb01 f307 	mul.w	r3, r1, r7
 80008f8:	42a3      	cmp	r3, r4
 80008fa:	d908      	bls.n	800090e <__udivmoddi4+0x276>
 80008fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000900:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000904:	d213      	bcs.n	800092e <__udivmoddi4+0x296>
 8000906:	42a3      	cmp	r3, r4
 8000908:	d911      	bls.n	800092e <__udivmoddi4+0x296>
 800090a:	3902      	subs	r1, #2
 800090c:	4464      	add	r4, ip
 800090e:	1ae4      	subs	r4, r4, r3
 8000910:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000914:	e739      	b.n	800078a <__udivmoddi4+0xf2>
 8000916:	4604      	mov	r4, r0
 8000918:	e6f0      	b.n	80006fc <__udivmoddi4+0x64>
 800091a:	4608      	mov	r0, r1
 800091c:	e706      	b.n	800072c <__udivmoddi4+0x94>
 800091e:	45c8      	cmp	r8, r9
 8000920:	d2ae      	bcs.n	8000880 <__udivmoddi4+0x1e8>
 8000922:	ebb9 0e02 	subs.w	lr, r9, r2
 8000926:	eb63 0c07 	sbc.w	ip, r3, r7
 800092a:	3801      	subs	r0, #1
 800092c:	e7a8      	b.n	8000880 <__udivmoddi4+0x1e8>
 800092e:	4631      	mov	r1, r6
 8000930:	e7ed      	b.n	800090e <__udivmoddi4+0x276>
 8000932:	4603      	mov	r3, r0
 8000934:	e799      	b.n	800086a <__udivmoddi4+0x1d2>
 8000936:	4630      	mov	r0, r6
 8000938:	e7d4      	b.n	80008e4 <__udivmoddi4+0x24c>
 800093a:	46d6      	mov	lr, sl
 800093c:	e77f      	b.n	800083e <__udivmoddi4+0x1a6>
 800093e:	4463      	add	r3, ip
 8000940:	3802      	subs	r0, #2
 8000942:	e74d      	b.n	80007e0 <__udivmoddi4+0x148>
 8000944:	4606      	mov	r6, r0
 8000946:	4623      	mov	r3, r4
 8000948:	4608      	mov	r0, r1
 800094a:	e70f      	b.n	800076c <__udivmoddi4+0xd4>
 800094c:	3e02      	subs	r6, #2
 800094e:	4463      	add	r3, ip
 8000950:	e730      	b.n	80007b4 <__udivmoddi4+0x11c>
 8000952:	bf00      	nop

08000954 <__aeabi_idiv0>:
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <ADXL343_Init>:
#define TAP_LATENT 0xC8 											// taping latency 250ms


//Function to initialize the accelerometer

int ADXL343_Init(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
	uint8_t id = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	71fb      	strb	r3, [r7, #7]

	// read the id of peripherique and check if is equal 0xE5
	ADXL343_ReadRegister(ADXL343_REG_DEVID, &id, 1);
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	2201      	movs	r2, #1
 8000966:	4619      	mov	r1, r3
 8000968:	2000      	movs	r0, #0
 800096a:	f000 f857 	bl	8000a1c <ADXL343_ReadRegister>

	if (id != 0xE5) {
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2be5      	cmp	r3, #229	@ 0xe5
 8000972:	d006      	beq.n	8000982 <ADXL343_Init+0x2a>

		printf("ADXL343 no detected ! ID: %02X\r\n", id);
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	4619      	mov	r1, r3
 8000978:	4815      	ldr	r0, [pc, #84]	@ (80009d0 <ADXL343_Init+0x78>)
 800097a:	f00c ffaf 	bl	800d8dc <iprintf>
		return 1;
 800097e:	2301      	movs	r3, #1
 8000980:	e022      	b.n	80009c8 <ADXL343_Init+0x70>
	}
	/* Tasks creations */
	ADXL343_TaskCreate(NULL);
 8000982:	2000      	movs	r0, #0
 8000984:	f000 f8ba 	bl	8000afc <ADXL343_TaskCreate>

	/* Configuration of registers */

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2110      	movs	r1, #16
 800098c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000990:	f003 fd34 	bl	80043fc <HAL_GPIO_WritePin>
	ADXL343_WriteRegister(ADXL343_REG_POWER_CTL, 0x04); 			// init the power control (sleep)
 8000994:	2104      	movs	r1, #4
 8000996:	202d      	movs	r0, #45	@ 0x2d
 8000998:	f000 f86e 	bl	8000a78 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_DATA_FORMAT, 0x08);  			// establish format for data :full resolution and ±2g ->0x08, 16g ->0x0B
 800099c:	2108      	movs	r1, #8
 800099e:	2031      	movs	r0, #49	@ 0x31
 80009a0:	f000 f86a 	bl	8000a78 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_BW_RATE, 0X0B);
 80009a4:	210b      	movs	r1, #11
 80009a6:	202c      	movs	r0, #44	@ 0x2c
 80009a8:	f000 f866 	bl	8000a78 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_POWER_CTL, 0x08);  			// measurement mode of power control (active)
 80009ac:	2108      	movs	r1, #8
 80009ae:	202d      	movs	r0, #45	@ 0x2d
 80009b0:	f000 f862 	bl	8000a78 <ADXL343_WriteRegister>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); 			// Desactiver NSS
 80009b4:	2201      	movs	r2, #1
 80009b6:	2110      	movs	r1, #16
 80009b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009bc:	f003 fd1e 	bl	80043fc <HAL_GPIO_WritePin>


	printf("Initialization done\r\n");
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <ADXL343_Init+0x7c>)
 80009c2:	f00c fff3 	bl	800d9ac <puts>
	return 0;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	0800eb54 	.word	0x0800eb54
 80009d4:	0800eb78 	.word	0x0800eb78

080009d8 <ADXL343_Configure>:

//Function to configure the accelerometer
void ADXL343_Configure(void){
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	ADXL343_WriteRegister(ADXL343_REG_THRESH_TAP, TAP_THRESHOLD);  	// Set tap threshold : 2g ou 16g
 80009dc:	2160      	movs	r1, #96	@ 0x60
 80009de:	201d      	movs	r0, #29
 80009e0:	f000 f84a 	bl	8000a78 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_DUR, TAP_DURATION);         	// Set tap duration : 10ms
 80009e4:	2110      	movs	r1, #16
 80009e6:	2021      	movs	r0, #33	@ 0x21
 80009e8:	f000 f846 	bl	8000a78 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_LATENT, TAP_LATENT);
 80009ec:	21c8      	movs	r1, #200	@ 0xc8
 80009ee:	2022      	movs	r0, #34	@ 0x22
 80009f0:	f000 f842 	bl	8000a78 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_TAP_AXES, 0x07);				// Enable axe X Y Z for tap
 80009f4:	2107      	movs	r1, #7
 80009f6:	202a      	movs	r0, #42	@ 0x2a
 80009f8:	f000 f83e 	bl	8000a78 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_INT_ENABLE, 0x40);			// Enable interruption for single tap
 80009fc:	2140      	movs	r1, #64	@ 0x40
 80009fe:	202e      	movs	r0, #46	@ 0x2e
 8000a00:	f000 f83a 	bl	8000a78 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_INT_MAP, 0x40);				// Enable interruption on pin INT1
 8000a04:	2140      	movs	r1, #64	@ 0x40
 8000a06:	202f      	movs	r0, #47	@ 0x2f
 8000a08:	f000 f836 	bl	8000a78 <ADXL343_WriteRegister>
	printf("Configuration done\r\n");
 8000a0c:	4802      	ldr	r0, [pc, #8]	@ (8000a18 <ADXL343_Configure+0x40>)
 8000a0e:	f00c ffcd 	bl	800d9ac <puts>

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	0800eb90 	.word	0x0800eb90

08000a1c <ADXL343_ReadRegister>:

// Function to read from a register
void ADXL343_ReadRegister(uint8_t reg, int8_t* rx_data, size_t length) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	73fb      	strb	r3, [r7, #15]

	uint8_t tx_data = reg | 0x80; // MSB = 1 pour la lecture
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); 			// Activer NSS
 8000a34:	2200      	movs	r2, #0
 8000a36:	2110      	movs	r1, #16
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3c:	f003 fcde 	bl	80043fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &tx_data, 1, HAL_MAX_DELAY); 			// Envoyer l'adresse
 8000a40:	f107 0117 	add.w	r1, r7, #23
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a48:	2201      	movs	r2, #1
 8000a4a:	480a      	ldr	r0, [pc, #40]	@ (8000a74 <ADXL343_ReadRegister+0x58>)
 8000a4c:	f004 fefd 	bl	800584a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)rx_data, 1, HAL_MAX_DELAY);  	// Lire la donnée
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a54:	2201      	movs	r2, #1
 8000a56:	68b9      	ldr	r1, [r7, #8]
 8000a58:	4806      	ldr	r0, [pc, #24]	@ (8000a74 <ADXL343_ReadRegister+0x58>)
 8000a5a:	f005 f86c 	bl	8005b36 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   			// Désactiver NSS
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2110      	movs	r1, #16
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a66:	f003 fcc9 	bl	80043fc <HAL_GPIO_WritePin>


	//HAL_SPI_TransmitReceive(hspi, pTxData, pRxData, Size, Timeout); // a utiliser quand NSS hardware ioc enable
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20001a20 	.word	0x20001a20

08000a78 <ADXL343_WriteRegister>:


//Function to write in the register
void ADXL343_WriteRegister(uint8_t reg, uint8_t data) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	71fb      	strb	r3, [r7, #7]
 8000a84:	4613      	mov	r3, r2
 8000a86:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = reg;	//register
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	733b      	strb	r3, [r7, #12]
	buffer[1] = data;	//data
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); 			// enable NSS (PA4)
 8000a90:	2200      	movs	r2, #0
 8000a92:	2110      	movs	r1, #16
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a98:	f003 fcb0 	bl	80043fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, buffer, 2, HAL_MAX_DELAY); 			// Send data thanks to SPI
 8000a9c:	f107 010c 	add.w	r1, r7, #12
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	4806      	ldr	r0, [pc, #24]	@ (8000ac0 <ADXL343_WriteRegister+0x48>)
 8000aa8:	f004 fecf 	bl	800584a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); 			// disable NSS (PA4)
 8000aac:	2201      	movs	r2, #1
 8000aae:	2110      	movs	r1, #16
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab4:	f003 fca2 	bl	80043fc <HAL_GPIO_WritePin>
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20001a20 	.word	0x20001a20

08000ac4 <ADXL343_Task>:

	printf("calibration done offset x : %i, y : %i, z :%i\r\n", offsetx, offsety, offsetz);
}

void ADXL343_Task(void*unused )
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		int8_t tap_status;
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); //Renvoie la valeur du registre int_source
 8000acc:	f107 030f 	add.w	r3, r7, #15
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	2030      	movs	r0, #48	@ 0x30
 8000ad6:	f7ff ffa1 	bl	8000a1c <ADXL343_ReadRegister>

		if (tap_status & (1<<6)) {  // Tap for single tap
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d0f1      	beq.n	8000acc <ADXL343_Task+0x8>
			printf("Tap detected by Task!\r\n");
 8000ae8:	4803      	ldr	r0, [pc, #12]	@ (8000af8 <ADXL343_Task+0x34>)
 8000aea:	f00c ff5f 	bl	800d9ac <puts>
			/******* Ajouter la tache pour changer d'état********/
			vTaskDelay(1);
 8000aee:	2001      	movs	r0, #1
 8000af0:	f00a f91a 	bl	800ad28 <vTaskDelay>
	{
 8000af4:	e7ea      	b.n	8000acc <ADXL343_Task+0x8>
 8000af6:	bf00      	nop
 8000af8:	0800ebf8 	.word	0x0800ebf8

08000afc <ADXL343_TaskCreate>:


}

void ADXL343_TaskCreate(void * unused)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	6078      	str	r0, [r7, #4]
	xTaskCreate(ADXL343_Task, "tache ADXL343", 128, NULL, 256, NULL);
 8000b04:	2300      	movs	r3, #0
 8000b06:	9301      	str	r3, [sp, #4]
 8000b08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2300      	movs	r3, #0
 8000b10:	2280      	movs	r2, #128	@ 0x80
 8000b12:	4904      	ldr	r1, [pc, #16]	@ (8000b24 <ADXL343_TaskCreate+0x28>)
 8000b14:	4804      	ldr	r0, [pc, #16]	@ (8000b28 <ADXL343_TaskCreate+0x2c>)
 8000b16:	f009 ffb7 	bl	800aa88 <xTaskCreate>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	0800ec10 	.word	0x0800ec10
 8000b28:	08000ac5 	.word	0x08000ac5

08000b2c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08c      	sub	sp, #48	@ 0x30
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2220      	movs	r2, #32
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f00c ffc3 	bl	800dad0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000b4c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b52:	4b38      	ldr	r3, [pc, #224]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000b54:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b5a:	4b36      	ldr	r3, [pc, #216]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b60:	4b34      	ldr	r3, [pc, #208]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000b66:	4b33      	ldr	r3, [pc, #204]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b6c:	4b31      	ldr	r3, [pc, #196]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b72:	4b30      	ldr	r3, [pc, #192]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000b74:	2204      	movs	r2, #4
 8000b76:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b78:	4b2e      	ldr	r3, [pc, #184]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000b84:	4b2b      	ldr	r3, [pc, #172]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000b86:	2202      	movs	r2, #2
 8000b88:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000b92:	4b28      	ldr	r3, [pc, #160]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000b94:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000b98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b9a:	4b26      	ldr	r3, [pc, #152]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000b9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ba0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ba2:	4b24      	ldr	r3, [pc, #144]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000baa:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000bb0:	4b20      	ldr	r3, [pc, #128]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bb8:	481e      	ldr	r0, [pc, #120]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000bba:	f001 ff2b 	bl	8002a14 <HAL_ADC_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000bc4:	f000 fdd6 	bl	8001774 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4818      	ldr	r0, [pc, #96]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000bd4:	f002 fe9a 	bl	800390c <HAL_ADCEx_MultiModeConfigChannel>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000bde:	f000 fdc9 	bl	8001774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <MX_ADC1_Init+0x10c>)
 8000be4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be6:	2306      	movs	r3, #6
 8000be8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000bea:	2304      	movs	r3, #4
 8000bec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bee:	237f      	movs	r3, #127	@ 0x7f
 8000bf0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000c00:	f002 f954 	bl	8002eac <HAL_ADC_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000c0a:	f000 fdb3 	bl	8001774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <MX_ADC1_Init+0x110>)
 8000c10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c12:	230c      	movs	r3, #12
 8000c14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	@ (8000c34 <MX_ADC1_Init+0x108>)
 8000c1c:	f002 f946 	bl	8002eac <HAL_ADC_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000c26:	f000 fda5 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	3730      	adds	r7, #48	@ 0x30
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000090 	.word	0x20000090
 8000c38:	14f00020 	.word	0x14f00020
 8000c3c:	2e300800 	.word	0x2e300800

08000c40 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c46:	463b      	mov	r3, r7
 8000c48:	2220      	movs	r2, #32
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f00c ff3f 	bl	800dad0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c52:	4b33      	ldr	r3, [pc, #204]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000c54:	4a33      	ldr	r2, [pc, #204]	@ (8000d24 <MX_ADC2_Init+0xe4>)
 8000c56:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c58:	4b31      	ldr	r3, [pc, #196]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000c5a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c5e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c60:	4b2f      	ldr	r3, [pc, #188]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c66:	4b2e      	ldr	r3, [pc, #184]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c72:	4b2b      	ldr	r3, [pc, #172]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c78:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c7e:	4b28      	ldr	r3, [pc, #160]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c84:	4b26      	ldr	r3, [pc, #152]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000c8a:	4b25      	ldr	r3, [pc, #148]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c90:	4b23      	ldr	r3, [pc, #140]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000c98:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000c9a:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000ca2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cbe:	4818      	ldr	r0, [pc, #96]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000cc0:	f001 fea8 	bl	8002a14 <HAL_ADC_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000cca:	f000 fd53 	bl	8001774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000cce:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <MX_ADC2_Init+0xe8>)
 8000cd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd2:	2306      	movs	r3, #6
 8000cd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cda:	237f      	movs	r3, #127	@ 0x7f
 8000cdc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cde:	2304      	movs	r3, #4
 8000ce0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480d      	ldr	r0, [pc, #52]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000cec:	f002 f8de 	bl	8002eac <HAL_ADC_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000cf6:	f000 fd3d 	bl	8001774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <MX_ADC2_Init+0xec>)
 8000cfc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cfe:	230c      	movs	r3, #12
 8000d00:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	@ (8000d20 <MX_ADC2_Init+0xe0>)
 8000d08:	f002 f8d0 	bl	8002eac <HAL_ADC_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8000d12:	f000 fd2f 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3720      	adds	r7, #32
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200000fc 	.word	0x200000fc
 8000d24:	50000100 	.word	0x50000100
 8000d28:	32601000 	.word	0x32601000
 8000d2c:	3ef08000 	.word	0x3ef08000

08000d30 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b09c      	sub	sp, #112	@ 0x70
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d48:	f107 0318 	add.w	r3, r7, #24
 8000d4c:	2244      	movs	r2, #68	@ 0x44
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f00c febd 	bl	800dad0 <memset>
  if(adcHandle->Instance==ADC1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d5e:	d16a      	bne.n	8000e36 <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d64:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d66:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d6a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6c:	f107 0318 	add.w	r3, r7, #24
 8000d70:	4618      	mov	r0, r3
 8000d72:	f004 facf 	bl	8005314 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d7c:	f000 fcfa 	bl	8001774 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d80:	4b66      	ldr	r3, [pc, #408]	@ (8000f1c <HAL_ADC_MspInit+0x1ec>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3301      	adds	r3, #1
 8000d86:	4a65      	ldr	r2, [pc, #404]	@ (8000f1c <HAL_ADC_MspInit+0x1ec>)
 8000d88:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d8a:	4b64      	ldr	r3, [pc, #400]	@ (8000f1c <HAL_ADC_MspInit+0x1ec>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d10b      	bne.n	8000daa <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d92:	4b63      	ldr	r3, [pc, #396]	@ (8000f20 <HAL_ADC_MspInit+0x1f0>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	4a62      	ldr	r2, [pc, #392]	@ (8000f20 <HAL_ADC_MspInit+0x1f0>)
 8000d98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9e:	4b60      	ldr	r3, [pc, #384]	@ (8000f20 <HAL_ADC_MspInit+0x1f0>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	4b5d      	ldr	r3, [pc, #372]	@ (8000f20 <HAL_ADC_MspInit+0x1f0>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	4a5c      	ldr	r2, [pc, #368]	@ (8000f20 <HAL_ADC_MspInit+0x1f0>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db6:	4b5a      	ldr	r3, [pc, #360]	@ (8000f20 <HAL_ADC_MspInit+0x1f0>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CAPTEUR_DIST_N_Pin|CAPTEUR_DIST_W_Pin;
 8000dc2:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000dc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4853      	ldr	r0, [pc, #332]	@ (8000f24 <HAL_ADC_MspInit+0x1f4>)
 8000dd8:	f003 f98e 	bl	80040f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8000ddc:	4b52      	ldr	r3, [pc, #328]	@ (8000f28 <HAL_ADC_MspInit+0x1f8>)
 8000dde:	4a53      	ldr	r2, [pc, #332]	@ (8000f2c <HAL_ADC_MspInit+0x1fc>)
 8000de0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000de2:	4b51      	ldr	r3, [pc, #324]	@ (8000f28 <HAL_ADC_MspInit+0x1f8>)
 8000de4:	2205      	movs	r2, #5
 8000de6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de8:	4b4f      	ldr	r3, [pc, #316]	@ (8000f28 <HAL_ADC_MspInit+0x1f8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dee:	4b4e      	ldr	r3, [pc, #312]	@ (8000f28 <HAL_ADC_MspInit+0x1f8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000df4:	4b4c      	ldr	r3, [pc, #304]	@ (8000f28 <HAL_ADC_MspInit+0x1f8>)
 8000df6:	2280      	movs	r2, #128	@ 0x80
 8000df8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dfa:	4b4b      	ldr	r3, [pc, #300]	@ (8000f28 <HAL_ADC_MspInit+0x1f8>)
 8000dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e02:	4b49      	ldr	r3, [pc, #292]	@ (8000f28 <HAL_ADC_MspInit+0x1f8>)
 8000e04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e0a:	4b47      	ldr	r3, [pc, #284]	@ (8000f28 <HAL_ADC_MspInit+0x1f8>)
 8000e0c:	2220      	movs	r2, #32
 8000e0e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e10:	4b45      	ldr	r3, [pc, #276]	@ (8000f28 <HAL_ADC_MspInit+0x1f8>)
 8000e12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e18:	4843      	ldr	r0, [pc, #268]	@ (8000f28 <HAL_ADC_MspInit+0x1f8>)
 8000e1a:	f002 fefb 	bl	8003c14 <HAL_DMA_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000e24:	f000 fca6 	bl	8001774 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a3f      	ldr	r2, [pc, #252]	@ (8000f28 <HAL_ADC_MspInit+0x1f8>)
 8000e2c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e2e:	4a3e      	ldr	r2, [pc, #248]	@ (8000f28 <HAL_ADC_MspInit+0x1f8>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000e34:	e06e      	b.n	8000f14 <HAL_ADC_MspInit+0x1e4>
  else if(adcHandle->Instance==ADC2)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a3d      	ldr	r2, [pc, #244]	@ (8000f30 <HAL_ADC_MspInit+0x200>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d169      	bne.n	8000f14 <HAL_ADC_MspInit+0x1e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e46:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e4a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4c:	f107 0318 	add.w	r3, r7, #24
 8000e50:	4618      	mov	r0, r3
 8000e52:	f004 fa5f 	bl	8005314 <HAL_RCCEx_PeriphCLKConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 8000e5c:	f000 fc8a 	bl	8001774 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e60:	4b2e      	ldr	r3, [pc, #184]	@ (8000f1c <HAL_ADC_MspInit+0x1ec>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3301      	adds	r3, #1
 8000e66:	4a2d      	ldr	r2, [pc, #180]	@ (8000f1c <HAL_ADC_MspInit+0x1ec>)
 8000e68:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f1c <HAL_ADC_MspInit+0x1ec>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d10b      	bne.n	8000e8a <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e72:	4b2b      	ldr	r3, [pc, #172]	@ (8000f20 <HAL_ADC_MspInit+0x1f0>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	4a2a      	ldr	r2, [pc, #168]	@ (8000f20 <HAL_ADC_MspInit+0x1f0>)
 8000e78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7e:	4b28      	ldr	r3, [pc, #160]	@ (8000f20 <HAL_ADC_MspInit+0x1f0>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	4b25      	ldr	r3, [pc, #148]	@ (8000f20 <HAL_ADC_MspInit+0x1f0>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	4a24      	ldr	r2, [pc, #144]	@ (8000f20 <HAL_ADC_MspInit+0x1f0>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e96:	4b22      	ldr	r3, [pc, #136]	@ (8000f20 <HAL_ADC_MspInit+0x1f0>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CAPTEUR_DIST_S_Pin|CAPTEUR_DIST_E_Pin;
 8000ea2:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000ea6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	481b      	ldr	r0, [pc, #108]	@ (8000f24 <HAL_ADC_MspInit+0x1f4>)
 8000eb8:	f003 f91e 	bl	80040f8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel1;
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <HAL_ADC_MspInit+0x204>)
 8000ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8000f38 <HAL_ADC_MspInit+0x208>)
 8000ec0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f34 <HAL_ADC_MspInit+0x204>)
 8000ec4:	2224      	movs	r2, #36	@ 0x24
 8000ec6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <HAL_ADC_MspInit+0x204>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ece:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <HAL_ADC_MspInit+0x204>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <HAL_ADC_MspInit+0x204>)
 8000ed6:	2280      	movs	r2, #128	@ 0x80
 8000ed8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000eda:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <HAL_ADC_MspInit+0x204>)
 8000edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ee0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <HAL_ADC_MspInit+0x204>)
 8000ee4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ee8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000eea:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <HAL_ADC_MspInit+0x204>)
 8000eec:	2220      	movs	r2, #32
 8000eee:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <HAL_ADC_MspInit+0x204>)
 8000ef2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ef6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000ef8:	480e      	ldr	r0, [pc, #56]	@ (8000f34 <HAL_ADC_MspInit+0x204>)
 8000efa:	f002 fe8b 	bl	8003c14 <HAL_DMA_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_ADC_MspInit+0x1d8>
      Error_Handler();
 8000f04:	f000 fc36 	bl	8001774 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <HAL_ADC_MspInit+0x204>)
 8000f0c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f0e:	4a09      	ldr	r2, [pc, #36]	@ (8000f34 <HAL_ADC_MspInit+0x204>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000f14:	bf00      	nop
 8000f16:	3770      	adds	r7, #112	@ 0x70
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000228 	.word	0x20000228
 8000f20:	40021000 	.word	0x40021000
 8000f24:	48000400 	.word	0x48000400
 8000f28:	20000168 	.word	0x20000168
 8000f2c:	4002001c 	.word	0x4002001c
 8000f30:	50000100 	.word	0x50000100
 8000f34:	200001c8 	.word	0x200001c8
 8000f38:	40020008 	.word	0x40020008

08000f3c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4a07      	ldr	r2, [pc, #28]	@ (8000f68 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	4a06      	ldr	r2, [pc, #24]	@ (8000f6c <vApplicationGetIdleTaskMemory+0x30>)
 8000f52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2280      	movs	r2, #128	@ 0x80
 8000f58:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	200004d0 	.word	0x200004d0
 8000f6c:	20000570 	.word	0x20000570

08000f70 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4a07      	ldr	r2, [pc, #28]	@ (8000f9c <vApplicationGetTimerTaskMemory+0x2c>)
 8000f80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	4a06      	ldr	r2, [pc, #24]	@ (8000fa0 <vApplicationGetTimerTaskMemory+0x30>)
 8000f86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f8e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	20000770 	.word	0x20000770
 8000fa0:	20000810 	.word	0x20000810

08000fa4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000fa4:	b5b0      	push	{r4, r5, r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <MX_FREERTOS_Init+0x30>)
 8000fac:	1d3c      	adds	r4, r7, #4
 8000fae:	461d      	mov	r5, r3
 8000fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f008 fef6 	bl	8009db2 <osThreadCreate>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a03      	ldr	r2, [pc, #12]	@ (8000fd8 <MX_FREERTOS_Init+0x34>)
 8000fca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000fcc:	bf00      	nop
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd4:	0800ec2c 	.word	0x0800ec2c
 8000fd8:	2000022c 	.word	0x2000022c

08000fdc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f008 ff30 	bl	8009e4a <osDelay>
 8000fea:	e7fb      	b.n	8000fe4 <StartDefaultTask+0x8>

08000fec <distSensor_initADC_DMA>:
uint32_t value_sud; 				// Valeur de sud (ADC2 Channel 12)


// function to init ADC1 and ADC2 (DMA)
void distSensor_initADC_DMA(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	distSensor_TaskCreate(NULL);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f000 f8d3 	bl	800119c <distSensor_TaskCreate>


	HAL_ADC_Start_DMA(&hadc1, adc1_dma_buffer, ADC1_CHANNEL_COUNT);
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	4906      	ldr	r1, [pc, #24]	@ (8001014 <distSensor_initADC_DMA+0x28>)
 8000ffa:	4807      	ldr	r0, [pc, #28]	@ (8001018 <distSensor_initADC_DMA+0x2c>)
 8000ffc:	f001 fe8e 	bl	8002d1c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, adc2_dma_buffer, ADC2_CHANNEL_COUNT);
 8001000:	2202      	movs	r2, #2
 8001002:	4906      	ldr	r1, [pc, #24]	@ (800101c <distSensor_initADC_DMA+0x30>)
 8001004:	4806      	ldr	r0, [pc, #24]	@ (8001020 <distSensor_initADC_DMA+0x34>)
 8001006:	f001 fe89 	bl	8002d1c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim6);
 800100a:	4806      	ldr	r0, [pc, #24]	@ (8001024 <distSensor_initADC_DMA+0x38>)
 800100c:	f005 fafe 	bl	800660c <HAL_TIM_Base_Start>


}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000c14 	.word	0x20000c14
 8001018:	20000090 	.word	0x20000090
 800101c:	20000c1c 	.word	0x20000c1c
 8001020:	200000fc 	.word	0x200000fc
 8001024:	20001bb8 	.word	0x20001bb8

08001028 <distSensor_ReadADC_DMA>:
	return adc_value;   // Return the ADC value
}

// Function to read value on ADC1 and ADC2 (DMA)
uint32_t distSensor_ReadADC_DMA(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
	value_west = adc1_dma_buffer[0];    		// Valeur de west (ADC1 Channel 5)
 800102c:	4b20      	ldr	r3, [pc, #128]	@ (80010b0 <distSensor_ReadADC_DMA+0x88>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a20      	ldr	r2, [pc, #128]	@ (80010b4 <distSensor_ReadADC_DMA+0x8c>)
 8001032:	6013      	str	r3, [r2, #0]
	value_nord = adc1_dma_buffer[1];   			// Valeur de nord (ADC1 Channel 11)
 8001034:	4b1e      	ldr	r3, [pc, #120]	@ (80010b0 <distSensor_ReadADC_DMA+0x88>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	4a1f      	ldr	r2, [pc, #124]	@ (80010b8 <distSensor_ReadADC_DMA+0x90>)
 800103a:	6013      	str	r3, [r2, #0]
	value_est = adc2_dma_buffer[0];   			// Valeur de est (ADC2 Channel 15)
 800103c:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <distSensor_ReadADC_DMA+0x94>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a1f      	ldr	r2, [pc, #124]	@ (80010c0 <distSensor_ReadADC_DMA+0x98>)
 8001042:	6013      	str	r3, [r2, #0]
	value_sud = adc2_dma_buffer[1];   			// Valeur de sud (ADC2 Channel 12)
 8001044:	4b1d      	ldr	r3, [pc, #116]	@ (80010bc <distSensor_ReadADC_DMA+0x94>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	4a1e      	ldr	r2, [pc, #120]	@ (80010c4 <distSensor_ReadADC_DMA+0x9c>)
 800104a:	6013      	str	r3, [r2, #0]

	if (adc_ready_adc1_west == 1)
 800104c:	4b1e      	ldr	r3, [pc, #120]	@ (80010c8 <distSensor_ReadADC_DMA+0xa0>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b01      	cmp	r3, #1
 8001054:	d105      	bne.n	8001062 <distSensor_ReadADC_DMA+0x3a>
	{
		adc_ready_adc1_west = 0;
 8001056:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <distSensor_ReadADC_DMA+0xa0>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
		return value_est;
 800105c:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <distSensor_ReadADC_DMA+0x98>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	e021      	b.n	80010a6 <distSensor_ReadADC_DMA+0x7e>
	}

	else if (adc_ready_adc1_nord == 1)
 8001062:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <distSensor_ReadADC_DMA+0xa4>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b01      	cmp	r3, #1
 800106a:	d105      	bne.n	8001078 <distSensor_ReadADC_DMA+0x50>
	{
		adc_ready_adc1_nord = 0;
 800106c:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <distSensor_ReadADC_DMA+0xa4>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
		return value_nord;
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <distSensor_ReadADC_DMA+0x90>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	e016      	b.n	80010a6 <distSensor_ReadADC_DMA+0x7e>
	}

	if (adc_ready_adc2_est == 1)
 8001078:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <distSensor_ReadADC_DMA+0xa8>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d105      	bne.n	800108e <distSensor_ReadADC_DMA+0x66>
	{
		adc_ready_adc2_est = 0;
 8001082:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <distSensor_ReadADC_DMA+0xa8>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
		return value_est;
 8001088:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <distSensor_ReadADC_DMA+0x98>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	e00b      	b.n	80010a6 <distSensor_ReadADC_DMA+0x7e>
	}

	if (adc_ready_adc2_sud == 1)
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <distSensor_ReadADC_DMA+0xac>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b01      	cmp	r3, #1
 8001096:	d105      	bne.n	80010a4 <distSensor_ReadADC_DMA+0x7c>
	{
		adc_ready_adc2_sud = 0;
 8001098:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <distSensor_ReadADC_DMA+0xac>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
		return value_sud;
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <distSensor_ReadADC_DMA+0x9c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	e000      	b.n	80010a6 <distSensor_ReadADC_DMA+0x7e>
	}

	else{
		return 1;
 80010a4:	2301      	movs	r3, #1
	}




}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	20000c14 	.word	0x20000c14
 80010b4:	20000c24 	.word	0x20000c24
 80010b8:	20000c28 	.word	0x20000c28
 80010bc:	20000c1c 	.word	0x20000c1c
 80010c0:	20000c2c 	.word	0x20000c2c
 80010c4:	20000c30 	.word	0x20000c30
 80010c8:	20000c10 	.word	0x20000c10
 80010cc:	20000c11 	.word	0x20000c11
 80010d0:	20000c13 	.word	0x20000c13
 80010d4:	20000c12 	.word	0x20000c12

080010d8 <HAL_ADC_ConvCpltCallback>:



//Call Back for ADC1 and ADC2
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010e8:	d110      	bne.n	800110c <HAL_ADC_ConvCpltCallback+0x34>
	{

		if (value_west < 1000 )
 80010ea:	4b16      	ldr	r3, [pc, #88]	@ (8001144 <HAL_ADC_ConvCpltCallback+0x6c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010f2:	d203      	bcs.n	80010fc <HAL_ADC_ConvCpltCallback+0x24>
		{
			adc_ready_adc1_west = 1;
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <HAL_ADC_ConvCpltCallback+0x70>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e007      	b.n	800110c <HAL_ADC_ConvCpltCallback+0x34>
		}
		else if (value_nord <1000)
 80010fc:	4b13      	ldr	r3, [pc, #76]	@ (800114c <HAL_ADC_ConvCpltCallback+0x74>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001104:	d202      	bcs.n	800110c <HAL_ADC_ConvCpltCallback+0x34>
		{
			adc_ready_adc1_nord = 1;
 8001106:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <HAL_ADC_ConvCpltCallback+0x78>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
		}

	}

	if (hadc->Instance == ADC2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a10      	ldr	r2, [pc, #64]	@ (8001154 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d110      	bne.n	8001138 <HAL_ADC_ConvCpltCallback+0x60>
	{
		if (value_sud < 1000 )
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x80>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800111e:	d203      	bcs.n	8001128 <HAL_ADC_ConvCpltCallback+0x50>
		{
			adc_ready_adc2_sud = 1;
 8001120:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <HAL_ADC_ConvCpltCallback+0x84>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
		{
			adc_ready_adc2_est = 1;
		}

	}
}
 8001126:	e007      	b.n	8001138 <HAL_ADC_ConvCpltCallback+0x60>
		else if (value_est <1000)
 8001128:	4b0d      	ldr	r3, [pc, #52]	@ (8001160 <HAL_ADC_ConvCpltCallback+0x88>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001130:	d202      	bcs.n	8001138 <HAL_ADC_ConvCpltCallback+0x60>
			adc_ready_adc2_est = 1;
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	20000c24 	.word	0x20000c24
 8001148:	20000c10 	.word	0x20000c10
 800114c:	20000c28 	.word	0x20000c28
 8001150:	20000c11 	.word	0x20000c11
 8001154:	50000100 	.word	0x50000100
 8001158:	20000c30 	.word	0x20000c30
 800115c:	20000c12 	.word	0x20000c12
 8001160:	20000c2c 	.word	0x20000c2c
 8001164:	20000c13 	.word	0x20000c13

08001168 <distSensor_Task>:



//
void distSensor_Task(void *unused){
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	for (;;){
		uint32_t distance = distSensor_ReadADC_DMA();
 8001170:	f7ff ff5a 	bl	8001028 <distSensor_ReadADC_DMA>
 8001174:	60f8      	str	r0, [r7, #12]

		if (distance == 1){
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d103      	bne.n	8001184 <distSensor_Task+0x1c>
			printf("error\r\n");
 800117c:	4805      	ldr	r0, [pc, #20]	@ (8001194 <distSensor_Task+0x2c>)
 800117e:	f00c fc15 	bl	800d9ac <puts>
 8001182:	e003      	b.n	800118c <distSensor_Task+0x24>
		}
		else {

			printf("Tache Capteur detect vide, %lu\r\n",distance );
 8001184:	68f9      	ldr	r1, [r7, #12]
 8001186:	4804      	ldr	r0, [pc, #16]	@ (8001198 <distSensor_Task+0x30>)
 8001188:	f00c fba8 	bl	800d8dc <iprintf>
		}
		vTaskDelay(100);
 800118c:	2064      	movs	r0, #100	@ 0x64
 800118e:	f009 fdcb 	bl	800ad28 <vTaskDelay>
	for (;;){
 8001192:	e7ed      	b.n	8001170 <distSensor_Task+0x8>
 8001194:	0800ec48 	.word	0x0800ec48
 8001198:	0800ec50 	.word	0x0800ec50

0800119c <distSensor_TaskCreate>:


	}
}

void distSensor_TaskCreate(void*unused){
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	6078      	str	r0, [r7, #4]
	xTaskCreate(distSensor_Task, "distSensor_task", 128, NULL, 23, NULL);
 80011a4:	2300      	movs	r3, #0
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	2317      	movs	r3, #23
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2300      	movs	r3, #0
 80011ae:	2280      	movs	r2, #128	@ 0x80
 80011b0:	4903      	ldr	r1, [pc, #12]	@ (80011c0 <distSensor_TaskCreate+0x24>)
 80011b2:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <distSensor_TaskCreate+0x28>)
 80011b4:	f009 fc68 	bl	800aa88 <xTaskCreate>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	0800ec74 	.word	0x0800ec74
 80011c4:	08001169 	.word	0x08001169

080011c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011ce:	4b16      	ldr	r3, [pc, #88]	@ (8001228 <MX_DMA_Init+0x60>)
 80011d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011d2:	4a15      	ldr	r2, [pc, #84]	@ (8001228 <MX_DMA_Init+0x60>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80011da:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <MX_DMA_Init+0x60>)
 80011dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e6:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <MX_DMA_Init+0x60>)
 80011e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001228 <MX_DMA_Init+0x60>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80011f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <MX_DMA_Init+0x60>)
 80011f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2105      	movs	r1, #5
 8001202:	200b      	movs	r0, #11
 8001204:	f002 fcde 	bl	8003bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001208:	200b      	movs	r0, #11
 800120a:	f002 fcf5 	bl	8003bf8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2105      	movs	r1, #5
 8001212:	200c      	movs	r0, #12
 8001214:	f002 fcd6 	bl	8003bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001218:	200c      	movs	r0, #12
 800121a:	f002 fced 	bl	8003bf8 <HAL_NVIC_EnableIRQ>

}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000

0800122c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	@ 0x28
 8001230:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	4b52      	ldr	r3, [pc, #328]	@ (800138c <MX_GPIO_Init+0x160>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	4a51      	ldr	r2, [pc, #324]	@ (800138c <MX_GPIO_Init+0x160>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124e:	4b4f      	ldr	r3, [pc, #316]	@ (800138c <MX_GPIO_Init+0x160>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800125a:	4b4c      	ldr	r3, [pc, #304]	@ (800138c <MX_GPIO_Init+0x160>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	4a4b      	ldr	r2, [pc, #300]	@ (800138c <MX_GPIO_Init+0x160>)
 8001260:	f043 0320 	orr.w	r3, r3, #32
 8001264:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001266:	4b49      	ldr	r3, [pc, #292]	@ (800138c <MX_GPIO_Init+0x160>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	f003 0320 	and.w	r3, r3, #32
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	4b46      	ldr	r3, [pc, #280]	@ (800138c <MX_GPIO_Init+0x160>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	4a45      	ldr	r2, [pc, #276]	@ (800138c <MX_GPIO_Init+0x160>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127e:	4b43      	ldr	r3, [pc, #268]	@ (800138c <MX_GPIO_Init+0x160>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	4b40      	ldr	r3, [pc, #256]	@ (800138c <MX_GPIO_Init+0x160>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	4a3f      	ldr	r2, [pc, #252]	@ (800138c <MX_GPIO_Init+0x160>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001296:	4b3d      	ldr	r3, [pc, #244]	@ (800138c <MX_GPIO_Init+0x160>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CHAT_Pin|LED_SOURIS_Pin|LIDAR_M_EN_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f246 0110 	movw	r1, #24592	@ 0x6010
 80012a8:	4839      	ldr	r0, [pc, #228]	@ (8001390 <MX_GPIO_Init+0x164>)
 80012aa:	f003 f8a7 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_1_Pin|USER_LED_2_Pin|Accelerometer_NSS_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2113      	movs	r1, #19
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b6:	f003 f8a1 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIDAR_DEV_EN_GPIO_Port, LIDAR_DEV_EN_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2101      	movs	r1, #1
 80012be:	4835      	ldr	r0, [pc, #212]	@ (8001394 <MX_GPIO_Init+0x168>)
 80012c0:	f003 f89c 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_CHAT_Pin LED_SOURIS_Pin LIDAR_M_EN_Pin */
  GPIO_InitStruct.Pin = LED_CHAT_Pin|LED_SOURIS_Pin|LIDAR_M_EN_Pin;
 80012c4:	f246 0310 	movw	r3, #24592	@ 0x6010
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	482c      	ldr	r0, [pc, #176]	@ (8001390 <MX_GPIO_Init+0x164>)
 80012de:	f002 ff0b 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BNT_CAT_MOUSE_Pin */
  GPIO_InitStruct.Pin = BNT_CAT_MOUSE_Pin;
 80012e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BNT_CAT_MOUSE_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4825      	ldr	r0, [pc, #148]	@ (8001390 <MX_GPIO_Init+0x164>)
 80012fa:	f002 fefd 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_1_Pin USER_LED_2_Pin Accelerometer_NSS_Pin */
  GPIO_InitStruct.Pin = USER_LED_1_Pin|USER_LED_2_Pin|Accelerometer_NSS_Pin;
 80012fe:	2313      	movs	r3, #19
 8001300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001318:	f002 feee 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Accelerometer_INT1_Pin Accelerometer_INT2_Pin */
  GPIO_InitStruct.Pin = Accelerometer_INT1_Pin|Accelerometer_INT2_Pin;
 800131c:	230c      	movs	r3, #12
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001320:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001334:	f002 fee0 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIDAR_DEV_EN_Pin */
  GPIO_InitStruct.Pin = LIDAR_DEV_EN_Pin;
 8001338:	2301      	movs	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LIDAR_DEV_EN_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4811      	ldr	r0, [pc, #68]	@ (8001394 <MX_GPIO_Init+0x168>)
 8001350:	f002 fed2 	bl	80040f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	2105      	movs	r1, #5
 8001358:	2008      	movs	r0, #8
 800135a:	f002 fc33 	bl	8003bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800135e:	2008      	movs	r0, #8
 8001360:	f002 fc4a 	bl	8003bf8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	2105      	movs	r1, #5
 8001368:	2009      	movs	r0, #9
 800136a:	f002 fc2b 	bl	8003bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800136e:	2009      	movs	r0, #9
 8001370:	f002 fc42 	bl	8003bf8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2105      	movs	r1, #5
 8001378:	2028      	movs	r0, #40	@ 0x28
 800137a:	f002 fc23 	bl	8003bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800137e:	2028      	movs	r0, #40	@ 0x28
 8001380:	f002 fc3a 	bl	8003bf8 <HAL_NVIC_EnableIRQ>

}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	@ 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000
 8001390:	48000800 	.word	0x48000800
 8001394:	48000400 	.word	0x48000400

08001398 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800139c:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <MX_I2C1_Init+0x74>)
 800139e:	4a1c      	ldr	r2, [pc, #112]	@ (8001410 <MX_I2C1_Init+0x78>)
 80013a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <MX_I2C1_Init+0x74>)
 80013a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001414 <MX_I2C1_Init+0x7c>)
 80013a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013a8:	4b18      	ldr	r3, [pc, #96]	@ (800140c <MX_I2C1_Init+0x74>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ae:	4b17      	ldr	r3, [pc, #92]	@ (800140c <MX_I2C1_Init+0x74>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b4:	4b15      	ldr	r3, [pc, #84]	@ (800140c <MX_I2C1_Init+0x74>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013ba:	4b14      	ldr	r3, [pc, #80]	@ (800140c <MX_I2C1_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013c0:	4b12      	ldr	r3, [pc, #72]	@ (800140c <MX_I2C1_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c6:	4b11      	ldr	r3, [pc, #68]	@ (800140c <MX_I2C1_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <MX_I2C1_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d2:	480e      	ldr	r0, [pc, #56]	@ (800140c <MX_I2C1_Init+0x74>)
 80013d4:	f003 f85c 	bl	8004490 <HAL_I2C_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013de:	f000 f9c9 	bl	8001774 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013e2:	2100      	movs	r1, #0
 80013e4:	4809      	ldr	r0, [pc, #36]	@ (800140c <MX_I2C1_Init+0x74>)
 80013e6:	f003 f8ee 	bl	80045c6 <HAL_I2CEx_ConfigAnalogFilter>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013f0:	f000 f9c0 	bl	8001774 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013f4:	2100      	movs	r1, #0
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_I2C1_Init+0x74>)
 80013f8:	f003 f930 	bl	800465c <HAL_I2CEx_ConfigDigitalFilter>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001402:	f000 f9b7 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000c34 	.word	0x20000c34
 8001410:	40005400 	.word	0x40005400
 8001414:	40621236 	.word	0x40621236

08001418 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b09c      	sub	sp, #112	@ 0x70
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001430:	f107 0318 	add.w	r3, r7, #24
 8001434:	2244      	movs	r2, #68	@ 0x44
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f00c fb49 	bl	800dad0 <memset>
  if(i2cHandle->Instance==I2C1)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a2e      	ldr	r2, [pc, #184]	@ (80014fc <HAL_I2C_MspInit+0xe4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d154      	bne.n	80014f2 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001448:	2340      	movs	r3, #64	@ 0x40
 800144a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800144c:	2300      	movs	r3, #0
 800144e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001450:	f107 0318 	add.w	r3, r7, #24
 8001454:	4618      	mov	r0, r3
 8001456:	f003 ff5d 	bl	8005314 <HAL_RCCEx_PeriphCLKConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001460:	f000 f988 	bl	8001774 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001464:	4b26      	ldr	r3, [pc, #152]	@ (8001500 <HAL_I2C_MspInit+0xe8>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001468:	4a25      	ldr	r2, [pc, #148]	@ (8001500 <HAL_I2C_MspInit+0xe8>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001470:	4b23      	ldr	r3, [pc, #140]	@ (8001500 <HAL_I2C_MspInit+0xe8>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147c:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <HAL_I2C_MspInit+0xe8>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	4a1f      	ldr	r2, [pc, #124]	@ (8001500 <HAL_I2C_MspInit+0xe8>)
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001488:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <HAL_I2C_MspInit+0xe8>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001494:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001498:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149a:	2312      	movs	r3, #18
 800149c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a6:	2304      	movs	r3, #4
 80014a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014ae:	4619      	mov	r1, r3
 80014b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014b4:	f002 fe20 	bl	80040f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014be:	2312      	movs	r3, #18
 80014c0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ca:	2304      	movs	r3, #4
 80014cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014d2:	4619      	mov	r1, r3
 80014d4:	480b      	ldr	r0, [pc, #44]	@ (8001504 <HAL_I2C_MspInit+0xec>)
 80014d6:	f002 fe0f 	bl	80040f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <HAL_I2C_MspInit+0xe8>)
 80014dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014de:	4a08      	ldr	r2, [pc, #32]	@ (8001500 <HAL_I2C_MspInit+0xe8>)
 80014e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_I2C_MspInit+0xe8>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014f2:	bf00      	nop
 80014f4:	3770      	adds	r7, #112	@ 0x70
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40005400 	.word	0x40005400
 8001500:	40021000 	.word	0x40021000
 8001504:	48000400 	.word	0x48000400

08001508 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8001510:	1d39      	adds	r1, r7, #4
 8001512:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001516:	2201      	movs	r2, #1
 8001518:	4803      	ldr	r0, [pc, #12]	@ (8001528 <__io_putchar+0x20>)
 800151a:	f006 fcc9 	bl	8007eb0 <HAL_UART_Transmit>
	return chr;
 800151e:	687b      	ldr	r3, [r7, #4]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20001c50 	.word	0x20001c50

0800152c <print_lidar_distances>:

void print_lidar_distances(h_shell_t *h_shell, int argc, char **argv)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af02      	add	r7, sp, #8
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
	for (int i = MIN_ANGLE; i < MAX_ANGLE; i++)
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	e014      	b.n	8001568 <print_lidar_distances+0x3c>
	{
		printf("%s %d: %d \r\n", "angle ", i, hlidar.scan_data.distances[i]);
 800153e:	4a0f      	ldr	r2, [pc, #60]	@ (800157c <print_lidar_distances+0x50>)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	330c      	adds	r3, #12
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f834 	bl	80005b8 <__aeabi_f2d>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	e9cd 2300 	strd	r2, r3, [sp]
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	4909      	ldr	r1, [pc, #36]	@ (8001580 <print_lidar_distances+0x54>)
 800155c:	4809      	ldr	r0, [pc, #36]	@ (8001584 <print_lidar_distances+0x58>)
 800155e:	f00c f9bd 	bl	800d8dc <iprintf>
	for (int i = MIN_ANGLE; i < MAX_ANGLE; i++)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800156e:	dbe6      	blt.n	800153e <print_lidar_distances+0x12>
	}
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000c88 	.word	0x20000c88
 8001580:	0800ec84 	.word	0x0800ec84
 8001584:	0800ec8c 	.word	0x0800ec8c

08001588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800158c:	f000 ffcb 	bl	8002526 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001590:	f000 f862 	bl	8001658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001594:	f7ff fe4a 	bl	800122c <MX_GPIO_Init>
  MX_DMA_Init();
 8001598:	f7ff fe16 	bl	80011c8 <MX_DMA_Init>
  MX_UART4_Init();
 800159c:	f000 fe64 	bl	8002268 <MX_UART4_Init>
  MX_SPI1_Init();
 80015a0:	f000 f8ee 	bl	8001780 <MX_SPI1_Init>
  MX_TIM4_Init();
 80015a4:	f000 fc90 	bl	8001ec8 <MX_TIM4_Init>
  MX_ADC1_Init();
 80015a8:	f7ff fac0 	bl	8000b2c <MX_ADC1_Init>
  MX_ADC2_Init();
 80015ac:	f7ff fb48 	bl	8000c40 <MX_ADC2_Init>
  MX_TIM1_Init();
 80015b0:	f000 fb60 	bl	8001c74 <MX_TIM1_Init>
  MX_TIM3_Init();
 80015b4:	f000 fc32 	bl	8001e1c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80015b8:	f000 fea6 	bl	8002308 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80015bc:	f7ff feec 	bl	8001398 <MX_I2C1_Init>
  MX_TIM6_Init();
 80015c0:	f000 fcd8 	bl	8001f74 <MX_TIM6_Init>
  MX_TIM16_Init();
 80015c4:	f000 fd0c 	bl	8001fe0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	printf(" _____________________________\r\n");
 80015c8:	4819      	ldr	r0, [pc, #100]	@ (8001630 <main+0xa8>)
 80015ca:	f00c f9ef 	bl	800d9ac <puts>
	printf("|                             |\r\n");
 80015ce:	4819      	ldr	r0, [pc, #100]	@ (8001634 <main+0xac>)
 80015d0:	f00c f9ec 	bl	800d9ac <puts>
	printf("|                             |\r\n");
 80015d4:	4817      	ldr	r0, [pc, #92]	@ (8001634 <main+0xac>)
 80015d6:	f00c f9e9 	bl	800d9ac <puts>
	printf("|  WELCOME ON TAGBOT PROJECT  |\r\n");
 80015da:	4817      	ldr	r0, [pc, #92]	@ (8001638 <main+0xb0>)
 80015dc:	f00c f9e6 	bl	800d9ac <puts>
	printf("|                             |\r\n");
 80015e0:	4814      	ldr	r0, [pc, #80]	@ (8001634 <main+0xac>)
 80015e2:	f00c f9e3 	bl	800d9ac <puts>
	printf("|_____________________________|\r\n");
 80015e6:	4815      	ldr	r0, [pc, #84]	@ (800163c <main+0xb4>)
 80015e8:	f00c f9e0 	bl	800d9ac <puts>

	/* Ce code initialise l'adc en dma*/
	distSensor_initADC_DMA();
 80015ec:	f7ff fcfe 	bl	8000fec <distSensor_initADC_DMA>
	printf("Démarrage du test des capteurs de distance...\r\n");
 80015f0:	4813      	ldr	r0, [pc, #76]	@ (8001640 <main+0xb8>)
 80015f2:	f00c f9db 	bl	800d9ac <puts>


	/* Code init l'accélérometre*/

	while(1 == ADXL343_Init()) {}
 80015f6:	bf00      	nop
 80015f8:	f7ff f9ae 	bl	8000958 <ADXL343_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d0fa      	beq.n	80015f8 <main+0x70>
	ADXL343_Configure();
 8001602:	f7ff f9e9 	bl	80009d8 <ADXL343_Configure>

	DCMotor_CreateTask(&DualDrive_handle);
 8001606:	480f      	ldr	r0, [pc, #60]	@ (8001644 <main+0xbc>)
 8001608:	f00b fb5c 	bl	800ccc4 <DCMotor_CreateTask>

	//X4LIDAR_init(&hlidar, &huart3);

	shell_init(&h_shell);
 800160c:	480e      	ldr	r0, [pc, #56]	@ (8001648 <main+0xc0>)
 800160e:	f00b fd2b 	bl	800d068 <shell_init>
	shell_add(&h_shell, "print_dist", print_lidar_distances,
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <main+0xc4>)
 8001614:	4a0e      	ldr	r2, [pc, #56]	@ (8001650 <main+0xc8>)
 8001616:	490f      	ldr	r1, [pc, #60]	@ (8001654 <main+0xcc>)
 8001618:	480b      	ldr	r0, [pc, #44]	@ (8001648 <main+0xc0>)
 800161a:	f00b fd49 	bl	800d0b0 <shell_add>
			"print lidar buffer containing scanned distances");
	shell_createShellTask(&h_shell);
 800161e:	480a      	ldr	r0, [pc, #40]	@ (8001648 <main+0xc0>)
 8001620:	f00b fcae 	bl	800cf80 <shell_createShellTask>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001624:	f7ff fcbe 	bl	8000fa4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001628:	f008 fbbc 	bl	8009da4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <main+0xa4>
 8001630:	0800ec9c 	.word	0x0800ec9c
 8001634:	0800ecbc 	.word	0x0800ecbc
 8001638:	0800ece0 	.word	0x0800ece0
 800163c:	0800ed04 	.word	0x0800ed04
 8001640:	0800ed28 	.word	0x0800ed28
 8001644:	2000191c 	.word	0x2000191c
 8001648:	20002dac 	.word	0x20002dac
 800164c:	0800ed58 	.word	0x0800ed58
 8001650:	0800152d 	.word	0x0800152d
 8001654:	0800ed88 	.word	0x0800ed88

08001658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b094      	sub	sp, #80	@ 0x50
 800165c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165e:	f107 0318 	add.w	r3, r7, #24
 8001662:	2238      	movs	r2, #56	@ 0x38
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f00c fa32 	bl	800dad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800167a:	2000      	movs	r0, #0
 800167c:	f003 f83a 	bl	80046f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001680:	2301      	movs	r3, #1
 8001682:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001684:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001688:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168a:	2302      	movs	r3, #2
 800168c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800168e:	2303      	movs	r3, #3
 8001690:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001692:	2304      	movs	r3, #4
 8001694:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001696:	2355      	movs	r3, #85	@ 0x55
 8001698:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800169a:	2302      	movs	r3, #2
 800169c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800169e:	2302      	movs	r3, #2
 80016a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a6:	f107 0318 	add.w	r3, r7, #24
 80016aa:	4618      	mov	r0, r3
 80016ac:	f003 f8d6 	bl	800485c <HAL_RCC_OscConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <SystemClock_Config+0x62>
  {
    Error_Handler();
 80016b6:	f000 f85d 	bl	8001774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ba:	230f      	movs	r3, #15
 80016bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016be:	2303      	movs	r3, #3
 80016c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	2104      	movs	r1, #4
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 fbd4 	bl	8004e80 <HAL_RCC_ClockConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80016de:	f000 f849 	bl	8001774 <Error_Handler>
  }
}
 80016e2:	bf00      	nop
 80016e4:	3750      	adds	r7, #80	@ 0x50
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	80fb      	strh	r3, [r7, #6]
	//	ADXL343_DetectTap();
	if(GPIO_Pin == BNT_CAT_MOUSE_Pin){
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80016fc:	d103      	bne.n	8001706 <HAL_GPIO_EXTI_Callback+0x1a>
		printf("Button pushed\r\n");
 80016fe:	4811      	ldr	r0, [pc, #68]	@ (8001744 <HAL_GPIO_EXTI_Callback+0x58>)
 8001700:	f00c f954 	bl	800d9ac <puts>
	} else if(GPIO_Pin == Accelerometer_INT2_Pin){
		printf("Acc Int2\r\n");
		uint8_t tap_status;
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); 		//Renvoie la valeur du registre int_source
	}
}
 8001704:	e01a      	b.n	800173c <HAL_GPIO_EXTI_Callback+0x50>
	} else if(GPIO_Pin == Accelerometer_INT1_Pin){
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	2b04      	cmp	r3, #4
 800170a:	d10a      	bne.n	8001722 <HAL_GPIO_EXTI_Callback+0x36>
		printf("Acc Int1\r\n");
 800170c:	480e      	ldr	r0, [pc, #56]	@ (8001748 <HAL_GPIO_EXTI_Callback+0x5c>)
 800170e:	f00c f94d 	bl	800d9ac <puts>
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); 		//Renvoie la valeur du registre int_source
 8001712:	f107 030f 	add.w	r3, r7, #15
 8001716:	2201      	movs	r2, #1
 8001718:	4619      	mov	r1, r3
 800171a:	2030      	movs	r0, #48	@ 0x30
 800171c:	f7ff f97e 	bl	8000a1c <ADXL343_ReadRegister>
}
 8001720:	e00c      	b.n	800173c <HAL_GPIO_EXTI_Callback+0x50>
	} else if(GPIO_Pin == Accelerometer_INT2_Pin){
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	2b08      	cmp	r3, #8
 8001726:	d109      	bne.n	800173c <HAL_GPIO_EXTI_Callback+0x50>
		printf("Acc Int2\r\n");
 8001728:	4808      	ldr	r0, [pc, #32]	@ (800174c <HAL_GPIO_EXTI_Callback+0x60>)
 800172a:	f00c f93f 	bl	800d9ac <puts>
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); 		//Renvoie la valeur du registre int_source
 800172e:	f107 030e 	add.w	r3, r7, #14
 8001732:	2201      	movs	r2, #1
 8001734:	4619      	mov	r1, r3
 8001736:	2030      	movs	r0, #48	@ 0x30
 8001738:	f7ff f970 	bl	8000a1c <ADXL343_ReadRegister>
}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	0800ed94 	.word	0x0800ed94
 8001748:	0800eda4 	.word	0x0800eda4
 800174c:	0800edb0 	.word	0x0800edb0

08001750 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001762:	f000 fef9 	bl	8002558 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40001400 	.word	0x40001400

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <Error_Handler+0x8>

08001780 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001784:	4b1b      	ldr	r3, [pc, #108]	@ (80017f4 <MX_SPI1_Init+0x74>)
 8001786:	4a1c      	ldr	r2, [pc, #112]	@ (80017f8 <MX_SPI1_Init+0x78>)
 8001788:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800178a:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <MX_SPI1_Init+0x74>)
 800178c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001790:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001792:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <MX_SPI1_Init+0x74>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001798:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <MX_SPI1_Init+0x74>)
 800179a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800179e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017a0:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <MX_SPI1_Init+0x74>)
 80017a2:	2202      	movs	r2, #2
 80017a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017a6:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <MX_SPI1_Init+0x74>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017ac:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <MX_SPI1_Init+0x74>)
 80017ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <MX_SPI1_Init+0x74>)
 80017b6:	2230      	movs	r2, #48	@ 0x30
 80017b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <MX_SPI1_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <MX_SPI1_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <MX_SPI1_Init+0x74>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017cc:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <MX_SPI1_Init+0x74>)
 80017ce:	2207      	movs	r2, #7
 80017d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017d2:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <MX_SPI1_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <MX_SPI1_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017de:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <MX_SPI1_Init+0x74>)
 80017e0:	f003 ff88 	bl	80056f4 <HAL_SPI_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017ea:	f7ff ffc3 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20001a20 	.word	0x20001a20
 80017f8:	40013000 	.word	0x40013000

080017fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a17      	ldr	r2, [pc, #92]	@ (8001878 <HAL_SPI_MspInit+0x7c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d128      	bne.n	8001870 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800181e:	4b17      	ldr	r3, [pc, #92]	@ (800187c <HAL_SPI_MspInit+0x80>)
 8001820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001822:	4a16      	ldr	r2, [pc, #88]	@ (800187c <HAL_SPI_MspInit+0x80>)
 8001824:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001828:	6613      	str	r3, [r2, #96]	@ 0x60
 800182a:	4b14      	ldr	r3, [pc, #80]	@ (800187c <HAL_SPI_MspInit+0x80>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	4b11      	ldr	r3, [pc, #68]	@ (800187c <HAL_SPI_MspInit+0x80>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	4a10      	ldr	r2, [pc, #64]	@ (800187c <HAL_SPI_MspInit+0x80>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001842:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <HAL_SPI_MspInit+0x80>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Accelerometer_SCK_Pin|Accelerometer_MISO_Pin|Accelerometer_MOSI_Pin;
 800184e:	23e0      	movs	r3, #224	@ 0xe0
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800185e:	2305      	movs	r3, #5
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800186c:	f002 fc44 	bl	80040f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001870:	bf00      	nop
 8001872:	3728      	adds	r7, #40	@ 0x28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40013000 	.word	0x40013000
 800187c:	40021000 	.word	0x40021000

08001880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_MspInit+0x50>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188a:	4a11      	ldr	r2, [pc, #68]	@ (80018d0 <HAL_MspInit+0x50>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6613      	str	r3, [r2, #96]	@ 0x60
 8001892:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <HAL_MspInit+0x50>)
 8001894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <HAL_MspInit+0x50>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a2:	4a0b      	ldr	r2, [pc, #44]	@ (80018d0 <HAL_MspInit+0x50>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <HAL_MspInit+0x50>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	210f      	movs	r1, #15
 80018ba:	f06f 0001 	mvn.w	r0, #1
 80018be:	f002 f981 	bl	8003bc4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80018c2:	f002 ffbb 	bl	800483c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000

080018d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	@ 0x30
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80018e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001998 <HAL_InitTick+0xc4>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001998 <HAL_InitTick+0xc4>)
 80018ea:	f043 0320 	orr.w	r3, r3, #32
 80018ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f0:	4b29      	ldr	r3, [pc, #164]	@ (8001998 <HAL_InitTick+0xc4>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018fc:	f107 020c 	add.w	r2, r7, #12
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	4611      	mov	r1, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f003 fc8e 	bl	8005228 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800190c:	f003 fc60 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 8001910:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001914:	4a21      	ldr	r2, [pc, #132]	@ (800199c <HAL_InitTick+0xc8>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	0c9b      	lsrs	r3, r3, #18
 800191c:	3b01      	subs	r3, #1
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001920:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <HAL_InitTick+0xcc>)
 8001922:	4a20      	ldr	r2, [pc, #128]	@ (80019a4 <HAL_InitTick+0xd0>)
 8001924:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001926:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <HAL_InitTick+0xcc>)
 8001928:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800192c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800192e:	4a1c      	ldr	r2, [pc, #112]	@ (80019a0 <HAL_InitTick+0xcc>)
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001934:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <HAL_InitTick+0xcc>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <HAL_InitTick+0xcc>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8001940:	4817      	ldr	r0, [pc, #92]	@ (80019a0 <HAL_InitTick+0xcc>)
 8001942:	f004 fe0b 	bl	800655c <HAL_TIM_Base_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800194c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001950:	2b00      	cmp	r3, #0
 8001952:	d11b      	bne.n	800198c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001954:	4812      	ldr	r0, [pc, #72]	@ (80019a0 <HAL_InitTick+0xcc>)
 8001956:	f004 febb 	bl	80066d0 <HAL_TIM_Base_Start_IT>
 800195a:	4603      	mov	r3, r0
 800195c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001960:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001964:	2b00      	cmp	r3, #0
 8001966:	d111      	bne.n	800198c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001968:	2037      	movs	r0, #55	@ 0x37
 800196a:	f002 f945 	bl	8003bf8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d808      	bhi.n	8001986 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001974:	2200      	movs	r2, #0
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	2037      	movs	r0, #55	@ 0x37
 800197a:	f002 f923 	bl	8003bc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800197e:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <HAL_InitTick+0xd4>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	e002      	b.n	800198c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800198c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001990:	4618      	mov	r0, r3
 8001992:	3730      	adds	r7, #48	@ 0x30
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40021000 	.word	0x40021000
 800199c:	431bde83 	.word	0x431bde83
 80019a0:	20001a84 	.word	0x20001a84
 80019a4:	40001400 	.word	0x40001400
 80019a8:	20000004 	.word	0x20000004

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <NMI_Handler+0x4>

080019b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <MemManage_Handler+0x4>

080019c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <BusFault_Handler+0x4>

080019cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <UsageFault_Handler+0x4>

080019d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
    // Read the INT_SOURCE register to clear the interrupt
    int8_t tap_status;
    ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1);
 80019ea:	1dfb      	adds	r3, r7, #7
 80019ec:	2201      	movs	r2, #1
 80019ee:	4619      	mov	r1, r3
 80019f0:	2030      	movs	r0, #48	@ 0x30
 80019f2:	f7ff f813 	bl	8000a1c <ADXL343_ReadRegister>

	if (tap_status & (1<<6)) {  // Tap for single tap
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00a      	beq.n	8001a1a <EXTI2_IRQHandler+0x36>
		printf("Tap detected!\r\n");
 8001a04:	4808      	ldr	r0, [pc, #32]	@ (8001a28 <EXTI2_IRQHandler+0x44>)
 8001a06:	f00b ffd1 	bl	800d9ac <puts>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a10:	f002 fd0c 	bl	800442c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001a14:	2064      	movs	r0, #100	@ 0x64
 8001a16:	f000 fdbd 	bl	8002594 <HAL_Delay>
	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Accelerometer_INT1_Pin);
 8001a1a:	2004      	movs	r0, #4
 8001a1c:	f002 fd20 	bl	8004460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	0800edbc 	.word	0x0800edbc

08001a2c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
//		printf("Tap detected!\r\n");
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
//		HAL_Delay(100);
//	}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Accelerometer_INT2_Pin);
 8001a30:	2008      	movs	r0, #8
 8001a32:	f002 fd15 	bl	8004460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001a40:	4802      	ldr	r0, [pc, #8]	@ (8001a4c <DMA1_Channel1_IRQHandler+0x10>)
 8001a42:	f002 fa0a 	bl	8003e5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200001c8 	.word	0x200001c8

08001a50 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a54:	4802      	ldr	r0, [pc, #8]	@ (8001a60 <DMA1_Channel2_IRQHandler+0x10>)
 8001a56:	f002 fa00 	bl	8003e5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000168 	.word	0x20000168

08001a64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a68:	4802      	ldr	r0, [pc, #8]	@ (8001a74 <TIM3_IRQHandler+0x10>)
 8001a6a:	f005 f8a3 	bl	8006bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20001b20 	.word	0x20001b20

08001a78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a7c:	4802      	ldr	r0, [pc, #8]	@ (8001a88 <TIM4_IRQHandler+0x10>)
 8001a7e:	f005 f899 	bl	8006bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20001b6c 	.word	0x20001b6c

08001a8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BNT_CAT_MOUSE_Pin);
 8001a90:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001a94:	f002 fce4 	bl	8004460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <TIM6_DAC_IRQHandler+0x10>)
 8001aa2:	f005 f887 	bl	8006bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20001bb8 	.word	0x20001bb8

08001ab0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ab4:	4802      	ldr	r0, [pc, #8]	@ (8001ac0 <TIM7_IRQHandler+0x10>)
 8001ab6:	f005 f87d 	bl	8006bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20001a84 	.word	0x20001a84

08001ac4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return 1;
 8001ac8:	2301      	movs	r3, #1
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_kill>:

int _kill(int pid, int sig)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ade:	f00c f865 	bl	800dbac <__errno>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2216      	movs	r2, #22
 8001ae6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_exit>:

void _exit (int status)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ffe7 	bl	8001ad4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b06:	bf00      	nop
 8001b08:	e7fd      	b.n	8001b06 <_exit+0x12>

08001b0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	e00a      	b.n	8001b32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b1c:	f3af 8000 	nop.w
 8001b20:	4601      	mov	r1, r0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	60ba      	str	r2, [r7, #8]
 8001b28:	b2ca      	uxtb	r2, r1
 8001b2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	dbf0      	blt.n	8001b1c <_read+0x12>
  }

  return len;
 8001b3a:	687b      	ldr	r3, [r7, #4]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	e009      	b.n	8001b6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	60ba      	str	r2, [r7, #8]
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fcd2 	bl	8001508 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	dbf1      	blt.n	8001b56 <_write+0x12>
  }
  return len;
 8001b72:	687b      	ldr	r3, [r7, #4]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <_close>:

int _close(int file)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_isatty>:

int _isatty(int file)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bbc:	2301      	movs	r3, #1
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bec:	4a14      	ldr	r2, [pc, #80]	@ (8001c40 <_sbrk+0x5c>)
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <_sbrk+0x60>)
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf8:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <_sbrk+0x64>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	@ (8001c4c <_sbrk+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d207      	bcs.n	8001c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c14:	f00b ffca 	bl	800dbac <__errno>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c22:	e009      	b.n	8001c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c24:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2a:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	4a05      	ldr	r2, [pc, #20]	@ (8001c48 <_sbrk+0x64>)
 8001c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20008000 	.word	0x20008000
 8001c44:	00000400 	.word	0x00000400
 8001c48:	20001ad0 	.word	0x20001ad0
 8001c4c:	20004380 	.word	0x20004380

08001c50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <SystemInit+0x20>)
 8001c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c5a:	4a05      	ldr	r2, [pc, #20]	@ (8001c70 <SystemInit+0x20>)
 8001c5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b09c      	sub	sp, #112	@ 0x70
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c94:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
 8001ca4:	615a      	str	r2, [r3, #20]
 8001ca6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2234      	movs	r2, #52	@ 0x34
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f00b ff0e 	bl	800dad0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cb4:	4b57      	ldr	r3, [pc, #348]	@ (8001e14 <MX_TIM1_Init+0x1a0>)
 8001cb6:	4a58      	ldr	r2, [pc, #352]	@ (8001e18 <MX_TIM1_Init+0x1a4>)
 8001cb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cba:	4b56      	ldr	r3, [pc, #344]	@ (8001e14 <MX_TIM1_Init+0x1a0>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc0:	4b54      	ldr	r3, [pc, #336]	@ (8001e14 <MX_TIM1_Init+0x1a0>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6799;
 8001cc6:	4b53      	ldr	r3, [pc, #332]	@ (8001e14 <MX_TIM1_Init+0x1a0>)
 8001cc8:	f641 228f 	movw	r2, #6799	@ 0x1a8f
 8001ccc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cce:	4b51      	ldr	r3, [pc, #324]	@ (8001e14 <MX_TIM1_Init+0x1a0>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cd4:	4b4f      	ldr	r3, [pc, #316]	@ (8001e14 <MX_TIM1_Init+0x1a0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cda:	4b4e      	ldr	r3, [pc, #312]	@ (8001e14 <MX_TIM1_Init+0x1a0>)
 8001cdc:	2280      	movs	r2, #128	@ 0x80
 8001cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ce0:	484c      	ldr	r0, [pc, #304]	@ (8001e14 <MX_TIM1_Init+0x1a0>)
 8001ce2:	f004 fc3b 	bl	800655c <HAL_TIM_Base_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001cec:	f7ff fd42 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cf4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cf6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4845      	ldr	r0, [pc, #276]	@ (8001e14 <MX_TIM1_Init+0x1a0>)
 8001cfe:	f005 f9bd 	bl	800707c <HAL_TIM_ConfigClockSource>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001d08:	f7ff fd34 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d0c:	4841      	ldr	r0, [pc, #260]	@ (8001e14 <MX_TIM1_Init+0x1a0>)
 8001d0e:	f004 fd49 	bl	80067a4 <HAL_TIM_PWM_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001d18:	f7ff fd2c 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d20:	2300      	movs	r3, #0
 8001d22:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4839      	ldr	r0, [pc, #228]	@ (8001e14 <MX_TIM1_Init+0x1a0>)
 8001d30:	f005 ff1a 	bl	8007b68 <HAL_TIMEx_MasterConfigSynchronization>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001d3a:	f7ff fd1b 	bl	8001774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d3e:	2360      	movs	r3, #96	@ 0x60
 8001d40:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d46:	2300      	movs	r3, #0
 8001d48:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d5e:	2200      	movs	r2, #0
 8001d60:	4619      	mov	r1, r3
 8001d62:	482c      	ldr	r0, [pc, #176]	@ (8001e14 <MX_TIM1_Init+0x1a0>)
 8001d64:	f005 f876 	bl	8006e54 <HAL_TIM_PWM_ConfigChannel>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001d6e:	f7ff fd01 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d76:	2204      	movs	r2, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4826      	ldr	r0, [pc, #152]	@ (8001e14 <MX_TIM1_Init+0x1a0>)
 8001d7c:	f005 f86a 	bl	8006e54 <HAL_TIM_PWM_ConfigChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001d86:	f7ff fcf5 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d8a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d8e:	2208      	movs	r2, #8
 8001d90:	4619      	mov	r1, r3
 8001d92:	4820      	ldr	r0, [pc, #128]	@ (8001e14 <MX_TIM1_Init+0x1a0>)
 8001d94:	f005 f85e 	bl	8006e54 <HAL_TIM_PWM_ConfigChannel>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001d9e:	f7ff fce9 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001da2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001da6:	220c      	movs	r2, #12
 8001da8:	4619      	mov	r1, r3
 8001daa:	481a      	ldr	r0, [pc, #104]	@ (8001e14 <MX_TIM1_Init+0x1a0>)
 8001dac:	f005 f852 	bl	8006e54 <HAL_TIM_PWM_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001db6:	f7ff fcdd 	bl	8001774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001de0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001de4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001dea:	2300      	movs	r3, #0
 8001dec:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	4807      	ldr	r0, [pc, #28]	@ (8001e14 <MX_TIM1_Init+0x1a0>)
 8001df8:	f005 ff38 	bl	8007c6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8001e02:	f7ff fcb7 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e06:	4803      	ldr	r0, [pc, #12]	@ (8001e14 <MX_TIM1_Init+0x1a0>)
 8001e08:	f000 f9e4 	bl	80021d4 <HAL_TIM_MspPostInit>

}
 8001e0c:	bf00      	nop
 8001e0e:	3770      	adds	r7, #112	@ 0x70
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20001ad4 	.word	0x20001ad4
 8001e18:	40012c00 	.word	0x40012c00

08001e1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08c      	sub	sp, #48	@ 0x30
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	2224      	movs	r2, #36	@ 0x24
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f00b fe50 	bl	800dad0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e30:	463b      	mov	r3, r7
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e3a:	4b21      	ldr	r3, [pc, #132]	@ (8001ec0 <MX_TIM3_Init+0xa4>)
 8001e3c:	4a21      	ldr	r2, [pc, #132]	@ (8001ec4 <MX_TIM3_Init+0xa8>)
 8001e3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e40:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec0 <MX_TIM3_Init+0xa4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec0 <MX_TIM3_Init+0xa4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec0 <MX_TIM3_Init+0xa4>)
 8001e4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e54:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec0 <MX_TIM3_Init+0xa4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e5a:	4b19      	ldr	r3, [pc, #100]	@ (8001ec0 <MX_TIM3_Init+0xa4>)
 8001e5c:	2280      	movs	r2, #128	@ 0x80
 8001e5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e60:	2301      	movs	r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e74:	2300      	movs	r3, #0
 8001e76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	4619      	mov	r1, r3
 8001e8a:	480d      	ldr	r0, [pc, #52]	@ (8001ec0 <MX_TIM3_Init+0xa4>)
 8001e8c:	f004 fdec 	bl	8006a68 <HAL_TIM_Encoder_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001e96:	f7ff fc6d 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ea2:	463b      	mov	r3, r7
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4806      	ldr	r0, [pc, #24]	@ (8001ec0 <MX_TIM3_Init+0xa4>)
 8001ea8:	f005 fe5e 	bl	8007b68 <HAL_TIMEx_MasterConfigSynchronization>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001eb2:	f7ff fc5f 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	3730      	adds	r7, #48	@ 0x30
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20001b20 	.word	0x20001b20
 8001ec4:	40000400 	.word	0x40000400

08001ec8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08c      	sub	sp, #48	@ 0x30
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ece:	f107 030c 	add.w	r3, r7, #12
 8001ed2:	2224      	movs	r2, #36	@ 0x24
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f00b fdfa 	bl	800dad0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001edc:	463b      	mov	r3, r7
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ee6:	4b21      	ldr	r3, [pc, #132]	@ (8001f6c <MX_TIM4_Init+0xa4>)
 8001ee8:	4a21      	ldr	r2, [pc, #132]	@ (8001f70 <MX_TIM4_Init+0xa8>)
 8001eea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001eec:	4b1f      	ldr	r3, [pc, #124]	@ (8001f6c <MX_TIM4_Init+0xa4>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f6c <MX_TIM4_Init+0xa4>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f6c <MX_TIM4_Init+0xa4>)
 8001efa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001efe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f00:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <MX_TIM4_Init+0xa4>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f06:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <MX_TIM4_Init+0xa4>)
 8001f08:	2280      	movs	r2, #128	@ 0x80
 8001f0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f14:	2301      	movs	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f24:	2301      	movs	r3, #1
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	4619      	mov	r1, r3
 8001f36:	480d      	ldr	r0, [pc, #52]	@ (8001f6c <MX_TIM4_Init+0xa4>)
 8001f38:	f004 fd96 	bl	8006a68 <HAL_TIM_Encoder_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001f42:	f7ff fc17 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f4e:	463b      	mov	r3, r7
 8001f50:	4619      	mov	r1, r3
 8001f52:	4806      	ldr	r0, [pc, #24]	@ (8001f6c <MX_TIM4_Init+0xa4>)
 8001f54:	f005 fe08 	bl	8007b68 <HAL_TIMEx_MasterConfigSynchronization>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001f5e:	f7ff fc09 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	3730      	adds	r7, #48	@ 0x30
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20001b6c 	.word	0x20001b6c
 8001f70:	40000800 	.word	0x40000800

08001f74 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f84:	4b14      	ldr	r3, [pc, #80]	@ (8001fd8 <MX_TIM6_Init+0x64>)
 8001f86:	4a15      	ldr	r2, [pc, #84]	@ (8001fdc <MX_TIM6_Init+0x68>)
 8001f88:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 8001f8a:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <MX_TIM6_Init+0x64>)
 8001f8c:	22a9      	movs	r2, #169	@ 0xa9
 8001f8e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f90:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <MX_TIM6_Init+0x64>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001f96:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <MX_TIM6_Init+0x64>)
 8001f98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f9c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <MX_TIM6_Init+0x64>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001fa4:	480c      	ldr	r0, [pc, #48]	@ (8001fd8 <MX_TIM6_Init+0x64>)
 8001fa6:	f004 fad9 	bl	800655c <HAL_TIM_Base_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001fb0:	f7ff fbe0 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <MX_TIM6_Init+0x64>)
 8001fc2:	f005 fdd1 	bl	8007b68 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001fcc:	f7ff fbd2 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20001bb8 	.word	0x20001bb8
 8001fdc:	40001000 	.word	0x40001000

08001fe0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001fe4:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <MX_TIM16_Init+0x48>)
 8001fe6:	4a11      	ldr	r2, [pc, #68]	@ (800202c <MX_TIM16_Init+0x4c>)
 8001fe8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1699;
 8001fea:	4b0f      	ldr	r3, [pc, #60]	@ (8002028 <MX_TIM16_Init+0x48>)
 8001fec:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001ff0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8002028 <MX_TIM16_Init+0x48>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <MX_TIM16_Init+0x48>)
 8001ffa:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ffe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002000:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <MX_TIM16_Init+0x48>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002006:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <MX_TIM16_Init+0x48>)
 8002008:	2200      	movs	r2, #0
 800200a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <MX_TIM16_Init+0x48>)
 800200e:	2200      	movs	r2, #0
 8002010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002012:	4805      	ldr	r0, [pc, #20]	@ (8002028 <MX_TIM16_Init+0x48>)
 8002014:	f004 faa2 	bl	800655c <HAL_TIM_Base_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800201e:	f7ff fba9 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20001c04 	.word	0x20001c04
 800202c:	40014400 	.word	0x40014400

08002030 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1f      	ldr	r2, [pc, #124]	@ (80020bc <HAL_TIM_Base_MspInit+0x8c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d10c      	bne.n	800205c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002042:	4b1f      	ldr	r3, [pc, #124]	@ (80020c0 <HAL_TIM_Base_MspInit+0x90>)
 8002044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002046:	4a1e      	ldr	r2, [pc, #120]	@ (80020c0 <HAL_TIM_Base_MspInit+0x90>)
 8002048:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800204c:	6613      	str	r3, [r2, #96]	@ 0x60
 800204e:	4b1c      	ldr	r3, [pc, #112]	@ (80020c0 <HAL_TIM_Base_MspInit+0x90>)
 8002050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002052:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800205a:	e02a      	b.n	80020b2 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM6)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a18      	ldr	r2, [pc, #96]	@ (80020c4 <HAL_TIM_Base_MspInit+0x94>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d114      	bne.n	8002090 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002066:	4b16      	ldr	r3, [pc, #88]	@ (80020c0 <HAL_TIM_Base_MspInit+0x90>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206a:	4a15      	ldr	r2, [pc, #84]	@ (80020c0 <HAL_TIM_Base_MspInit+0x90>)
 800206c:	f043 0310 	orr.w	r3, r3, #16
 8002070:	6593      	str	r3, [r2, #88]	@ 0x58
 8002072:	4b13      	ldr	r3, [pc, #76]	@ (80020c0 <HAL_TIM_Base_MspInit+0x90>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2105      	movs	r1, #5
 8002082:	2036      	movs	r0, #54	@ 0x36
 8002084:	f001 fd9e 	bl	8003bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002088:	2036      	movs	r0, #54	@ 0x36
 800208a:	f001 fdb5 	bl	8003bf8 <HAL_NVIC_EnableIRQ>
}
 800208e:	e010      	b.n	80020b2 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM16)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0c      	ldr	r2, [pc, #48]	@ (80020c8 <HAL_TIM_Base_MspInit+0x98>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d10b      	bne.n	80020b2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800209a:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <HAL_TIM_Base_MspInit+0x90>)
 800209c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800209e:	4a08      	ldr	r2, [pc, #32]	@ (80020c0 <HAL_TIM_Base_MspInit+0x90>)
 80020a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_TIM_Base_MspInit+0x90>)
 80020a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
}
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40012c00 	.word	0x40012c00
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40001000 	.word	0x40001000
 80020c8:	40014400 	.word	0x40014400

080020cc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08c      	sub	sp, #48	@ 0x30
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 031c 	add.w	r3, r7, #28
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a36      	ldr	r2, [pc, #216]	@ (80021c4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d130      	bne.n	8002150 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ee:	4b36      	ldr	r3, [pc, #216]	@ (80021c8 <HAL_TIM_Encoder_MspInit+0xfc>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	4a35      	ldr	r2, [pc, #212]	@ (80021c8 <HAL_TIM_Encoder_MspInit+0xfc>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020fa:	4b33      	ldr	r3, [pc, #204]	@ (80021c8 <HAL_TIM_Encoder_MspInit+0xfc>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	4b30      	ldr	r3, [pc, #192]	@ (80021c8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	4a2f      	ldr	r2, [pc, #188]	@ (80021c8 <HAL_TIM_Encoder_MspInit+0xfc>)
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002112:	4b2d      	ldr	r3, [pc, #180]	@ (80021c8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LIDAR_M_SCTR_Pin|ENCODER_RIGHT_A_Pin|ENCODER_RIGHT_B_Pin;
 800211e:	2332      	movs	r3, #50	@ 0x32
 8002120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800212e:	2302      	movs	r3, #2
 8002130:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002132:	f107 031c 	add.w	r3, r7, #28
 8002136:	4619      	mov	r1, r3
 8002138:	4824      	ldr	r0, [pc, #144]	@ (80021cc <HAL_TIM_Encoder_MspInit+0x100>)
 800213a:	f001 ffdd 	bl	80040f8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2105      	movs	r1, #5
 8002142:	201d      	movs	r0, #29
 8002144:	f001 fd3e 	bl	8003bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002148:	201d      	movs	r0, #29
 800214a:	f001 fd55 	bl	8003bf8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800214e:	e034      	b.n	80021ba <HAL_TIM_Encoder_MspInit+0xee>
  else if(tim_encoderHandle->Instance==TIM4)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1e      	ldr	r2, [pc, #120]	@ (80021d0 <HAL_TIM_Encoder_MspInit+0x104>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d12f      	bne.n	80021ba <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800215a:	4b1b      	ldr	r3, [pc, #108]	@ (80021c8 <HAL_TIM_Encoder_MspInit+0xfc>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215e:	4a1a      	ldr	r2, [pc, #104]	@ (80021c8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002160:	f043 0304 	orr.w	r3, r3, #4
 8002164:	6593      	str	r3, [r2, #88]	@ 0x58
 8002166:	4b18      	ldr	r3, [pc, #96]	@ (80021c8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	4b15      	ldr	r3, [pc, #84]	@ (80021c8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002176:	4a14      	ldr	r2, [pc, #80]	@ (80021c8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800217e:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_LEFT_A_Pin|ENCODER_LEFT_B_Pin;
 800218a:	23c0      	movs	r3, #192	@ 0xc0
 800218c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800219a:	2302      	movs	r3, #2
 800219c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219e:	f107 031c 	add.w	r3, r7, #28
 80021a2:	4619      	mov	r1, r3
 80021a4:	4809      	ldr	r0, [pc, #36]	@ (80021cc <HAL_TIM_Encoder_MspInit+0x100>)
 80021a6:	f001 ffa7 	bl	80040f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2105      	movs	r1, #5
 80021ae:	201e      	movs	r0, #30
 80021b0:	f001 fd08 	bl	8003bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021b4:	201e      	movs	r0, #30
 80021b6:	f001 fd1f 	bl	8003bf8 <HAL_NVIC_EnableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	3730      	adds	r7, #48	@ 0x30
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40000400 	.word	0x40000400
 80021c8:	40021000 	.word	0x40021000
 80021cc:	48000400 	.word	0x48000400
 80021d0:	40000800 	.word	0x40000800

080021d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002260 <HAL_TIM_MspPostInit+0x8c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d12f      	bne.n	8002256 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <HAL_TIM_MspPostInit+0x90>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002264 <HAL_TIM_MspPostInit+0x90>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002202:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <HAL_TIM_MspPostInit+0x90>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = RIGHT_MOTOR_FWD_Pin|RIGHT_MOTOR_REV_Pin|LEFT_MOTOR_FWD_Pin;
 800220e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002212:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002220:	2306      	movs	r3, #6
 8002222:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	4619      	mov	r1, r3
 800222a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800222e:	f001 ff63 	bl	80040f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEFT_MOTOR_REV_Pin;
 8002232:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002236:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8002244:	230b      	movs	r3, #11
 8002246:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LEFT_MOTOR_REV_GPIO_Port, &GPIO_InitStruct);
 8002248:	f107 030c 	add.w	r3, r7, #12
 800224c:	4619      	mov	r1, r3
 800224e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002252:	f001 ff51 	bl	80040f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002256:	bf00      	nop
 8002258:	3720      	adds	r7, #32
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40012c00 	.word	0x40012c00
 8002264:	40021000 	.word	0x40021000

08002268 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800226c:	4b24      	ldr	r3, [pc, #144]	@ (8002300 <MX_UART4_Init+0x98>)
 800226e:	4a25      	ldr	r2, [pc, #148]	@ (8002304 <MX_UART4_Init+0x9c>)
 8002270:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002272:	4b23      	ldr	r3, [pc, #140]	@ (8002300 <MX_UART4_Init+0x98>)
 8002274:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002278:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800227a:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <MX_UART4_Init+0x98>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002280:	4b1f      	ldr	r3, [pc, #124]	@ (8002300 <MX_UART4_Init+0x98>)
 8002282:	2200      	movs	r2, #0
 8002284:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002286:	4b1e      	ldr	r3, [pc, #120]	@ (8002300 <MX_UART4_Init+0x98>)
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800228c:	4b1c      	ldr	r3, [pc, #112]	@ (8002300 <MX_UART4_Init+0x98>)
 800228e:	220c      	movs	r2, #12
 8002290:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002292:	4b1b      	ldr	r3, [pc, #108]	@ (8002300 <MX_UART4_Init+0x98>)
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <MX_UART4_Init+0x98>)
 800229a:	2200      	movs	r2, #0
 800229c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800229e:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <MX_UART4_Init+0x98>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022a4:	4b16      	ldr	r3, [pc, #88]	@ (8002300 <MX_UART4_Init+0x98>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80022aa:	4b15      	ldr	r3, [pc, #84]	@ (8002300 <MX_UART4_Init+0x98>)
 80022ac:	2208      	movs	r2, #8
 80022ae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80022b0:	4b13      	ldr	r3, [pc, #76]	@ (8002300 <MX_UART4_Init+0x98>)
 80022b2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80022b6:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80022b8:	4811      	ldr	r0, [pc, #68]	@ (8002300 <MX_UART4_Init+0x98>)
 80022ba:	f005 fda9 	bl	8007e10 <HAL_UART_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_UART4_Init+0x60>
  {
    Error_Handler();
 80022c4:	f7ff fa56 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022c8:	2100      	movs	r1, #0
 80022ca:	480d      	ldr	r0, [pc, #52]	@ (8002300 <MX_UART4_Init+0x98>)
 80022cc:	f007 fc87 	bl	8009bde <HAL_UARTEx_SetTxFifoThreshold>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_UART4_Init+0x72>
  {
    Error_Handler();
 80022d6:	f7ff fa4d 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022da:	2100      	movs	r1, #0
 80022dc:	4808      	ldr	r0, [pc, #32]	@ (8002300 <MX_UART4_Init+0x98>)
 80022de:	f007 fcbc 	bl	8009c5a <HAL_UARTEx_SetRxFifoThreshold>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_UART4_Init+0x84>
  {
    Error_Handler();
 80022e8:	f7ff fa44 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80022ec:	4804      	ldr	r0, [pc, #16]	@ (8002300 <MX_UART4_Init+0x98>)
 80022ee:	f007 fc3d 	bl	8009b6c <HAL_UARTEx_DisableFifoMode>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_UART4_Init+0x94>
  {
    Error_Handler();
 80022f8:	f7ff fa3c 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20001c50 	.word	0x20001c50
 8002304:	40004c00 	.word	0x40004c00

08002308 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800230c:	4b22      	ldr	r3, [pc, #136]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 800230e:	4a23      	ldr	r2, [pc, #140]	@ (800239c <MX_USART3_UART_Init+0x94>)
 8002310:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002312:	4b21      	ldr	r3, [pc, #132]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002314:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002318:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800231a:	4b1f      	ldr	r3, [pc, #124]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002320:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002326:	4b1c      	ldr	r3, [pc, #112]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800232c:	4b1a      	ldr	r3, [pc, #104]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 800232e:	220c      	movs	r2, #12
 8002330:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002332:	4b19      	ldr	r3, [pc, #100]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002338:	4b17      	ldr	r3, [pc, #92]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800233e:	4b16      	ldr	r3, [pc, #88]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002340:	2200      	movs	r2, #0
 8002342:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002344:	4b14      	ldr	r3, [pc, #80]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002346:	2200      	movs	r2, #0
 8002348:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800234a:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 800234c:	2200      	movs	r2, #0
 800234e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002350:	4811      	ldr	r0, [pc, #68]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002352:	f005 fd5d 	bl	8007e10 <HAL_UART_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800235c:	f7ff fa0a 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002360:	2100      	movs	r1, #0
 8002362:	480d      	ldr	r0, [pc, #52]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002364:	f007 fc3b 	bl	8009bde <HAL_UARTEx_SetTxFifoThreshold>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800236e:	f7ff fa01 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002372:	2100      	movs	r1, #0
 8002374:	4808      	ldr	r0, [pc, #32]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002376:	f007 fc70 	bl	8009c5a <HAL_UARTEx_SetRxFifoThreshold>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002380:	f7ff f9f8 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002384:	4804      	ldr	r0, [pc, #16]	@ (8002398 <MX_USART3_UART_Init+0x90>)
 8002386:	f007 fbf1 	bl	8009b6c <HAL_UARTEx_DisableFifoMode>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002390:	f7ff f9f0 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20001ce4 	.word	0x20001ce4
 800239c:	40004800 	.word	0x40004800

080023a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b09c      	sub	sp, #112	@ 0x70
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023b8:	f107 0318 	add.w	r3, r7, #24
 80023bc:	2244      	movs	r2, #68	@ 0x44
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f00b fb85 	bl	800dad0 <memset>
  if(uartHandle->Instance==UART4)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a3d      	ldr	r2, [pc, #244]	@ (80024c0 <HAL_UART_MspInit+0x120>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d137      	bne.n	8002440 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80023d0:	2308      	movs	r3, #8
 80023d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d8:	f107 0318 	add.w	r3, r7, #24
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 ff99 	bl	8005314 <HAL_RCCEx_PeriphCLKConfig>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023e8:	f7ff f9c4 	bl	8001774 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80023ec:	4b35      	ldr	r3, [pc, #212]	@ (80024c4 <HAL_UART_MspInit+0x124>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f0:	4a34      	ldr	r2, [pc, #208]	@ (80024c4 <HAL_UART_MspInit+0x124>)
 80023f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80023f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80023f8:	4b32      	ldr	r3, [pc, #200]	@ (80024c4 <HAL_UART_MspInit+0x124>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002404:	4b2f      	ldr	r3, [pc, #188]	@ (80024c4 <HAL_UART_MspInit+0x124>)
 8002406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002408:	4a2e      	ldr	r2, [pc, #184]	@ (80024c4 <HAL_UART_MspInit+0x124>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002410:	4b2c      	ldr	r3, [pc, #176]	@ (80024c4 <HAL_UART_MspInit+0x124>)
 8002412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800241c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002420:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800242e:	2305      	movs	r3, #5
 8002430:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002432:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002436:	4619      	mov	r1, r3
 8002438:	4823      	ldr	r0, [pc, #140]	@ (80024c8 <HAL_UART_MspInit+0x128>)
 800243a:	f001 fe5d 	bl	80040f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800243e:	e03b      	b.n	80024b8 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a21      	ldr	r2, [pc, #132]	@ (80024cc <HAL_UART_MspInit+0x12c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d136      	bne.n	80024b8 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800244a:	2304      	movs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800244e:	2300      	movs	r3, #0
 8002450:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002452:	f107 0318 	add.w	r3, r7, #24
 8002456:	4618      	mov	r0, r3
 8002458:	f002 ff5c 	bl	8005314 <HAL_RCCEx_PeriphCLKConfig>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8002462:	f7ff f987 	bl	8001774 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002466:	4b17      	ldr	r3, [pc, #92]	@ (80024c4 <HAL_UART_MspInit+0x124>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246a:	4a16      	ldr	r2, [pc, #88]	@ (80024c4 <HAL_UART_MspInit+0x124>)
 800246c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002470:	6593      	str	r3, [r2, #88]	@ 0x58
 8002472:	4b14      	ldr	r3, [pc, #80]	@ (80024c4 <HAL_UART_MspInit+0x124>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002476:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800247e:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <HAL_UART_MspInit+0x124>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002482:	4a10      	ldr	r2, [pc, #64]	@ (80024c4 <HAL_UART_MspInit+0x124>)
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800248a:	4b0e      	ldr	r3, [pc, #56]	@ (80024c4 <HAL_UART_MspInit+0x124>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_INPUT_Pin|LIDAR_OUTPUT_Pin;
 8002496:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800249a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249c:	2302      	movs	r3, #2
 800249e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a4:	2300      	movs	r3, #0
 80024a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024a8:	2307      	movs	r3, #7
 80024aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80024b0:	4619      	mov	r1, r3
 80024b2:	4807      	ldr	r0, [pc, #28]	@ (80024d0 <HAL_UART_MspInit+0x130>)
 80024b4:	f001 fe20 	bl	80040f8 <HAL_GPIO_Init>
}
 80024b8:	bf00      	nop
 80024ba:	3770      	adds	r7, #112	@ 0x70
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40004c00 	.word	0x40004c00
 80024c4:	40021000 	.word	0x40021000
 80024c8:	48000800 	.word	0x48000800
 80024cc:	40004800 	.word	0x40004800
 80024d0:	48000400 	.word	0x48000400

080024d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024d4:	480d      	ldr	r0, [pc, #52]	@ (800250c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024d6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024d8:	f7ff fbba 	bl	8001c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024dc:	480c      	ldr	r0, [pc, #48]	@ (8002510 <LoopForever+0x6>)
  ldr r1, =_edata
 80024de:	490d      	ldr	r1, [pc, #52]	@ (8002514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002518 <LoopForever+0xe>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024e4:	e002      	b.n	80024ec <LoopCopyDataInit>

080024e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ea:	3304      	adds	r3, #4

080024ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f0:	d3f9      	bcc.n	80024e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024f2:	4a0a      	ldr	r2, [pc, #40]	@ (800251c <LoopForever+0x12>)
  ldr r4, =_ebss
 80024f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002520 <LoopForever+0x16>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f8:	e001      	b.n	80024fe <LoopFillZerobss>

080024fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024fc:	3204      	adds	r2, #4

080024fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002500:	d3fb      	bcc.n	80024fa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002502:	f00b fb59 	bl	800dbb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002506:	f7ff f83f 	bl	8001588 <main>

0800250a <LoopForever>:

LoopForever:
    b LoopForever
 800250a:	e7fe      	b.n	800250a <LoopForever>
  ldr   r0, =_estack
 800250c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002514:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002518:	0800efec 	.word	0x0800efec
  ldr r2, =_sbss
 800251c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002520:	20004380 	.word	0x20004380

08002524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002524:	e7fe      	b.n	8002524 <ADC1_2_IRQHandler>

08002526 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002530:	2003      	movs	r0, #3
 8002532:	f001 fb3c 	bl	8003bae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002536:	200f      	movs	r0, #15
 8002538:	f7ff f9cc 	bl	80018d4 <HAL_InitTick>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	71fb      	strb	r3, [r7, #7]
 8002546:	e001      	b.n	800254c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002548:	f7ff f99a 	bl	8001880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800254c:	79fb      	ldrb	r3, [r7, #7]

}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800255c:	4b05      	ldr	r3, [pc, #20]	@ (8002574 <HAL_IncTick+0x1c>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <HAL_IncTick+0x20>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4413      	add	r3, r2
 8002566:	4a03      	ldr	r2, [pc, #12]	@ (8002574 <HAL_IncTick+0x1c>)
 8002568:	6013      	str	r3, [r2, #0]
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	20001d78 	.word	0x20001d78
 8002578:	20000008 	.word	0x20000008

0800257c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return uwTick;
 8002580:	4b03      	ldr	r3, [pc, #12]	@ (8002590 <HAL_GetTick+0x14>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20001d78 	.word	0x20001d78

08002594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800259c:	f7ff ffee 	bl	800257c <HAL_GetTick>
 80025a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025ac:	d004      	beq.n	80025b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ae:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <HAL_Delay+0x40>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4413      	add	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025b8:	bf00      	nop
 80025ba:	f7ff ffdf 	bl	800257c <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d8f7      	bhi.n	80025ba <HAL_Delay+0x26>
  {
  }
}
 80025ca:	bf00      	nop
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000008 	.word	0x20000008

080025d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	609a      	str	r2, [r3, #8]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	609a      	str	r2, [r3, #8]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3360      	adds	r3, #96	@ 0x60
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <LL_ADC_SetOffset+0x44>)
 8002662:	4013      	ands	r3, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	4313      	orrs	r3, r2
 8002670:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002678:	bf00      	nop
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	03fff000 	.word	0x03fff000

08002688 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3360      	adds	r3, #96	@ 0x60
 8002696:	461a      	mov	r2, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3360      	adds	r3, #96	@ 0x60
 80026c4:	461a      	mov	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	431a      	orrs	r2, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026de:	bf00      	nop
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b087      	sub	sp, #28
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3360      	adds	r3, #96	@ 0x60
 80026fa:	461a      	mov	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	431a      	orrs	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002714:	bf00      	nop
 8002716:	371c      	adds	r7, #28
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3360      	adds	r3, #96	@ 0x60
 8002730:	461a      	mov	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	431a      	orrs	r2, r3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800274a:	bf00      	nop
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	615a      	str	r2, [r3, #20]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b087      	sub	sp, #28
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3330      	adds	r3, #48	@ 0x30
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	4413      	add	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	211f      	movs	r1, #31
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	401a      	ands	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	0e9b      	lsrs	r3, r3, #26
 80027da:	f003 011f 	and.w	r1, r3, #31
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	431a      	orrs	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b087      	sub	sp, #28
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3314      	adds	r3, #20
 800280a:	461a      	mov	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	0e5b      	lsrs	r3, r3, #25
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	4413      	add	r3, r2
 8002818:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	0d1b      	lsrs	r3, r3, #20
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	2107      	movs	r1, #7
 8002828:	fa01 f303 	lsl.w	r3, r1, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	401a      	ands	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	0d1b      	lsrs	r3, r3, #20
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	431a      	orrs	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002844:	bf00      	nop
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002868:	43db      	mvns	r3, r3
 800286a:	401a      	ands	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f003 0318 	and.w	r3, r3, #24
 8002872:	4908      	ldr	r1, [pc, #32]	@ (8002894 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002874:	40d9      	lsrs	r1, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	400b      	ands	r3, r1
 800287a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287e:	431a      	orrs	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	0007ffff 	.word	0x0007ffff

08002898 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 031f 	and.w	r3, r3, #31
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80028c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6093      	str	r3, [r2, #8]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028ec:	d101      	bne.n	80028f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002910:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002914:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002938:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800293c:	d101      	bne.n	8002942 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002960:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002964:	f043 0201 	orr.w	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <LL_ADC_IsEnabled+0x18>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <LL_ADC_IsEnabled+0x1a>
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029b2:	f043 0204 	orr.w	r2, r3, #4
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d101      	bne.n	80029de <LL_ADC_REG_IsConversionOngoing+0x18>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d101      	bne.n	8002a04 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b089      	sub	sp, #36	@ 0x24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e167      	b.n	8002cfe <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7fe f977 	bl	8000d30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff3f 	bl	80028d8 <LL_ADC_IsDeepPowerDownEnabled>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d004      	beq.n	8002a6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff25 	bl	80028b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff ff5a 	bl	8002928 <LL_ADC_IsInternalRegulatorEnabled>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d115      	bne.n	8002aa6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff ff3e 	bl	8002900 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a84:	4ba0      	ldr	r3, [pc, #640]	@ (8002d08 <HAL_ADC_Init+0x2f4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	099b      	lsrs	r3, r3, #6
 8002a8a:	4aa0      	ldr	r2, [pc, #640]	@ (8002d0c <HAL_ADC_Init+0x2f8>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	099b      	lsrs	r3, r3, #6
 8002a92:	3301      	adds	r3, #1
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a98:	e002      	b.n	8002aa0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f9      	bne.n	8002a9a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff3c 	bl	8002928 <LL_ADC_IsInternalRegulatorEnabled>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10d      	bne.n	8002ad2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aba:	f043 0210 	orr.w	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac6:	f043 0201 	orr.w	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff75 	bl	80029c6 <LL_ADC_REG_IsConversionOngoing>
 8002adc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 8100 	bne.w	8002cec <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 80fc 	bne.w	8002cec <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002afc:	f043 0202 	orr.w	r2, r3, #2
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff35 	bl	8002978 <LL_ADC_IsEnabled>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d111      	bne.n	8002b38 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b14:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b18:	f7ff ff2e 	bl	8002978 <LL_ADC_IsEnabled>
 8002b1c:	4604      	mov	r4, r0
 8002b1e:	487c      	ldr	r0, [pc, #496]	@ (8002d10 <HAL_ADC_Init+0x2fc>)
 8002b20:	f7ff ff2a 	bl	8002978 <LL_ADC_IsEnabled>
 8002b24:	4603      	mov	r3, r0
 8002b26:	4323      	orrs	r3, r4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d105      	bne.n	8002b38 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4619      	mov	r1, r3
 8002b32:	4878      	ldr	r0, [pc, #480]	@ (8002d14 <HAL_ADC_Init+0x300>)
 8002b34:	f7ff fd50 	bl	80025d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7f5b      	ldrb	r3, [r3, #29]
 8002b3c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b42:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002b48:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002b4e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b56:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d106      	bne.n	8002b74 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	045b      	lsls	r3, r3, #17
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d009      	beq.n	8002b90 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b80:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b88:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	4b60      	ldr	r3, [pc, #384]	@ (8002d18 <HAL_ADC_Init+0x304>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	69b9      	ldr	r1, [r7, #24]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff14 	bl	80029ec <LL_ADC_INJ_IsConversionOngoing>
 8002bc4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d16d      	bne.n	8002ca8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d16a      	bne.n	8002ca8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bd6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002bde:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bee:	f023 0302 	bic.w	r3, r3, #2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	69b9      	ldr	r1, [r7, #24]
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d017      	beq.n	8002c34 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c12:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c1c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6911      	ldr	r1, [r2, #16]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002c32:	e013      	b.n	8002c5c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002c42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c58:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d118      	bne.n	8002c98 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002c70:	f023 0304 	bic.w	r3, r3, #4
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c7c:	4311      	orrs	r1, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c82:	4311      	orrs	r1, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0201 	orr.w	r2, r2, #1
 8002c94:	611a      	str	r2, [r3, #16]
 8002c96:	e007      	b.n	8002ca8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691a      	ldr	r2, [r3, #16]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d10c      	bne.n	8002cca <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	f023 010f 	bic.w	r1, r3, #15
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	1e5a      	subs	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cc8:	e007      	b.n	8002cda <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 020f 	bic.w	r2, r2, #15
 8002cd8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cde:	f023 0303 	bic.w	r3, r3, #3
 8002ce2:	f043 0201 	orr.w	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002cea:	e007      	b.n	8002cfc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf0:	f043 0210 	orr.w	r2, r3, #16
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3724      	adds	r7, #36	@ 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd90      	pop	{r4, r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	053e2d63 	.word	0x053e2d63
 8002d10:	50000100 	.word	0x50000100
 8002d14:	50000300 	.word	0x50000300
 8002d18:	fff04007 	.word	0xfff04007

08002d1c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d28:	4851      	ldr	r0, [pc, #324]	@ (8002e70 <HAL_ADC_Start_DMA+0x154>)
 8002d2a:	f7ff fdb5 	bl	8002898 <LL_ADC_GetMultimode>
 8002d2e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fe46 	bl	80029c6 <LL_ADC_REG_IsConversionOngoing>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f040 808f 	bne.w	8002e60 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_ADC_Start_DMA+0x34>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e08a      	b.n	8002e66 <HAL_ADC_Start_DMA+0x14a>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	d002      	beq.n	8002d6a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	2b09      	cmp	r3, #9
 8002d68:	d173      	bne.n	8002e52 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fc8e 	bl	800368c <ADC_Enable>
 8002d70:	4603      	mov	r3, r0
 8002d72:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002d74:	7dfb      	ldrb	r3, [r7, #23]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d166      	bne.n	8002e48 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d82:	f023 0301 	bic.w	r3, r3, #1
 8002d86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a38      	ldr	r2, [pc, #224]	@ (8002e74 <HAL_ADC_Start_DMA+0x158>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d002      	beq.n	8002d9e <HAL_ADC_Start_DMA+0x82>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	e001      	b.n	8002da2 <HAL_ADC_Start_DMA+0x86>
 8002d9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d002      	beq.n	8002db0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d006      	beq.n	8002dd6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dcc:	f023 0206 	bic.w	r2, r3, #6
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	661a      	str	r2, [r3, #96]	@ 0x60
 8002dd4:	e002      	b.n	8002ddc <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de0:	4a25      	ldr	r2, [pc, #148]	@ (8002e78 <HAL_ADC_Start_DMA+0x15c>)
 8002de2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de8:	4a24      	ldr	r2, [pc, #144]	@ (8002e7c <HAL_ADC_Start_DMA+0x160>)
 8002dea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df0:	4a23      	ldr	r2, [pc, #140]	@ (8002e80 <HAL_ADC_Start_DMA+0x164>)
 8002df2:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	221c      	movs	r2, #28
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0210 	orr.w	r2, r2, #16
 8002e12:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3340      	adds	r3, #64	@ 0x40
 8002e2e:	4619      	mov	r1, r3
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f000 ff96 	bl	8003d64 <HAL_DMA_Start_IT>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fdac 	bl	800299e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002e46:	e00d      	b.n	8002e64 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002e50:	e008      	b.n	8002e64 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002e5e:	e001      	b.n	8002e64 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e60:	2302      	movs	r3, #2
 8002e62:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	50000300 	.word	0x50000300
 8002e74:	50000100 	.word	0x50000100
 8002e78:	08003799 	.word	0x08003799
 8002e7c:	08003871 	.word	0x08003871
 8002e80:	0800388d 	.word	0x0800388d

08002e84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b0b6      	sub	sp, #216	@ 0xd8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x22>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e3c8      	b.n	8003660 <HAL_ADC_ConfigChannel+0x7b4>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fd73 	bl	80029c6 <LL_ADC_REG_IsConversionOngoing>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 83ad 	bne.w	8003642 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f7ff fc54 	bl	80027a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fd61 	bl	80029c6 <LL_ADC_REG_IsConversionOngoing>
 8002f04:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fd6d 	bl	80029ec <LL_ADC_INJ_IsConversionOngoing>
 8002f12:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 81d9 	bne.w	80032d2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f040 81d4 	bne.w	80032d2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f32:	d10f      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f7ff fc5b 	bl	80027fa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fc02 	bl	8002756 <LL_ADC_SetSamplingTimeCommonConfig>
 8002f52:	e00e      	b.n	8002f72 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	6819      	ldr	r1, [r3, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	461a      	mov	r2, r3
 8002f62:	f7ff fc4a 	bl	80027fa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fbf2 	bl	8002756 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	695a      	ldr	r2, [r3, #20]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	08db      	lsrs	r3, r3, #3
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d022      	beq.n	8002fda <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6919      	ldr	r1, [r3, #16]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002fa4:	f7ff fb4c 	bl	8002640 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6919      	ldr	r1, [r3, #16]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	f7ff fb98 	bl	80026ea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d102      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x124>
 8002fca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fce:	e000      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x126>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f7ff fba4 	bl	8002720 <LL_ADC_SetOffsetSaturation>
 8002fd8:	e17b      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fb51 	bl	8002688 <LL_ADC_GetOffsetChannel>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x15a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fb46 	bl	8002688 <LL_ADC_GetOffsetChannel>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	0e9b      	lsrs	r3, r3, #26
 8003000:	f003 021f 	and.w	r2, r3, #31
 8003004:	e01e      	b.n	8003044 <HAL_ADC_ConfigChannel+0x198>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fb3b 	bl	8002688 <LL_ADC_GetOffsetChannel>
 8003012:	4603      	mov	r3, r0
 8003014:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003024:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003028:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800302c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003034:	2320      	movs	r3, #32
 8003036:	e004      	b.n	8003042 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003038:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304c:	2b00      	cmp	r3, #0
 800304e:	d105      	bne.n	800305c <HAL_ADC_ConfigChannel+0x1b0>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	0e9b      	lsrs	r3, r3, #26
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	e018      	b.n	800308e <HAL_ADC_ConfigChannel+0x1e2>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003074:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003078:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003080:	2320      	movs	r3, #32
 8003082:	e004      	b.n	800308e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003084:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800308e:	429a      	cmp	r2, r3
 8003090:	d106      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fb0a 	bl	80026b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2101      	movs	r1, #1
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff faee 	bl	8002688 <LL_ADC_GetOffsetChannel>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x220>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2101      	movs	r1, #1
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fae3 	bl	8002688 <LL_ADC_GetOffsetChannel>
 80030c2:	4603      	mov	r3, r0
 80030c4:	0e9b      	lsrs	r3, r3, #26
 80030c6:	f003 021f 	and.w	r2, r3, #31
 80030ca:	e01e      	b.n	800310a <HAL_ADC_ConfigChannel+0x25e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2101      	movs	r1, #1
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fad8 	bl	8002688 <LL_ADC_GetOffsetChannel>
 80030d8:	4603      	mov	r3, r0
 80030da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80030ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80030f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80030fa:	2320      	movs	r3, #32
 80030fc:	e004      	b.n	8003108 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80030fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003112:	2b00      	cmp	r3, #0
 8003114:	d105      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x276>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	0e9b      	lsrs	r3, r3, #26
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	e018      	b.n	8003154 <HAL_ADC_ConfigChannel+0x2a8>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003136:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800313a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800313e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003146:	2320      	movs	r3, #32
 8003148:	e004      	b.n	8003154 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800314a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003154:	429a      	cmp	r2, r3
 8003156:	d106      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2200      	movs	r2, #0
 800315e:	2101      	movs	r1, #1
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff faa7 	bl	80026b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2102      	movs	r1, #2
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fa8b 	bl	8002688 <LL_ADC_GetOffsetChannel>
 8003172:	4603      	mov	r3, r0
 8003174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10a      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x2e6>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2102      	movs	r1, #2
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fa80 	bl	8002688 <LL_ADC_GetOffsetChannel>
 8003188:	4603      	mov	r3, r0
 800318a:	0e9b      	lsrs	r3, r3, #26
 800318c:	f003 021f 	and.w	r2, r3, #31
 8003190:	e01e      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x324>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2102      	movs	r1, #2
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff fa75 	bl	8002688 <LL_ADC_GetOffsetChannel>
 800319e:	4603      	mov	r3, r0
 80031a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031a8:	fa93 f3a3 	rbit	r3, r3
 80031ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80031b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80031b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80031c0:	2320      	movs	r3, #32
 80031c2:	e004      	b.n	80031ce <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80031c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031c8:	fab3 f383 	clz	r3, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d105      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x33c>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	0e9b      	lsrs	r3, r3, #26
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	e016      	b.n	8003216 <HAL_ADC_ConfigChannel+0x36a>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031f4:	fa93 f3a3 	rbit	r3, r3
 80031f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80031fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003200:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003208:	2320      	movs	r3, #32
 800320a:	e004      	b.n	8003216 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800320c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003216:	429a      	cmp	r2, r3
 8003218:	d106      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2200      	movs	r2, #0
 8003220:	2102      	movs	r1, #2
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fa46 	bl	80026b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2103      	movs	r1, #3
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fa2a 	bl	8002688 <LL_ADC_GetOffsetChannel>
 8003234:	4603      	mov	r3, r0
 8003236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x3a8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2103      	movs	r1, #3
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fa1f 	bl	8002688 <LL_ADC_GetOffsetChannel>
 800324a:	4603      	mov	r3, r0
 800324c:	0e9b      	lsrs	r3, r3, #26
 800324e:	f003 021f 	and.w	r2, r3, #31
 8003252:	e017      	b.n	8003284 <HAL_ADC_ConfigChannel+0x3d8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2103      	movs	r1, #3
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fa14 	bl	8002688 <LL_ADC_GetOffsetChannel>
 8003260:	4603      	mov	r3, r0
 8003262:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800326c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800326e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003270:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003276:	2320      	movs	r3, #32
 8003278:	e003      	b.n	8003282 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800327a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <HAL_ADC_ConfigChannel+0x3f0>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	0e9b      	lsrs	r3, r3, #26
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	e011      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x414>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80032aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80032ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80032b4:	2320      	movs	r3, #32
 80032b6:	e003      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80032b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d106      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2200      	movs	r2, #0
 80032ca:	2103      	movs	r1, #3
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff f9f1 	bl	80026b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fb4e 	bl	8002978 <LL_ADC_IsEnabled>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f040 8140 	bne.w	8003564 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6819      	ldr	r1, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	461a      	mov	r2, r3
 80032f2:	f7ff faad 	bl	8002850 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	4a8f      	ldr	r2, [pc, #572]	@ (8003538 <HAL_ADC_ConfigChannel+0x68c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	f040 8131 	bne.w	8003564 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10b      	bne.n	800332a <HAL_ADC_ConfigChannel+0x47e>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	0e9b      	lsrs	r3, r3, #26
 8003318:	3301      	adds	r3, #1
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	2b09      	cmp	r3, #9
 8003320:	bf94      	ite	ls
 8003322:	2301      	movls	r3, #1
 8003324:	2300      	movhi	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	e019      	b.n	800335e <HAL_ADC_ConfigChannel+0x4b2>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003338:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800333a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800333c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003342:	2320      	movs	r3, #32
 8003344:	e003      	b.n	800334e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003346:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003348:	fab3 f383 	clz	r3, r3
 800334c:	b2db      	uxtb	r3, r3
 800334e:	3301      	adds	r3, #1
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	2b09      	cmp	r3, #9
 8003356:	bf94      	ite	ls
 8003358:	2301      	movls	r3, #1
 800335a:	2300      	movhi	r3, #0
 800335c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800335e:	2b00      	cmp	r3, #0
 8003360:	d079      	beq.n	8003456 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336a:	2b00      	cmp	r3, #0
 800336c:	d107      	bne.n	800337e <HAL_ADC_ConfigChannel+0x4d2>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	0e9b      	lsrs	r3, r3, #26
 8003374:	3301      	adds	r3, #1
 8003376:	069b      	lsls	r3, r3, #26
 8003378:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800337c:	e015      	b.n	80033aa <HAL_ADC_ConfigChannel+0x4fe>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800338c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800338e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003396:	2320      	movs	r3, #32
 8003398:	e003      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800339a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	3301      	adds	r3, #1
 80033a4:	069b      	lsls	r3, r3, #26
 80033a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x51e>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	0e9b      	lsrs	r3, r3, #26
 80033bc:	3301      	adds	r3, #1
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	2101      	movs	r1, #1
 80033c4:	fa01 f303 	lsl.w	r3, r1, r3
 80033c8:	e017      	b.n	80033fa <HAL_ADC_ConfigChannel+0x54e>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80033d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033da:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80033dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80033e2:	2320      	movs	r3, #32
 80033e4:	e003      	b.n	80033ee <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80033e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	3301      	adds	r3, #1
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	2101      	movs	r1, #1
 80033f6:	fa01 f303 	lsl.w	r3, r1, r3
 80033fa:	ea42 0103 	orr.w	r1, r2, r3
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x574>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	0e9b      	lsrs	r3, r3, #26
 8003410:	3301      	adds	r3, #1
 8003412:	f003 021f 	and.w	r2, r3, #31
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	051b      	lsls	r3, r3, #20
 800341e:	e018      	b.n	8003452 <HAL_ADC_ConfigChannel+0x5a6>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800342e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003430:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003438:	2320      	movs	r3, #32
 800343a:	e003      	b.n	8003444 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800343c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	3301      	adds	r3, #1
 8003446:	f003 021f 	and.w	r2, r3, #31
 800344a:	4613      	mov	r3, r2
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	4413      	add	r3, r2
 8003450:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003452:	430b      	orrs	r3, r1
 8003454:	e081      	b.n	800355a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345e:	2b00      	cmp	r3, #0
 8003460:	d107      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x5c6>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	0e9b      	lsrs	r3, r3, #26
 8003468:	3301      	adds	r3, #1
 800346a:	069b      	lsls	r3, r3, #26
 800346c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003470:	e015      	b.n	800349e <HAL_ADC_ConfigChannel+0x5f2>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003482:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800348a:	2320      	movs	r3, #32
 800348c:	e003      	b.n	8003496 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800348e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003490:	fab3 f383 	clz	r3, r3
 8003494:	b2db      	uxtb	r3, r3
 8003496:	3301      	adds	r3, #1
 8003498:	069b      	lsls	r3, r3, #26
 800349a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <HAL_ADC_ConfigChannel+0x612>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	0e9b      	lsrs	r3, r3, #26
 80034b0:	3301      	adds	r3, #1
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	2101      	movs	r1, #1
 80034b8:	fa01 f303 	lsl.w	r3, r1, r3
 80034bc:	e017      	b.n	80034ee <HAL_ADC_ConfigChannel+0x642>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	61fb      	str	r3, [r7, #28]
  return result;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80034d6:	2320      	movs	r3, #32
 80034d8:	e003      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	fab3 f383 	clz	r3, r3
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	3301      	adds	r3, #1
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	2101      	movs	r1, #1
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	ea42 0103 	orr.w	r1, r2, r3
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10d      	bne.n	800351a <HAL_ADC_ConfigChannel+0x66e>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	0e9b      	lsrs	r3, r3, #26
 8003504:	3301      	adds	r3, #1
 8003506:	f003 021f 	and.w	r2, r3, #31
 800350a:	4613      	mov	r3, r2
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	4413      	add	r3, r2
 8003510:	3b1e      	subs	r3, #30
 8003512:	051b      	lsls	r3, r3, #20
 8003514:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003518:	e01e      	b.n	8003558 <HAL_ADC_ConfigChannel+0x6ac>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	613b      	str	r3, [r7, #16]
  return result;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d104      	bne.n	800353c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003532:	2320      	movs	r3, #32
 8003534:	e006      	b.n	8003544 <HAL_ADC_ConfigChannel+0x698>
 8003536:	bf00      	nop
 8003538:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	3301      	adds	r3, #1
 8003546:	f003 021f 	and.w	r2, r3, #31
 800354a:	4613      	mov	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	3b1e      	subs	r3, #30
 8003552:	051b      	lsls	r3, r3, #20
 8003554:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003558:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800355e:	4619      	mov	r1, r3
 8003560:	f7ff f94b 	bl	80027fa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4b3f      	ldr	r3, [pc, #252]	@ (8003668 <HAL_ADC_ConfigChannel+0x7bc>)
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d071      	beq.n	8003654 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003570:	483e      	ldr	r0, [pc, #248]	@ (800366c <HAL_ADC_ConfigChannel+0x7c0>)
 8003572:	f7ff f857 	bl	8002624 <LL_ADC_GetCommonPathInternalCh>
 8003576:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a3c      	ldr	r2, [pc, #240]	@ (8003670 <HAL_ADC_ConfigChannel+0x7c4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d004      	beq.n	800358e <HAL_ADC_ConfigChannel+0x6e2>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a3a      	ldr	r2, [pc, #232]	@ (8003674 <HAL_ADC_ConfigChannel+0x7c8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d127      	bne.n	80035de <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800358e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003592:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d121      	bne.n	80035de <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035a2:	d157      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035ac:	4619      	mov	r1, r3
 80035ae:	482f      	ldr	r0, [pc, #188]	@ (800366c <HAL_ADC_ConfigChannel+0x7c0>)
 80035b0:	f7ff f825 	bl	80025fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035b4:	4b30      	ldr	r3, [pc, #192]	@ (8003678 <HAL_ADC_ConfigChannel+0x7cc>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	099b      	lsrs	r3, r3, #6
 80035ba:	4a30      	ldr	r2, [pc, #192]	@ (800367c <HAL_ADC_ConfigChannel+0x7d0>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	4613      	mov	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035ce:	e002      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f9      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035dc:	e03a      	b.n	8003654 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a27      	ldr	r2, [pc, #156]	@ (8003680 <HAL_ADC_ConfigChannel+0x7d4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d113      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10d      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a22      	ldr	r2, [pc, #136]	@ (8003684 <HAL_ADC_ConfigChannel+0x7d8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d02a      	beq.n	8003654 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003602:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003606:	4619      	mov	r1, r3
 8003608:	4818      	ldr	r0, [pc, #96]	@ (800366c <HAL_ADC_ConfigChannel+0x7c0>)
 800360a:	f7fe fff8 	bl	80025fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800360e:	e021      	b.n	8003654 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1c      	ldr	r2, [pc, #112]	@ (8003688 <HAL_ADC_ConfigChannel+0x7dc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d11c      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800361a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800361e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d116      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a16      	ldr	r2, [pc, #88]	@ (8003684 <HAL_ADC_ConfigChannel+0x7d8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d011      	beq.n	8003654 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003634:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003638:	4619      	mov	r1, r3
 800363a:	480c      	ldr	r0, [pc, #48]	@ (800366c <HAL_ADC_ConfigChannel+0x7c0>)
 800363c:	f7fe ffdf 	bl	80025fe <LL_ADC_SetCommonPathInternalCh>
 8003640:	e008      	b.n	8003654 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003646:	f043 0220 	orr.w	r2, r3, #32
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800365c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003660:	4618      	mov	r0, r3
 8003662:	37d8      	adds	r7, #216	@ 0xd8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	80080000 	.word	0x80080000
 800366c:	50000300 	.word	0x50000300
 8003670:	c3210000 	.word	0xc3210000
 8003674:	90c00010 	.word	0x90c00010
 8003678:	20000000 	.word	0x20000000
 800367c:	053e2d63 	.word	0x053e2d63
 8003680:	c7520000 	.word	0xc7520000
 8003684:	50000100 	.word	0x50000100
 8003688:	cb840000 	.word	0xcb840000

0800368c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003694:	2300      	movs	r3, #0
 8003696:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff f96b 	bl	8002978 <LL_ADC_IsEnabled>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d169      	bne.n	800377c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	4b36      	ldr	r3, [pc, #216]	@ (8003788 <ADC_Enable+0xfc>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00d      	beq.n	80036d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ba:	f043 0210 	orr.w	r2, r3, #16
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c6:	f043 0201 	orr.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e055      	b.n	800377e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff f93a 	bl	8002950 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80036dc:	482b      	ldr	r0, [pc, #172]	@ (800378c <ADC_Enable+0x100>)
 80036de:	f7fe ffa1 	bl	8002624 <LL_ADC_GetCommonPathInternalCh>
 80036e2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80036e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d013      	beq.n	8003714 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036ec:	4b28      	ldr	r3, [pc, #160]	@ (8003790 <ADC_Enable+0x104>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	099b      	lsrs	r3, r3, #6
 80036f2:	4a28      	ldr	r2, [pc, #160]	@ (8003794 <ADC_Enable+0x108>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	099b      	lsrs	r3, r3, #6
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	4613      	mov	r3, r2
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003706:	e002      	b.n	800370e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	3b01      	subs	r3, #1
 800370c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f9      	bne.n	8003708 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003714:	f7fe ff32 	bl	800257c <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800371a:	e028      	b.n	800376e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff f929 	bl	8002978 <LL_ADC_IsEnabled>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d104      	bne.n	8003736 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff f90d 	bl	8002950 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003736:	f7fe ff21 	bl	800257c <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d914      	bls.n	800376e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b01      	cmp	r3, #1
 8003750:	d00d      	beq.n	800376e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003756:	f043 0210 	orr.w	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003762:	f043 0201 	orr.w	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e007      	b.n	800377e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b01      	cmp	r3, #1
 800377a:	d1cf      	bne.n	800371c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	8000003f 	.word	0x8000003f
 800378c:	50000300 	.word	0x50000300
 8003790:	20000000 	.word	0x20000000
 8003794:	053e2d63 	.word	0x053e2d63

08003798 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037aa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d14b      	bne.n	800384a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d021      	beq.n	8003810 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe ffd3 	bl	800277c <LL_ADC_REG_IsTriggerSourceSWStart>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d032      	beq.n	8003842 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d12b      	bne.n	8003842 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d11f      	bne.n	8003842 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003806:	f043 0201 	orr.w	r2, r3, #1
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800380e:	e018      	b.n	8003842 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d111      	bne.n	8003842 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003822:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d105      	bne.n	8003842 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f7fd fc48 	bl	80010d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003848:	e00e      	b.n	8003868 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384e:	f003 0310 	and.w	r3, r3, #16
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f7ff fb1e 	bl	8002e98 <HAL_ADC_ErrorCallback>
}
 800385c:	e004      	b.n	8003868 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	4798      	blx	r3
}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800387c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f7ff fb00 	bl	8002e84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003884:	bf00      	nop
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038aa:	f043 0204 	orr.w	r2, r3, #4
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f7ff faf0 	bl	8002e98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038b8:	bf00      	nop
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <LL_ADC_IsEnabled>:
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <LL_ADC_IsEnabled+0x18>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <LL_ADC_IsEnabled+0x1a>
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d101      	bne.n	80038fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b0a1      	sub	sp, #132	@ 0x84
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003922:	2b01      	cmp	r3, #1
 8003924:	d101      	bne.n	800392a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003926:	2302      	movs	r3, #2
 8003928:	e08b      	b.n	8003a42 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003932:	2300      	movs	r3, #0
 8003934:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003936:	2300      	movs	r3, #0
 8003938:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003942:	d102      	bne.n	800394a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003944:	4b41      	ldr	r3, [pc, #260]	@ (8003a4c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	e001      	b.n	800394e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10b      	bne.n	800396c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003958:	f043 0220 	orr.w	r2, r3, #32
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e06a      	b.n	8003a42 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff ffb9 	bl	80038e6 <LL_ADC_REG_IsConversionOngoing>
 8003974:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff ffb3 	bl	80038e6 <LL_ADC_REG_IsConversionOngoing>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d14c      	bne.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003986:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003988:	2b00      	cmp	r3, #0
 800398a:	d149      	bne.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800398c:	4b30      	ldr	r3, [pc, #192]	@ (8003a50 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800398e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d028      	beq.n	80039ea <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003998:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	6859      	ldr	r1, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80039aa:	035b      	lsls	r3, r3, #13
 80039ac:	430b      	orrs	r3, r1
 80039ae:	431a      	orrs	r2, r3
 80039b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039b4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80039b8:	f7ff ff82 	bl	80038c0 <LL_ADC_IsEnabled>
 80039bc:	4604      	mov	r4, r0
 80039be:	4823      	ldr	r0, [pc, #140]	@ (8003a4c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80039c0:	f7ff ff7e 	bl	80038c0 <LL_ADC_IsEnabled>
 80039c4:	4603      	mov	r3, r0
 80039c6:	4323      	orrs	r3, r4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d133      	bne.n	8003a34 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80039d4:	f023 030f 	bic.w	r3, r3, #15
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	6811      	ldr	r1, [r2, #0]
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	6892      	ldr	r2, [r2, #8]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	431a      	orrs	r2, r3
 80039e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039e6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039e8:	e024      	b.n	8003a34 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039f4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039f6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80039fa:	f7ff ff61 	bl	80038c0 <LL_ADC_IsEnabled>
 80039fe:	4604      	mov	r4, r0
 8003a00:	4812      	ldr	r0, [pc, #72]	@ (8003a4c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003a02:	f7ff ff5d 	bl	80038c0 <LL_ADC_IsEnabled>
 8003a06:	4603      	mov	r3, r0
 8003a08:	4323      	orrs	r3, r4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d112      	bne.n	8003a34 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a16:	f023 030f 	bic.w	r3, r3, #15
 8003a1a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a1c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a1e:	e009      	b.n	8003a34 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a24:	f043 0220 	orr.w	r2, r3, #32
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003a32:	e000      	b.n	8003a36 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a3e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3784      	adds	r7, #132	@ 0x84
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd90      	pop	{r4, r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	50000100 	.word	0x50000100
 8003a50:	50000300 	.word	0x50000300

08003a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a64:	4b0c      	ldr	r3, [pc, #48]	@ (8003a98 <__NVIC_SetPriorityGrouping+0x44>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a70:	4013      	ands	r3, r2
 8003a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a86:	4a04      	ldr	r2, [pc, #16]	@ (8003a98 <__NVIC_SetPriorityGrouping+0x44>)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	60d3      	str	r3, [r2, #12]
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aa0:	4b04      	ldr	r3, [pc, #16]	@ (8003ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	0a1b      	lsrs	r3, r3, #8
 8003aa6:	f003 0307 	and.w	r3, r3, #7
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	db0b      	blt.n	8003ae2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	f003 021f 	and.w	r2, r3, #31
 8003ad0:	4907      	ldr	r1, [pc, #28]	@ (8003af0 <__NVIC_EnableIRQ+0x38>)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	2001      	movs	r0, #1
 8003ada:	fa00 f202 	lsl.w	r2, r0, r2
 8003ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	e000e100 	.word	0xe000e100

08003af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	6039      	str	r1, [r7, #0]
 8003afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	db0a      	blt.n	8003b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	490c      	ldr	r1, [pc, #48]	@ (8003b40 <__NVIC_SetPriority+0x4c>)
 8003b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b12:	0112      	lsls	r2, r2, #4
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	440b      	add	r3, r1
 8003b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b1c:	e00a      	b.n	8003b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4908      	ldr	r1, [pc, #32]	@ (8003b44 <__NVIC_SetPriority+0x50>)
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	3b04      	subs	r3, #4
 8003b2c:	0112      	lsls	r2, r2, #4
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	440b      	add	r3, r1
 8003b32:	761a      	strb	r2, [r3, #24]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	e000e100 	.word	0xe000e100
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b089      	sub	sp, #36	@ 0x24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f1c3 0307 	rsb	r3, r3, #7
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	bf28      	it	cs
 8003b66:	2304      	movcs	r3, #4
 8003b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	2b06      	cmp	r3, #6
 8003b70:	d902      	bls.n	8003b78 <NVIC_EncodePriority+0x30>
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3b03      	subs	r3, #3
 8003b76:	e000      	b.n	8003b7a <NVIC_EncodePriority+0x32>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43da      	mvns	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9a:	43d9      	mvns	r1, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba0:	4313      	orrs	r3, r2
         );
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3724      	adds	r7, #36	@ 0x24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff ff4c 	bl	8003a54 <__NVIC_SetPriorityGrouping>
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bd2:	f7ff ff63 	bl	8003a9c <__NVIC_GetPriorityGrouping>
 8003bd6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	6978      	ldr	r0, [r7, #20]
 8003bde:	f7ff ffb3 	bl	8003b48 <NVIC_EncodePriority>
 8003be2:	4602      	mov	r2, r0
 8003be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be8:	4611      	mov	r1, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff ff82 	bl	8003af4 <__NVIC_SetPriority>
}
 8003bf0:	bf00      	nop
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff ff56 	bl	8003ab8 <__NVIC_EnableIRQ>
}
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e08d      	b.n	8003d42 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4b47      	ldr	r3, [pc, #284]	@ (8003d4c <HAL_DMA_Init+0x138>)
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d80f      	bhi.n	8003c52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b45      	ldr	r3, [pc, #276]	@ (8003d50 <HAL_DMA_Init+0x13c>)
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a45      	ldr	r2, [pc, #276]	@ (8003d54 <HAL_DMA_Init+0x140>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	009a      	lsls	r2, r3, #2
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a42      	ldr	r2, [pc, #264]	@ (8003d58 <HAL_DMA_Init+0x144>)
 8003c4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c50:	e00e      	b.n	8003c70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	4b40      	ldr	r3, [pc, #256]	@ (8003d5c <HAL_DMA_Init+0x148>)
 8003c5a:	4413      	add	r3, r2
 8003c5c:	4a3d      	ldr	r2, [pc, #244]	@ (8003d54 <HAL_DMA_Init+0x140>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	009a      	lsls	r2, r3, #2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d60 <HAL_DMA_Init+0x14c>)
 8003c6e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f9b6 	bl	8004034 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cd0:	d102      	bne.n	8003cd8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003cec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d010      	beq.n	8003d18 <HAL_DMA_Init+0x104>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d80c      	bhi.n	8003d18 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f9d6 	bl	80040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	e008      	b.n	8003d2a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40020407 	.word	0x40020407
 8003d50:	bffdfff8 	.word	0xbffdfff8
 8003d54:	cccccccd 	.word	0xcccccccd
 8003d58:	40020000 	.word	0x40020000
 8003d5c:	bffdfbf8 	.word	0xbffdfbf8
 8003d60:	40020400 	.word	0x40020400

08003d64 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_DMA_Start_IT+0x20>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e066      	b.n	8003e52 <HAL_DMA_Start_IT+0xee>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d155      	bne.n	8003e44 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0201 	bic.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f8fb 	bl	8003fb8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f042 020e 	orr.w	r2, r2, #14
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	e00f      	b.n	8003dfc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0204 	bic.w	r2, r2, #4
 8003dea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 020a 	orr.w	r2, r2, #10
 8003dfa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d007      	beq.n	8003e1a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e18:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e30:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0201 	orr.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	e005      	b.n	8003e50 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d026      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x7a>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d021      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d107      	bne.n	8003eae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0204 	bic.w	r2, r2, #4
 8003eac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb2:	f003 021f 	and.w	r2, r3, #31
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	2104      	movs	r1, #4
 8003ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d071      	beq.n	8003fae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ed2:	e06c      	b.n	8003fae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed8:	f003 031f 	and.w	r3, r3, #31
 8003edc:	2202      	movs	r2, #2
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d02e      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d029      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10b      	bne.n	8003f18 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 020a 	bic.w	r2, r2, #10
 8003f0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1c:	f003 021f 	and.w	r2, r3, #31
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f24:	2102      	movs	r1, #2
 8003f26:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d038      	beq.n	8003fae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f44:	e033      	b.n	8003fae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	2208      	movs	r2, #8
 8003f50:	409a      	lsls	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d02a      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d025      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 020e 	bic.w	r2, r2, #14
 8003f72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f78:	f003 021f 	and.w	r2, r3, #31
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	2101      	movs	r1, #1
 8003f82:	fa01 f202 	lsl.w	r2, r1, r2
 8003f86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d004      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003fae:	bf00      	nop
 8003fb0:	bf00      	nop
}
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003fce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d004      	beq.n	8003fe2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003fe0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe6:	f003 021f 	and.w	r2, r3, #31
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	2101      	movs	r1, #1
 8003ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b10      	cmp	r3, #16
 8004004:	d108      	bne.n	8004018 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004016:	e007      	b.n	8004028 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	60da      	str	r2, [r3, #12]
}
 8004028:	bf00      	nop
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	4b16      	ldr	r3, [pc, #88]	@ (800409c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004044:	429a      	cmp	r2, r3
 8004046:	d802      	bhi.n	800404e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004048:	4b15      	ldr	r3, [pc, #84]	@ (80040a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	e001      	b.n	8004052 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800404e:	4b15      	ldr	r3, [pc, #84]	@ (80040a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004050:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	3b08      	subs	r3, #8
 800405e:	4a12      	ldr	r2, [pc, #72]	@ (80040a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406c:	089b      	lsrs	r3, r3, #2
 800406e:	009a      	lsls	r2, r3, #2
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4413      	add	r3, r2
 8004074:	461a      	mov	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a0b      	ldr	r2, [pc, #44]	@ (80040ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800407e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 031f 	and.w	r3, r3, #31
 8004086:	2201      	movs	r2, #1
 8004088:	409a      	lsls	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800408e:	bf00      	nop
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40020407 	.word	0x40020407
 80040a0:	40020800 	.word	0x40020800
 80040a4:	40020820 	.word	0x40020820
 80040a8:	cccccccd 	.word	0xcccccccd
 80040ac:	40020880 	.word	0x40020880

080040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	461a      	mov	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a08      	ldr	r2, [pc, #32]	@ (80040f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80040d2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	2201      	movs	r2, #1
 80040de:	409a      	lsls	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	1000823f 	.word	0x1000823f
 80040f4:	40020940 	.word	0x40020940

080040f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004106:	e15a      	b.n	80043be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	2101      	movs	r1, #1
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	fa01 f303 	lsl.w	r3, r1, r3
 8004114:	4013      	ands	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 814c 	beq.w	80043b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	2b01      	cmp	r3, #1
 800412a:	d005      	beq.n	8004138 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004134:	2b02      	cmp	r3, #2
 8004136:	d130      	bne.n	800419a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	2203      	movs	r2, #3
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4013      	ands	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800416e:	2201      	movs	r2, #1
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43db      	mvns	r3, r3
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4013      	ands	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	091b      	lsrs	r3, r3, #4
 8004184:	f003 0201 	and.w	r2, r3, #1
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d017      	beq.n	80041d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	2203      	movs	r2, #3
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4013      	ands	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d123      	bne.n	800422a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	08da      	lsrs	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3208      	adds	r2, #8
 80041ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	220f      	movs	r2, #15
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4013      	ands	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	08da      	lsrs	r2, r3, #3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3208      	adds	r2, #8
 8004224:	6939      	ldr	r1, [r7, #16]
 8004226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	2203      	movs	r2, #3
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4013      	ands	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 0203 	and.w	r2, r3, #3
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 80a6 	beq.w	80043b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800426c:	4b5b      	ldr	r3, [pc, #364]	@ (80043dc <HAL_GPIO_Init+0x2e4>)
 800426e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004270:	4a5a      	ldr	r2, [pc, #360]	@ (80043dc <HAL_GPIO_Init+0x2e4>)
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	6613      	str	r3, [r2, #96]	@ 0x60
 8004278:	4b58      	ldr	r3, [pc, #352]	@ (80043dc <HAL_GPIO_Init+0x2e4>)
 800427a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004284:	4a56      	ldr	r2, [pc, #344]	@ (80043e0 <HAL_GPIO_Init+0x2e8>)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	089b      	lsrs	r3, r3, #2
 800428a:	3302      	adds	r3, #2
 800428c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004290:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	220f      	movs	r2, #15
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	43db      	mvns	r3, r3
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4013      	ands	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80042ae:	d01f      	beq.n	80042f0 <HAL_GPIO_Init+0x1f8>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a4c      	ldr	r2, [pc, #304]	@ (80043e4 <HAL_GPIO_Init+0x2ec>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d019      	beq.n	80042ec <HAL_GPIO_Init+0x1f4>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a4b      	ldr	r2, [pc, #300]	@ (80043e8 <HAL_GPIO_Init+0x2f0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d013      	beq.n	80042e8 <HAL_GPIO_Init+0x1f0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a4a      	ldr	r2, [pc, #296]	@ (80043ec <HAL_GPIO_Init+0x2f4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00d      	beq.n	80042e4 <HAL_GPIO_Init+0x1ec>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a49      	ldr	r2, [pc, #292]	@ (80043f0 <HAL_GPIO_Init+0x2f8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d007      	beq.n	80042e0 <HAL_GPIO_Init+0x1e8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a48      	ldr	r2, [pc, #288]	@ (80043f4 <HAL_GPIO_Init+0x2fc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d101      	bne.n	80042dc <HAL_GPIO_Init+0x1e4>
 80042d8:	2305      	movs	r3, #5
 80042da:	e00a      	b.n	80042f2 <HAL_GPIO_Init+0x1fa>
 80042dc:	2306      	movs	r3, #6
 80042de:	e008      	b.n	80042f2 <HAL_GPIO_Init+0x1fa>
 80042e0:	2304      	movs	r3, #4
 80042e2:	e006      	b.n	80042f2 <HAL_GPIO_Init+0x1fa>
 80042e4:	2303      	movs	r3, #3
 80042e6:	e004      	b.n	80042f2 <HAL_GPIO_Init+0x1fa>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e002      	b.n	80042f2 <HAL_GPIO_Init+0x1fa>
 80042ec:	2301      	movs	r3, #1
 80042ee:	e000      	b.n	80042f2 <HAL_GPIO_Init+0x1fa>
 80042f0:	2300      	movs	r3, #0
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	f002 0203 	and.w	r2, r2, #3
 80042f8:	0092      	lsls	r2, r2, #2
 80042fa:	4093      	lsls	r3, r2
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004302:	4937      	ldr	r1, [pc, #220]	@ (80043e0 <HAL_GPIO_Init+0x2e8>)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	089b      	lsrs	r3, r3, #2
 8004308:	3302      	adds	r3, #2
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004310:	4b39      	ldr	r3, [pc, #228]	@ (80043f8 <HAL_GPIO_Init+0x300>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	43db      	mvns	r3, r3
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4013      	ands	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004334:	4a30      	ldr	r2, [pc, #192]	@ (80043f8 <HAL_GPIO_Init+0x300>)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800433a:	4b2f      	ldr	r3, [pc, #188]	@ (80043f8 <HAL_GPIO_Init+0x300>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	43db      	mvns	r3, r3
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4013      	ands	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800435e:	4a26      	ldr	r2, [pc, #152]	@ (80043f8 <HAL_GPIO_Init+0x300>)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004364:	4b24      	ldr	r3, [pc, #144]	@ (80043f8 <HAL_GPIO_Init+0x300>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	43db      	mvns	r3, r3
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4013      	ands	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004388:	4a1b      	ldr	r2, [pc, #108]	@ (80043f8 <HAL_GPIO_Init+0x300>)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800438e:	4b1a      	ldr	r3, [pc, #104]	@ (80043f8 <HAL_GPIO_Init+0x300>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	43db      	mvns	r3, r3
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4013      	ands	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043b2:	4a11      	ldr	r2, [pc, #68]	@ (80043f8 <HAL_GPIO_Init+0x300>)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	3301      	adds	r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	fa22 f303 	lsr.w	r3, r2, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f47f ae9d 	bne.w	8004108 <HAL_GPIO_Init+0x10>
  }
}
 80043ce:	bf00      	nop
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	40021000 	.word	0x40021000
 80043e0:	40010000 	.word	0x40010000
 80043e4:	48000400 	.word	0x48000400
 80043e8:	48000800 	.word	0x48000800
 80043ec:	48000c00 	.word	0x48000c00
 80043f0:	48001000 	.word	0x48001000
 80043f4:	48001400 	.word	0x48001400
 80043f8:	40010400 	.word	0x40010400

080043fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	807b      	strh	r3, [r7, #2]
 8004408:	4613      	mov	r3, r2
 800440a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800440c:	787b      	ldrb	r3, [r7, #1]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004412:	887a      	ldrh	r2, [r7, #2]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004418:	e002      	b.n	8004420 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800441a:	887a      	ldrh	r2, [r7, #2]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800443e:	887a      	ldrh	r2, [r7, #2]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4013      	ands	r3, r2
 8004444:	041a      	lsls	r2, r3, #16
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	43d9      	mvns	r1, r3
 800444a:	887b      	ldrh	r3, [r7, #2]
 800444c:	400b      	ands	r3, r1
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	619a      	str	r2, [r3, #24]
}
 8004454:	bf00      	nop
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800446a:	4b08      	ldr	r3, [pc, #32]	@ (800448c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	4013      	ands	r3, r2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d006      	beq.n	8004484 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004476:	4a05      	ldr	r2, [pc, #20]	@ (800448c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004478:	88fb      	ldrh	r3, [r7, #6]
 800447a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fd f934 	bl	80016ec <HAL_GPIO_EXTI_Callback>
  }
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40010400 	.word	0x40010400

08004490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e08d      	b.n	80045be <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fc ffae 	bl	8001418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2224      	movs	r2, #36	@ 0x24
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0201 	bic.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80044e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d107      	bne.n	800450a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004506:	609a      	str	r2, [r3, #8]
 8004508:	e006      	b.n	8004518 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004516:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d108      	bne.n	8004532 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800452e:	605a      	str	r2, [r3, #4]
 8004530:	e007      	b.n	8004542 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004540:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004554:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004564:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69d9      	ldr	r1, [r3, #28]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1a      	ldr	r2, [r3, #32]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d138      	bne.n	800464e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e032      	b.n	8004650 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2224      	movs	r2, #36	@ 0x24
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0201 	bic.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004618:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6819      	ldr	r1, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0201 	orr.w	r2, r2, #1
 8004638:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e000      	b.n	8004650 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800464e:	2302      	movs	r3, #2
  }
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b20      	cmp	r3, #32
 8004670:	d139      	bne.n	80046e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800467c:	2302      	movs	r3, #2
 800467e:	e033      	b.n	80046e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2224      	movs	r2, #36	@ 0x24
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0201 	bic.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80046ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	021b      	lsls	r3, r3, #8
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0201 	orr.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e000      	b.n	80046e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046e6:	2302      	movs	r3, #2
  }
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d141      	bne.n	8004786 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004702:	4b4b      	ldr	r3, [pc, #300]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800470e:	d131      	bne.n	8004774 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004710:	4b47      	ldr	r3, [pc, #284]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004716:	4a46      	ldr	r2, [pc, #280]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800471c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004720:	4b43      	ldr	r3, [pc, #268]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004728:	4a41      	ldr	r2, [pc, #260]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800472e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004730:	4b40      	ldr	r3, [pc, #256]	@ (8004834 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2232      	movs	r2, #50	@ 0x32
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	4a3f      	ldr	r2, [pc, #252]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800473c:	fba2 2303 	umull	r2, r3, r2, r3
 8004740:	0c9b      	lsrs	r3, r3, #18
 8004742:	3301      	adds	r3, #1
 8004744:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004746:	e002      	b.n	800474e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3b01      	subs	r3, #1
 800474c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800474e:	4b38      	ldr	r3, [pc, #224]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800475a:	d102      	bne.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f2      	bne.n	8004748 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004762:	4b33      	ldr	r3, [pc, #204]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800476a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800476e:	d158      	bne.n	8004822 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e057      	b.n	8004824 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004774:	4b2e      	ldr	r3, [pc, #184]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800477a:	4a2d      	ldr	r2, [pc, #180]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004780:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004784:	e04d      	b.n	8004822 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800478c:	d141      	bne.n	8004812 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800478e:	4b28      	ldr	r3, [pc, #160]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800479a:	d131      	bne.n	8004800 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800479c:	4b24      	ldr	r3, [pc, #144]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800479e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047a2:	4a23      	ldr	r2, [pc, #140]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047ac:	4b20      	ldr	r3, [pc, #128]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004834 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2232      	movs	r2, #50	@ 0x32
 80047c2:	fb02 f303 	mul.w	r3, r2, r3
 80047c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	0c9b      	lsrs	r3, r3, #18
 80047ce:	3301      	adds	r3, #1
 80047d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047d2:	e002      	b.n	80047da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047da:	4b15      	ldr	r3, [pc, #84]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e6:	d102      	bne.n	80047ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f2      	bne.n	80047d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047ee:	4b10      	ldr	r3, [pc, #64]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047fa:	d112      	bne.n	8004822 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e011      	b.n	8004824 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004800:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004806:	4a0a      	ldr	r2, [pc, #40]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800480c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004810:	e007      	b.n	8004822 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004812:	4b07      	ldr	r3, [pc, #28]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800481a:	4a05      	ldr	r2, [pc, #20]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800481c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004820:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	40007000 	.word	0x40007000
 8004834:	20000000 	.word	0x20000000
 8004838:	431bde83 	.word	0x431bde83

0800483c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004840:	4b05      	ldr	r3, [pc, #20]	@ (8004858 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4a04      	ldr	r2, [pc, #16]	@ (8004858 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004846:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800484a:	6093      	str	r3, [r2, #8]
}
 800484c:	bf00      	nop
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40007000 	.word	0x40007000

0800485c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e2fe      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d075      	beq.n	8004966 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800487a:	4b97      	ldr	r3, [pc, #604]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
 8004882:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004884:	4b94      	ldr	r3, [pc, #592]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b0c      	cmp	r3, #12
 8004892:	d102      	bne.n	800489a <HAL_RCC_OscConfig+0x3e>
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2b03      	cmp	r3, #3
 8004898:	d002      	beq.n	80048a0 <HAL_RCC_OscConfig+0x44>
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b08      	cmp	r3, #8
 800489e:	d10b      	bne.n	80048b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a0:	4b8d      	ldr	r3, [pc, #564]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d05b      	beq.n	8004964 <HAL_RCC_OscConfig+0x108>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d157      	bne.n	8004964 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e2d9      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048c0:	d106      	bne.n	80048d0 <HAL_RCC_OscConfig+0x74>
 80048c2:	4b85      	ldr	r3, [pc, #532]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a84      	ldr	r2, [pc, #528]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e01d      	b.n	800490c <HAL_RCC_OscConfig+0xb0>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048d8:	d10c      	bne.n	80048f4 <HAL_RCC_OscConfig+0x98>
 80048da:	4b7f      	ldr	r3, [pc, #508]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a7e      	ldr	r2, [pc, #504]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	4b7c      	ldr	r3, [pc, #496]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a7b      	ldr	r2, [pc, #492]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e00b      	b.n	800490c <HAL_RCC_OscConfig+0xb0>
 80048f4:	4b78      	ldr	r3, [pc, #480]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a77      	ldr	r2, [pc, #476]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	4b75      	ldr	r3, [pc, #468]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a74      	ldr	r2, [pc, #464]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800490a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d013      	beq.n	800493c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004914:	f7fd fe32 	bl	800257c <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800491c:	f7fd fe2e 	bl	800257c <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b64      	cmp	r3, #100	@ 0x64
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e29e      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800492e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0xc0>
 800493a:	e014      	b.n	8004966 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7fd fe1e 	bl	800257c <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004944:	f7fd fe1a 	bl	800257c <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b64      	cmp	r3, #100	@ 0x64
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e28a      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004956:	4b60      	ldr	r3, [pc, #384]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0xe8>
 8004962:	e000      	b.n	8004966 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d075      	beq.n	8004a5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004972:	4b59      	ldr	r3, [pc, #356]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 030c 	and.w	r3, r3, #12
 800497a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800497c:	4b56      	ldr	r3, [pc, #344]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b0c      	cmp	r3, #12
 800498a:	d102      	bne.n	8004992 <HAL_RCC_OscConfig+0x136>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d002      	beq.n	8004998 <HAL_RCC_OscConfig+0x13c>
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b04      	cmp	r3, #4
 8004996:	d11f      	bne.n	80049d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004998:	4b4f      	ldr	r3, [pc, #316]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_RCC_OscConfig+0x154>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e25d      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b0:	4b49      	ldr	r3, [pc, #292]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	061b      	lsls	r3, r3, #24
 80049be:	4946      	ldr	r1, [pc, #280]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049c4:	4b45      	ldr	r3, [pc, #276]	@ (8004adc <HAL_RCC_OscConfig+0x280>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fc ff83 	bl	80018d4 <HAL_InitTick>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d043      	beq.n	8004a5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e249      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d023      	beq.n	8004a28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e0:	4b3d      	ldr	r3, [pc, #244]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80049e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fd fdc6 	bl	800257c <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049f4:	f7fd fdc2 	bl	800257c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e232      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a06:	4b34      	ldr	r3, [pc, #208]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a12:	4b31      	ldr	r3, [pc, #196]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	061b      	lsls	r3, r3, #24
 8004a20:	492d      	ldr	r1, [pc, #180]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	604b      	str	r3, [r1, #4]
 8004a26:	e01a      	b.n	8004a5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a28:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fd fda2 	bl	800257c <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3c:	f7fd fd9e 	bl	800257c <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e20e      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a4e:	4b22      	ldr	r3, [pc, #136]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x1e0>
 8004a5a:	e000      	b.n	8004a5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d041      	beq.n	8004aee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d01c      	beq.n	8004aac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a72:	4b19      	ldr	r3, [pc, #100]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a78:	4a17      	ldr	r2, [pc, #92]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a7a:	f043 0301 	orr.w	r3, r3, #1
 8004a7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a82:	f7fd fd7b 	bl	800257c <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a8a:	f7fd fd77 	bl	800257c <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e1e7      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0ef      	beq.n	8004a8a <HAL_RCC_OscConfig+0x22e>
 8004aaa:	e020      	b.n	8004aee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ab2:	4a09      	ldr	r2, [pc, #36]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004ab4:	f023 0301 	bic.w	r3, r3, #1
 8004ab8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abc:	f7fd fd5e 	bl	800257c <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ac2:	e00d      	b.n	8004ae0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac4:	f7fd fd5a 	bl	800257c <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d906      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e1ca      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
 8004ad6:	bf00      	nop
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ae0:	4b8c      	ldr	r3, [pc, #560]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1ea      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 80a6 	beq.w	8004c48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004afc:	2300      	movs	r3, #0
 8004afe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b00:	4b84      	ldr	r3, [pc, #528]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_RCC_OscConfig+0x2b4>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <HAL_RCC_OscConfig+0x2b6>
 8004b10:	2300      	movs	r3, #0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00d      	beq.n	8004b32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b16:	4b7f      	ldr	r3, [pc, #508]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b1a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b22:	4b7c      	ldr	r3, [pc, #496]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b32:	4b79      	ldr	r3, [pc, #484]	@ (8004d18 <HAL_RCC_OscConfig+0x4bc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d118      	bne.n	8004b70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b3e:	4b76      	ldr	r3, [pc, #472]	@ (8004d18 <HAL_RCC_OscConfig+0x4bc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a75      	ldr	r2, [pc, #468]	@ (8004d18 <HAL_RCC_OscConfig+0x4bc>)
 8004b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b4a:	f7fd fd17 	bl	800257c <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b52:	f7fd fd13 	bl	800257c <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e183      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b64:	4b6c      	ldr	r3, [pc, #432]	@ (8004d18 <HAL_RCC_OscConfig+0x4bc>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d108      	bne.n	8004b8a <HAL_RCC_OscConfig+0x32e>
 8004b78:	4b66      	ldr	r3, [pc, #408]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7e:	4a65      	ldr	r2, [pc, #404]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b88:	e024      	b.n	8004bd4 <HAL_RCC_OscConfig+0x378>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b05      	cmp	r3, #5
 8004b90:	d110      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x358>
 8004b92:	4b60      	ldr	r3, [pc, #384]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b98:	4a5e      	ldr	r2, [pc, #376]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004b9a:	f043 0304 	orr.w	r3, r3, #4
 8004b9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ba2:	4b5c      	ldr	r3, [pc, #368]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba8:	4a5a      	ldr	r2, [pc, #360]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bb2:	e00f      	b.n	8004bd4 <HAL_RCC_OscConfig+0x378>
 8004bb4:	4b57      	ldr	r3, [pc, #348]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bba:	4a56      	ldr	r2, [pc, #344]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bc4:	4b53      	ldr	r3, [pc, #332]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bca:	4a52      	ldr	r2, [pc, #328]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004bcc:	f023 0304 	bic.w	r3, r3, #4
 8004bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d016      	beq.n	8004c0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bdc:	f7fd fcce 	bl	800257c <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be4:	f7fd fcca 	bl	800257c <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e138      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bfa:	4b46      	ldr	r3, [pc, #280]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0ed      	beq.n	8004be4 <HAL_RCC_OscConfig+0x388>
 8004c08:	e015      	b.n	8004c36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0a:	f7fd fcb7 	bl	800257c <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c10:	e00a      	b.n	8004c28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c12:	f7fd fcb3 	bl	800257c <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e121      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c28:	4b3a      	ldr	r3, [pc, #232]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1ed      	bne.n	8004c12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c36:	7ffb      	ldrb	r3, [r7, #31]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d105      	bne.n	8004c48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3c:	4b35      	ldr	r3, [pc, #212]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c40:	4a34      	ldr	r2, [pc, #208]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d03c      	beq.n	8004cce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01c      	beq.n	8004c96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c62:	4a2c      	ldr	r2, [pc, #176]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fd fc86 	bl	800257c <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c74:	f7fd fc82 	bl	800257c <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e0f2      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c86:	4b23      	ldr	r3, [pc, #140]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0ef      	beq.n	8004c74 <HAL_RCC_OscConfig+0x418>
 8004c94:	e01b      	b.n	8004cce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c96:	4b1f      	ldr	r3, [pc, #124]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004c9e:	f023 0301 	bic.w	r3, r3, #1
 8004ca2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca6:	f7fd fc69 	bl	800257c <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cae:	f7fd fc65 	bl	800257c <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e0d5      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cc0:	4b14      	ldr	r3, [pc, #80]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1ef      	bne.n	8004cae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 80c9 	beq.w	8004e6a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 030c 	and.w	r3, r3, #12
 8004ce0:	2b0c      	cmp	r3, #12
 8004ce2:	f000 8083 	beq.w	8004dec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d15e      	bne.n	8004dac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cee:	4b09      	ldr	r3, [pc, #36]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a08      	ldr	r2, [pc, #32]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004cf4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fd fc3f 	bl	800257c <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d00:	e00c      	b.n	8004d1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d02:	f7fd fc3b 	bl	800257c <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d905      	bls.n	8004d1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e0ab      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
 8004d14:	40021000 	.word	0x40021000
 8004d18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d1c:	4b55      	ldr	r3, [pc, #340]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1ec      	bne.n	8004d02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d28:	4b52      	ldr	r3, [pc, #328]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	4b52      	ldr	r3, [pc, #328]	@ (8004e78 <HAL_RCC_OscConfig+0x61c>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6a11      	ldr	r1, [r2, #32]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d38:	3a01      	subs	r2, #1
 8004d3a:	0112      	lsls	r2, r2, #4
 8004d3c:	4311      	orrs	r1, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004d42:	0212      	lsls	r2, r2, #8
 8004d44:	4311      	orrs	r1, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d4a:	0852      	lsrs	r2, r2, #1
 8004d4c:	3a01      	subs	r2, #1
 8004d4e:	0552      	lsls	r2, r2, #21
 8004d50:	4311      	orrs	r1, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d56:	0852      	lsrs	r2, r2, #1
 8004d58:	3a01      	subs	r2, #1
 8004d5a:	0652      	lsls	r2, r2, #25
 8004d5c:	4311      	orrs	r1, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d62:	06d2      	lsls	r2, r2, #27
 8004d64:	430a      	orrs	r2, r1
 8004d66:	4943      	ldr	r1, [pc, #268]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d6c:	4b41      	ldr	r3, [pc, #260]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a40      	ldr	r2, [pc, #256]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d78:	4b3e      	ldr	r3, [pc, #248]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4a3d      	ldr	r2, [pc, #244]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004d7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d84:	f7fd fbfa 	bl	800257c <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d8c:	f7fd fbf6 	bl	800257c <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e066      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d9e:	4b35      	ldr	r3, [pc, #212]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0x530>
 8004daa:	e05e      	b.n	8004e6a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dac:	4b31      	ldr	r3, [pc, #196]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a30      	ldr	r2, [pc, #192]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004db2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fd fbe0 	bl	800257c <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc0:	f7fd fbdc 	bl	800257c <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e04c      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd2:	4b28      	ldr	r3, [pc, #160]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f0      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004dde:	4b25      	ldr	r3, [pc, #148]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	4924      	ldr	r1, [pc, #144]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004de4:	4b25      	ldr	r3, [pc, #148]	@ (8004e7c <HAL_RCC_OscConfig+0x620>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	60cb      	str	r3, [r1, #12]
 8004dea:	e03e      	b.n	8004e6a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e039      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004df8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f003 0203 	and.w	r2, r3, #3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d12c      	bne.n	8004e66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	3b01      	subs	r3, #1
 8004e18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d123      	bne.n	8004e66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d11b      	bne.n	8004e66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d113      	bne.n	8004e66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d109      	bne.n	8004e66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e5c:	085b      	lsrs	r3, r3, #1
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d001      	beq.n	8004e6a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e000      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3720      	adds	r7, #32
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40021000 	.word	0x40021000
 8004e78:	019f800c 	.word	0x019f800c
 8004e7c:	feeefffc 	.word	0xfeeefffc

08004e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e11e      	b.n	80050d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e98:	4b91      	ldr	r3, [pc, #580]	@ (80050e0 <HAL_RCC_ClockConfig+0x260>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d910      	bls.n	8004ec8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea6:	4b8e      	ldr	r3, [pc, #568]	@ (80050e0 <HAL_RCC_ClockConfig+0x260>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f023 020f 	bic.w	r2, r3, #15
 8004eae:	498c      	ldr	r1, [pc, #560]	@ (80050e0 <HAL_RCC_ClockConfig+0x260>)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb6:	4b8a      	ldr	r3, [pc, #552]	@ (80050e0 <HAL_RCC_ClockConfig+0x260>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e106      	b.n	80050d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d073      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d129      	bne.n	8004f30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004edc:	4b81      	ldr	r3, [pc, #516]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0f4      	b.n	80050d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004eec:	f000 f9ce 	bl	800528c <RCC_GetSysClockFreqFromPLLSource>
 8004ef0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	4a7c      	ldr	r2, [pc, #496]	@ (80050e8 <HAL_RCC_ClockConfig+0x268>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d93f      	bls.n	8004f7a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004efa:	4b7a      	ldr	r3, [pc, #488]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d009      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d033      	beq.n	8004f7a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d12f      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f1a:	4b72      	ldr	r3, [pc, #456]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f22:	4a70      	ldr	r2, [pc, #448]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f2a:	2380      	movs	r3, #128	@ 0x80
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e024      	b.n	8004f7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d107      	bne.n	8004f48 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f38:	4b6a      	ldr	r3, [pc, #424]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d109      	bne.n	8004f58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0c6      	b.n	80050d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f48:	4b66      	ldr	r3, [pc, #408]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0be      	b.n	80050d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004f58:	f000 f8ce 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4a61      	ldr	r2, [pc, #388]	@ (80050e8 <HAL_RCC_ClockConfig+0x268>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d909      	bls.n	8004f7a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f66:	4b5f      	ldr	r3, [pc, #380]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f6e:	4a5d      	ldr	r2, [pc, #372]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f76:	2380      	movs	r3, #128	@ 0x80
 8004f78:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f7a:	4b5a      	ldr	r3, [pc, #360]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f023 0203 	bic.w	r2, r3, #3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	4957      	ldr	r1, [pc, #348]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8c:	f7fd faf6 	bl	800257c <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f92:	e00a      	b.n	8004faa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f94:	f7fd faf2 	bl	800257c <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e095      	b.n	80050d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004faa:	4b4e      	ldr	r3, [pc, #312]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 020c 	and.w	r2, r3, #12
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d1eb      	bne.n	8004f94 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d023      	beq.n	8005010 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fd4:	4b43      	ldr	r3, [pc, #268]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	4a42      	ldr	r2, [pc, #264]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004fda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004fde:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d007      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004fec:	4b3d      	ldr	r3, [pc, #244]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ff4:	4a3b      	ldr	r2, [pc, #236]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004ff6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004ffa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ffc:	4b39      	ldr	r3, [pc, #228]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	4936      	ldr	r1, [pc, #216]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 800500a:	4313      	orrs	r3, r2
 800500c:	608b      	str	r3, [r1, #8]
 800500e:	e008      	b.n	8005022 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b80      	cmp	r3, #128	@ 0x80
 8005014:	d105      	bne.n	8005022 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005016:	4b33      	ldr	r3, [pc, #204]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	4a32      	ldr	r2, [pc, #200]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 800501c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005020:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005022:	4b2f      	ldr	r3, [pc, #188]	@ (80050e0 <HAL_RCC_ClockConfig+0x260>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d21d      	bcs.n	800506c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005030:	4b2b      	ldr	r3, [pc, #172]	@ (80050e0 <HAL_RCC_ClockConfig+0x260>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f023 020f 	bic.w	r2, r3, #15
 8005038:	4929      	ldr	r1, [pc, #164]	@ (80050e0 <HAL_RCC_ClockConfig+0x260>)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	4313      	orrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005040:	f7fd fa9c 	bl	800257c <HAL_GetTick>
 8005044:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005046:	e00a      	b.n	800505e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005048:	f7fd fa98 	bl	800257c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005056:	4293      	cmp	r3, r2
 8005058:	d901      	bls.n	800505e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e03b      	b.n	80050d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800505e:	4b20      	ldr	r3, [pc, #128]	@ (80050e0 <HAL_RCC_ClockConfig+0x260>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d1ed      	bne.n	8005048 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d008      	beq.n	800508a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005078:	4b1a      	ldr	r3, [pc, #104]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	4917      	ldr	r1, [pc, #92]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8005086:	4313      	orrs	r3, r2
 8005088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d009      	beq.n	80050aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005096:	4b13      	ldr	r3, [pc, #76]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	490f      	ldr	r1, [pc, #60]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050aa:	f000 f825 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 80050ae:	4602      	mov	r2, r0
 80050b0:	4b0c      	ldr	r3, [pc, #48]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	091b      	lsrs	r3, r3, #4
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	490c      	ldr	r1, [pc, #48]	@ (80050ec <HAL_RCC_ClockConfig+0x26c>)
 80050bc:	5ccb      	ldrb	r3, [r1, r3]
 80050be:	f003 031f 	and.w	r3, r3, #31
 80050c2:	fa22 f303 	lsr.w	r3, r2, r3
 80050c6:	4a0a      	ldr	r2, [pc, #40]	@ (80050f0 <HAL_RCC_ClockConfig+0x270>)
 80050c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050ca:	4b0a      	ldr	r3, [pc, #40]	@ (80050f4 <HAL_RCC_ClockConfig+0x274>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fc fc00 	bl	80018d4 <HAL_InitTick>
 80050d4:	4603      	mov	r3, r0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40022000 	.word	0x40022000
 80050e4:	40021000 	.word	0x40021000
 80050e8:	04c4b400 	.word	0x04c4b400
 80050ec:	0800eebc 	.word	0x0800eebc
 80050f0:	20000000 	.word	0x20000000
 80050f4:	20000004 	.word	0x20000004

080050f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80050fe:	4b2c      	ldr	r3, [pc, #176]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	2b04      	cmp	r3, #4
 8005108:	d102      	bne.n	8005110 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800510a:	4b2a      	ldr	r3, [pc, #168]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	e047      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005110:	4b27      	ldr	r3, [pc, #156]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 030c 	and.w	r3, r3, #12
 8005118:	2b08      	cmp	r3, #8
 800511a:	d102      	bne.n	8005122 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800511c:	4b25      	ldr	r3, [pc, #148]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	e03e      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005122:	4b23      	ldr	r3, [pc, #140]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
 800512a:	2b0c      	cmp	r3, #12
 800512c:	d136      	bne.n	800519c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800512e:	4b20      	ldr	r3, [pc, #128]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005138:	4b1d      	ldr	r3, [pc, #116]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	3301      	adds	r3, #1
 8005144:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d10c      	bne.n	8005166 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800514c:	4a19      	ldr	r2, [pc, #100]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	fbb2 f3f3 	udiv	r3, r2, r3
 8005154:	4a16      	ldr	r2, [pc, #88]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005156:	68d2      	ldr	r2, [r2, #12]
 8005158:	0a12      	lsrs	r2, r2, #8
 800515a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800515e:	fb02 f303 	mul.w	r3, r2, r3
 8005162:	617b      	str	r3, [r7, #20]
      break;
 8005164:	e00c      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005166:	4a13      	ldr	r2, [pc, #76]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	fbb2 f3f3 	udiv	r3, r2, r3
 800516e:	4a10      	ldr	r2, [pc, #64]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005170:	68d2      	ldr	r2, [r2, #12]
 8005172:	0a12      	lsrs	r2, r2, #8
 8005174:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005178:	fb02 f303 	mul.w	r3, r2, r3
 800517c:	617b      	str	r3, [r7, #20]
      break;
 800517e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005180:	4b0b      	ldr	r3, [pc, #44]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	0e5b      	lsrs	r3, r3, #25
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	3301      	adds	r3, #1
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	e001      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051a0:	693b      	ldr	r3, [r7, #16]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40021000 	.word	0x40021000
 80051b4:	00f42400 	.word	0x00f42400

080051b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051bc:	4b03      	ldr	r3, [pc, #12]	@ (80051cc <HAL_RCC_GetHCLKFreq+0x14>)
 80051be:	681b      	ldr	r3, [r3, #0]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	20000000 	.word	0x20000000

080051d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051d4:	f7ff fff0 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b06      	ldr	r3, [pc, #24]	@ (80051f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	0a1b      	lsrs	r3, r3, #8
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	4904      	ldr	r1, [pc, #16]	@ (80051f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40021000 	.word	0x40021000
 80051f8:	0800eecc 	.word	0x0800eecc

080051fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005200:	f7ff ffda 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 8005204:	4602      	mov	r2, r0
 8005206:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	0adb      	lsrs	r3, r3, #11
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	4904      	ldr	r1, [pc, #16]	@ (8005224 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005212:	5ccb      	ldrb	r3, [r1, r3]
 8005214:	f003 031f 	and.w	r3, r3, #31
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40021000 	.word	0x40021000
 8005224:	0800eecc 	.word	0x0800eecc

08005228 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	220f      	movs	r2, #15
 8005236:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005238:	4b12      	ldr	r3, [pc, #72]	@ (8005284 <HAL_RCC_GetClockConfig+0x5c>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0203 	and.w	r2, r3, #3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005244:	4b0f      	ldr	r3, [pc, #60]	@ (8005284 <HAL_RCC_GetClockConfig+0x5c>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005250:	4b0c      	ldr	r3, [pc, #48]	@ (8005284 <HAL_RCC_GetClockConfig+0x5c>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800525c:	4b09      	ldr	r3, [pc, #36]	@ (8005284 <HAL_RCC_GetClockConfig+0x5c>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	08db      	lsrs	r3, r3, #3
 8005262:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800526a:	4b07      	ldr	r3, [pc, #28]	@ (8005288 <HAL_RCC_GetClockConfig+0x60>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 020f 	and.w	r2, r3, #15
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	601a      	str	r2, [r3, #0]
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40021000 	.word	0x40021000
 8005288:	40022000 	.word	0x40022000

0800528c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005292:	4b1e      	ldr	r3, [pc, #120]	@ (800530c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800529c:	4b1b      	ldr	r3, [pc, #108]	@ (800530c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	091b      	lsrs	r3, r3, #4
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	3301      	adds	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d10c      	bne.n	80052ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052b0:	4a17      	ldr	r2, [pc, #92]	@ (8005310 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b8:	4a14      	ldr	r2, [pc, #80]	@ (800530c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052ba:	68d2      	ldr	r2, [r2, #12]
 80052bc:	0a12      	lsrs	r2, r2, #8
 80052be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052c2:	fb02 f303 	mul.w	r3, r2, r3
 80052c6:	617b      	str	r3, [r7, #20]
    break;
 80052c8:	e00c      	b.n	80052e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052ca:	4a11      	ldr	r2, [pc, #68]	@ (8005310 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d2:	4a0e      	ldr	r2, [pc, #56]	@ (800530c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052d4:	68d2      	ldr	r2, [r2, #12]
 80052d6:	0a12      	lsrs	r2, r2, #8
 80052d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052dc:	fb02 f303 	mul.w	r3, r2, r3
 80052e0:	617b      	str	r3, [r7, #20]
    break;
 80052e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052e4:	4b09      	ldr	r3, [pc, #36]	@ (800530c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	0e5b      	lsrs	r3, r3, #25
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	3301      	adds	r3, #1
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80052fe:	687b      	ldr	r3, [r7, #4]
}
 8005300:	4618      	mov	r0, r3
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40021000 	.word	0x40021000
 8005310:	00f42400 	.word	0x00f42400

08005314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800531c:	2300      	movs	r3, #0
 800531e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005320:	2300      	movs	r3, #0
 8005322:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 8098 	beq.w	8005462 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005332:	2300      	movs	r3, #0
 8005334:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005336:	4b43      	ldr	r3, [pc, #268]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10d      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005342:	4b40      	ldr	r3, [pc, #256]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005346:	4a3f      	ldr	r2, [pc, #252]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800534c:	6593      	str	r3, [r2, #88]	@ 0x58
 800534e:	4b3d      	ldr	r3, [pc, #244]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005356:	60bb      	str	r3, [r7, #8]
 8005358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800535a:	2301      	movs	r3, #1
 800535c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800535e:	4b3a      	ldr	r3, [pc, #232]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a39      	ldr	r2, [pc, #228]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005368:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800536a:	f7fd f907 	bl	800257c <HAL_GetTick>
 800536e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005370:	e009      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005372:	f7fd f903 	bl	800257c <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d902      	bls.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	74fb      	strb	r3, [r7, #19]
        break;
 8005384:	e005      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005386:	4b30      	ldr	r3, [pc, #192]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0ef      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005392:	7cfb      	ldrb	r3, [r7, #19]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d159      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005398:	4b2a      	ldr	r3, [pc, #168]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800539a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d01e      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d019      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053b4:	4b23      	ldr	r3, [pc, #140]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053c0:	4b20      	ldr	r3, [pc, #128]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053e0:	4a18      	ldr	r2, [pc, #96]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d016      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f2:	f7fd f8c3 	bl	800257c <HAL_GetTick>
 80053f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f8:	e00b      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fa:	f7fd f8bf 	bl	800257c <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005408:	4293      	cmp	r3, r2
 800540a:	d902      	bls.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	74fb      	strb	r3, [r7, #19]
            break;
 8005410:	e006      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005412:	4b0c      	ldr	r3, [pc, #48]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0ec      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005420:	7cfb      	ldrb	r3, [r7, #19]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10b      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005426:	4b07      	ldr	r3, [pc, #28]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800542c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005434:	4903      	ldr	r1, [pc, #12]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800543c:	e008      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800543e:	7cfb      	ldrb	r3, [r7, #19]
 8005440:	74bb      	strb	r3, [r7, #18]
 8005442:	e005      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005444:	40021000 	.word	0x40021000
 8005448:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544c:	7cfb      	ldrb	r3, [r7, #19]
 800544e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005450:	7c7b      	ldrb	r3, [r7, #17]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d105      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005456:	4ba6      	ldr	r3, [pc, #664]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545a:	4aa5      	ldr	r2, [pc, #660]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800545c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005460:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800546e:	4ba0      	ldr	r3, [pc, #640]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005474:	f023 0203 	bic.w	r2, r3, #3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	499c      	ldr	r1, [pc, #624]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005490:	4b97      	ldr	r3, [pc, #604]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005496:	f023 020c 	bic.w	r2, r3, #12
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	4994      	ldr	r1, [pc, #592]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054b2:	4b8f      	ldr	r3, [pc, #572]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	498b      	ldr	r1, [pc, #556]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054d4:	4b86      	ldr	r3, [pc, #536]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	4983      	ldr	r1, [pc, #524]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054f6:	4b7e      	ldr	r3, [pc, #504]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	497a      	ldr	r1, [pc, #488]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00a      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005518:	4b75      	ldr	r3, [pc, #468]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800551e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	4972      	ldr	r1, [pc, #456]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800553a:	4b6d      	ldr	r3, [pc, #436]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005540:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	4969      	ldr	r1, [pc, #420]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800555c:	4b64      	ldr	r3, [pc, #400]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005562:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	4961      	ldr	r1, [pc, #388]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800557e:	4b5c      	ldr	r3, [pc, #368]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005584:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558c:	4958      	ldr	r1, [pc, #352]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800559c:	2b00      	cmp	r3, #0
 800559e:	d015      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055a0:	4b53      	ldr	r3, [pc, #332]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ae:	4950      	ldr	r1, [pc, #320]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055be:	d105      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c0:	4b4b      	ldr	r3, [pc, #300]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4a4a      	ldr	r2, [pc, #296]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055ca:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d015      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055d8:	4b45      	ldr	r3, [pc, #276]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e6:	4942      	ldr	r1, [pc, #264]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055f6:	d105      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055f8:	4b3d      	ldr	r3, [pc, #244]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4a3c      	ldr	r2, [pc, #240]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005602:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d015      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005610:	4b37      	ldr	r3, [pc, #220]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005616:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561e:	4934      	ldr	r1, [pc, #208]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800562e:	d105      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005630:	4b2f      	ldr	r3, [pc, #188]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	4a2e      	ldr	r2, [pc, #184]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800563a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d015      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005648:	4b29      	ldr	r3, [pc, #164]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005656:	4926      	ldr	r1, [pc, #152]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005662:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005666:	d105      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005668:	4b21      	ldr	r3, [pc, #132]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4a20      	ldr	r2, [pc, #128]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800566e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005672:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d015      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005680:	4b1b      	ldr	r3, [pc, #108]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005686:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568e:	4918      	ldr	r1, [pc, #96]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800569e:	d105      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056a0:	4b13      	ldr	r3, [pc, #76]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4a12      	ldr	r2, [pc, #72]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d015      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80056b8:	4b0d      	ldr	r3, [pc, #52]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c6:	490a      	ldr	r1, [pc, #40]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056d6:	d105      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056d8:	4b05      	ldr	r3, [pc, #20]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	4a04      	ldr	r2, [pc, #16]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80056e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40021000 	.word	0x40021000

080056f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e09d      	b.n	8005842 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570a:	2b00      	cmp	r3, #0
 800570c:	d108      	bne.n	8005720 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005716:	d009      	beq.n	800572c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	61da      	str	r2, [r3, #28]
 800571e:	e005      	b.n	800572c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fc f858 	bl	80017fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005762:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800576c:	d902      	bls.n	8005774 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	e002      	b.n	800577a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005778:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005782:	d007      	beq.n	8005794 <HAL_SPI_Init+0xa0>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800578c:	d002      	beq.n	8005794 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d6:	ea42 0103 	orr.w	r1, r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	0c1b      	lsrs	r3, r3, #16
 80057f0:	f003 0204 	and.w	r2, r3, #4
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f8:	f003 0310 	and.w	r3, r3, #16
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005810:	ea42 0103 	orr.w	r1, r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69da      	ldr	r2, [r3, #28]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005830:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b088      	sub	sp, #32
 800584e:	af00      	add	r7, sp, #0
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	603b      	str	r3, [r7, #0]
 8005856:	4613      	mov	r3, r2
 8005858:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800585a:	f7fc fe8f 	bl	800257c <HAL_GetTick>
 800585e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005860:	88fb      	ldrh	r3, [r7, #6]
 8005862:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	d001      	beq.n	8005874 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005870:	2302      	movs	r3, #2
 8005872:	e15c      	b.n	8005b2e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_SPI_Transmit+0x36>
 800587a:	88fb      	ldrh	r3, [r7, #6]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e154      	b.n	8005b2e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_SPI_Transmit+0x48>
 800588e:	2302      	movs	r3, #2
 8005890:	e14d      	b.n	8005b2e <HAL_SPI_Transmit+0x2e4>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2203      	movs	r2, #3
 800589e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	88fa      	ldrh	r2, [r7, #6]
 80058b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	88fa      	ldrh	r2, [r7, #6]
 80058b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058e4:	d10f      	bne.n	8005906 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005904:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005910:	2b40      	cmp	r3, #64	@ 0x40
 8005912:	d007      	beq.n	8005924 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005922:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800592c:	d952      	bls.n	80059d4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <HAL_SPI_Transmit+0xf2>
 8005936:	8b7b      	ldrh	r3, [r7, #26]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d145      	bne.n	80059c8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005940:	881a      	ldrh	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800594c:	1c9a      	adds	r2, r3, #2
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005956:	b29b      	uxth	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005960:	e032      	b.n	80059c8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b02      	cmp	r3, #2
 800596e:	d112      	bne.n	8005996 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005974:	881a      	ldrh	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005980:	1c9a      	adds	r2, r3, #2
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005994:	e018      	b.n	80059c8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005996:	f7fc fdf1 	bl	800257c <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d803      	bhi.n	80059ae <HAL_SPI_Transmit+0x164>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059ac:	d102      	bne.n	80059b4 <HAL_SPI_Transmit+0x16a>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d109      	bne.n	80059c8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e0b2      	b.n	8005b2e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1c7      	bne.n	8005962 <HAL_SPI_Transmit+0x118>
 80059d2:	e083      	b.n	8005adc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <HAL_SPI_Transmit+0x198>
 80059dc:	8b7b      	ldrh	r3, [r7, #26]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d177      	bne.n	8005ad2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d912      	bls.n	8005a12 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f0:	881a      	ldrh	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fc:	1c9a      	adds	r2, r3, #2
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	3b02      	subs	r3, #2
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a10:	e05f      	b.n	8005ad2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	7812      	ldrb	r2, [r2, #0]
 8005a1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	3b01      	subs	r3, #1
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005a38:	e04b      	b.n	8005ad2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d12b      	bne.n	8005aa0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d912      	bls.n	8005a78 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a56:	881a      	ldrh	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a62:	1c9a      	adds	r2, r3, #2
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b02      	subs	r3, #2
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a76:	e02c      	b.n	8005ad2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	7812      	ldrb	r2, [r2, #0]
 8005a84:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	3b01      	subs	r3, #1
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a9e:	e018      	b.n	8005ad2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aa0:	f7fc fd6c 	bl	800257c <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d803      	bhi.n	8005ab8 <HAL_SPI_Transmit+0x26e>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ab6:	d102      	bne.n	8005abe <HAL_SPI_Transmit+0x274>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d109      	bne.n	8005ad2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e02d      	b.n	8005b2e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1ae      	bne.n	8005a3a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	6839      	ldr	r1, [r7, #0]
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 fcf5 	bl	80064d0 <SPI_EndRxTxTransaction>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2220      	movs	r2, #32
 8005af0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10a      	bne.n	8005b10 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005afa:	2300      	movs	r3, #0
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
  }
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3720      	adds	r7, #32
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b088      	sub	sp, #32
 8005b3a:	af02      	add	r7, sp, #8
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	603b      	str	r3, [r7, #0]
 8005b42:	4613      	mov	r3, r2
 8005b44:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d001      	beq.n	8005b56 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005b52:	2302      	movs	r3, #2
 8005b54:	e123      	b.n	8005d9e <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_SPI_Receive+0x2c>
 8005b5c:	88fb      	ldrh	r3, [r7, #6]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e11b      	b.n	8005d9e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b6e:	d112      	bne.n	8005b96 <HAL_SPI_Receive+0x60>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10e      	bne.n	8005b96 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b80:	88fa      	ldrh	r2, [r7, #6]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	4613      	mov	r3, r2
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f90a 	bl	8005da6 <HAL_SPI_TransmitReceive>
 8005b92:	4603      	mov	r3, r0
 8005b94:	e103      	b.n	8005d9e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b96:	f7fc fcf1 	bl	800257c <HAL_GetTick>
 8005b9a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d101      	bne.n	8005baa <HAL_SPI_Receive+0x74>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e0f9      	b.n	8005d9e <HAL_SPI_Receive+0x268>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2204      	movs	r2, #4
 8005bb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	88fa      	ldrh	r2, [r7, #6]
 8005bca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	88fa      	ldrh	r2, [r7, #6]
 8005bd2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bfc:	d908      	bls.n	8005c10 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c0c:	605a      	str	r2, [r3, #4]
 8005c0e:	e007      	b.n	8005c20 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c1e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c28:	d10f      	bne.n	8005c4a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c54:	2b40      	cmp	r3, #64	@ 0x40
 8005c56:	d007      	beq.n	8005c68 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c70:	d875      	bhi.n	8005d5e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c72:	e037      	b.n	8005ce4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d117      	bne.n	8005cb2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f103 020c 	add.w	r2, r3, #12
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	7812      	ldrb	r2, [r2, #0]
 8005c90:	b2d2      	uxtb	r2, r2
 8005c92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005cb0:	e018      	b.n	8005ce4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cb2:	f7fc fc63 	bl	800257c <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d803      	bhi.n	8005cca <HAL_SPI_Receive+0x194>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cc8:	d102      	bne.n	8005cd0 <HAL_SPI_Receive+0x19a>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d109      	bne.n	8005ce4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e05c      	b.n	8005d9e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1c1      	bne.n	8005c74 <HAL_SPI_Receive+0x13e>
 8005cf0:	e03b      	b.n	8005d6a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d115      	bne.n	8005d2c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0a:	b292      	uxth	r2, r2
 8005d0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d12:	1c9a      	adds	r2, r3, #2
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005d2a:	e018      	b.n	8005d5e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d2c:	f7fc fc26 	bl	800257c <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d803      	bhi.n	8005d44 <HAL_SPI_Receive+0x20e>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d42:	d102      	bne.n	8005d4a <HAL_SPI_Receive+0x214>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d109      	bne.n	8005d5e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e01f      	b.n	8005d9e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1c3      	bne.n	8005cf2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	6839      	ldr	r1, [r7, #0]
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fb56 	bl	8006420 <SPI_EndRxTransaction>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e000      	b.n	8005d9e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
  }
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b08a      	sub	sp, #40	@ 0x28
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	607a      	str	r2, [r7, #4]
 8005db2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005db4:	2301      	movs	r3, #1
 8005db6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005db8:	f7fc fbe0 	bl	800257c <HAL_GetTick>
 8005dbc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005dc4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005dcc:	887b      	ldrh	r3, [r7, #2]
 8005dce:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005dd0:	887b      	ldrh	r3, [r7, #2]
 8005dd2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dd4:	7ffb      	ldrb	r3, [r7, #31]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d00c      	beq.n	8005df4 <HAL_SPI_TransmitReceive+0x4e>
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005de0:	d106      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d102      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x4a>
 8005dea:	7ffb      	ldrb	r3, [r7, #31]
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d001      	beq.n	8005df4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005df0:	2302      	movs	r3, #2
 8005df2:	e1f3      	b.n	80061dc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <HAL_SPI_TransmitReceive+0x60>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <HAL_SPI_TransmitReceive+0x60>
 8005e00:	887b      	ldrh	r3, [r7, #2]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e1e8      	b.n	80061dc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_SPI_TransmitReceive+0x72>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e1e1      	b.n	80061dc <HAL_SPI_TransmitReceive+0x436>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d003      	beq.n	8005e34 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2205      	movs	r2, #5
 8005e30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	887a      	ldrh	r2, [r7, #2]
 8005e44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	887a      	ldrh	r2, [r7, #2]
 8005e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	887a      	ldrh	r2, [r7, #2]
 8005e5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	887a      	ldrh	r2, [r7, #2]
 8005e60:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e76:	d802      	bhi.n	8005e7e <HAL_SPI_TransmitReceive+0xd8>
 8005e78:	8abb      	ldrh	r3, [r7, #20]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d908      	bls.n	8005e90 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e8c:	605a      	str	r2, [r3, #4]
 8005e8e:	e007      	b.n	8005ea0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e9e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eaa:	2b40      	cmp	r3, #64	@ 0x40
 8005eac:	d007      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ebc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ec6:	f240 8083 	bls.w	8005fd0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_SPI_TransmitReceive+0x132>
 8005ed2:	8afb      	ldrh	r3, [r7, #22]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d16f      	bne.n	8005fb8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005edc:	881a      	ldrh	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee8:	1c9a      	adds	r2, r3, #2
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005efc:	e05c      	b.n	8005fb8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d11b      	bne.n	8005f44 <HAL_SPI_TransmitReceive+0x19e>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d016      	beq.n	8005f44 <HAL_SPI_TransmitReceive+0x19e>
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d113      	bne.n	8005f44 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f20:	881a      	ldrh	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2c:	1c9a      	adds	r2, r3, #2
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d11c      	bne.n	8005f8c <HAL_SPI_TransmitReceive+0x1e6>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d016      	beq.n	8005f8c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f68:	b292      	uxth	r2, r2
 8005f6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f70:	1c9a      	adds	r2, r3, #2
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f8c:	f7fc faf6 	bl	800257c <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d80d      	bhi.n	8005fb8 <HAL_SPI_TransmitReceive+0x212>
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fa2:	d009      	beq.n	8005fb8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e111      	b.n	80061dc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d19d      	bne.n	8005efe <HAL_SPI_TransmitReceive+0x158>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d197      	bne.n	8005efe <HAL_SPI_TransmitReceive+0x158>
 8005fce:	e0e5      	b.n	800619c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_SPI_TransmitReceive+0x23a>
 8005fd8:	8afb      	ldrh	r3, [r7, #22]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	f040 80d1 	bne.w	8006182 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d912      	bls.n	8006010 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fee:	881a      	ldrh	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffa:	1c9a      	adds	r2, r3, #2
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006004:	b29b      	uxth	r3, r3
 8006006:	3b02      	subs	r3, #2
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800600e:	e0b8      	b.n	8006182 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	7812      	ldrb	r2, [r2, #0]
 800601c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006036:	e0a4      	b.n	8006182 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b02      	cmp	r3, #2
 8006044:	d134      	bne.n	80060b0 <HAL_SPI_TransmitReceive+0x30a>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d02f      	beq.n	80060b0 <HAL_SPI_TransmitReceive+0x30a>
 8006050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006052:	2b01      	cmp	r3, #1
 8006054:	d12c      	bne.n	80060b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800605a:	b29b      	uxth	r3, r3
 800605c:	2b01      	cmp	r3, #1
 800605e:	d912      	bls.n	8006086 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006064:	881a      	ldrh	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006070:	1c9a      	adds	r2, r3, #2
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b02      	subs	r3, #2
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006084:	e012      	b.n	80060ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	330c      	adds	r3, #12
 8006090:	7812      	ldrb	r2, [r2, #0]
 8006092:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d148      	bne.n	8006150 <HAL_SPI_TransmitReceive+0x3aa>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d042      	beq.n	8006150 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d923      	bls.n	800611e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e0:	b292      	uxth	r2, r2
 80060e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e8:	1c9a      	adds	r2, r3, #2
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	3b02      	subs	r3, #2
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b01      	cmp	r3, #1
 800610a:	d81f      	bhi.n	800614c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800611a:	605a      	str	r2, [r3, #4]
 800611c:	e016      	b.n	800614c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f103 020c 	add.w	r2, r3, #12
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800612a:	7812      	ldrb	r2, [r2, #0]
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006134:	1c5a      	adds	r2, r3, #1
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800614c:	2301      	movs	r3, #1
 800614e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006150:	f7fc fa14 	bl	800257c <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800615c:	429a      	cmp	r2, r3
 800615e:	d803      	bhi.n	8006168 <HAL_SPI_TransmitReceive+0x3c2>
 8006160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006162:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006166:	d102      	bne.n	800616e <HAL_SPI_TransmitReceive+0x3c8>
 8006168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616a:	2b00      	cmp	r3, #0
 800616c:	d109      	bne.n	8006182 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e02c      	b.n	80061dc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006186:	b29b      	uxth	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	f47f af55 	bne.w	8006038 <HAL_SPI_TransmitReceive+0x292>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	f47f af4e 	bne.w	8006038 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800619c:	6a3a      	ldr	r2, [r7, #32]
 800619e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f995 	bl	80064d0 <SPI_EndRxTxTransaction>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d008      	beq.n	80061be <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2220      	movs	r2, #32
 80061b0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e00e      	b.n	80061dc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80061da:	2300      	movs	r3, #0
  }
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3728      	adds	r7, #40	@ 0x28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b088      	sub	sp, #32
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	603b      	str	r3, [r7, #0]
 80061f0:	4613      	mov	r3, r2
 80061f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061f4:	f7fc f9c2 	bl	800257c <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fc:	1a9b      	subs	r3, r3, r2
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	4413      	add	r3, r2
 8006202:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006204:	f7fc f9ba 	bl	800257c <HAL_GetTick>
 8006208:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800620a:	4b39      	ldr	r3, [pc, #228]	@ (80062f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	015b      	lsls	r3, r3, #5
 8006210:	0d1b      	lsrs	r3, r3, #20
 8006212:	69fa      	ldr	r2, [r7, #28]
 8006214:	fb02 f303 	mul.w	r3, r2, r3
 8006218:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800621a:	e054      	b.n	80062c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006222:	d050      	beq.n	80062c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006224:	f7fc f9aa 	bl	800257c <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	429a      	cmp	r2, r3
 8006232:	d902      	bls.n	800623a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d13d      	bne.n	80062b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006248:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006252:	d111      	bne.n	8006278 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800625c:	d004      	beq.n	8006268 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006266:	d107      	bne.n	8006278 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006276:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006280:	d10f      	bne.n	80062a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e017      	b.n	80062e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4013      	ands	r3, r2
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	bf0c      	ite	eq
 80062d6:	2301      	moveq	r3, #1
 80062d8:	2300      	movne	r3, #0
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	461a      	mov	r2, r3
 80062de:	79fb      	ldrb	r3, [r7, #7]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d19b      	bne.n	800621c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3720      	adds	r7, #32
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20000000 	.word	0x20000000

080062f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08a      	sub	sp, #40	@ 0x28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006302:	2300      	movs	r3, #0
 8006304:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006306:	f7fc f939 	bl	800257c <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630e:	1a9b      	subs	r3, r3, r2
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	4413      	add	r3, r2
 8006314:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006316:	f7fc f931 	bl	800257c <HAL_GetTick>
 800631a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	330c      	adds	r3, #12
 8006322:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006324:	4b3d      	ldr	r3, [pc, #244]	@ (800641c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	4613      	mov	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	00da      	lsls	r2, r3, #3
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	0d1b      	lsrs	r3, r3, #20
 8006334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006336:	fb02 f303 	mul.w	r3, r2, r3
 800633a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800633c:	e060      	b.n	8006400 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006344:	d107      	bne.n	8006356 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d104      	bne.n	8006356 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006354:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800635c:	d050      	beq.n	8006400 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800635e:	f7fc f90d 	bl	800257c <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800636a:	429a      	cmp	r2, r3
 800636c:	d902      	bls.n	8006374 <SPI_WaitFifoStateUntilTimeout+0x80>
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	2b00      	cmp	r3, #0
 8006372:	d13d      	bne.n	80063f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006382:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800638c:	d111      	bne.n	80063b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006396:	d004      	beq.n	80063a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063a0:	d107      	bne.n	80063b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ba:	d10f      	bne.n	80063dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e010      	b.n	8006412 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	4013      	ands	r3, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	429a      	cmp	r2, r3
 800640e:	d196      	bne.n	800633e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3728      	adds	r7, #40	@ 0x28
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20000000 	.word	0x20000000

08006420 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af02      	add	r7, sp, #8
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006434:	d111      	bne.n	800645a <SPI_EndRxTransaction+0x3a>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800643e:	d004      	beq.n	800644a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006448:	d107      	bne.n	800645a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006458:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2200      	movs	r2, #0
 8006462:	2180      	movs	r1, #128	@ 0x80
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f7ff febd 	bl	80061e4 <SPI_WaitFlagStateUntilTimeout>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d007      	beq.n	8006480 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006474:	f043 0220 	orr.w	r2, r3, #32
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e023      	b.n	80064c8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006488:	d11d      	bne.n	80064c6 <SPI_EndRxTransaction+0xa6>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006492:	d004      	beq.n	800649e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800649c:	d113      	bne.n	80064c6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f7ff ff22 	bl	80062f4 <SPI_WaitFifoStateUntilTimeout>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d007      	beq.n	80064c6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064ba:	f043 0220 	orr.w	r2, r3, #32
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e000      	b.n	80064c8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7ff ff03 	bl	80062f4 <SPI_WaitFifoStateUntilTimeout>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d007      	beq.n	8006504 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064f8:	f043 0220 	orr.w	r2, r3, #32
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e027      	b.n	8006554 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2200      	movs	r2, #0
 800650c:	2180      	movs	r1, #128	@ 0x80
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f7ff fe68 	bl	80061e4 <SPI_WaitFlagStateUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d007      	beq.n	800652a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800651e:	f043 0220 	orr.w	r2, r3, #32
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e014      	b.n	8006554 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2200      	movs	r2, #0
 8006532:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f7ff fedc 	bl	80062f4 <SPI_WaitFifoStateUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006546:	f043 0220 	orr.w	r2, r3, #32
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e000      	b.n	8006554 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e049      	b.n	8006602 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d106      	bne.n	8006588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7fb fd54 	bl	8002030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3304      	adds	r3, #4
 8006598:	4619      	mov	r1, r3
 800659a:	4610      	mov	r0, r2
 800659c:	f000 fe90 	bl	80072c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b01      	cmp	r3, #1
 800661e:	d001      	beq.n	8006624 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e042      	b.n	80066aa <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a21      	ldr	r2, [pc, #132]	@ (80066b8 <HAL_TIM_Base_Start+0xac>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d018      	beq.n	8006668 <HAL_TIM_Base_Start+0x5c>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800663e:	d013      	beq.n	8006668 <HAL_TIM_Base_Start+0x5c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a1d      	ldr	r2, [pc, #116]	@ (80066bc <HAL_TIM_Base_Start+0xb0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00e      	beq.n	8006668 <HAL_TIM_Base_Start+0x5c>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a1c      	ldr	r2, [pc, #112]	@ (80066c0 <HAL_TIM_Base_Start+0xb4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d009      	beq.n	8006668 <HAL_TIM_Base_Start+0x5c>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1a      	ldr	r2, [pc, #104]	@ (80066c4 <HAL_TIM_Base_Start+0xb8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <HAL_TIM_Base_Start+0x5c>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a19      	ldr	r2, [pc, #100]	@ (80066c8 <HAL_TIM_Base_Start+0xbc>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d115      	bne.n	8006694 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	4b17      	ldr	r3, [pc, #92]	@ (80066cc <HAL_TIM_Base_Start+0xc0>)
 8006670:	4013      	ands	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b06      	cmp	r3, #6
 8006678:	d015      	beq.n	80066a6 <HAL_TIM_Base_Start+0x9a>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006680:	d011      	beq.n	80066a6 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f042 0201 	orr.w	r2, r2, #1
 8006690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006692:	e008      	b.n	80066a6 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f042 0201 	orr.w	r2, r2, #1
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	e000      	b.n	80066a8 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40012c00 	.word	0x40012c00
 80066bc:	40000400 	.word	0x40000400
 80066c0:	40000800 	.word	0x40000800
 80066c4:	40013400 	.word	0x40013400
 80066c8:	40014000 	.word	0x40014000
 80066cc:	00010007 	.word	0x00010007

080066d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d001      	beq.n	80066e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e04a      	b.n	800677e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0201 	orr.w	r2, r2, #1
 80066fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a21      	ldr	r2, [pc, #132]	@ (800678c <HAL_TIM_Base_Start_IT+0xbc>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d018      	beq.n	800673c <HAL_TIM_Base_Start_IT+0x6c>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006712:	d013      	beq.n	800673c <HAL_TIM_Base_Start_IT+0x6c>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1d      	ldr	r2, [pc, #116]	@ (8006790 <HAL_TIM_Base_Start_IT+0xc0>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d00e      	beq.n	800673c <HAL_TIM_Base_Start_IT+0x6c>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1c      	ldr	r2, [pc, #112]	@ (8006794 <HAL_TIM_Base_Start_IT+0xc4>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d009      	beq.n	800673c <HAL_TIM_Base_Start_IT+0x6c>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1a      	ldr	r2, [pc, #104]	@ (8006798 <HAL_TIM_Base_Start_IT+0xc8>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d004      	beq.n	800673c <HAL_TIM_Base_Start_IT+0x6c>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a19      	ldr	r2, [pc, #100]	@ (800679c <HAL_TIM_Base_Start_IT+0xcc>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d115      	bne.n	8006768 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	4b17      	ldr	r3, [pc, #92]	@ (80067a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006744:	4013      	ands	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b06      	cmp	r3, #6
 800674c:	d015      	beq.n	800677a <HAL_TIM_Base_Start_IT+0xaa>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006754:	d011      	beq.n	800677a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0201 	orr.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006766:	e008      	b.n	800677a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	e000      	b.n	800677c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800677a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	40012c00 	.word	0x40012c00
 8006790:	40000400 	.word	0x40000400
 8006794:	40000800 	.word	0x40000800
 8006798:	40013400 	.word	0x40013400
 800679c:	40014000 	.word	0x40014000
 80067a0:	00010007 	.word	0x00010007

080067a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e049      	b.n	800684a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d106      	bne.n	80067d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f841 	bl	8006852 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3304      	adds	r3, #4
 80067e0:	4619      	mov	r1, r3
 80067e2:	4610      	mov	r0, r2
 80067e4:	f000 fd6c 	bl	80072c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
	...

08006868 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d109      	bne.n	800688c <HAL_TIM_PWM_Start+0x24>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b01      	cmp	r3, #1
 8006882:	bf14      	ite	ne
 8006884:	2301      	movne	r3, #1
 8006886:	2300      	moveq	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	e03c      	b.n	8006906 <HAL_TIM_PWM_Start+0x9e>
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2b04      	cmp	r3, #4
 8006890:	d109      	bne.n	80068a6 <HAL_TIM_PWM_Start+0x3e>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b01      	cmp	r3, #1
 800689c:	bf14      	ite	ne
 800689e:	2301      	movne	r3, #1
 80068a0:	2300      	moveq	r3, #0
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	e02f      	b.n	8006906 <HAL_TIM_PWM_Start+0x9e>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d109      	bne.n	80068c0 <HAL_TIM_PWM_Start+0x58>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	bf14      	ite	ne
 80068b8:	2301      	movne	r3, #1
 80068ba:	2300      	moveq	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	e022      	b.n	8006906 <HAL_TIM_PWM_Start+0x9e>
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b0c      	cmp	r3, #12
 80068c4:	d109      	bne.n	80068da <HAL_TIM_PWM_Start+0x72>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	bf14      	ite	ne
 80068d2:	2301      	movne	r3, #1
 80068d4:	2300      	moveq	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	e015      	b.n	8006906 <HAL_TIM_PWM_Start+0x9e>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b10      	cmp	r3, #16
 80068de:	d109      	bne.n	80068f4 <HAL_TIM_PWM_Start+0x8c>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	bf14      	ite	ne
 80068ec:	2301      	movne	r3, #1
 80068ee:	2300      	moveq	r3, #0
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	e008      	b.n	8006906 <HAL_TIM_PWM_Start+0x9e>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	bf14      	ite	ne
 8006900:	2301      	movne	r3, #1
 8006902:	2300      	moveq	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e097      	b.n	8006a3e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d104      	bne.n	800691e <HAL_TIM_PWM_Start+0xb6>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800691c:	e023      	b.n	8006966 <HAL_TIM_PWM_Start+0xfe>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b04      	cmp	r3, #4
 8006922:	d104      	bne.n	800692e <HAL_TIM_PWM_Start+0xc6>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800692c:	e01b      	b.n	8006966 <HAL_TIM_PWM_Start+0xfe>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b08      	cmp	r3, #8
 8006932:	d104      	bne.n	800693e <HAL_TIM_PWM_Start+0xd6>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800693c:	e013      	b.n	8006966 <HAL_TIM_PWM_Start+0xfe>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b0c      	cmp	r3, #12
 8006942:	d104      	bne.n	800694e <HAL_TIM_PWM_Start+0xe6>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800694c:	e00b      	b.n	8006966 <HAL_TIM_PWM_Start+0xfe>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b10      	cmp	r3, #16
 8006952:	d104      	bne.n	800695e <HAL_TIM_PWM_Start+0xf6>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800695c:	e003      	b.n	8006966 <HAL_TIM_PWM_Start+0xfe>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2202      	movs	r2, #2
 8006962:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2201      	movs	r2, #1
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f001 f8d4 	bl	8007b1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a33      	ldr	r2, [pc, #204]	@ (8006a48 <HAL_TIM_PWM_Start+0x1e0>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d013      	beq.n	80069a6 <HAL_TIM_PWM_Start+0x13e>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a32      	ldr	r2, [pc, #200]	@ (8006a4c <HAL_TIM_PWM_Start+0x1e4>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d00e      	beq.n	80069a6 <HAL_TIM_PWM_Start+0x13e>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a30      	ldr	r2, [pc, #192]	@ (8006a50 <HAL_TIM_PWM_Start+0x1e8>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d009      	beq.n	80069a6 <HAL_TIM_PWM_Start+0x13e>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a2f      	ldr	r2, [pc, #188]	@ (8006a54 <HAL_TIM_PWM_Start+0x1ec>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d004      	beq.n	80069a6 <HAL_TIM_PWM_Start+0x13e>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a2d      	ldr	r2, [pc, #180]	@ (8006a58 <HAL_TIM_PWM_Start+0x1f0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d101      	bne.n	80069aa <HAL_TIM_PWM_Start+0x142>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <HAL_TIM_PWM_Start+0x144>
 80069aa:	2300      	movs	r3, #0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d007      	beq.n	80069c0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069be:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a20      	ldr	r2, [pc, #128]	@ (8006a48 <HAL_TIM_PWM_Start+0x1e0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d018      	beq.n	80069fc <HAL_TIM_PWM_Start+0x194>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069d2:	d013      	beq.n	80069fc <HAL_TIM_PWM_Start+0x194>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a20      	ldr	r2, [pc, #128]	@ (8006a5c <HAL_TIM_PWM_Start+0x1f4>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d00e      	beq.n	80069fc <HAL_TIM_PWM_Start+0x194>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006a60 <HAL_TIM_PWM_Start+0x1f8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d009      	beq.n	80069fc <HAL_TIM_PWM_Start+0x194>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a17      	ldr	r2, [pc, #92]	@ (8006a4c <HAL_TIM_PWM_Start+0x1e4>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d004      	beq.n	80069fc <HAL_TIM_PWM_Start+0x194>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a16      	ldr	r2, [pc, #88]	@ (8006a50 <HAL_TIM_PWM_Start+0x1e8>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d115      	bne.n	8006a28 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	4b18      	ldr	r3, [pc, #96]	@ (8006a64 <HAL_TIM_PWM_Start+0x1fc>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b06      	cmp	r3, #6
 8006a0c:	d015      	beq.n	8006a3a <HAL_TIM_PWM_Start+0x1d2>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a14:	d011      	beq.n	8006a3a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f042 0201 	orr.w	r2, r2, #1
 8006a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a26:	e008      	b.n	8006a3a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0201 	orr.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	e000      	b.n	8006a3c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	40012c00 	.word	0x40012c00
 8006a4c:	40013400 	.word	0x40013400
 8006a50:	40014000 	.word	0x40014000
 8006a54:	40014400 	.word	0x40014400
 8006a58:	40014800 	.word	0x40014800
 8006a5c:	40000400 	.word	0x40000400
 8006a60:	40000800 	.word	0x40000800
 8006a64:	00010007 	.word	0x00010007

08006a68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e097      	b.n	8006bac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d106      	bne.n	8006a96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7fb fb1b 	bl	80020cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	6812      	ldr	r2, [r2, #0]
 8006aa8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006aac:	f023 0307 	bic.w	r3, r3, #7
 8006ab0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	4619      	mov	r1, r3
 8006abc:	4610      	mov	r0, r2
 8006abe:	f000 fbff 	bl	80072c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	021b      	lsls	r3, r3, #8
 8006afa:	4313      	orrs	r3, r2
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006b08:	f023 030c 	bic.w	r3, r3, #12
 8006b0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68da      	ldr	r2, [r3, #12]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	021b      	lsls	r3, r3, #8
 8006b24:	4313      	orrs	r3, r2
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	011a      	lsls	r2, r3, #4
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	031b      	lsls	r3, r3, #12
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006b46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006b4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	011b      	lsls	r3, r3, #4
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d020      	beq.n	8006c18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01b      	beq.n	8006c18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f06f 0202 	mvn.w	r2, #2
 8006be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fb40 	bl	8007284 <HAL_TIM_IC_CaptureCallback>
 8006c04:	e005      	b.n	8006c12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fb32 	bl	8007270 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fb43 	bl	8007298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f003 0304 	and.w	r3, r3, #4
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d020      	beq.n	8006c64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01b      	beq.n	8006c64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f06f 0204 	mvn.w	r2, #4
 8006c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fb1a 	bl	8007284 <HAL_TIM_IC_CaptureCallback>
 8006c50:	e005      	b.n	8006c5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fb0c 	bl	8007270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fb1d 	bl	8007298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d020      	beq.n	8006cb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f003 0308 	and.w	r3, r3, #8
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d01b      	beq.n	8006cb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f06f 0208 	mvn.w	r2, #8
 8006c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2204      	movs	r2, #4
 8006c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	f003 0303 	and.w	r3, r3, #3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 faf4 	bl	8007284 <HAL_TIM_IC_CaptureCallback>
 8006c9c:	e005      	b.n	8006caa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fae6 	bl	8007270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 faf7 	bl	8007298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f003 0310 	and.w	r3, r3, #16
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d020      	beq.n	8006cfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f003 0310 	and.w	r3, r3, #16
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01b      	beq.n	8006cfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f06f 0210 	mvn.w	r2, #16
 8006ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 face 	bl	8007284 <HAL_TIM_IC_CaptureCallback>
 8006ce8:	e005      	b.n	8006cf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fac0 	bl	8007270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fad1 	bl	8007298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00c      	beq.n	8006d20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d007      	beq.n	8006d20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f06f 0201 	mvn.w	r2, #1
 8006d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fa fd18 	bl	8001750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00c      	beq.n	8006d4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d007      	beq.n	8006d4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 f825 	bl	8007d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00c      	beq.n	8006d72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d007      	beq.n	8006d72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 f81d 	bl	8007dac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00c      	beq.n	8006d96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d007      	beq.n	8006d96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fa8b 	bl	80072ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f003 0320 	and.w	r3, r3, #32
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00c      	beq.n	8006dba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d007      	beq.n	8006dba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f06f 0220 	mvn.w	r2, #32
 8006db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 ffe5 	bl	8007d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00c      	beq.n	8006dde <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d007      	beq.n	8006dde <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fff1 	bl	8007dc0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00c      	beq.n	8006e02 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d007      	beq.n	8006e02 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 ffe9 	bl	8007dd4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00c      	beq.n	8006e26 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d007      	beq.n	8006e26 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 ffe1 	bl	8007de8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00c      	beq.n	8006e4a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d007      	beq.n	8006e4a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 ffd9 	bl	8007dfc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e4a:	bf00      	nop
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d101      	bne.n	8006e72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e6e:	2302      	movs	r3, #2
 8006e70:	e0ff      	b.n	8007072 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b14      	cmp	r3, #20
 8006e7e:	f200 80f0 	bhi.w	8007062 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006e82:	a201      	add	r2, pc, #4	@ (adr r2, 8006e88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006edd 	.word	0x08006edd
 8006e8c:	08007063 	.word	0x08007063
 8006e90:	08007063 	.word	0x08007063
 8006e94:	08007063 	.word	0x08007063
 8006e98:	08006f1d 	.word	0x08006f1d
 8006e9c:	08007063 	.word	0x08007063
 8006ea0:	08007063 	.word	0x08007063
 8006ea4:	08007063 	.word	0x08007063
 8006ea8:	08006f5f 	.word	0x08006f5f
 8006eac:	08007063 	.word	0x08007063
 8006eb0:	08007063 	.word	0x08007063
 8006eb4:	08007063 	.word	0x08007063
 8006eb8:	08006f9f 	.word	0x08006f9f
 8006ebc:	08007063 	.word	0x08007063
 8006ec0:	08007063 	.word	0x08007063
 8006ec4:	08007063 	.word	0x08007063
 8006ec8:	08006fe1 	.word	0x08006fe1
 8006ecc:	08007063 	.word	0x08007063
 8006ed0:	08007063 	.word	0x08007063
 8006ed4:	08007063 	.word	0x08007063
 8006ed8:	08007021 	.word	0x08007021
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68b9      	ldr	r1, [r7, #8]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 fa88 	bl	80073f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699a      	ldr	r2, [r3, #24]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0208 	orr.w	r2, r2, #8
 8006ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699a      	ldr	r2, [r3, #24]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0204 	bic.w	r2, r2, #4
 8006f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6999      	ldr	r1, [r3, #24]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	691a      	ldr	r2, [r3, #16]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	619a      	str	r2, [r3, #24]
      break;
 8006f1a:	e0a5      	b.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68b9      	ldr	r1, [r7, #8]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 faf8 	bl	8007518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	699a      	ldr	r2, [r3, #24]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	699a      	ldr	r2, [r3, #24]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6999      	ldr	r1, [r3, #24]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	021a      	lsls	r2, r3, #8
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	619a      	str	r2, [r3, #24]
      break;
 8006f5c:	e084      	b.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68b9      	ldr	r1, [r7, #8]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 fb61 	bl	800762c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69da      	ldr	r2, [r3, #28]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f042 0208 	orr.w	r2, r2, #8
 8006f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69da      	ldr	r2, [r3, #28]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0204 	bic.w	r2, r2, #4
 8006f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69d9      	ldr	r1, [r3, #28]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	61da      	str	r2, [r3, #28]
      break;
 8006f9c:	e064      	b.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68b9      	ldr	r1, [r7, #8]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 fbc9 	bl	800773c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69da      	ldr	r2, [r3, #28]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69da      	ldr	r2, [r3, #28]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	69d9      	ldr	r1, [r3, #28]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	021a      	lsls	r2, r3, #8
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	61da      	str	r2, [r3, #28]
      break;
 8006fde:	e043      	b.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 fc32 	bl	8007850 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0208 	orr.w	r2, r2, #8
 8006ffa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0204 	bic.w	r2, r2, #4
 800700a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	691a      	ldr	r2, [r3, #16]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800701e:	e023      	b.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68b9      	ldr	r1, [r7, #8]
 8007026:	4618      	mov	r0, r3
 8007028:	f000 fc76 	bl	8007918 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800703a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800704a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	021a      	lsls	r2, r3, #8
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007060:	e002      	b.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	75fb      	strb	r3, [r7, #23]
      break;
 8007066:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007070:	7dfb      	ldrb	r3, [r7, #23]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop

0800707c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007090:	2b01      	cmp	r3, #1
 8007092:	d101      	bne.n	8007098 <HAL_TIM_ConfigClockSource+0x1c>
 8007094:	2302      	movs	r3, #2
 8007096:	e0de      	b.n	8007256 <HAL_TIM_ConfigClockSource+0x1da>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80070b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80070ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a63      	ldr	r2, [pc, #396]	@ (8007260 <HAL_TIM_ConfigClockSource+0x1e4>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	f000 80a9 	beq.w	800722a <HAL_TIM_ConfigClockSource+0x1ae>
 80070d8:	4a61      	ldr	r2, [pc, #388]	@ (8007260 <HAL_TIM_ConfigClockSource+0x1e4>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	f200 80ae 	bhi.w	800723c <HAL_TIM_ConfigClockSource+0x1c0>
 80070e0:	4a60      	ldr	r2, [pc, #384]	@ (8007264 <HAL_TIM_ConfigClockSource+0x1e8>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	f000 80a1 	beq.w	800722a <HAL_TIM_ConfigClockSource+0x1ae>
 80070e8:	4a5e      	ldr	r2, [pc, #376]	@ (8007264 <HAL_TIM_ConfigClockSource+0x1e8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	f200 80a6 	bhi.w	800723c <HAL_TIM_ConfigClockSource+0x1c0>
 80070f0:	4a5d      	ldr	r2, [pc, #372]	@ (8007268 <HAL_TIM_ConfigClockSource+0x1ec>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	f000 8099 	beq.w	800722a <HAL_TIM_ConfigClockSource+0x1ae>
 80070f8:	4a5b      	ldr	r2, [pc, #364]	@ (8007268 <HAL_TIM_ConfigClockSource+0x1ec>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	f200 809e 	bhi.w	800723c <HAL_TIM_ConfigClockSource+0x1c0>
 8007100:	4a5a      	ldr	r2, [pc, #360]	@ (800726c <HAL_TIM_ConfigClockSource+0x1f0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	f000 8091 	beq.w	800722a <HAL_TIM_ConfigClockSource+0x1ae>
 8007108:	4a58      	ldr	r2, [pc, #352]	@ (800726c <HAL_TIM_ConfigClockSource+0x1f0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	f200 8096 	bhi.w	800723c <HAL_TIM_ConfigClockSource+0x1c0>
 8007110:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007114:	f000 8089 	beq.w	800722a <HAL_TIM_ConfigClockSource+0x1ae>
 8007118:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800711c:	f200 808e 	bhi.w	800723c <HAL_TIM_ConfigClockSource+0x1c0>
 8007120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007124:	d03e      	beq.n	80071a4 <HAL_TIM_ConfigClockSource+0x128>
 8007126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800712a:	f200 8087 	bhi.w	800723c <HAL_TIM_ConfigClockSource+0x1c0>
 800712e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007132:	f000 8086 	beq.w	8007242 <HAL_TIM_ConfigClockSource+0x1c6>
 8007136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800713a:	d87f      	bhi.n	800723c <HAL_TIM_ConfigClockSource+0x1c0>
 800713c:	2b70      	cmp	r3, #112	@ 0x70
 800713e:	d01a      	beq.n	8007176 <HAL_TIM_ConfigClockSource+0xfa>
 8007140:	2b70      	cmp	r3, #112	@ 0x70
 8007142:	d87b      	bhi.n	800723c <HAL_TIM_ConfigClockSource+0x1c0>
 8007144:	2b60      	cmp	r3, #96	@ 0x60
 8007146:	d050      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x16e>
 8007148:	2b60      	cmp	r3, #96	@ 0x60
 800714a:	d877      	bhi.n	800723c <HAL_TIM_ConfigClockSource+0x1c0>
 800714c:	2b50      	cmp	r3, #80	@ 0x50
 800714e:	d03c      	beq.n	80071ca <HAL_TIM_ConfigClockSource+0x14e>
 8007150:	2b50      	cmp	r3, #80	@ 0x50
 8007152:	d873      	bhi.n	800723c <HAL_TIM_ConfigClockSource+0x1c0>
 8007154:	2b40      	cmp	r3, #64	@ 0x40
 8007156:	d058      	beq.n	800720a <HAL_TIM_ConfigClockSource+0x18e>
 8007158:	2b40      	cmp	r3, #64	@ 0x40
 800715a:	d86f      	bhi.n	800723c <HAL_TIM_ConfigClockSource+0x1c0>
 800715c:	2b30      	cmp	r3, #48	@ 0x30
 800715e:	d064      	beq.n	800722a <HAL_TIM_ConfigClockSource+0x1ae>
 8007160:	2b30      	cmp	r3, #48	@ 0x30
 8007162:	d86b      	bhi.n	800723c <HAL_TIM_ConfigClockSource+0x1c0>
 8007164:	2b20      	cmp	r3, #32
 8007166:	d060      	beq.n	800722a <HAL_TIM_ConfigClockSource+0x1ae>
 8007168:	2b20      	cmp	r3, #32
 800716a:	d867      	bhi.n	800723c <HAL_TIM_ConfigClockSource+0x1c0>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d05c      	beq.n	800722a <HAL_TIM_ConfigClockSource+0x1ae>
 8007170:	2b10      	cmp	r3, #16
 8007172:	d05a      	beq.n	800722a <HAL_TIM_ConfigClockSource+0x1ae>
 8007174:	e062      	b.n	800723c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007186:	f000 fca9 	bl	8007adc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007198:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	609a      	str	r2, [r3, #8]
      break;
 80071a2:	e04f      	b.n	8007244 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071b4:	f000 fc92 	bl	8007adc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071c6:	609a      	str	r2, [r3, #8]
      break;
 80071c8:	e03c      	b.n	8007244 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071d6:	461a      	mov	r2, r3
 80071d8:	f000 fc04 	bl	80079e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2150      	movs	r1, #80	@ 0x50
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 fc5d 	bl	8007aa2 <TIM_ITRx_SetConfig>
      break;
 80071e8:	e02c      	b.n	8007244 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071f6:	461a      	mov	r2, r3
 80071f8:	f000 fc23 	bl	8007a42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2160      	movs	r1, #96	@ 0x60
 8007202:	4618      	mov	r0, r3
 8007204:	f000 fc4d 	bl	8007aa2 <TIM_ITRx_SetConfig>
      break;
 8007208:	e01c      	b.n	8007244 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007216:	461a      	mov	r2, r3
 8007218:	f000 fbe4 	bl	80079e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2140      	movs	r1, #64	@ 0x40
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fc3d 	bl	8007aa2 <TIM_ITRx_SetConfig>
      break;
 8007228:	e00c      	b.n	8007244 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4619      	mov	r1, r3
 8007234:	4610      	mov	r0, r2
 8007236:	f000 fc34 	bl	8007aa2 <TIM_ITRx_SetConfig>
      break;
 800723a:	e003      	b.n	8007244 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	73fb      	strb	r3, [r7, #15]
      break;
 8007240:	e000      	b.n	8007244 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007242:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007254:	7bfb      	ldrb	r3, [r7, #15]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	00100070 	.word	0x00100070
 8007264:	00100040 	.word	0x00100040
 8007268:	00100030 	.word	0x00100030
 800726c:	00100020 	.word	0x00100020

08007270 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a42      	ldr	r2, [pc, #264]	@ (80073dc <TIM_Base_SetConfig+0x11c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d00f      	beq.n	80072f8 <TIM_Base_SetConfig+0x38>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072de:	d00b      	beq.n	80072f8 <TIM_Base_SetConfig+0x38>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a3f      	ldr	r2, [pc, #252]	@ (80073e0 <TIM_Base_SetConfig+0x120>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d007      	beq.n	80072f8 <TIM_Base_SetConfig+0x38>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a3e      	ldr	r2, [pc, #248]	@ (80073e4 <TIM_Base_SetConfig+0x124>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d003      	beq.n	80072f8 <TIM_Base_SetConfig+0x38>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a3d      	ldr	r2, [pc, #244]	@ (80073e8 <TIM_Base_SetConfig+0x128>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d108      	bne.n	800730a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a33      	ldr	r2, [pc, #204]	@ (80073dc <TIM_Base_SetConfig+0x11c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d01b      	beq.n	800734a <TIM_Base_SetConfig+0x8a>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007318:	d017      	beq.n	800734a <TIM_Base_SetConfig+0x8a>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a30      	ldr	r2, [pc, #192]	@ (80073e0 <TIM_Base_SetConfig+0x120>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d013      	beq.n	800734a <TIM_Base_SetConfig+0x8a>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a2f      	ldr	r2, [pc, #188]	@ (80073e4 <TIM_Base_SetConfig+0x124>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d00f      	beq.n	800734a <TIM_Base_SetConfig+0x8a>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a2e      	ldr	r2, [pc, #184]	@ (80073e8 <TIM_Base_SetConfig+0x128>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00b      	beq.n	800734a <TIM_Base_SetConfig+0x8a>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a2d      	ldr	r2, [pc, #180]	@ (80073ec <TIM_Base_SetConfig+0x12c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d007      	beq.n	800734a <TIM_Base_SetConfig+0x8a>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a2c      	ldr	r2, [pc, #176]	@ (80073f0 <TIM_Base_SetConfig+0x130>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d003      	beq.n	800734a <TIM_Base_SetConfig+0x8a>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a2b      	ldr	r2, [pc, #172]	@ (80073f4 <TIM_Base_SetConfig+0x134>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d108      	bne.n	800735c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a16      	ldr	r2, [pc, #88]	@ (80073dc <TIM_Base_SetConfig+0x11c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d00f      	beq.n	80073a8 <TIM_Base_SetConfig+0xe8>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a17      	ldr	r2, [pc, #92]	@ (80073e8 <TIM_Base_SetConfig+0x128>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d00b      	beq.n	80073a8 <TIM_Base_SetConfig+0xe8>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a16      	ldr	r2, [pc, #88]	@ (80073ec <TIM_Base_SetConfig+0x12c>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d007      	beq.n	80073a8 <TIM_Base_SetConfig+0xe8>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a15      	ldr	r2, [pc, #84]	@ (80073f0 <TIM_Base_SetConfig+0x130>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d003      	beq.n	80073a8 <TIM_Base_SetConfig+0xe8>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a14      	ldr	r2, [pc, #80]	@ (80073f4 <TIM_Base_SetConfig+0x134>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d103      	bne.n	80073b0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	691a      	ldr	r2, [r3, #16]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d105      	bne.n	80073ce <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	f023 0201 	bic.w	r2, r3, #1
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	611a      	str	r2, [r3, #16]
  }
}
 80073ce:	bf00      	nop
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	40012c00 	.word	0x40012c00
 80073e0:	40000400 	.word	0x40000400
 80073e4:	40000800 	.word	0x40000800
 80073e8:	40013400 	.word	0x40013400
 80073ec:	40014000 	.word	0x40014000
 80073f0:	40014400 	.word	0x40014400
 80073f4:	40014800 	.word	0x40014800

080073f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	f023 0201 	bic.w	r2, r3, #1
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800742a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 0303 	bic.w	r3, r3, #3
 8007432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f023 0302 	bic.w	r3, r3, #2
 8007444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	4313      	orrs	r3, r2
 800744e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a2c      	ldr	r2, [pc, #176]	@ (8007504 <TIM_OC1_SetConfig+0x10c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00f      	beq.n	8007478 <TIM_OC1_SetConfig+0x80>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a2b      	ldr	r2, [pc, #172]	@ (8007508 <TIM_OC1_SetConfig+0x110>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d00b      	beq.n	8007478 <TIM_OC1_SetConfig+0x80>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a2a      	ldr	r2, [pc, #168]	@ (800750c <TIM_OC1_SetConfig+0x114>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d007      	beq.n	8007478 <TIM_OC1_SetConfig+0x80>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a29      	ldr	r2, [pc, #164]	@ (8007510 <TIM_OC1_SetConfig+0x118>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d003      	beq.n	8007478 <TIM_OC1_SetConfig+0x80>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a28      	ldr	r2, [pc, #160]	@ (8007514 <TIM_OC1_SetConfig+0x11c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d10c      	bne.n	8007492 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f023 0308 	bic.w	r3, r3, #8
 800747e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	4313      	orrs	r3, r2
 8007488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f023 0304 	bic.w	r3, r3, #4
 8007490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a1b      	ldr	r2, [pc, #108]	@ (8007504 <TIM_OC1_SetConfig+0x10c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d00f      	beq.n	80074ba <TIM_OC1_SetConfig+0xc2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a1a      	ldr	r2, [pc, #104]	@ (8007508 <TIM_OC1_SetConfig+0x110>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d00b      	beq.n	80074ba <TIM_OC1_SetConfig+0xc2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a19      	ldr	r2, [pc, #100]	@ (800750c <TIM_OC1_SetConfig+0x114>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d007      	beq.n	80074ba <TIM_OC1_SetConfig+0xc2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a18      	ldr	r2, [pc, #96]	@ (8007510 <TIM_OC1_SetConfig+0x118>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d003      	beq.n	80074ba <TIM_OC1_SetConfig+0xc2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a17      	ldr	r2, [pc, #92]	@ (8007514 <TIM_OC1_SetConfig+0x11c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d111      	bne.n	80074de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	4313      	orrs	r3, r2
 80074dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	621a      	str	r2, [r3, #32]
}
 80074f8:	bf00      	nop
 80074fa:	371c      	adds	r7, #28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	40012c00 	.word	0x40012c00
 8007508:	40013400 	.word	0x40013400
 800750c:	40014000 	.word	0x40014000
 8007510:	40014400 	.word	0x40014400
 8007514:	40014800 	.word	0x40014800

08007518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a1b      	ldr	r3, [r3, #32]
 800752c:	f023 0210 	bic.w	r2, r3, #16
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007546:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800754a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	021b      	lsls	r3, r3, #8
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4313      	orrs	r3, r2
 800755e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f023 0320 	bic.w	r3, r3, #32
 8007566:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	011b      	lsls	r3, r3, #4
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a28      	ldr	r2, [pc, #160]	@ (8007618 <TIM_OC2_SetConfig+0x100>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d003      	beq.n	8007584 <TIM_OC2_SetConfig+0x6c>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a27      	ldr	r2, [pc, #156]	@ (800761c <TIM_OC2_SetConfig+0x104>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d10d      	bne.n	80075a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800758a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	4313      	orrs	r3, r2
 8007596:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800759e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a1d      	ldr	r2, [pc, #116]	@ (8007618 <TIM_OC2_SetConfig+0x100>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00f      	beq.n	80075c8 <TIM_OC2_SetConfig+0xb0>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a1c      	ldr	r2, [pc, #112]	@ (800761c <TIM_OC2_SetConfig+0x104>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00b      	beq.n	80075c8 <TIM_OC2_SetConfig+0xb0>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a1b      	ldr	r2, [pc, #108]	@ (8007620 <TIM_OC2_SetConfig+0x108>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d007      	beq.n	80075c8 <TIM_OC2_SetConfig+0xb0>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007624 <TIM_OC2_SetConfig+0x10c>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d003      	beq.n	80075c8 <TIM_OC2_SetConfig+0xb0>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a19      	ldr	r2, [pc, #100]	@ (8007628 <TIM_OC2_SetConfig+0x110>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d113      	bne.n	80075f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80075d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	621a      	str	r2, [r3, #32]
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	40012c00 	.word	0x40012c00
 800761c:	40013400 	.word	0x40013400
 8007620:	40014000 	.word	0x40014000
 8007624:	40014400 	.word	0x40014400
 8007628:	40014800 	.word	0x40014800

0800762c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800765a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800765e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 0303 	bic.w	r3, r3, #3
 8007666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	4313      	orrs	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	021b      	lsls	r3, r3, #8
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	4313      	orrs	r3, r2
 8007684:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a27      	ldr	r2, [pc, #156]	@ (8007728 <TIM_OC3_SetConfig+0xfc>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d003      	beq.n	8007696 <TIM_OC3_SetConfig+0x6a>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a26      	ldr	r2, [pc, #152]	@ (800772c <TIM_OC3_SetConfig+0x100>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d10d      	bne.n	80076b2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800769c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	021b      	lsls	r3, r3, #8
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007728 <TIM_OC3_SetConfig+0xfc>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00f      	beq.n	80076da <TIM_OC3_SetConfig+0xae>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a1b      	ldr	r2, [pc, #108]	@ (800772c <TIM_OC3_SetConfig+0x100>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d00b      	beq.n	80076da <TIM_OC3_SetConfig+0xae>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a1a      	ldr	r2, [pc, #104]	@ (8007730 <TIM_OC3_SetConfig+0x104>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d007      	beq.n	80076da <TIM_OC3_SetConfig+0xae>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a19      	ldr	r2, [pc, #100]	@ (8007734 <TIM_OC3_SetConfig+0x108>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d003      	beq.n	80076da <TIM_OC3_SetConfig+0xae>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a18      	ldr	r2, [pc, #96]	@ (8007738 <TIM_OC3_SetConfig+0x10c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d113      	bne.n	8007702 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80076e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	011b      	lsls	r3, r3, #4
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	4313      	orrs	r3, r2
 8007700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	621a      	str	r2, [r3, #32]
}
 800771c:	bf00      	nop
 800771e:	371c      	adds	r7, #28
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	40012c00 	.word	0x40012c00
 800772c:	40013400 	.word	0x40013400
 8007730:	40014000 	.word	0x40014000
 8007734:	40014400 	.word	0x40014400
 8007738:	40014800 	.word	0x40014800

0800773c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800773c:	b480      	push	{r7}
 800773e:	b087      	sub	sp, #28
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800776a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800776e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800778a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	031b      	lsls	r3, r3, #12
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	4313      	orrs	r3, r2
 8007796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a28      	ldr	r2, [pc, #160]	@ (800783c <TIM_OC4_SetConfig+0x100>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d003      	beq.n	80077a8 <TIM_OC4_SetConfig+0x6c>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a27      	ldr	r2, [pc, #156]	@ (8007840 <TIM_OC4_SetConfig+0x104>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d10d      	bne.n	80077c4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80077ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	031b      	lsls	r3, r3, #12
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a1d      	ldr	r2, [pc, #116]	@ (800783c <TIM_OC4_SetConfig+0x100>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d00f      	beq.n	80077ec <TIM_OC4_SetConfig+0xb0>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007840 <TIM_OC4_SetConfig+0x104>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d00b      	beq.n	80077ec <TIM_OC4_SetConfig+0xb0>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a1b      	ldr	r2, [pc, #108]	@ (8007844 <TIM_OC4_SetConfig+0x108>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d007      	beq.n	80077ec <TIM_OC4_SetConfig+0xb0>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a1a      	ldr	r2, [pc, #104]	@ (8007848 <TIM_OC4_SetConfig+0x10c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d003      	beq.n	80077ec <TIM_OC4_SetConfig+0xb0>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a19      	ldr	r2, [pc, #100]	@ (800784c <TIM_OC4_SetConfig+0x110>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d113      	bne.n	8007814 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80077fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	019b      	lsls	r3, r3, #6
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	4313      	orrs	r3, r2
 8007806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	019b      	lsls	r3, r3, #6
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4313      	orrs	r3, r2
 8007812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	621a      	str	r2, [r3, #32]
}
 800782e:	bf00      	nop
 8007830:	371c      	adds	r7, #28
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	40012c00 	.word	0x40012c00
 8007840:	40013400 	.word	0x40013400
 8007844:	40014000 	.word	0x40014000
 8007848:	40014400 	.word	0x40014400
 800784c:	40014800 	.word	0x40014800

08007850 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800787e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4313      	orrs	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007894:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	041b      	lsls	r3, r3, #16
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	4313      	orrs	r3, r2
 80078a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a17      	ldr	r2, [pc, #92]	@ (8007904 <TIM_OC5_SetConfig+0xb4>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d00f      	beq.n	80078ca <TIM_OC5_SetConfig+0x7a>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a16      	ldr	r2, [pc, #88]	@ (8007908 <TIM_OC5_SetConfig+0xb8>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d00b      	beq.n	80078ca <TIM_OC5_SetConfig+0x7a>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a15      	ldr	r2, [pc, #84]	@ (800790c <TIM_OC5_SetConfig+0xbc>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d007      	beq.n	80078ca <TIM_OC5_SetConfig+0x7a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a14      	ldr	r2, [pc, #80]	@ (8007910 <TIM_OC5_SetConfig+0xc0>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d003      	beq.n	80078ca <TIM_OC5_SetConfig+0x7a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a13      	ldr	r2, [pc, #76]	@ (8007914 <TIM_OC5_SetConfig+0xc4>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d109      	bne.n	80078de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	021b      	lsls	r3, r3, #8
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	4313      	orrs	r3, r2
 80078dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	621a      	str	r2, [r3, #32]
}
 80078f8:	bf00      	nop
 80078fa:	371c      	adds	r7, #28
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr
 8007904:	40012c00 	.word	0x40012c00
 8007908:	40013400 	.word	0x40013400
 800790c:	40014000 	.word	0x40014000
 8007910:	40014400 	.word	0x40014400
 8007914:	40014800 	.word	0x40014800

08007918 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007918:	b480      	push	{r7}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800793e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800794a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	021b      	lsls	r3, r3, #8
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	4313      	orrs	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800795e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	051b      	lsls	r3, r3, #20
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	4313      	orrs	r3, r2
 800796a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a18      	ldr	r2, [pc, #96]	@ (80079d0 <TIM_OC6_SetConfig+0xb8>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00f      	beq.n	8007994 <TIM_OC6_SetConfig+0x7c>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a17      	ldr	r2, [pc, #92]	@ (80079d4 <TIM_OC6_SetConfig+0xbc>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d00b      	beq.n	8007994 <TIM_OC6_SetConfig+0x7c>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a16      	ldr	r2, [pc, #88]	@ (80079d8 <TIM_OC6_SetConfig+0xc0>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d007      	beq.n	8007994 <TIM_OC6_SetConfig+0x7c>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a15      	ldr	r2, [pc, #84]	@ (80079dc <TIM_OC6_SetConfig+0xc4>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d003      	beq.n	8007994 <TIM_OC6_SetConfig+0x7c>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a14      	ldr	r2, [pc, #80]	@ (80079e0 <TIM_OC6_SetConfig+0xc8>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d109      	bne.n	80079a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800799a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	029b      	lsls	r3, r3, #10
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	621a      	str	r2, [r3, #32]
}
 80079c2:	bf00      	nop
 80079c4:	371c      	adds	r7, #28
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	40012c00 	.word	0x40012c00
 80079d4:	40013400 	.word	0x40013400
 80079d8:	40014000 	.word	0x40014000
 80079dc:	40014400 	.word	0x40014400
 80079e0:	40014800 	.word	0x40014800

080079e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6a1b      	ldr	r3, [r3, #32]
 80079f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	f023 0201 	bic.w	r2, r3, #1
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	011b      	lsls	r3, r3, #4
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f023 030a 	bic.w	r3, r3, #10
 8007a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	621a      	str	r2, [r3, #32]
}
 8007a36:	bf00      	nop
 8007a38:	371c      	adds	r7, #28
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b087      	sub	sp, #28
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	f023 0210 	bic.w	r2, r3, #16
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007a6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	031b      	lsls	r3, r3, #12
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007a7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	011b      	lsls	r3, r3, #4
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	621a      	str	r2, [r3, #32]
}
 8007a96:	bf00      	nop
 8007a98:	371c      	adds	r7, #28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b085      	sub	sp, #20
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007ab8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007abc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	f043 0307 	orr.w	r3, r3, #7
 8007ac8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	609a      	str	r2, [r3, #8]
}
 8007ad0:	bf00      	nop
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007af6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	021a      	lsls	r2, r3, #8
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	431a      	orrs	r2, r3
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	609a      	str	r2, [r3, #8]
}
 8007b10:	bf00      	nop
 8007b12:	371c      	adds	r7, #28
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f003 031f 	and.w	r3, r3, #31
 8007b2e:	2201      	movs	r2, #1
 8007b30:	fa02 f303 	lsl.w	r3, r2, r3
 8007b34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a1a      	ldr	r2, [r3, #32]
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	43db      	mvns	r3, r3
 8007b3e:	401a      	ands	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6a1a      	ldr	r2, [r3, #32]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f003 031f 	and.w	r3, r3, #31
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	fa01 f303 	lsl.w	r3, r1, r3
 8007b54:	431a      	orrs	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	621a      	str	r2, [r3, #32]
}
 8007b5a:	bf00      	nop
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
	...

08007b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d101      	bne.n	8007b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	e065      	b.n	8007c4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d004      	beq.n	8007bb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a2b      	ldr	r2, [pc, #172]	@ (8007c5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d108      	bne.n	8007bc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007bba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007bcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a1b      	ldr	r2, [pc, #108]	@ (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d018      	beq.n	8007c20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bf6:	d013      	beq.n	8007c20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a18      	ldr	r2, [pc, #96]	@ (8007c60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d00e      	beq.n	8007c20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a17      	ldr	r2, [pc, #92]	@ (8007c64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d009      	beq.n	8007c20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a12      	ldr	r2, [pc, #72]	@ (8007c5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d004      	beq.n	8007c20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a13      	ldr	r2, [pc, #76]	@ (8007c68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d10c      	bne.n	8007c3a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	40012c00 	.word	0x40012c00
 8007c5c:	40013400 	.word	0x40013400
 8007c60:	40000400 	.word	0x40000400
 8007c64:	40000800 	.word	0x40000800
 8007c68:	40014000 	.word	0x40014000

08007c6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d101      	bne.n	8007c88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c84:	2302      	movs	r3, #2
 8007c86:	e073      	b.n	8007d70 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	041b      	lsls	r3, r3, #16
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a19      	ldr	r2, [pc, #100]	@ (8007d7c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d004      	beq.n	8007d24 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a18      	ldr	r2, [pc, #96]	@ (8007d80 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d11c      	bne.n	8007d5e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d2e:	051b      	lsls	r3, r3, #20
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	40012c00 	.word	0x40012c00
 8007d80:	40013400 	.word	0x40013400

08007d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e042      	b.n	8007ea8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d106      	bne.n	8007e3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7fa fab3 	bl	80023a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2224      	movs	r2, #36	@ 0x24
 8007e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f022 0201 	bic.w	r2, r2, #1
 8007e50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fc82 	bl	8008764 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f9b3 	bl	80081cc <UART_SetConfig>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d101      	bne.n	8007e70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e01b      	b.n	8007ea8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0201 	orr.w	r2, r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fd01 	bl	80088a8 <UART_CheckIdleState>
 8007ea6:	4603      	mov	r3, r0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08a      	sub	sp, #40	@ 0x28
 8007eb4:	af02      	add	r7, sp, #8
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	603b      	str	r3, [r7, #0]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ec6:	2b20      	cmp	r3, #32
 8007ec8:	d17b      	bne.n	8007fc2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d002      	beq.n	8007ed6 <HAL_UART_Transmit+0x26>
 8007ed0:	88fb      	ldrh	r3, [r7, #6]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e074      	b.n	8007fc4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2221      	movs	r2, #33	@ 0x21
 8007ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007eea:	f7fa fb47 	bl	800257c <HAL_GetTick>
 8007eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	88fa      	ldrh	r2, [r7, #6]
 8007ef4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	88fa      	ldrh	r2, [r7, #6]
 8007efc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f08:	d108      	bne.n	8007f1c <HAL_UART_Transmit+0x6c>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d104      	bne.n	8007f1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007f12:	2300      	movs	r3, #0
 8007f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	61bb      	str	r3, [r7, #24]
 8007f1a:	e003      	b.n	8007f24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f20:	2300      	movs	r3, #0
 8007f22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f24:	e030      	b.n	8007f88 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	2180      	movs	r1, #128	@ 0x80
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 fd63 	bl	80089fc <UART_WaitOnFlagUntilTimeout>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d005      	beq.n	8007f48 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2220      	movs	r2, #32
 8007f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e03d      	b.n	8007fc4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10b      	bne.n	8007f66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	881b      	ldrh	r3, [r3, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f5c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	3302      	adds	r3, #2
 8007f62:	61bb      	str	r3, [r7, #24]
 8007f64:	e007      	b.n	8007f76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	781a      	ldrb	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	3301      	adds	r3, #1
 8007f74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1c8      	bne.n	8007f26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2140      	movs	r1, #64	@ 0x40
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f000 fd2c 	bl	80089fc <UART_WaitOnFlagUntilTimeout>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d005      	beq.n	8007fb6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2220      	movs	r2, #32
 8007fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e006      	b.n	8007fc4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	e000      	b.n	8007fc4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007fc2:	2302      	movs	r3, #2
  }
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3720      	adds	r7, #32
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b091      	sub	sp, #68	@ 0x44
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fe0:	2b20      	cmp	r3, #32
 8007fe2:	d178      	bne.n	80080d6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <HAL_UART_Transmit_IT+0x24>
 8007fea:	88fb      	ldrh	r3, [r7, #6]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e071      	b.n	80080d8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	88fa      	ldrh	r2, [r7, #6]
 8007ffe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	88fa      	ldrh	r2, [r7, #6]
 8008006:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2221      	movs	r2, #33	@ 0x21
 800801c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008024:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008028:	d12a      	bne.n	8008080 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008032:	d107      	bne.n	8008044 <HAL_UART_Transmit_IT+0x78>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d103      	bne.n	8008044 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	4a29      	ldr	r2, [pc, #164]	@ (80080e4 <HAL_UART_Transmit_IT+0x118>)
 8008040:	679a      	str	r2, [r3, #120]	@ 0x78
 8008042:	e002      	b.n	800804a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	4a28      	ldr	r2, [pc, #160]	@ (80080e8 <HAL_UART_Transmit_IT+0x11c>)
 8008048:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3308      	adds	r3, #8
 8008050:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008054:	e853 3f00 	ldrex	r3, [r3]
 8008058:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800805a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008060:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3308      	adds	r3, #8
 8008068:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800806a:	637a      	str	r2, [r7, #52]	@ 0x34
 800806c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008070:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008072:	e841 2300 	strex	r3, r2, [r1]
 8008076:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e5      	bne.n	800804a <HAL_UART_Transmit_IT+0x7e>
 800807e:	e028      	b.n	80080d2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008088:	d107      	bne.n	800809a <HAL_UART_Transmit_IT+0xce>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d103      	bne.n	800809a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	4a15      	ldr	r2, [pc, #84]	@ (80080ec <HAL_UART_Transmit_IT+0x120>)
 8008096:	679a      	str	r2, [r3, #120]	@ 0x78
 8008098:	e002      	b.n	80080a0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4a14      	ldr	r2, [pc, #80]	@ (80080f0 <HAL_UART_Transmit_IT+0x124>)
 800809e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	e853 3f00 	ldrex	r3, [r3]
 80080ac:	613b      	str	r3, [r7, #16]
   return(result);
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080be:	623b      	str	r3, [r7, #32]
 80080c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c2:	69f9      	ldr	r1, [r7, #28]
 80080c4:	6a3a      	ldr	r2, [r7, #32]
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1e6      	bne.n	80080a0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	e000      	b.n	80080d8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80080d6:	2302      	movs	r3, #2
  }
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3744      	adds	r7, #68	@ 0x44
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr
 80080e4:	08009043 	.word	0x08009043
 80080e8:	08008f63 	.word	0x08008f63
 80080ec:	08008ea1 	.word	0x08008ea1
 80080f0:	08008de9 	.word	0x08008de9

080080f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b08a      	sub	sp, #40	@ 0x28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	4613      	mov	r3, r2
 8008100:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008108:	2b20      	cmp	r3, #32
 800810a:	d137      	bne.n	800817c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <HAL_UART_Receive_IT+0x24>
 8008112:	88fb      	ldrh	r3, [r7, #6]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e030      	b.n	800817e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a18      	ldr	r2, [pc, #96]	@ (8008188 <HAL_UART_Receive_IT+0x94>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d01f      	beq.n	800816c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d018      	beq.n	800816c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	e853 3f00 	ldrex	r3, [r3]
 8008146:	613b      	str	r3, [r7, #16]
   return(result);
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800814e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	461a      	mov	r2, r3
 8008156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008158:	623b      	str	r3, [r7, #32]
 800815a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815c:	69f9      	ldr	r1, [r7, #28]
 800815e:	6a3a      	ldr	r2, [r7, #32]
 8008160:	e841 2300 	strex	r3, r2, [r1]
 8008164:	61bb      	str	r3, [r7, #24]
   return(result);
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1e6      	bne.n	800813a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800816c:	88fb      	ldrh	r3, [r7, #6]
 800816e:	461a      	mov	r2, r3
 8008170:	68b9      	ldr	r1, [r7, #8]
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 fcb0 	bl	8008ad8 <UART_Start_Receive_IT>
 8008178:	4603      	mov	r3, r0
 800817a:	e000      	b.n	800817e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800817c:	2302      	movs	r3, #2
  }
}
 800817e:	4618      	mov	r0, r3
 8008180:	3728      	adds	r7, #40	@ 0x28
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	40008000 	.word	0x40008000

0800818c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081d0:	b08c      	sub	sp, #48	@ 0x30
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	431a      	orrs	r2, r3
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	431a      	orrs	r2, r3
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	4bab      	ldr	r3, [pc, #684]	@ (80084a8 <UART_SetConfig+0x2dc>)
 80081fc:	4013      	ands	r3, r2
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	6812      	ldr	r2, [r2, #0]
 8008202:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008204:	430b      	orrs	r3, r1
 8008206:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	68da      	ldr	r2, [r3, #12]
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4aa0      	ldr	r2, [pc, #640]	@ (80084ac <UART_SetConfig+0x2e0>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d004      	beq.n	8008238 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008234:	4313      	orrs	r3, r2
 8008236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008242:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	6812      	ldr	r2, [r2, #0]
 800824a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800824c:	430b      	orrs	r3, r1
 800824e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008256:	f023 010f 	bic.w	r1, r3, #15
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	430a      	orrs	r2, r1
 8008264:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a91      	ldr	r2, [pc, #580]	@ (80084b0 <UART_SetConfig+0x2e4>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d125      	bne.n	80082bc <UART_SetConfig+0xf0>
 8008270:	4b90      	ldr	r3, [pc, #576]	@ (80084b4 <UART_SetConfig+0x2e8>)
 8008272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008276:	f003 0303 	and.w	r3, r3, #3
 800827a:	2b03      	cmp	r3, #3
 800827c:	d81a      	bhi.n	80082b4 <UART_SetConfig+0xe8>
 800827e:	a201      	add	r2, pc, #4	@ (adr r2, 8008284 <UART_SetConfig+0xb8>)
 8008280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008284:	08008295 	.word	0x08008295
 8008288:	080082a5 	.word	0x080082a5
 800828c:	0800829d 	.word	0x0800829d
 8008290:	080082ad 	.word	0x080082ad
 8008294:	2301      	movs	r3, #1
 8008296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800829a:	e0d6      	b.n	800844a <UART_SetConfig+0x27e>
 800829c:	2302      	movs	r3, #2
 800829e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082a2:	e0d2      	b.n	800844a <UART_SetConfig+0x27e>
 80082a4:	2304      	movs	r3, #4
 80082a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082aa:	e0ce      	b.n	800844a <UART_SetConfig+0x27e>
 80082ac:	2308      	movs	r3, #8
 80082ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082b2:	e0ca      	b.n	800844a <UART_SetConfig+0x27e>
 80082b4:	2310      	movs	r3, #16
 80082b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ba:	e0c6      	b.n	800844a <UART_SetConfig+0x27e>
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a7d      	ldr	r2, [pc, #500]	@ (80084b8 <UART_SetConfig+0x2ec>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d138      	bne.n	8008338 <UART_SetConfig+0x16c>
 80082c6:	4b7b      	ldr	r3, [pc, #492]	@ (80084b4 <UART_SetConfig+0x2e8>)
 80082c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082cc:	f003 030c 	and.w	r3, r3, #12
 80082d0:	2b0c      	cmp	r3, #12
 80082d2:	d82d      	bhi.n	8008330 <UART_SetConfig+0x164>
 80082d4:	a201      	add	r2, pc, #4	@ (adr r2, 80082dc <UART_SetConfig+0x110>)
 80082d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082da:	bf00      	nop
 80082dc:	08008311 	.word	0x08008311
 80082e0:	08008331 	.word	0x08008331
 80082e4:	08008331 	.word	0x08008331
 80082e8:	08008331 	.word	0x08008331
 80082ec:	08008321 	.word	0x08008321
 80082f0:	08008331 	.word	0x08008331
 80082f4:	08008331 	.word	0x08008331
 80082f8:	08008331 	.word	0x08008331
 80082fc:	08008319 	.word	0x08008319
 8008300:	08008331 	.word	0x08008331
 8008304:	08008331 	.word	0x08008331
 8008308:	08008331 	.word	0x08008331
 800830c:	08008329 	.word	0x08008329
 8008310:	2300      	movs	r3, #0
 8008312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008316:	e098      	b.n	800844a <UART_SetConfig+0x27e>
 8008318:	2302      	movs	r3, #2
 800831a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800831e:	e094      	b.n	800844a <UART_SetConfig+0x27e>
 8008320:	2304      	movs	r3, #4
 8008322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008326:	e090      	b.n	800844a <UART_SetConfig+0x27e>
 8008328:	2308      	movs	r3, #8
 800832a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800832e:	e08c      	b.n	800844a <UART_SetConfig+0x27e>
 8008330:	2310      	movs	r3, #16
 8008332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008336:	e088      	b.n	800844a <UART_SetConfig+0x27e>
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a5f      	ldr	r2, [pc, #380]	@ (80084bc <UART_SetConfig+0x2f0>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d125      	bne.n	800838e <UART_SetConfig+0x1c2>
 8008342:	4b5c      	ldr	r3, [pc, #368]	@ (80084b4 <UART_SetConfig+0x2e8>)
 8008344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008348:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800834c:	2b30      	cmp	r3, #48	@ 0x30
 800834e:	d016      	beq.n	800837e <UART_SetConfig+0x1b2>
 8008350:	2b30      	cmp	r3, #48	@ 0x30
 8008352:	d818      	bhi.n	8008386 <UART_SetConfig+0x1ba>
 8008354:	2b20      	cmp	r3, #32
 8008356:	d00a      	beq.n	800836e <UART_SetConfig+0x1a2>
 8008358:	2b20      	cmp	r3, #32
 800835a:	d814      	bhi.n	8008386 <UART_SetConfig+0x1ba>
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <UART_SetConfig+0x19a>
 8008360:	2b10      	cmp	r3, #16
 8008362:	d008      	beq.n	8008376 <UART_SetConfig+0x1aa>
 8008364:	e00f      	b.n	8008386 <UART_SetConfig+0x1ba>
 8008366:	2300      	movs	r3, #0
 8008368:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800836c:	e06d      	b.n	800844a <UART_SetConfig+0x27e>
 800836e:	2302      	movs	r3, #2
 8008370:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008374:	e069      	b.n	800844a <UART_SetConfig+0x27e>
 8008376:	2304      	movs	r3, #4
 8008378:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800837c:	e065      	b.n	800844a <UART_SetConfig+0x27e>
 800837e:	2308      	movs	r3, #8
 8008380:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008384:	e061      	b.n	800844a <UART_SetConfig+0x27e>
 8008386:	2310      	movs	r3, #16
 8008388:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800838c:	e05d      	b.n	800844a <UART_SetConfig+0x27e>
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a4b      	ldr	r2, [pc, #300]	@ (80084c0 <UART_SetConfig+0x2f4>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d125      	bne.n	80083e4 <UART_SetConfig+0x218>
 8008398:	4b46      	ldr	r3, [pc, #280]	@ (80084b4 <UART_SetConfig+0x2e8>)
 800839a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800839e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80083a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80083a4:	d016      	beq.n	80083d4 <UART_SetConfig+0x208>
 80083a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80083a8:	d818      	bhi.n	80083dc <UART_SetConfig+0x210>
 80083aa:	2b80      	cmp	r3, #128	@ 0x80
 80083ac:	d00a      	beq.n	80083c4 <UART_SetConfig+0x1f8>
 80083ae:	2b80      	cmp	r3, #128	@ 0x80
 80083b0:	d814      	bhi.n	80083dc <UART_SetConfig+0x210>
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d002      	beq.n	80083bc <UART_SetConfig+0x1f0>
 80083b6:	2b40      	cmp	r3, #64	@ 0x40
 80083b8:	d008      	beq.n	80083cc <UART_SetConfig+0x200>
 80083ba:	e00f      	b.n	80083dc <UART_SetConfig+0x210>
 80083bc:	2300      	movs	r3, #0
 80083be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083c2:	e042      	b.n	800844a <UART_SetConfig+0x27e>
 80083c4:	2302      	movs	r3, #2
 80083c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ca:	e03e      	b.n	800844a <UART_SetConfig+0x27e>
 80083cc:	2304      	movs	r3, #4
 80083ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083d2:	e03a      	b.n	800844a <UART_SetConfig+0x27e>
 80083d4:	2308      	movs	r3, #8
 80083d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083da:	e036      	b.n	800844a <UART_SetConfig+0x27e>
 80083dc:	2310      	movs	r3, #16
 80083de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083e2:	e032      	b.n	800844a <UART_SetConfig+0x27e>
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a30      	ldr	r2, [pc, #192]	@ (80084ac <UART_SetConfig+0x2e0>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d12a      	bne.n	8008444 <UART_SetConfig+0x278>
 80083ee:	4b31      	ldr	r3, [pc, #196]	@ (80084b4 <UART_SetConfig+0x2e8>)
 80083f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80083f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083fc:	d01a      	beq.n	8008434 <UART_SetConfig+0x268>
 80083fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008402:	d81b      	bhi.n	800843c <UART_SetConfig+0x270>
 8008404:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008408:	d00c      	beq.n	8008424 <UART_SetConfig+0x258>
 800840a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800840e:	d815      	bhi.n	800843c <UART_SetConfig+0x270>
 8008410:	2b00      	cmp	r3, #0
 8008412:	d003      	beq.n	800841c <UART_SetConfig+0x250>
 8008414:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008418:	d008      	beq.n	800842c <UART_SetConfig+0x260>
 800841a:	e00f      	b.n	800843c <UART_SetConfig+0x270>
 800841c:	2300      	movs	r3, #0
 800841e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008422:	e012      	b.n	800844a <UART_SetConfig+0x27e>
 8008424:	2302      	movs	r3, #2
 8008426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800842a:	e00e      	b.n	800844a <UART_SetConfig+0x27e>
 800842c:	2304      	movs	r3, #4
 800842e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008432:	e00a      	b.n	800844a <UART_SetConfig+0x27e>
 8008434:	2308      	movs	r3, #8
 8008436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800843a:	e006      	b.n	800844a <UART_SetConfig+0x27e>
 800843c:	2310      	movs	r3, #16
 800843e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008442:	e002      	b.n	800844a <UART_SetConfig+0x27e>
 8008444:	2310      	movs	r3, #16
 8008446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a17      	ldr	r2, [pc, #92]	@ (80084ac <UART_SetConfig+0x2e0>)
 8008450:	4293      	cmp	r3, r2
 8008452:	f040 80a8 	bne.w	80085a6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008456:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800845a:	2b08      	cmp	r3, #8
 800845c:	d834      	bhi.n	80084c8 <UART_SetConfig+0x2fc>
 800845e:	a201      	add	r2, pc, #4	@ (adr r2, 8008464 <UART_SetConfig+0x298>)
 8008460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008464:	08008489 	.word	0x08008489
 8008468:	080084c9 	.word	0x080084c9
 800846c:	08008491 	.word	0x08008491
 8008470:	080084c9 	.word	0x080084c9
 8008474:	08008497 	.word	0x08008497
 8008478:	080084c9 	.word	0x080084c9
 800847c:	080084c9 	.word	0x080084c9
 8008480:	080084c9 	.word	0x080084c9
 8008484:	0800849f 	.word	0x0800849f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008488:	f7fc fea2 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 800848c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800848e:	e021      	b.n	80084d4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008490:	4b0c      	ldr	r3, [pc, #48]	@ (80084c4 <UART_SetConfig+0x2f8>)
 8008492:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008494:	e01e      	b.n	80084d4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008496:	f7fc fe2f 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 800849a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800849c:	e01a      	b.n	80084d4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800849e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084a4:	e016      	b.n	80084d4 <UART_SetConfig+0x308>
 80084a6:	bf00      	nop
 80084a8:	cfff69f3 	.word	0xcfff69f3
 80084ac:	40008000 	.word	0x40008000
 80084b0:	40013800 	.word	0x40013800
 80084b4:	40021000 	.word	0x40021000
 80084b8:	40004400 	.word	0x40004400
 80084bc:	40004800 	.word	0x40004800
 80084c0:	40004c00 	.word	0x40004c00
 80084c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80084d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 812a 	beq.w	8008730 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e0:	4a9e      	ldr	r2, [pc, #632]	@ (800875c <UART_SetConfig+0x590>)
 80084e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084e6:	461a      	mov	r2, r3
 80084e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ee:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	4613      	mov	r3, r2
 80084f6:	005b      	lsls	r3, r3, #1
 80084f8:	4413      	add	r3, r2
 80084fa:	69ba      	ldr	r2, [r7, #24]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d305      	bcc.n	800850c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	429a      	cmp	r2, r3
 800850a:	d903      	bls.n	8008514 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008512:	e10d      	b.n	8008730 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008516:	2200      	movs	r2, #0
 8008518:	60bb      	str	r3, [r7, #8]
 800851a:	60fa      	str	r2, [r7, #12]
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008520:	4a8e      	ldr	r2, [pc, #568]	@ (800875c <UART_SetConfig+0x590>)
 8008522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008526:	b29b      	uxth	r3, r3
 8008528:	2200      	movs	r2, #0
 800852a:	603b      	str	r3, [r7, #0]
 800852c:	607a      	str	r2, [r7, #4]
 800852e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008532:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008536:	f7f8 f897 	bl	8000668 <__aeabi_uldivmod>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4610      	mov	r0, r2
 8008540:	4619      	mov	r1, r3
 8008542:	f04f 0200 	mov.w	r2, #0
 8008546:	f04f 0300 	mov.w	r3, #0
 800854a:	020b      	lsls	r3, r1, #8
 800854c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008550:	0202      	lsls	r2, r0, #8
 8008552:	6979      	ldr	r1, [r7, #20]
 8008554:	6849      	ldr	r1, [r1, #4]
 8008556:	0849      	lsrs	r1, r1, #1
 8008558:	2000      	movs	r0, #0
 800855a:	460c      	mov	r4, r1
 800855c:	4605      	mov	r5, r0
 800855e:	eb12 0804 	adds.w	r8, r2, r4
 8008562:	eb43 0905 	adc.w	r9, r3, r5
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	469a      	mov	sl, r3
 800856e:	4693      	mov	fp, r2
 8008570:	4652      	mov	r2, sl
 8008572:	465b      	mov	r3, fp
 8008574:	4640      	mov	r0, r8
 8008576:	4649      	mov	r1, r9
 8008578:	f7f8 f876 	bl	8000668 <__aeabi_uldivmod>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4613      	mov	r3, r2
 8008582:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800858a:	d308      	bcc.n	800859e <UART_SetConfig+0x3d2>
 800858c:	6a3b      	ldr	r3, [r7, #32]
 800858e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008592:	d204      	bcs.n	800859e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6a3a      	ldr	r2, [r7, #32]
 800859a:	60da      	str	r2, [r3, #12]
 800859c:	e0c8      	b.n	8008730 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80085a4:	e0c4      	b.n	8008730 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085ae:	d167      	bne.n	8008680 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80085b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80085b4:	2b08      	cmp	r3, #8
 80085b6:	d828      	bhi.n	800860a <UART_SetConfig+0x43e>
 80085b8:	a201      	add	r2, pc, #4	@ (adr r2, 80085c0 <UART_SetConfig+0x3f4>)
 80085ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085be:	bf00      	nop
 80085c0:	080085e5 	.word	0x080085e5
 80085c4:	080085ed 	.word	0x080085ed
 80085c8:	080085f5 	.word	0x080085f5
 80085cc:	0800860b 	.word	0x0800860b
 80085d0:	080085fb 	.word	0x080085fb
 80085d4:	0800860b 	.word	0x0800860b
 80085d8:	0800860b 	.word	0x0800860b
 80085dc:	0800860b 	.word	0x0800860b
 80085e0:	08008603 	.word	0x08008603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085e4:	f7fc fdf4 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 80085e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085ea:	e014      	b.n	8008616 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085ec:	f7fc fe06 	bl	80051fc <HAL_RCC_GetPCLK2Freq>
 80085f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085f2:	e010      	b.n	8008616 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085f4:	4b5a      	ldr	r3, [pc, #360]	@ (8008760 <UART_SetConfig+0x594>)
 80085f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085f8:	e00d      	b.n	8008616 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085fa:	f7fc fd7d 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 80085fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008600:	e009      	b.n	8008616 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008606:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008608:	e005      	b.n	8008616 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800860a:	2300      	movs	r3, #0
 800860c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008614:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 8089 	beq.w	8008730 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008622:	4a4e      	ldr	r2, [pc, #312]	@ (800875c <UART_SetConfig+0x590>)
 8008624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008628:	461a      	mov	r2, r3
 800862a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008630:	005a      	lsls	r2, r3, #1
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	085b      	lsrs	r3, r3, #1
 8008638:	441a      	add	r2, r3
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008642:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	2b0f      	cmp	r3, #15
 8008648:	d916      	bls.n	8008678 <UART_SetConfig+0x4ac>
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008650:	d212      	bcs.n	8008678 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	b29b      	uxth	r3, r3
 8008656:	f023 030f 	bic.w	r3, r3, #15
 800865a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800865c:	6a3b      	ldr	r3, [r7, #32]
 800865e:	085b      	lsrs	r3, r3, #1
 8008660:	b29b      	uxth	r3, r3
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	b29a      	uxth	r2, r3
 8008668:	8bfb      	ldrh	r3, [r7, #30]
 800866a:	4313      	orrs	r3, r2
 800866c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	8bfa      	ldrh	r2, [r7, #30]
 8008674:	60da      	str	r2, [r3, #12]
 8008676:	e05b      	b.n	8008730 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800867e:	e057      	b.n	8008730 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008680:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008684:	2b08      	cmp	r3, #8
 8008686:	d828      	bhi.n	80086da <UART_SetConfig+0x50e>
 8008688:	a201      	add	r2, pc, #4	@ (adr r2, 8008690 <UART_SetConfig+0x4c4>)
 800868a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868e:	bf00      	nop
 8008690:	080086b5 	.word	0x080086b5
 8008694:	080086bd 	.word	0x080086bd
 8008698:	080086c5 	.word	0x080086c5
 800869c:	080086db 	.word	0x080086db
 80086a0:	080086cb 	.word	0x080086cb
 80086a4:	080086db 	.word	0x080086db
 80086a8:	080086db 	.word	0x080086db
 80086ac:	080086db 	.word	0x080086db
 80086b0:	080086d3 	.word	0x080086d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086b4:	f7fc fd8c 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 80086b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086ba:	e014      	b.n	80086e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086bc:	f7fc fd9e 	bl	80051fc <HAL_RCC_GetPCLK2Freq>
 80086c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086c2:	e010      	b.n	80086e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086c4:	4b26      	ldr	r3, [pc, #152]	@ (8008760 <UART_SetConfig+0x594>)
 80086c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086c8:	e00d      	b.n	80086e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ca:	f7fc fd15 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 80086ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086d0:	e009      	b.n	80086e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086d8:	e005      	b.n	80086e6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80086da:	2300      	movs	r3, #0
 80086dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80086e4:	bf00      	nop
    }

    if (pclk != 0U)
 80086e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d021      	beq.n	8008730 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f0:	4a1a      	ldr	r2, [pc, #104]	@ (800875c <UART_SetConfig+0x590>)
 80086f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086f6:	461a      	mov	r2, r3
 80086f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	085b      	lsrs	r3, r3, #1
 8008704:	441a      	add	r2, r3
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	fbb2 f3f3 	udiv	r3, r2, r3
 800870e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	2b0f      	cmp	r3, #15
 8008714:	d909      	bls.n	800872a <UART_SetConfig+0x55e>
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800871c:	d205      	bcs.n	800872a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	b29a      	uxth	r2, r3
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	60da      	str	r2, [r3, #12]
 8008728:	e002      	b.n	8008730 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	2201      	movs	r2, #1
 8008734:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2201      	movs	r2, #1
 800873c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	2200      	movs	r2, #0
 8008744:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2200      	movs	r2, #0
 800874a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800874c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008750:	4618      	mov	r0, r3
 8008752:	3730      	adds	r7, #48	@ 0x30
 8008754:	46bd      	mov	sp, r7
 8008756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800875a:	bf00      	nop
 800875c:	0800eed4 	.word	0x0800eed4
 8008760:	00f42400 	.word	0x00f42400

08008764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008770:	f003 0308 	and.w	r3, r3, #8
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00a      	beq.n	800878e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	430a      	orrs	r2, r1
 800878c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00a      	beq.n	80087d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	430a      	orrs	r2, r1
 80087d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d6:	f003 0304 	and.w	r3, r3, #4
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00a      	beq.n	80087f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f8:	f003 0310 	and.w	r3, r3, #16
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00a      	beq.n	8008816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	430a      	orrs	r2, r1
 8008814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800881a:	f003 0320 	and.w	r3, r3, #32
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00a      	beq.n	8008838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800883c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01a      	beq.n	800887a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	430a      	orrs	r2, r1
 8008858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800885e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008862:	d10a      	bne.n	800887a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800887e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	430a      	orrs	r2, r1
 800889a:	605a      	str	r2, [r3, #4]
  }
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b098      	sub	sp, #96	@ 0x60
 80088ac:	af02      	add	r7, sp, #8
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088b8:	f7f9 fe60 	bl	800257c <HAL_GetTick>
 80088bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0308 	and.w	r3, r3, #8
 80088c8:	2b08      	cmp	r3, #8
 80088ca:	d12f      	bne.n	800892c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088d4:	2200      	movs	r2, #0
 80088d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f88e 	bl	80089fc <UART_WaitOnFlagUntilTimeout>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d022      	beq.n	800892c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008904:	647b      	str	r3, [r7, #68]	@ 0x44
 8008906:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800890a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e6      	bne.n	80088e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2220      	movs	r2, #32
 800891c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e063      	b.n	80089f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b04      	cmp	r3, #4
 8008938:	d149      	bne.n	80089ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800893a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008942:	2200      	movs	r2, #0
 8008944:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f857 	bl	80089fc <UART_WaitOnFlagUntilTimeout>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d03c      	beq.n	80089ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	623b      	str	r3, [r7, #32]
   return(result);
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008968:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	461a      	mov	r2, r3
 8008970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008972:	633b      	str	r3, [r7, #48]	@ 0x30
 8008974:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008976:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800897a:	e841 2300 	strex	r3, r2, [r1]
 800897e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1e6      	bne.n	8008954 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3308      	adds	r3, #8
 800898c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	e853 3f00 	ldrex	r3, [r3]
 8008994:	60fb      	str	r3, [r7, #12]
   return(result);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f023 0301 	bic.w	r3, r3, #1
 800899c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3308      	adds	r3, #8
 80089a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089a6:	61fa      	str	r2, [r7, #28]
 80089a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	69b9      	ldr	r1, [r7, #24]
 80089ac:	69fa      	ldr	r2, [r7, #28]
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	617b      	str	r3, [r7, #20]
   return(result);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1e5      	bne.n	8008986 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2220      	movs	r2, #32
 80089be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e012      	b.n	80089f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2220      	movs	r2, #32
 80089d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2220      	movs	r2, #32
 80089da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3758      	adds	r7, #88	@ 0x58
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	603b      	str	r3, [r7, #0]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a0c:	e04f      	b.n	8008aae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a14:	d04b      	beq.n	8008aae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a16:	f7f9 fdb1 	bl	800257c <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d302      	bcc.n	8008a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e04e      	b.n	8008ace <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 0304 	and.w	r3, r3, #4
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d037      	beq.n	8008aae <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	2b80      	cmp	r3, #128	@ 0x80
 8008a42:	d034      	beq.n	8008aae <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2b40      	cmp	r3, #64	@ 0x40
 8008a48:	d031      	beq.n	8008aae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69db      	ldr	r3, [r3, #28]
 8008a50:	f003 0308 	and.w	r3, r3, #8
 8008a54:	2b08      	cmp	r3, #8
 8008a56:	d110      	bne.n	8008a7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2208      	movs	r2, #8
 8008a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 f95b 	bl	8008d1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2208      	movs	r2, #8
 8008a6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e029      	b.n	8008ace <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	69db      	ldr	r3, [r3, #28]
 8008a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a88:	d111      	bne.n	8008aae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 f941 	bl	8008d1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2220      	movs	r2, #32
 8008a9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e00f      	b.n	8008ace <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	69da      	ldr	r2, [r3, #28]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	bf0c      	ite	eq
 8008abe:	2301      	moveq	r3, #1
 8008ac0:	2300      	movne	r3, #0
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	79fb      	ldrb	r3, [r7, #7]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d0a0      	beq.n	8008a0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
	...

08008ad8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b0a3      	sub	sp, #140	@ 0x8c
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	88fa      	ldrh	r2, [r7, #6]
 8008af0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	88fa      	ldrh	r2, [r7, #6]
 8008af8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b0a:	d10e      	bne.n	8008b2a <UART_Start_Receive_IT+0x52>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d105      	bne.n	8008b20 <UART_Start_Receive_IT+0x48>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008b1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b1e:	e02d      	b.n	8008b7c <UART_Start_Receive_IT+0xa4>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	22ff      	movs	r2, #255	@ 0xff
 8008b24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b28:	e028      	b.n	8008b7c <UART_Start_Receive_IT+0xa4>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10d      	bne.n	8008b4e <UART_Start_Receive_IT+0x76>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d104      	bne.n	8008b44 <UART_Start_Receive_IT+0x6c>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	22ff      	movs	r2, #255	@ 0xff
 8008b3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b42:	e01b      	b.n	8008b7c <UART_Start_Receive_IT+0xa4>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	227f      	movs	r2, #127	@ 0x7f
 8008b48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b4c:	e016      	b.n	8008b7c <UART_Start_Receive_IT+0xa4>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b56:	d10d      	bne.n	8008b74 <UART_Start_Receive_IT+0x9c>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d104      	bne.n	8008b6a <UART_Start_Receive_IT+0x92>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	227f      	movs	r2, #127	@ 0x7f
 8008b64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b68:	e008      	b.n	8008b7c <UART_Start_Receive_IT+0xa4>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	223f      	movs	r2, #63	@ 0x3f
 8008b6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b72:	e003      	b.n	8008b7c <UART_Start_Receive_IT+0xa4>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2222      	movs	r2, #34	@ 0x22
 8008b88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3308      	adds	r3, #8
 8008b92:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b96:	e853 3f00 	ldrex	r3, [r3]
 8008b9a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008b9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b9e:	f043 0301 	orr.w	r3, r3, #1
 8008ba2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3308      	adds	r3, #8
 8008bac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008bb0:	673a      	str	r2, [r7, #112]	@ 0x70
 8008bb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008bb6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008bb8:	e841 2300 	strex	r3, r2, [r1]
 8008bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008bbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1e3      	bne.n	8008b8c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bcc:	d14f      	bne.n	8008c6e <UART_Start_Receive_IT+0x196>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008bd4:	88fa      	ldrh	r2, [r7, #6]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d349      	bcc.n	8008c6e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008be2:	d107      	bne.n	8008bf4 <UART_Start_Receive_IT+0x11c>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d103      	bne.n	8008bf4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4a47      	ldr	r2, [pc, #284]	@ (8008d0c <UART_Start_Receive_IT+0x234>)
 8008bf0:	675a      	str	r2, [r3, #116]	@ 0x74
 8008bf2:	e002      	b.n	8008bfa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4a46      	ldr	r2, [pc, #280]	@ (8008d10 <UART_Start_Receive_IT+0x238>)
 8008bf8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d01a      	beq.n	8008c38 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c26:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008c2a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008c2c:	e841 2300 	strex	r3, r2, [r1]
 8008c30:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e4      	bne.n	8008c02 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c42:	e853 3f00 	ldrex	r3, [r3]
 8008c46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3308      	adds	r3, #8
 8008c56:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008c58:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008c5a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008c5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c60:	e841 2300 	strex	r3, r2, [r1]
 8008c64:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1e5      	bne.n	8008c38 <UART_Start_Receive_IT+0x160>
 8008c6c:	e046      	b.n	8008cfc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c76:	d107      	bne.n	8008c88 <UART_Start_Receive_IT+0x1b0>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d103      	bne.n	8008c88 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4a24      	ldr	r2, [pc, #144]	@ (8008d14 <UART_Start_Receive_IT+0x23c>)
 8008c84:	675a      	str	r2, [r3, #116]	@ 0x74
 8008c86:	e002      	b.n	8008c8e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	4a23      	ldr	r2, [pc, #140]	@ (8008d18 <UART_Start_Receive_IT+0x240>)
 8008c8c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d019      	beq.n	8008cca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c9e:	e853 3f00 	ldrex	r3, [r3]
 8008ca2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008caa:	677b      	str	r3, [r7, #116]	@ 0x74
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cb6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008cba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cbc:	e841 2300 	strex	r3, r2, [r1]
 8008cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d1e6      	bne.n	8008c96 <UART_Start_Receive_IT+0x1be>
 8008cc8:	e018      	b.n	8008cfc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	e853 3f00 	ldrex	r3, [r3]
 8008cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f043 0320 	orr.w	r3, r3, #32
 8008cde:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ce8:	623b      	str	r3, [r7, #32]
 8008cea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cec:	69f9      	ldr	r1, [r7, #28]
 8008cee:	6a3a      	ldr	r2, [r7, #32]
 8008cf0:	e841 2300 	strex	r3, r2, [r1]
 8008cf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1e6      	bne.n	8008cca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	378c      	adds	r7, #140	@ 0x8c
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	08009801 	.word	0x08009801
 8008d10:	0800949d 	.word	0x0800949d
 8008d14:	080092e5 	.word	0x080092e5
 8008d18:	0800912d 	.word	0x0800912d

08008d1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b095      	sub	sp, #84	@ 0x54
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d2c:	e853 3f00 	ldrex	r3, [r3]
 8008d30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d42:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d4a:	e841 2300 	strex	r3, r2, [r1]
 8008d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1e6      	bne.n	8008d24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3308      	adds	r3, #8
 8008d5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	e853 3f00 	ldrex	r3, [r3]
 8008d64:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d6c:	f023 0301 	bic.w	r3, r3, #1
 8008d70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3308      	adds	r3, #8
 8008d78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e3      	bne.n	8008d56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d118      	bne.n	8008dc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	e853 3f00 	ldrex	r3, [r3]
 8008da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	f023 0310 	bic.w	r3, r3, #16
 8008daa:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	461a      	mov	r2, r3
 8008db2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008db4:	61bb      	str	r3, [r7, #24]
 8008db6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db8:	6979      	ldr	r1, [r7, #20]
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	e841 2300 	strex	r3, r2, [r1]
 8008dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1e6      	bne.n	8008d96 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2220      	movs	r2, #32
 8008dcc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008ddc:	bf00      	nop
 8008dde:	3754      	adds	r7, #84	@ 0x54
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b08f      	sub	sp, #60	@ 0x3c
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008df6:	2b21      	cmp	r3, #33	@ 0x21
 8008df8:	d14c      	bne.n	8008e94 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d132      	bne.n	8008e6c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	e853 3f00 	ldrex	r3, [r3]
 8008e12:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	461a      	mov	r2, r3
 8008e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e26:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e2c:	e841 2300 	strex	r3, r2, [r1]
 8008e30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1e6      	bne.n	8008e06 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	e853 3f00 	ldrex	r3, [r3]
 8008e44:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	461a      	mov	r2, r3
 8008e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e56:	61bb      	str	r3, [r7, #24]
 8008e58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5a:	6979      	ldr	r1, [r7, #20]
 8008e5c:	69ba      	ldr	r2, [r7, #24]
 8008e5e:	e841 2300 	strex	r3, r2, [r1]
 8008e62:	613b      	str	r3, [r7, #16]
   return(result);
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1e6      	bne.n	8008e38 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008e6a:	e013      	b.n	8008e94 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e70:	781a      	ldrb	r2, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008e94:	bf00      	nop
 8008e96:	373c      	adds	r7, #60	@ 0x3c
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b091      	sub	sp, #68	@ 0x44
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eae:	2b21      	cmp	r3, #33	@ 0x21
 8008eb0:	d151      	bne.n	8008f56 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d132      	bne.n	8008f24 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec6:	e853 3f00 	ldrex	r3, [r3]
 8008eca:	623b      	str	r3, [r7, #32]
   return(result);
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	461a      	mov	r2, r3
 8008eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008edc:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ede:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ee4:	e841 2300 	strex	r3, r2, [r1]
 8008ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1e6      	bne.n	8008ebe <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	e853 3f00 	ldrex	r3, [r3]
 8008efc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f0e:	61fb      	str	r3, [r7, #28]
 8008f10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f12:	69b9      	ldr	r1, [r7, #24]
 8008f14:	69fa      	ldr	r2, [r7, #28]
 8008f16:	e841 2300 	strex	r3, r2, [r1]
 8008f1a:	617b      	str	r3, [r7, #20]
   return(result);
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1e6      	bne.n	8008ef0 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008f22:	e018      	b.n	8008f56 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f38:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f3e:	1c9a      	adds	r2, r3, #2
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008f56:	bf00      	nop
 8008f58:	3744      	adds	r7, #68	@ 0x44
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b091      	sub	sp, #68	@ 0x44
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f70:	2b21      	cmp	r3, #33	@ 0x21
 8008f72:	d160      	bne.n	8009036 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f7a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008f7c:	e057      	b.n	800902e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d133      	bne.n	8008ff2 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3308      	adds	r3, #8
 8008f90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f94:	e853 3f00 	ldrex	r3, [r3]
 8008f98:	623b      	str	r3, [r7, #32]
   return(result);
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3308      	adds	r3, #8
 8008fa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008faa:	633a      	str	r2, [r7, #48]	@ 0x30
 8008fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fb2:	e841 2300 	strex	r3, r2, [r1]
 8008fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1e5      	bne.n	8008f8a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	e853 3f00 	ldrex	r3, [r3]
 8008fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fdc:	61fb      	str	r3, [r7, #28]
 8008fde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe0:	69b9      	ldr	r1, [r7, #24]
 8008fe2:	69fa      	ldr	r2, [r7, #28]
 8008fe4:	e841 2300 	strex	r3, r2, [r1]
 8008fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1e6      	bne.n	8008fbe <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008ff0:	e021      	b.n	8009036 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	69db      	ldr	r3, [r3, #28]
 8008ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d013      	beq.n	8009028 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009004:	781a      	ldrb	r2, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009010:	1c5a      	adds	r2, r3, #1
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800901c:	b29b      	uxth	r3, r3
 800901e:	3b01      	subs	r3, #1
 8009020:	b29a      	uxth	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009028:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800902a:	3b01      	subs	r3, #1
 800902c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800902e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1a4      	bne.n	8008f7e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009034:	e7ff      	b.n	8009036 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009036:	bf00      	nop
 8009038:	3744      	adds	r7, #68	@ 0x44
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009042:	b480      	push	{r7}
 8009044:	b091      	sub	sp, #68	@ 0x44
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009050:	2b21      	cmp	r3, #33	@ 0x21
 8009052:	d165      	bne.n	8009120 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800905a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800905c:	e05c      	b.n	8009118 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009064:	b29b      	uxth	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d133      	bne.n	80090d2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3308      	adds	r3, #8
 8009070:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	61fb      	str	r3, [r7, #28]
   return(result);
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009080:	637b      	str	r3, [r7, #52]	@ 0x34
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3308      	adds	r3, #8
 8009088:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800908a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800908c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009090:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e5      	bne.n	800906a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	461a      	mov	r2, r3
 80090ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090bc:	61bb      	str	r3, [r7, #24]
 80090be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6979      	ldr	r1, [r7, #20]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	613b      	str	r3, [r7, #16]
   return(result);
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e6      	bne.n	800909e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80090d0:	e026      	b.n	8009120 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	69db      	ldr	r3, [r3, #28]
 80090d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d018      	beq.n	8009112 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090e4:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80090e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090f4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090fa:	1c9a      	adds	r2, r3, #2
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009106:	b29b      	uxth	r3, r3
 8009108:	3b01      	subs	r3, #1
 800910a:	b29a      	uxth	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009112:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009114:	3b01      	subs	r3, #1
 8009116:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009118:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800911a:	2b00      	cmp	r3, #0
 800911c:	d19f      	bne.n	800905e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800911e:	e7ff      	b.n	8009120 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009120:	bf00      	nop
 8009122:	3744      	adds	r7, #68	@ 0x44
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b09c      	sub	sp, #112	@ 0x70
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800913a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009144:	2b22      	cmp	r3, #34	@ 0x22
 8009146:	f040 80be 	bne.w	80092c6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009150:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009154:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009158:	b2d9      	uxtb	r1, r3
 800915a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800915e:	b2da      	uxtb	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009164:	400a      	ands	r2, r1
 8009166:	b2d2      	uxtb	r2, r2
 8009168:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800916e:	1c5a      	adds	r2, r3, #1
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800917a:	b29b      	uxth	r3, r3
 800917c:	3b01      	subs	r3, #1
 800917e:	b29a      	uxth	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800918c:	b29b      	uxth	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	f040 80a1 	bne.w	80092d6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800919c:	e853 3f00 	ldrex	r3, [r3]
 80091a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80091a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80091b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091ba:	e841 2300 	strex	r3, r2, [r1]
 80091be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1e6      	bne.n	8009194 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	3308      	adds	r3, #8
 80091cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d0:	e853 3f00 	ldrex	r3, [r3]
 80091d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091d8:	f023 0301 	bic.w	r3, r3, #1
 80091dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	3308      	adds	r3, #8
 80091e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80091e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80091e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091ee:	e841 2300 	strex	r3, r2, [r1]
 80091f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e5      	bne.n	80091c6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2220      	movs	r2, #32
 80091fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a33      	ldr	r2, [pc, #204]	@ (80092e0 <UART_RxISR_8BIT+0x1b4>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d01f      	beq.n	8009258 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009222:	2b00      	cmp	r3, #0
 8009224:	d018      	beq.n	8009258 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922e:	e853 3f00 	ldrex	r3, [r3]
 8009232:	623b      	str	r3, [r7, #32]
   return(result);
 8009234:	6a3b      	ldr	r3, [r7, #32]
 8009236:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800923a:	663b      	str	r3, [r7, #96]	@ 0x60
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	461a      	mov	r2, r3
 8009242:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009244:	633b      	str	r3, [r7, #48]	@ 0x30
 8009246:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009248:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800924a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800924c:	e841 2300 	strex	r3, r2, [r1]
 8009250:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1e6      	bne.n	8009226 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800925c:	2b01      	cmp	r3, #1
 800925e:	d12e      	bne.n	80092be <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	e853 3f00 	ldrex	r3, [r3]
 8009272:	60fb      	str	r3, [r7, #12]
   return(result);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f023 0310 	bic.w	r3, r3, #16
 800927a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	461a      	mov	r2, r3
 8009282:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009284:	61fb      	str	r3, [r7, #28]
 8009286:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	69b9      	ldr	r1, [r7, #24]
 800928a:	69fa      	ldr	r2, [r7, #28]
 800928c:	e841 2300 	strex	r3, r2, [r1]
 8009290:	617b      	str	r3, [r7, #20]
   return(result);
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e6      	bne.n	8009266 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	69db      	ldr	r3, [r3, #28]
 800929e:	f003 0310 	and.w	r3, r3, #16
 80092a2:	2b10      	cmp	r3, #16
 80092a4:	d103      	bne.n	80092ae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2210      	movs	r2, #16
 80092ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7fe ff7c 	bl	80081b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092bc:	e00b      	b.n	80092d6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7fe ff64 	bl	800818c <HAL_UART_RxCpltCallback>
}
 80092c4:	e007      	b.n	80092d6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	699a      	ldr	r2, [r3, #24]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f042 0208 	orr.w	r2, r2, #8
 80092d4:	619a      	str	r2, [r3, #24]
}
 80092d6:	bf00      	nop
 80092d8:	3770      	adds	r7, #112	@ 0x70
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	40008000 	.word	0x40008000

080092e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b09c      	sub	sp, #112	@ 0x70
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80092f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092fc:	2b22      	cmp	r3, #34	@ 0x22
 80092fe:	f040 80be 	bne.w	800947e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009308:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009310:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009312:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009316:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800931a:	4013      	ands	r3, r2
 800931c:	b29a      	uxth	r2, r3
 800931e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009320:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009326:	1c9a      	adds	r2, r3, #2
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009332:	b29b      	uxth	r3, r3
 8009334:	3b01      	subs	r3, #1
 8009336:	b29a      	uxth	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009344:	b29b      	uxth	r3, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	f040 80a1 	bne.w	800948e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009354:	e853 3f00 	ldrex	r3, [r3]
 8009358:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800935a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800935c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009360:	667b      	str	r3, [r7, #100]	@ 0x64
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800936a:	657b      	str	r3, [r7, #84]	@ 0x54
 800936c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009370:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009372:	e841 2300 	strex	r3, r2, [r1]
 8009376:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1e6      	bne.n	800934c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3308      	adds	r3, #8
 8009384:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009388:	e853 3f00 	ldrex	r3, [r3]
 800938c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800938e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009390:	f023 0301 	bic.w	r3, r3, #1
 8009394:	663b      	str	r3, [r7, #96]	@ 0x60
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3308      	adds	r3, #8
 800939c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800939e:	643a      	str	r2, [r7, #64]	@ 0x40
 80093a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093a6:	e841 2300 	strex	r3, r2, [r1]
 80093aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1e5      	bne.n	800937e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2220      	movs	r2, #32
 80093b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a33      	ldr	r2, [pc, #204]	@ (8009498 <UART_RxISR_16BIT+0x1b4>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d01f      	beq.n	8009410 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d018      	beq.n	8009410 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e4:	6a3b      	ldr	r3, [r7, #32]
 80093e6:	e853 3f00 	ldrex	r3, [r3]
 80093ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80093f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	461a      	mov	r2, r3
 80093fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093fe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009400:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009402:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009404:	e841 2300 	strex	r3, r2, [r1]
 8009408:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800940a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1e6      	bne.n	80093de <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009414:	2b01      	cmp	r3, #1
 8009416:	d12e      	bne.n	8009476 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	e853 3f00 	ldrex	r3, [r3]
 800942a:	60bb      	str	r3, [r7, #8]
   return(result);
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	f023 0310 	bic.w	r3, r3, #16
 8009432:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	461a      	mov	r2, r3
 800943a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800943c:	61bb      	str	r3, [r7, #24]
 800943e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009440:	6979      	ldr	r1, [r7, #20]
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	e841 2300 	strex	r3, r2, [r1]
 8009448:	613b      	str	r3, [r7, #16]
   return(result);
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1e6      	bne.n	800941e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	f003 0310 	and.w	r3, r3, #16
 800945a:	2b10      	cmp	r3, #16
 800945c:	d103      	bne.n	8009466 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2210      	movs	r2, #16
 8009464:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7fe fea0 	bl	80081b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009474:	e00b      	b.n	800948e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7fe fe88 	bl	800818c <HAL_UART_RxCpltCallback>
}
 800947c:	e007      	b.n	800948e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	699a      	ldr	r2, [r3, #24]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f042 0208 	orr.w	r2, r2, #8
 800948c:	619a      	str	r2, [r3, #24]
}
 800948e:	bf00      	nop
 8009490:	3770      	adds	r7, #112	@ 0x70
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	40008000 	.word	0x40008000

0800949c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b0ac      	sub	sp, #176	@ 0xb0
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80094aa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	69db      	ldr	r3, [r3, #28]
 80094b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094d2:	2b22      	cmp	r3, #34	@ 0x22
 80094d4:	f040 8183 	bne.w	80097de <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80094de:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094e2:	e126      	b.n	8009732 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ea:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094ee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80094f2:	b2d9      	uxtb	r1, r3
 80094f4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094fe:	400a      	ands	r2, r1
 8009500:	b2d2      	uxtb	r2, r2
 8009502:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009508:	1c5a      	adds	r2, r3, #1
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009514:	b29b      	uxth	r3, r3
 8009516:	3b01      	subs	r3, #1
 8009518:	b29a      	uxth	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800952a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800952e:	f003 0307 	and.w	r3, r3, #7
 8009532:	2b00      	cmp	r3, #0
 8009534:	d053      	beq.n	80095de <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800953a:	f003 0301 	and.w	r3, r3, #1
 800953e:	2b00      	cmp	r3, #0
 8009540:	d011      	beq.n	8009566 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009542:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00b      	beq.n	8009566 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2201      	movs	r2, #1
 8009554:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800955c:	f043 0201 	orr.w	r2, r3, #1
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800956a:	f003 0302 	and.w	r3, r3, #2
 800956e:	2b00      	cmp	r3, #0
 8009570:	d011      	beq.n	8009596 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009576:	f003 0301 	and.w	r3, r3, #1
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00b      	beq.n	8009596 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2202      	movs	r2, #2
 8009584:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800958c:	f043 0204 	orr.w	r2, r3, #4
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800959a:	f003 0304 	and.w	r3, r3, #4
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d011      	beq.n	80095c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80095a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80095a6:	f003 0301 	and.w	r3, r3, #1
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00b      	beq.n	80095c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2204      	movs	r2, #4
 80095b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095bc:	f043 0202 	orr.w	r2, r3, #2
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d006      	beq.n	80095de <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f7fe fde5 	bl	80081a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f040 80a3 	bne.w	8009732 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80095fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009600:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	461a      	mov	r2, r3
 800960a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800960e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009610:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009614:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009616:	e841 2300 	strex	r3, r2, [r1]
 800961a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800961c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1e4      	bne.n	80095ec <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	3308      	adds	r3, #8
 8009628:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800962c:	e853 3f00 	ldrex	r3, [r3]
 8009630:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009632:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009634:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009638:	f023 0301 	bic.w	r3, r3, #1
 800963c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3308      	adds	r3, #8
 8009646:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800964a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800964c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009650:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009652:	e841 2300 	strex	r3, r2, [r1]
 8009656:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009658:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1e1      	bne.n	8009622 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2220      	movs	r2, #32
 8009662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a60      	ldr	r2, [pc, #384]	@ (80097f8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d021      	beq.n	80096c0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d01a      	beq.n	80096c0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009690:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009692:	e853 3f00 	ldrex	r3, [r3]
 8009696:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800969a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800969e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80096ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80096ae:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80096b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096b4:	e841 2300 	strex	r3, r2, [r1]
 80096b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80096ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1e4      	bne.n	800968a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d130      	bne.n	800972a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d6:	e853 3f00 	ldrex	r3, [r3]
 80096da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096de:	f023 0310 	bic.w	r3, r3, #16
 80096e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	461a      	mov	r2, r3
 80096ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80096f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096f8:	e841 2300 	strex	r3, r2, [r1]
 80096fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1e4      	bne.n	80096ce <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	f003 0310 	and.w	r3, r3, #16
 800970e:	2b10      	cmp	r3, #16
 8009710:	d103      	bne.n	800971a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2210      	movs	r2, #16
 8009718:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7fe fd46 	bl	80081b4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009728:	e00e      	b.n	8009748 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f7fe fd2e 	bl	800818c <HAL_UART_RxCpltCallback>
        break;
 8009730:	e00a      	b.n	8009748 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009732:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009736:	2b00      	cmp	r3, #0
 8009738:	d006      	beq.n	8009748 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800973a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800973e:	f003 0320 	and.w	r3, r3, #32
 8009742:	2b00      	cmp	r3, #0
 8009744:	f47f aece 	bne.w	80094e4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800974e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009752:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009756:	2b00      	cmp	r3, #0
 8009758:	d049      	beq.n	80097ee <UART_RxISR_8BIT_FIFOEN+0x352>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009760:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009764:	429a      	cmp	r2, r3
 8009766:	d242      	bcs.n	80097ee <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3308      	adds	r3, #8
 800976e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009770:	6a3b      	ldr	r3, [r7, #32]
 8009772:	e853 3f00 	ldrex	r3, [r3]
 8009776:	61fb      	str	r3, [r7, #28]
   return(result);
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800977e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3308      	adds	r3, #8
 8009788:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800978c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800978e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009790:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009794:	e841 2300 	strex	r3, r2, [r1]
 8009798:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800979a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1e3      	bne.n	8009768 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a16      	ldr	r2, [pc, #88]	@ (80097fc <UART_RxISR_8BIT_FIFOEN+0x360>)
 80097a4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	e853 3f00 	ldrex	r3, [r3]
 80097b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	f043 0320 	orr.w	r3, r3, #32
 80097ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	461a      	mov	r2, r3
 80097c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80097c8:	61bb      	str	r3, [r7, #24]
 80097ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097cc:	6979      	ldr	r1, [r7, #20]
 80097ce:	69ba      	ldr	r2, [r7, #24]
 80097d0:	e841 2300 	strex	r3, r2, [r1]
 80097d4:	613b      	str	r3, [r7, #16]
   return(result);
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1e4      	bne.n	80097a6 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097dc:	e007      	b.n	80097ee <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	699a      	ldr	r2, [r3, #24]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f042 0208 	orr.w	r2, r2, #8
 80097ec:	619a      	str	r2, [r3, #24]
}
 80097ee:	bf00      	nop
 80097f0:	37b0      	adds	r7, #176	@ 0xb0
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	40008000 	.word	0x40008000
 80097fc:	0800912d 	.word	0x0800912d

08009800 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b0ae      	sub	sp, #184	@ 0xb8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800980e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009836:	2b22      	cmp	r3, #34	@ 0x22
 8009838:	f040 8187 	bne.w	8009b4a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009842:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009846:	e12a      	b.n	8009a9e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800984e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800985a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800985e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009862:	4013      	ands	r3, r2
 8009864:	b29a      	uxth	r2, r3
 8009866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800986a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009870:	1c9a      	adds	r2, r3, #2
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800987c:	b29b      	uxth	r3, r3
 800987e:	3b01      	subs	r3, #1
 8009880:	b29a      	uxth	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	69db      	ldr	r3, [r3, #28]
 800988e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009892:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009896:	f003 0307 	and.w	r3, r3, #7
 800989a:	2b00      	cmp	r3, #0
 800989c:	d053      	beq.n	8009946 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800989e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d011      	beq.n	80098ce <UART_RxISR_16BIT_FIFOEN+0xce>
 80098aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00b      	beq.n	80098ce <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2201      	movs	r2, #1
 80098bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098c4:	f043 0201 	orr.w	r2, r3, #1
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80098d2:	f003 0302 	and.w	r3, r3, #2
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d011      	beq.n	80098fe <UART_RxISR_16BIT_FIFOEN+0xfe>
 80098da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00b      	beq.n	80098fe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2202      	movs	r2, #2
 80098ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098f4:	f043 0204 	orr.w	r2, r3, #4
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009902:	f003 0304 	and.w	r3, r3, #4
 8009906:	2b00      	cmp	r3, #0
 8009908:	d011      	beq.n	800992e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800990a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00b      	beq.n	800992e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2204      	movs	r2, #4
 800991c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009924:	f043 0202 	orr.w	r2, r3, #2
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009934:	2b00      	cmp	r3, #0
 8009936:	d006      	beq.n	8009946 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7fe fc31 	bl	80081a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800994c:	b29b      	uxth	r3, r3
 800994e:	2b00      	cmp	r3, #0
 8009950:	f040 80a5 	bne.w	8009a9e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800995c:	e853 3f00 	ldrex	r3, [r3]
 8009960:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009962:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009968:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	461a      	mov	r2, r3
 8009972:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009976:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800997a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800997e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009982:	e841 2300 	strex	r3, r2, [r1]
 8009986:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009988:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1e2      	bne.n	8009954 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3308      	adds	r3, #8
 8009994:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009996:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009998:	e853 3f00 	ldrex	r3, [r3]
 800999c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800999e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099a4:	f023 0301 	bic.w	r3, r3, #1
 80099a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3308      	adds	r3, #8
 80099b2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80099b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80099b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80099bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80099be:	e841 2300 	strex	r3, r2, [r1]
 80099c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80099c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1e1      	bne.n	800998e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2220      	movs	r2, #32
 80099ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a60      	ldr	r2, [pc, #384]	@ (8009b64 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d021      	beq.n	8009a2c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d01a      	beq.n	8009a2c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099fe:	e853 3f00 	ldrex	r3, [r3]
 8009a02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	461a      	mov	r2, r3
 8009a14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009a18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a1a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a20:	e841 2300 	strex	r3, r2, [r1]
 8009a24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1e4      	bne.n	80099f6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d130      	bne.n	8009a96 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a42:	e853 3f00 	ldrex	r3, [r3]
 8009a46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a4a:	f023 0310 	bic.w	r3, r3, #16
 8009a4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	461a      	mov	r2, r3
 8009a58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a64:	e841 2300 	strex	r3, r2, [r1]
 8009a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1e4      	bne.n	8009a3a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	69db      	ldr	r3, [r3, #28]
 8009a76:	f003 0310 	and.w	r3, r3, #16
 8009a7a:	2b10      	cmp	r3, #16
 8009a7c:	d103      	bne.n	8009a86 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2210      	movs	r2, #16
 8009a84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7fe fb90 	bl	80081b4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009a94:	e00e      	b.n	8009ab4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7fe fb78 	bl	800818c <HAL_UART_RxCpltCallback>
        break;
 8009a9c:	e00a      	b.n	8009ab4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a9e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d006      	beq.n	8009ab4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8009aa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009aaa:	f003 0320 	and.w	r3, r3, #32
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f47f aeca 	bne.w	8009848 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009aba:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009abe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d049      	beq.n	8009b5a <UART_RxISR_16BIT_FIFOEN+0x35a>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009acc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d242      	bcs.n	8009b5a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3308      	adds	r3, #8
 8009ada:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ade:	e853 3f00 	ldrex	r3, [r3]
 8009ae2:	623b      	str	r3, [r7, #32]
   return(result);
 8009ae4:	6a3b      	ldr	r3, [r7, #32]
 8009ae6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009aea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3308      	adds	r3, #8
 8009af4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009af8:	633a      	str	r2, [r7, #48]	@ 0x30
 8009afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009afe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b00:	e841 2300 	strex	r3, r2, [r1]
 8009b04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1e3      	bne.n	8009ad4 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a16      	ldr	r2, [pc, #88]	@ (8009b68 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009b10:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	e853 3f00 	ldrex	r3, [r3]
 8009b1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f043 0320 	orr.w	r3, r3, #32
 8009b26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b34:	61fb      	str	r3, [r7, #28]
 8009b36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b38:	69b9      	ldr	r1, [r7, #24]
 8009b3a:	69fa      	ldr	r2, [r7, #28]
 8009b3c:	e841 2300 	strex	r3, r2, [r1]
 8009b40:	617b      	str	r3, [r7, #20]
   return(result);
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1e4      	bne.n	8009b12 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b48:	e007      	b.n	8009b5a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	699a      	ldr	r2, [r3, #24]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f042 0208 	orr.w	r2, r2, #8
 8009b58:	619a      	str	r2, [r3, #24]
}
 8009b5a:	bf00      	nop
 8009b5c:	37b8      	adds	r7, #184	@ 0xb8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	40008000 	.word	0x40008000
 8009b68:	080092e5 	.word	0x080092e5

08009b6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d101      	bne.n	8009b82 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b7e:	2302      	movs	r3, #2
 8009b80:	e027      	b.n	8009bd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2201      	movs	r2, #1
 8009b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2224      	movs	r2, #36	@ 0x24
 8009b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f022 0201 	bic.w	r2, r2, #1
 8009ba8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009bb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2220      	movs	r2, #32
 8009bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d101      	bne.n	8009bf6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	e02d      	b.n	8009c52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2224      	movs	r2, #36	@ 0x24
 8009c02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f022 0201 	bic.w	r2, r2, #1
 8009c1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f850 	bl	8009cd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2220      	movs	r2, #32
 8009c44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d101      	bne.n	8009c72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c6e:	2302      	movs	r3, #2
 8009c70:	e02d      	b.n	8009cce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2201      	movs	r2, #1
 8009c76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2224      	movs	r2, #36	@ 0x24
 8009c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f022 0201 	bic.w	r2, r2, #1
 8009c98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	683a      	ldr	r2, [r7, #0]
 8009caa:	430a      	orrs	r2, r1
 8009cac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f812 	bl	8009cd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2220      	movs	r2, #32
 8009cc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
	...

08009cd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d108      	bne.n	8009cfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009cf8:	e031      	b.n	8009d5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009cfa:	2308      	movs	r3, #8
 8009cfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009cfe:	2308      	movs	r3, #8
 8009d00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	0e5b      	lsrs	r3, r3, #25
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	f003 0307 	and.w	r3, r3, #7
 8009d10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	0f5b      	lsrs	r3, r3, #29
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	f003 0307 	and.w	r3, r3, #7
 8009d20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d22:	7bbb      	ldrb	r3, [r7, #14]
 8009d24:	7b3a      	ldrb	r2, [r7, #12]
 8009d26:	4911      	ldr	r1, [pc, #68]	@ (8009d6c <UARTEx_SetNbDataToProcess+0x94>)
 8009d28:	5c8a      	ldrb	r2, [r1, r2]
 8009d2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d2e:	7b3a      	ldrb	r2, [r7, #12]
 8009d30:	490f      	ldr	r1, [pc, #60]	@ (8009d70 <UARTEx_SetNbDataToProcess+0x98>)
 8009d32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d34:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	7b7a      	ldrb	r2, [r7, #13]
 8009d44:	4909      	ldr	r1, [pc, #36]	@ (8009d6c <UARTEx_SetNbDataToProcess+0x94>)
 8009d46:	5c8a      	ldrb	r2, [r1, r2]
 8009d48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d4c:	7b7a      	ldrb	r2, [r7, #13]
 8009d4e:	4908      	ldr	r1, [pc, #32]	@ (8009d70 <UARTEx_SetNbDataToProcess+0x98>)
 8009d50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d52:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009d5e:	bf00      	nop
 8009d60:	3714      	adds	r7, #20
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	0800eeec 	.word	0x0800eeec
 8009d70:	0800eef4 	.word	0x0800eef4

08009d74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d86:	2b84      	cmp	r3, #132	@ 0x84
 8009d88:	d005      	beq.n	8009d96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009d8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	4413      	add	r3, r2
 8009d92:	3303      	adds	r3, #3
 8009d94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009d96:	68fb      	ldr	r3, [r7, #12]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3714      	adds	r7, #20
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009da8:	f000 fff4 	bl	800ad94 <vTaskStartScheduler>
  
  return osOK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009db2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009db4:	b089      	sub	sp, #36	@ 0x24
 8009db6:	af04      	add	r7, sp, #16
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d020      	beq.n	8009e06 <osThreadCreate+0x54>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	699b      	ldr	r3, [r3, #24]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d01c      	beq.n	8009e06 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	685c      	ldr	r4, [r3, #4]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	691e      	ldr	r6, [r3, #16]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7ff ffc8 	bl	8009d74 <makeFreeRtosPriority>
 8009de4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dee:	9202      	str	r2, [sp, #8]
 8009df0:	9301      	str	r3, [sp, #4]
 8009df2:	9100      	str	r1, [sp, #0]
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	4632      	mov	r2, r6
 8009df8:	4629      	mov	r1, r5
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	f000 fde4 	bl	800a9c8 <xTaskCreateStatic>
 8009e00:	4603      	mov	r3, r0
 8009e02:	60fb      	str	r3, [r7, #12]
 8009e04:	e01c      	b.n	8009e40 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685c      	ldr	r4, [r3, #4]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e12:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7ff ffaa 	bl	8009d74 <makeFreeRtosPriority>
 8009e20:	4602      	mov	r2, r0
 8009e22:	f107 030c 	add.w	r3, r7, #12
 8009e26:	9301      	str	r3, [sp, #4]
 8009e28:	9200      	str	r2, [sp, #0]
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	4632      	mov	r2, r6
 8009e2e:	4629      	mov	r1, r5
 8009e30:	4620      	mov	r0, r4
 8009e32:	f000 fe29 	bl	800aa88 <xTaskCreate>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d001      	beq.n	8009e40 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	e000      	b.n	8009e42 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009e40:	68fb      	ldr	r3, [r7, #12]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b084      	sub	sp, #16
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d001      	beq.n	8009e60 <osDelay+0x16>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	e000      	b.n	8009e62 <osDelay+0x18>
 8009e60:	2301      	movs	r3, #1
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 ff60 	bl	800ad28 <vTaskDelay>
  
  return osOK;
 8009e68:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e72:	b480      	push	{r7}
 8009e74:	b083      	sub	sp, #12
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f103 0208 	add.w	r2, r3, #8
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e8a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f103 0208 	add.w	r2, r3, #8
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f103 0208 	add.w	r2, r3, #8
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ea6:	bf00      	nop
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	b083      	sub	sp, #12
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	689a      	ldr	r2, [r3, #8]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	1c5a      	adds	r2, r3, #1
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	601a      	str	r2, [r3, #0]
}
 8009f08:	bf00      	nop
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f2a:	d103      	bne.n	8009f34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	60fb      	str	r3, [r7, #12]
 8009f32:	e00c      	b.n	8009f4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	3308      	adds	r3, #8
 8009f38:	60fb      	str	r3, [r7, #12]
 8009f3a:	e002      	b.n	8009f42 <vListInsert+0x2e>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	60fb      	str	r3, [r7, #12]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d2f6      	bcs.n	8009f3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	1c5a      	adds	r2, r3, #1
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	601a      	str	r2, [r3, #0]
}
 8009f7a:	bf00      	nop
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr

08009f86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f86:	b480      	push	{r7}
 8009f88:	b085      	sub	sp, #20
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	6892      	ldr	r2, [r2, #8]
 8009f9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	6852      	ldr	r2, [r2, #4]
 8009fa6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d103      	bne.n	8009fba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	689a      	ldr	r2, [r3, #8]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	1e5a      	subs	r2, r3, #1
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
	...

08009fdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10b      	bne.n	800a008 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a002:	bf00      	nop
 800a004:	bf00      	nop
 800a006:	e7fd      	b.n	800a004 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a008:	f002 f986 	bl	800c318 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a014:	68f9      	ldr	r1, [r7, #12]
 800a016:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a018:	fb01 f303 	mul.w	r3, r1, r3
 800a01c:	441a      	add	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a038:	3b01      	subs	r3, #1
 800a03a:	68f9      	ldr	r1, [r7, #12]
 800a03c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a03e:	fb01 f303 	mul.w	r3, r1, r3
 800a042:	441a      	add	r2, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	22ff      	movs	r2, #255	@ 0xff
 800a04c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	22ff      	movs	r2, #255	@ 0xff
 800a054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d114      	bne.n	800a088 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d01a      	beq.n	800a09c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	3310      	adds	r3, #16
 800a06a:	4618      	mov	r0, r3
 800a06c:	f001 f92e 	bl	800b2cc <xTaskRemoveFromEventList>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d012      	beq.n	800a09c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a076:	4b0d      	ldr	r3, [pc, #52]	@ (800a0ac <xQueueGenericReset+0xd0>)
 800a078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	f3bf 8f6f 	isb	sy
 800a086:	e009      	b.n	800a09c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	3310      	adds	r3, #16
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7ff fef0 	bl	8009e72 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	3324      	adds	r3, #36	@ 0x24
 800a096:	4618      	mov	r0, r3
 800a098:	f7ff feeb 	bl	8009e72 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a09c:	f002 f96e 	bl	800c37c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a0a0:	2301      	movs	r3, #1
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	e000ed04 	.word	0xe000ed04

0800a0b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b08e      	sub	sp, #56	@ 0x38
 800a0b4:	af02      	add	r7, sp, #8
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
 800a0bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10b      	bne.n	800a0dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c8:	f383 8811 	msr	BASEPRI, r3
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	f3bf 8f4f 	dsb	sy
 800a0d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a0d6:	bf00      	nop
 800a0d8:	bf00      	nop
 800a0da:	e7fd      	b.n	800a0d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10b      	bne.n	800a0fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a0f4:	bf00      	nop
 800a0f6:	bf00      	nop
 800a0f8:	e7fd      	b.n	800a0f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d002      	beq.n	800a106 <xQueueGenericCreateStatic+0x56>
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <xQueueGenericCreateStatic+0x5a>
 800a106:	2301      	movs	r3, #1
 800a108:	e000      	b.n	800a10c <xQueueGenericCreateStatic+0x5c>
 800a10a:	2300      	movs	r3, #0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10b      	bne.n	800a128 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	623b      	str	r3, [r7, #32]
}
 800a122:	bf00      	nop
 800a124:	bf00      	nop
 800a126:	e7fd      	b.n	800a124 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d102      	bne.n	800a134 <xQueueGenericCreateStatic+0x84>
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d101      	bne.n	800a138 <xQueueGenericCreateStatic+0x88>
 800a134:	2301      	movs	r3, #1
 800a136:	e000      	b.n	800a13a <xQueueGenericCreateStatic+0x8a>
 800a138:	2300      	movs	r3, #0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10b      	bne.n	800a156 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	61fb      	str	r3, [r7, #28]
}
 800a150:	bf00      	nop
 800a152:	bf00      	nop
 800a154:	e7fd      	b.n	800a152 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a156:	2348      	movs	r3, #72	@ 0x48
 800a158:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2b48      	cmp	r3, #72	@ 0x48
 800a15e:	d00b      	beq.n	800a178 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	61bb      	str	r3, [r7, #24]
}
 800a172:	bf00      	nop
 800a174:	bf00      	nop
 800a176:	e7fd      	b.n	800a174 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a178:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00d      	beq.n	800a1a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a186:	2201      	movs	r2, #1
 800a188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a18c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	4613      	mov	r3, r2
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	68b9      	ldr	r1, [r7, #8]
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f000 f805 	bl	800a1aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3730      	adds	r7, #48	@ 0x30
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b084      	sub	sp, #16
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	60f8      	str	r0, [r7, #12]
 800a1b2:	60b9      	str	r1, [r7, #8]
 800a1b4:	607a      	str	r2, [r7, #4]
 800a1b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d103      	bne.n	800a1c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	69ba      	ldr	r2, [r7, #24]
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	e002      	b.n	800a1cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1d8:	2101      	movs	r1, #1
 800a1da:	69b8      	ldr	r0, [r7, #24]
 800a1dc:	f7ff fefe 	bl	8009fdc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1e0:	bf00      	nop
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08e      	sub	sp, #56	@ 0x38
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
 800a1f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10b      	bne.n	800a21c <xQueueGenericSend+0x34>
	__asm volatile
 800a204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a216:	bf00      	nop
 800a218:	bf00      	nop
 800a21a:	e7fd      	b.n	800a218 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d103      	bne.n	800a22a <xQueueGenericSend+0x42>
 800a222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a226:	2b00      	cmp	r3, #0
 800a228:	d101      	bne.n	800a22e <xQueueGenericSend+0x46>
 800a22a:	2301      	movs	r3, #1
 800a22c:	e000      	b.n	800a230 <xQueueGenericSend+0x48>
 800a22e:	2300      	movs	r3, #0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d10b      	bne.n	800a24c <xQueueGenericSend+0x64>
	__asm volatile
 800a234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a238:	f383 8811 	msr	BASEPRI, r3
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a246:	bf00      	nop
 800a248:	bf00      	nop
 800a24a:	e7fd      	b.n	800a248 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	2b02      	cmp	r3, #2
 800a250:	d103      	bne.n	800a25a <xQueueGenericSend+0x72>
 800a252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a256:	2b01      	cmp	r3, #1
 800a258:	d101      	bne.n	800a25e <xQueueGenericSend+0x76>
 800a25a:	2301      	movs	r3, #1
 800a25c:	e000      	b.n	800a260 <xQueueGenericSend+0x78>
 800a25e:	2300      	movs	r3, #0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10b      	bne.n	800a27c <xQueueGenericSend+0x94>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	623b      	str	r3, [r7, #32]
}
 800a276:	bf00      	nop
 800a278:	bf00      	nop
 800a27a:	e7fd      	b.n	800a278 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a27c:	f001 f9fc 	bl	800b678 <xTaskGetSchedulerState>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d102      	bne.n	800a28c <xQueueGenericSend+0xa4>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d101      	bne.n	800a290 <xQueueGenericSend+0xa8>
 800a28c:	2301      	movs	r3, #1
 800a28e:	e000      	b.n	800a292 <xQueueGenericSend+0xaa>
 800a290:	2300      	movs	r3, #0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10b      	bne.n	800a2ae <xQueueGenericSend+0xc6>
	__asm volatile
 800a296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a29a:	f383 8811 	msr	BASEPRI, r3
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f3bf 8f4f 	dsb	sy
 800a2a6:	61fb      	str	r3, [r7, #28]
}
 800a2a8:	bf00      	nop
 800a2aa:	bf00      	nop
 800a2ac:	e7fd      	b.n	800a2aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2ae:	f002 f833 	bl	800c318 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d302      	bcc.n	800a2c4 <xQueueGenericSend+0xdc>
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d129      	bne.n	800a318 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	68b9      	ldr	r1, [r7, #8]
 800a2c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2ca:	f000 fa0f 	bl	800a6ec <prvCopyDataToQueue>
 800a2ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d010      	beq.n	800a2fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2da:	3324      	adds	r3, #36	@ 0x24
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f000 fff5 	bl	800b2cc <xTaskRemoveFromEventList>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d013      	beq.n	800a310 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a2e8:	4b3f      	ldr	r3, [pc, #252]	@ (800a3e8 <xQueueGenericSend+0x200>)
 800a2ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	e00a      	b.n	800a310 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d007      	beq.n	800a310 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a300:	4b39      	ldr	r3, [pc, #228]	@ (800a3e8 <xQueueGenericSend+0x200>)
 800a302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a306:	601a      	str	r2, [r3, #0]
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a310:	f002 f834 	bl	800c37c <vPortExitCritical>
				return pdPASS;
 800a314:	2301      	movs	r3, #1
 800a316:	e063      	b.n	800a3e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d103      	bne.n	800a326 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a31e:	f002 f82d 	bl	800c37c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a322:	2300      	movs	r3, #0
 800a324:	e05c      	b.n	800a3e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d106      	bne.n	800a33a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a32c:	f107 0314 	add.w	r3, r7, #20
 800a330:	4618      	mov	r0, r3
 800a332:	f001 f82f 	bl	800b394 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a336:	2301      	movs	r3, #1
 800a338:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a33a:	f002 f81f 	bl	800c37c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a33e:	f000 fd99 	bl	800ae74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a342:	f001 ffe9 	bl	800c318 <vPortEnterCritical>
 800a346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a348:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a34c:	b25b      	sxtb	r3, r3
 800a34e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a352:	d103      	bne.n	800a35c <xQueueGenericSend+0x174>
 800a354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a356:	2200      	movs	r2, #0
 800a358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a362:	b25b      	sxtb	r3, r3
 800a364:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a368:	d103      	bne.n	800a372 <xQueueGenericSend+0x18a>
 800a36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a372:	f002 f803 	bl	800c37c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a376:	1d3a      	adds	r2, r7, #4
 800a378:	f107 0314 	add.w	r3, r7, #20
 800a37c:	4611      	mov	r1, r2
 800a37e:	4618      	mov	r0, r3
 800a380:	f001 f81e 	bl	800b3c0 <xTaskCheckForTimeOut>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d124      	bne.n	800a3d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a38a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a38c:	f000 faa6 	bl	800a8dc <prvIsQueueFull>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d018      	beq.n	800a3c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a398:	3310      	adds	r3, #16
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	4611      	mov	r1, r2
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f000 ff42 	bl	800b228 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a3a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3a6:	f000 fa31 	bl	800a80c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a3aa:	f000 fd71 	bl	800ae90 <xTaskResumeAll>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f47f af7c 	bne.w	800a2ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a3b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e8 <xQueueGenericSend+0x200>)
 800a3b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3bc:	601a      	str	r2, [r3, #0]
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	e772      	b.n	800a2ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a3c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3ca:	f000 fa1f 	bl	800a80c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3ce:	f000 fd5f 	bl	800ae90 <xTaskResumeAll>
 800a3d2:	e76c      	b.n	800a2ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a3d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3d6:	f000 fa19 	bl	800a80c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3da:	f000 fd59 	bl	800ae90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a3de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3738      	adds	r7, #56	@ 0x38
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	e000ed04 	.word	0xe000ed04

0800a3ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b090      	sub	sp, #64	@ 0x40
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
 800a3f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10b      	bne.n	800a41c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a408:	f383 8811 	msr	BASEPRI, r3
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	f3bf 8f4f 	dsb	sy
 800a414:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a416:	bf00      	nop
 800a418:	bf00      	nop
 800a41a:	e7fd      	b.n	800a418 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d103      	bne.n	800a42a <xQueueGenericSendFromISR+0x3e>
 800a422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a426:	2b00      	cmp	r3, #0
 800a428:	d101      	bne.n	800a42e <xQueueGenericSendFromISR+0x42>
 800a42a:	2301      	movs	r3, #1
 800a42c:	e000      	b.n	800a430 <xQueueGenericSendFromISR+0x44>
 800a42e:	2300      	movs	r3, #0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10b      	bne.n	800a44c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a446:	bf00      	nop
 800a448:	bf00      	nop
 800a44a:	e7fd      	b.n	800a448 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d103      	bne.n	800a45a <xQueueGenericSendFromISR+0x6e>
 800a452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a456:	2b01      	cmp	r3, #1
 800a458:	d101      	bne.n	800a45e <xQueueGenericSendFromISR+0x72>
 800a45a:	2301      	movs	r3, #1
 800a45c:	e000      	b.n	800a460 <xQueueGenericSendFromISR+0x74>
 800a45e:	2300      	movs	r3, #0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10b      	bne.n	800a47c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	623b      	str	r3, [r7, #32]
}
 800a476:	bf00      	nop
 800a478:	bf00      	nop
 800a47a:	e7fd      	b.n	800a478 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a47c:	f002 f82c 	bl	800c4d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a480:	f3ef 8211 	mrs	r2, BASEPRI
 800a484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	61fa      	str	r2, [r7, #28]
 800a496:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a498:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a49a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d302      	bcc.n	800a4ae <xQueueGenericSendFromISR+0xc2>
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d12f      	bne.n	800a50e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	68b9      	ldr	r1, [r7, #8]
 800a4c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a4c4:	f000 f912 	bl	800a6ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a4cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4d0:	d112      	bne.n	800a4f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d016      	beq.n	800a508 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4dc:	3324      	adds	r3, #36	@ 0x24
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 fef4 	bl	800b2cc <xTaskRemoveFromEventList>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00e      	beq.n	800a508 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00b      	beq.n	800a508 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	601a      	str	r2, [r3, #0]
 800a4f6:	e007      	b.n	800a508 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a4f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	b25a      	sxtb	r2, r3
 800a502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a508:	2301      	movs	r3, #1
 800a50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a50c:	e001      	b.n	800a512 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a50e:	2300      	movs	r3, #0
 800a510:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a514:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a51c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a520:	4618      	mov	r0, r3
 800a522:	3740      	adds	r7, #64	@ 0x40
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08c      	sub	sp, #48	@ 0x30
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a534:	2300      	movs	r3, #0
 800a536:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d10b      	bne.n	800a55a <xQueueReceive+0x32>
	__asm volatile
 800a542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a546:	f383 8811 	msr	BASEPRI, r3
 800a54a:	f3bf 8f6f 	isb	sy
 800a54e:	f3bf 8f4f 	dsb	sy
 800a552:	623b      	str	r3, [r7, #32]
}
 800a554:	bf00      	nop
 800a556:	bf00      	nop
 800a558:	e7fd      	b.n	800a556 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d103      	bne.n	800a568 <xQueueReceive+0x40>
 800a560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a564:	2b00      	cmp	r3, #0
 800a566:	d101      	bne.n	800a56c <xQueueReceive+0x44>
 800a568:	2301      	movs	r3, #1
 800a56a:	e000      	b.n	800a56e <xQueueReceive+0x46>
 800a56c:	2300      	movs	r3, #0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10b      	bne.n	800a58a <xQueueReceive+0x62>
	__asm volatile
 800a572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	61fb      	str	r3, [r7, #28]
}
 800a584:	bf00      	nop
 800a586:	bf00      	nop
 800a588:	e7fd      	b.n	800a586 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a58a:	f001 f875 	bl	800b678 <xTaskGetSchedulerState>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d102      	bne.n	800a59a <xQueueReceive+0x72>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d101      	bne.n	800a59e <xQueueReceive+0x76>
 800a59a:	2301      	movs	r3, #1
 800a59c:	e000      	b.n	800a5a0 <xQueueReceive+0x78>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10b      	bne.n	800a5bc <xQueueReceive+0x94>
	__asm volatile
 800a5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	61bb      	str	r3, [r7, #24]
}
 800a5b6:	bf00      	nop
 800a5b8:	bf00      	nop
 800a5ba:	e7fd      	b.n	800a5b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5bc:	f001 feac 	bl	800c318 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d01f      	beq.n	800a60c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5cc:	68b9      	ldr	r1, [r7, #8]
 800a5ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5d0:	f000 f8f6 	bl	800a7c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d6:	1e5a      	subs	r2, r3, #1
 800a5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00f      	beq.n	800a604 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e6:	3310      	adds	r3, #16
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f000 fe6f 	bl	800b2cc <xTaskRemoveFromEventList>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d007      	beq.n	800a604 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a5f4:	4b3c      	ldr	r3, [pc, #240]	@ (800a6e8 <xQueueReceive+0x1c0>)
 800a5f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5fa:	601a      	str	r2, [r3, #0]
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a604:	f001 feba 	bl	800c37c <vPortExitCritical>
				return pdPASS;
 800a608:	2301      	movs	r3, #1
 800a60a:	e069      	b.n	800a6e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d103      	bne.n	800a61a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a612:	f001 feb3 	bl	800c37c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a616:	2300      	movs	r3, #0
 800a618:	e062      	b.n	800a6e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d106      	bne.n	800a62e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a620:	f107 0310 	add.w	r3, r7, #16
 800a624:	4618      	mov	r0, r3
 800a626:	f000 feb5 	bl	800b394 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a62a:	2301      	movs	r3, #1
 800a62c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a62e:	f001 fea5 	bl	800c37c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a632:	f000 fc1f 	bl	800ae74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a636:	f001 fe6f 	bl	800c318 <vPortEnterCritical>
 800a63a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a640:	b25b      	sxtb	r3, r3
 800a642:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a646:	d103      	bne.n	800a650 <xQueueReceive+0x128>
 800a648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a652:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a656:	b25b      	sxtb	r3, r3
 800a658:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a65c:	d103      	bne.n	800a666 <xQueueReceive+0x13e>
 800a65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a660:	2200      	movs	r2, #0
 800a662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a666:	f001 fe89 	bl	800c37c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a66a:	1d3a      	adds	r2, r7, #4
 800a66c:	f107 0310 	add.w	r3, r7, #16
 800a670:	4611      	mov	r1, r2
 800a672:	4618      	mov	r0, r3
 800a674:	f000 fea4 	bl	800b3c0 <xTaskCheckForTimeOut>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d123      	bne.n	800a6c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a67e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a680:	f000 f916 	bl	800a8b0 <prvIsQueueEmpty>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d017      	beq.n	800a6ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68c:	3324      	adds	r3, #36	@ 0x24
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	4611      	mov	r1, r2
 800a692:	4618      	mov	r0, r3
 800a694:	f000 fdc8 	bl	800b228 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a698:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a69a:	f000 f8b7 	bl	800a80c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a69e:	f000 fbf7 	bl	800ae90 <xTaskResumeAll>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d189      	bne.n	800a5bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a6a8:	4b0f      	ldr	r3, [pc, #60]	@ (800a6e8 <xQueueReceive+0x1c0>)
 800a6aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6ae:	601a      	str	r2, [r3, #0]
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	e780      	b.n	800a5bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a6ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6bc:	f000 f8a6 	bl	800a80c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6c0:	f000 fbe6 	bl	800ae90 <xTaskResumeAll>
 800a6c4:	e77a      	b.n	800a5bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a6c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6c8:	f000 f8a0 	bl	800a80c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6cc:	f000 fbe0 	bl	800ae90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6d2:	f000 f8ed 	bl	800a8b0 <prvIsQueueEmpty>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f43f af6f 	beq.w	800a5bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3730      	adds	r7, #48	@ 0x30
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	e000ed04 	.word	0xe000ed04

0800a6ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a700:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10d      	bne.n	800a726 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d14d      	bne.n	800a7ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	4618      	mov	r0, r3
 800a718:	f000 ffcc 	bl	800b6b4 <xTaskPriorityDisinherit>
 800a71c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	609a      	str	r2, [r3, #8]
 800a724:	e043      	b.n	800a7ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d119      	bne.n	800a760 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6858      	ldr	r0, [r3, #4]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a734:	461a      	mov	r2, r3
 800a736:	68b9      	ldr	r1, [r7, #8]
 800a738:	f003 fa65 	bl	800dc06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	685a      	ldr	r2, [r3, #4]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a744:	441a      	add	r2, r3
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	685a      	ldr	r2, [r3, #4]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	429a      	cmp	r2, r3
 800a754:	d32b      	bcc.n	800a7ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	605a      	str	r2, [r3, #4]
 800a75e:	e026      	b.n	800a7ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	68d8      	ldr	r0, [r3, #12]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a768:	461a      	mov	r2, r3
 800a76a:	68b9      	ldr	r1, [r7, #8]
 800a76c:	f003 fa4b 	bl	800dc06 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	68da      	ldr	r2, [r3, #12]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a778:	425b      	negs	r3, r3
 800a77a:	441a      	add	r2, r3
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	68da      	ldr	r2, [r3, #12]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d207      	bcs.n	800a79c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	689a      	ldr	r2, [r3, #8]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a794:	425b      	negs	r3, r3
 800a796:	441a      	add	r2, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d105      	bne.n	800a7ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d002      	beq.n	800a7ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	1c5a      	adds	r2, r3, #1
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a7b6:	697b      	ldr	r3, [r7, #20]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3718      	adds	r7, #24
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d018      	beq.n	800a804 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	68da      	ldr	r2, [r3, #12]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7da:	441a      	add	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	68da      	ldr	r2, [r3, #12]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d303      	bcc.n	800a7f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	68d9      	ldr	r1, [r3, #12]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	6838      	ldr	r0, [r7, #0]
 800a800:	f003 fa01 	bl	800dc06 <memcpy>
	}
}
 800a804:	bf00      	nop
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a814:	f001 fd80 	bl	800c318 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a81e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a820:	e011      	b.n	800a846 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a826:	2b00      	cmp	r3, #0
 800a828:	d012      	beq.n	800a850 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	3324      	adds	r3, #36	@ 0x24
 800a82e:	4618      	mov	r0, r3
 800a830:	f000 fd4c 	bl	800b2cc <xTaskRemoveFromEventList>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d001      	beq.n	800a83e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a83a:	f000 fe25 	bl	800b488 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
 800a840:	3b01      	subs	r3, #1
 800a842:	b2db      	uxtb	r3, r3
 800a844:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	dce9      	bgt.n	800a822 <prvUnlockQueue+0x16>
 800a84e:	e000      	b.n	800a852 <prvUnlockQueue+0x46>
					break;
 800a850:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	22ff      	movs	r2, #255	@ 0xff
 800a856:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a85a:	f001 fd8f 	bl	800c37c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a85e:	f001 fd5b 	bl	800c318 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a868:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a86a:	e011      	b.n	800a890 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d012      	beq.n	800a89a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	3310      	adds	r3, #16
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 fd27 	bl	800b2cc <xTaskRemoveFromEventList>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d001      	beq.n	800a888 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a884:	f000 fe00 	bl	800b488 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a888:	7bbb      	ldrb	r3, [r7, #14]
 800a88a:	3b01      	subs	r3, #1
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a890:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a894:	2b00      	cmp	r3, #0
 800a896:	dce9      	bgt.n	800a86c <prvUnlockQueue+0x60>
 800a898:	e000      	b.n	800a89c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a89a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	22ff      	movs	r2, #255	@ 0xff
 800a8a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a8a4:	f001 fd6a 	bl	800c37c <vPortExitCritical>
}
 800a8a8:	bf00      	nop
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8b8:	f001 fd2e 	bl	800c318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d102      	bne.n	800a8ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	60fb      	str	r3, [r7, #12]
 800a8c8:	e001      	b.n	800a8ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8ce:	f001 fd55 	bl	800c37c <vPortExitCritical>

	return xReturn;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8e4:	f001 fd18 	bl	800c318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d102      	bne.n	800a8fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	60fb      	str	r3, [r7, #12]
 800a8f8:	e001      	b.n	800a8fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8fe:	f001 fd3d 	bl	800c37c <vPortExitCritical>

	return xReturn;
 800a902:	68fb      	ldr	r3, [r7, #12]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a916:	2300      	movs	r3, #0
 800a918:	60fb      	str	r3, [r7, #12]
 800a91a:	e014      	b.n	800a946 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a91c:	4a0f      	ldr	r2, [pc, #60]	@ (800a95c <vQueueAddToRegistry+0x50>)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10b      	bne.n	800a940 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a928:	490c      	ldr	r1, [pc, #48]	@ (800a95c <vQueueAddToRegistry+0x50>)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a932:	4a0a      	ldr	r2, [pc, #40]	@ (800a95c <vQueueAddToRegistry+0x50>)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	00db      	lsls	r3, r3, #3
 800a938:	4413      	add	r3, r2
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a93e:	e006      	b.n	800a94e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	3301      	adds	r3, #1
 800a944:	60fb      	str	r3, [r7, #12]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2b07      	cmp	r3, #7
 800a94a:	d9e7      	bls.n	800a91c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a94c:	bf00      	nop
 800a94e:	bf00      	nop
 800a950:	3714      	adds	r7, #20
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	20001d7c 	.word	0x20001d7c

0800a960 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a970:	f001 fcd2 	bl	800c318 <vPortEnterCritical>
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a97a:	b25b      	sxtb	r3, r3
 800a97c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a980:	d103      	bne.n	800a98a <vQueueWaitForMessageRestricted+0x2a>
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a990:	b25b      	sxtb	r3, r3
 800a992:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a996:	d103      	bne.n	800a9a0 <vQueueWaitForMessageRestricted+0x40>
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	2200      	movs	r2, #0
 800a99c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9a0:	f001 fcec 	bl	800c37c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d106      	bne.n	800a9ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	3324      	adds	r3, #36	@ 0x24
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	68b9      	ldr	r1, [r7, #8]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f000 fc5d 	bl	800b274 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a9ba:	6978      	ldr	r0, [r7, #20]
 800a9bc:	f7ff ff26 	bl	800a80c <prvUnlockQueue>
	}
 800a9c0:	bf00      	nop
 800a9c2:	3718      	adds	r7, #24
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b08e      	sub	sp, #56	@ 0x38
 800a9cc:	af04      	add	r7, sp, #16
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a9d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10b      	bne.n	800a9f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	623b      	str	r3, [r7, #32]
}
 800a9ee:	bf00      	nop
 800a9f0:	bf00      	nop
 800a9f2:	e7fd      	b.n	800a9f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a9f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10b      	bne.n	800aa12 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9fe:	f383 8811 	msr	BASEPRI, r3
 800aa02:	f3bf 8f6f 	isb	sy
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	61fb      	str	r3, [r7, #28]
}
 800aa0c:	bf00      	nop
 800aa0e:	bf00      	nop
 800aa10:	e7fd      	b.n	800aa0e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa12:	23a0      	movs	r3, #160	@ 0xa0
 800aa14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	2ba0      	cmp	r3, #160	@ 0xa0
 800aa1a:	d00b      	beq.n	800aa34 <xTaskCreateStatic+0x6c>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	61bb      	str	r3, [r7, #24]
}
 800aa2e:	bf00      	nop
 800aa30:	bf00      	nop
 800aa32:	e7fd      	b.n	800aa30 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa34:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d01e      	beq.n	800aa7a <xTaskCreateStatic+0xb2>
 800aa3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d01b      	beq.n	800aa7a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa44:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa4a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4e:	2202      	movs	r2, #2
 800aa50:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa54:	2300      	movs	r3, #0
 800aa56:	9303      	str	r3, [sp, #12]
 800aa58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5a:	9302      	str	r3, [sp, #8]
 800aa5c:	f107 0314 	add.w	r3, r7, #20
 800aa60:	9301      	str	r3, [sp, #4]
 800aa62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa64:	9300      	str	r3, [sp, #0]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	68b9      	ldr	r1, [r7, #8]
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f000 f851 	bl	800ab14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aa74:	f000 f8ee 	bl	800ac54 <prvAddNewTaskToReadyList>
 800aa78:	e001      	b.n	800aa7e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa7e:	697b      	ldr	r3, [r7, #20]
	}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3728      	adds	r7, #40	@ 0x28
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b08c      	sub	sp, #48	@ 0x30
 800aa8c:	af04      	add	r7, sp, #16
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	603b      	str	r3, [r7, #0]
 800aa94:	4613      	mov	r3, r2
 800aa96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa98:	88fb      	ldrh	r3, [r7, #6]
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f001 fd5d 	bl	800c55c <pvPortMalloc>
 800aaa2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00e      	beq.n	800aac8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aaaa:	20a0      	movs	r0, #160	@ 0xa0
 800aaac:	f001 fd56 	bl	800c55c <pvPortMalloc>
 800aab0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d003      	beq.n	800aac0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	697a      	ldr	r2, [r7, #20]
 800aabc:	631a      	str	r2, [r3, #48]	@ 0x30
 800aabe:	e005      	b.n	800aacc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aac0:	6978      	ldr	r0, [r7, #20]
 800aac2:	f001 fe19 	bl	800c6f8 <vPortFree>
 800aac6:	e001      	b.n	800aacc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aac8:	2300      	movs	r3, #0
 800aaca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d017      	beq.n	800ab02 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aada:	88fa      	ldrh	r2, [r7, #6]
 800aadc:	2300      	movs	r3, #0
 800aade:	9303      	str	r3, [sp, #12]
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	9302      	str	r3, [sp, #8]
 800aae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae6:	9301      	str	r3, [sp, #4]
 800aae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	68b9      	ldr	r1, [r7, #8]
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f000 f80f 	bl	800ab14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aaf6:	69f8      	ldr	r0, [r7, #28]
 800aaf8:	f000 f8ac 	bl	800ac54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aafc:	2301      	movs	r3, #1
 800aafe:	61bb      	str	r3, [r7, #24]
 800ab00:	e002      	b.n	800ab08 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab08:	69bb      	ldr	r3, [r7, #24]
	}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3720      	adds	r7, #32
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
	...

0800ab14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b088      	sub	sp, #32
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
 800ab20:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4413      	add	r3, r2
 800ab32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	f023 0307 	bic.w	r3, r3, #7
 800ab3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	f003 0307 	and.w	r3, r3, #7
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00b      	beq.n	800ab5e <prvInitialiseNewTask+0x4a>
	__asm volatile
 800ab46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab4a:	f383 8811 	msr	BASEPRI, r3
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	617b      	str	r3, [r7, #20]
}
 800ab58:	bf00      	nop
 800ab5a:	bf00      	nop
 800ab5c:	e7fd      	b.n	800ab5a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d01f      	beq.n	800aba4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab64:	2300      	movs	r3, #0
 800ab66:	61fb      	str	r3, [r7, #28]
 800ab68:	e012      	b.n	800ab90 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	4413      	add	r3, r2
 800ab70:	7819      	ldrb	r1, [r3, #0]
 800ab72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	4413      	add	r3, r2
 800ab78:	3334      	adds	r3, #52	@ 0x34
 800ab7a:	460a      	mov	r2, r1
 800ab7c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab7e:	68ba      	ldr	r2, [r7, #8]
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	4413      	add	r3, r2
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d006      	beq.n	800ab98 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	61fb      	str	r3, [r7, #28]
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	2b0f      	cmp	r3, #15
 800ab94:	d9e9      	bls.n	800ab6a <prvInitialiseNewTask+0x56>
 800ab96:	e000      	b.n	800ab9a <prvInitialiseNewTask+0x86>
			{
				break;
 800ab98:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aba2:	e003      	b.n	800abac <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba6:	2200      	movs	r2, #0
 800aba8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800abac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abae:	2b06      	cmp	r3, #6
 800abb0:	d901      	bls.n	800abb6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800abb2:	2306      	movs	r3, #6
 800abb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800abb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800abbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abc0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800abc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc4:	2200      	movs	r2, #0
 800abc6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800abc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abca:	3304      	adds	r3, #4
 800abcc:	4618      	mov	r0, r3
 800abce:	f7ff f970 	bl	8009eb2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800abd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd4:	3318      	adds	r3, #24
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff f96b 	bl	8009eb2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800abdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abe0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe4:	f1c3 0207 	rsb	r2, r3, #7
 800abe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800abec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abf0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800abf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf4:	2200      	movs	r2, #0
 800abf6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800abfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ac02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac04:	334c      	adds	r3, #76	@ 0x4c
 800ac06:	224c      	movs	r2, #76	@ 0x4c
 800ac08:	2100      	movs	r1, #0
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f002 ff60 	bl	800dad0 <memset>
 800ac10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac12:	4a0d      	ldr	r2, [pc, #52]	@ (800ac48 <prvInitialiseNewTask+0x134>)
 800ac14:	651a      	str	r2, [r3, #80]	@ 0x50
 800ac16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac18:	4a0c      	ldr	r2, [pc, #48]	@ (800ac4c <prvInitialiseNewTask+0x138>)
 800ac1a:	655a      	str	r2, [r3, #84]	@ 0x54
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1e:	4a0c      	ldr	r2, [pc, #48]	@ (800ac50 <prvInitialiseNewTask+0x13c>)
 800ac20:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	68f9      	ldr	r1, [r7, #12]
 800ac26:	69b8      	ldr	r0, [r7, #24]
 800ac28:	f001 fa44 	bl	800c0b4 <pxPortInitialiseStack>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d002      	beq.n	800ac3e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac3e:	bf00      	nop
 800ac40:	3720      	adds	r7, #32
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	2000423c 	.word	0x2000423c
 800ac4c:	200042a4 	.word	0x200042a4
 800ac50:	2000430c 	.word	0x2000430c

0800ac54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac5c:	f001 fb5c 	bl	800c318 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac60:	4b2a      	ldr	r3, [pc, #168]	@ (800ad0c <prvAddNewTaskToReadyList+0xb8>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	3301      	adds	r3, #1
 800ac66:	4a29      	ldr	r2, [pc, #164]	@ (800ad0c <prvAddNewTaskToReadyList+0xb8>)
 800ac68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac6a:	4b29      	ldr	r3, [pc, #164]	@ (800ad10 <prvAddNewTaskToReadyList+0xbc>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d109      	bne.n	800ac86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac72:	4a27      	ldr	r2, [pc, #156]	@ (800ad10 <prvAddNewTaskToReadyList+0xbc>)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac78:	4b24      	ldr	r3, [pc, #144]	@ (800ad0c <prvAddNewTaskToReadyList+0xb8>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d110      	bne.n	800aca2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac80:	f000 fc26 	bl	800b4d0 <prvInitialiseTaskLists>
 800ac84:	e00d      	b.n	800aca2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac86:	4b23      	ldr	r3, [pc, #140]	@ (800ad14 <prvAddNewTaskToReadyList+0xc0>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d109      	bne.n	800aca2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac8e:	4b20      	ldr	r3, [pc, #128]	@ (800ad10 <prvAddNewTaskToReadyList+0xbc>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d802      	bhi.n	800aca2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac9c:	4a1c      	ldr	r2, [pc, #112]	@ (800ad10 <prvAddNewTaskToReadyList+0xbc>)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aca2:	4b1d      	ldr	r3, [pc, #116]	@ (800ad18 <prvAddNewTaskToReadyList+0xc4>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	3301      	adds	r3, #1
 800aca8:	4a1b      	ldr	r2, [pc, #108]	@ (800ad18 <prvAddNewTaskToReadyList+0xc4>)
 800acaa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acb0:	2201      	movs	r2, #1
 800acb2:	409a      	lsls	r2, r3
 800acb4:	4b19      	ldr	r3, [pc, #100]	@ (800ad1c <prvAddNewTaskToReadyList+0xc8>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4313      	orrs	r3, r2
 800acba:	4a18      	ldr	r2, [pc, #96]	@ (800ad1c <prvAddNewTaskToReadyList+0xc8>)
 800acbc:	6013      	str	r3, [r2, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acc2:	4613      	mov	r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	4413      	add	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4a15      	ldr	r2, [pc, #84]	@ (800ad20 <prvAddNewTaskToReadyList+0xcc>)
 800accc:	441a      	add	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	3304      	adds	r3, #4
 800acd2:	4619      	mov	r1, r3
 800acd4:	4610      	mov	r0, r2
 800acd6:	f7ff f8f9 	bl	8009ecc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800acda:	f001 fb4f 	bl	800c37c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800acde:	4b0d      	ldr	r3, [pc, #52]	@ (800ad14 <prvAddNewTaskToReadyList+0xc0>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00e      	beq.n	800ad04 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ace6:	4b0a      	ldr	r3, [pc, #40]	@ (800ad10 <prvAddNewTaskToReadyList+0xbc>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d207      	bcs.n	800ad04 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800acf4:	4b0b      	ldr	r3, [pc, #44]	@ (800ad24 <prvAddNewTaskToReadyList+0xd0>)
 800acf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acfa:	601a      	str	r2, [r3, #0]
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	20001ebc 	.word	0x20001ebc
 800ad10:	20001dbc 	.word	0x20001dbc
 800ad14:	20001ec8 	.word	0x20001ec8
 800ad18:	20001ed8 	.word	0x20001ed8
 800ad1c:	20001ec4 	.word	0x20001ec4
 800ad20:	20001dc0 	.word	0x20001dc0
 800ad24:	e000ed04 	.word	0xe000ed04

0800ad28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad30:	2300      	movs	r3, #0
 800ad32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d018      	beq.n	800ad6c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad3a:	4b14      	ldr	r3, [pc, #80]	@ (800ad8c <vTaskDelay+0x64>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00b      	beq.n	800ad5a <vTaskDelay+0x32>
	__asm volatile
 800ad42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad46:	f383 8811 	msr	BASEPRI, r3
 800ad4a:	f3bf 8f6f 	isb	sy
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	60bb      	str	r3, [r7, #8]
}
 800ad54:	bf00      	nop
 800ad56:	bf00      	nop
 800ad58:	e7fd      	b.n	800ad56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ad5a:	f000 f88b 	bl	800ae74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ad5e:	2100      	movs	r1, #0
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 fd7b 	bl	800b85c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ad66:	f000 f893 	bl	800ae90 <xTaskResumeAll>
 800ad6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d107      	bne.n	800ad82 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ad72:	4b07      	ldr	r3, [pc, #28]	@ (800ad90 <vTaskDelay+0x68>)
 800ad74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad82:	bf00      	nop
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	20001ee4 	.word	0x20001ee4
 800ad90:	e000ed04 	.word	0xe000ed04

0800ad94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b08a      	sub	sp, #40	@ 0x28
 800ad98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ada2:	463a      	mov	r2, r7
 800ada4:	1d39      	adds	r1, r7, #4
 800ada6:	f107 0308 	add.w	r3, r7, #8
 800adaa:	4618      	mov	r0, r3
 800adac:	f7f6 f8c6 	bl	8000f3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800adb0:	6839      	ldr	r1, [r7, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	9202      	str	r2, [sp, #8]
 800adb8:	9301      	str	r3, [sp, #4]
 800adba:	2300      	movs	r3, #0
 800adbc:	9300      	str	r3, [sp, #0]
 800adbe:	2300      	movs	r3, #0
 800adc0:	460a      	mov	r2, r1
 800adc2:	4924      	ldr	r1, [pc, #144]	@ (800ae54 <vTaskStartScheduler+0xc0>)
 800adc4:	4824      	ldr	r0, [pc, #144]	@ (800ae58 <vTaskStartScheduler+0xc4>)
 800adc6:	f7ff fdff 	bl	800a9c8 <xTaskCreateStatic>
 800adca:	4603      	mov	r3, r0
 800adcc:	4a23      	ldr	r2, [pc, #140]	@ (800ae5c <vTaskStartScheduler+0xc8>)
 800adce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800add0:	4b22      	ldr	r3, [pc, #136]	@ (800ae5c <vTaskStartScheduler+0xc8>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d002      	beq.n	800adde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800add8:	2301      	movs	r3, #1
 800adda:	617b      	str	r3, [r7, #20]
 800addc:	e001      	b.n	800ade2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800adde:	2300      	movs	r3, #0
 800ade0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d102      	bne.n	800adee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ade8:	f000 fd9e 	bl	800b928 <xTimerCreateTimerTask>
 800adec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d11b      	bne.n	800ae2c <vTaskStartScheduler+0x98>
	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	613b      	str	r3, [r7, #16]
}
 800ae06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae08:	4b15      	ldr	r3, [pc, #84]	@ (800ae60 <vTaskStartScheduler+0xcc>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	334c      	adds	r3, #76	@ 0x4c
 800ae0e:	4a15      	ldr	r2, [pc, #84]	@ (800ae64 <vTaskStartScheduler+0xd0>)
 800ae10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae12:	4b15      	ldr	r3, [pc, #84]	@ (800ae68 <vTaskStartScheduler+0xd4>)
 800ae14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae1a:	4b14      	ldr	r3, [pc, #80]	@ (800ae6c <vTaskStartScheduler+0xd8>)
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae20:	4b13      	ldr	r3, [pc, #76]	@ (800ae70 <vTaskStartScheduler+0xdc>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae26:	f001 f9d3 	bl	800c1d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae2a:	e00f      	b.n	800ae4c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae32:	d10b      	bne.n	800ae4c <vTaskStartScheduler+0xb8>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	60fb      	str	r3, [r7, #12]
}
 800ae46:	bf00      	nop
 800ae48:	bf00      	nop
 800ae4a:	e7fd      	b.n	800ae48 <vTaskStartScheduler+0xb4>
}
 800ae4c:	bf00      	nop
 800ae4e:	3718      	adds	r7, #24
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	0800edcc 	.word	0x0800edcc
 800ae58:	0800b4a1 	.word	0x0800b4a1
 800ae5c:	20001ee0 	.word	0x20001ee0
 800ae60:	20001dbc 	.word	0x20001dbc
 800ae64:	20000024 	.word	0x20000024
 800ae68:	20001edc 	.word	0x20001edc
 800ae6c:	20001ec8 	.word	0x20001ec8
 800ae70:	20001ec0 	.word	0x20001ec0

0800ae74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae74:	b480      	push	{r7}
 800ae76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae78:	4b04      	ldr	r3, [pc, #16]	@ (800ae8c <vTaskSuspendAll+0x18>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	4a03      	ldr	r2, [pc, #12]	@ (800ae8c <vTaskSuspendAll+0x18>)
 800ae80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ae82:	bf00      	nop
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	20001ee4 	.word	0x20001ee4

0800ae90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae96:	2300      	movs	r3, #0
 800ae98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae9e:	4b42      	ldr	r3, [pc, #264]	@ (800afa8 <xTaskResumeAll+0x118>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d10b      	bne.n	800aebe <xTaskResumeAll+0x2e>
	__asm volatile
 800aea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeaa:	f383 8811 	msr	BASEPRI, r3
 800aeae:	f3bf 8f6f 	isb	sy
 800aeb2:	f3bf 8f4f 	dsb	sy
 800aeb6:	603b      	str	r3, [r7, #0]
}
 800aeb8:	bf00      	nop
 800aeba:	bf00      	nop
 800aebc:	e7fd      	b.n	800aeba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aebe:	f001 fa2b 	bl	800c318 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aec2:	4b39      	ldr	r3, [pc, #228]	@ (800afa8 <xTaskResumeAll+0x118>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	3b01      	subs	r3, #1
 800aec8:	4a37      	ldr	r2, [pc, #220]	@ (800afa8 <xTaskResumeAll+0x118>)
 800aeca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aecc:	4b36      	ldr	r3, [pc, #216]	@ (800afa8 <xTaskResumeAll+0x118>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d161      	bne.n	800af98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aed4:	4b35      	ldr	r3, [pc, #212]	@ (800afac <xTaskResumeAll+0x11c>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d05d      	beq.n	800af98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aedc:	e02e      	b.n	800af3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aede:	4b34      	ldr	r3, [pc, #208]	@ (800afb0 <xTaskResumeAll+0x120>)
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	3318      	adds	r3, #24
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7ff f84b 	bl	8009f86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	3304      	adds	r3, #4
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7ff f846 	bl	8009f86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aefe:	2201      	movs	r2, #1
 800af00:	409a      	lsls	r2, r3
 800af02:	4b2c      	ldr	r3, [pc, #176]	@ (800afb4 <xTaskResumeAll+0x124>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4313      	orrs	r3, r2
 800af08:	4a2a      	ldr	r2, [pc, #168]	@ (800afb4 <xTaskResumeAll+0x124>)
 800af0a:	6013      	str	r3, [r2, #0]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af10:	4613      	mov	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4a27      	ldr	r2, [pc, #156]	@ (800afb8 <xTaskResumeAll+0x128>)
 800af1a:	441a      	add	r2, r3
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	3304      	adds	r3, #4
 800af20:	4619      	mov	r1, r3
 800af22:	4610      	mov	r0, r2
 800af24:	f7fe ffd2 	bl	8009ecc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af2c:	4b23      	ldr	r3, [pc, #140]	@ (800afbc <xTaskResumeAll+0x12c>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af32:	429a      	cmp	r2, r3
 800af34:	d302      	bcc.n	800af3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800af36:	4b22      	ldr	r3, [pc, #136]	@ (800afc0 <xTaskResumeAll+0x130>)
 800af38:	2201      	movs	r2, #1
 800af3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af3c:	4b1c      	ldr	r3, [pc, #112]	@ (800afb0 <xTaskResumeAll+0x120>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d1cc      	bne.n	800aede <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d001      	beq.n	800af4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af4a:	f000 fb65 	bl	800b618 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af4e:	4b1d      	ldr	r3, [pc, #116]	@ (800afc4 <xTaskResumeAll+0x134>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d010      	beq.n	800af7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af5a:	f000 f847 	bl	800afec <xTaskIncrementTick>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d002      	beq.n	800af6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800af64:	4b16      	ldr	r3, [pc, #88]	@ (800afc0 <xTaskResumeAll+0x130>)
 800af66:	2201      	movs	r2, #1
 800af68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1f1      	bne.n	800af5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800af76:	4b13      	ldr	r3, [pc, #76]	@ (800afc4 <xTaskResumeAll+0x134>)
 800af78:	2200      	movs	r2, #0
 800af7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af7c:	4b10      	ldr	r3, [pc, #64]	@ (800afc0 <xTaskResumeAll+0x130>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d009      	beq.n	800af98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af84:	2301      	movs	r3, #1
 800af86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af88:	4b0f      	ldr	r3, [pc, #60]	@ (800afc8 <xTaskResumeAll+0x138>)
 800af8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af8e:	601a      	str	r2, [r3, #0]
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af98:	f001 f9f0 	bl	800c37c <vPortExitCritical>

	return xAlreadyYielded;
 800af9c:	68bb      	ldr	r3, [r7, #8]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	20001ee4 	.word	0x20001ee4
 800afac:	20001ebc 	.word	0x20001ebc
 800afb0:	20001e7c 	.word	0x20001e7c
 800afb4:	20001ec4 	.word	0x20001ec4
 800afb8:	20001dc0 	.word	0x20001dc0
 800afbc:	20001dbc 	.word	0x20001dbc
 800afc0:	20001ed0 	.word	0x20001ed0
 800afc4:	20001ecc 	.word	0x20001ecc
 800afc8:	e000ed04 	.word	0xe000ed04

0800afcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800afd2:	4b05      	ldr	r3, [pc, #20]	@ (800afe8 <xTaskGetTickCount+0x1c>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800afd8:	687b      	ldr	r3, [r7, #4]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	20001ec0 	.word	0x20001ec0

0800afec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b086      	sub	sp, #24
 800aff0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aff2:	2300      	movs	r3, #0
 800aff4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aff6:	4b4f      	ldr	r3, [pc, #316]	@ (800b134 <xTaskIncrementTick+0x148>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	f040 808f 	bne.w	800b11e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b000:	4b4d      	ldr	r3, [pc, #308]	@ (800b138 <xTaskIncrementTick+0x14c>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	3301      	adds	r3, #1
 800b006:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b008:	4a4b      	ldr	r2, [pc, #300]	@ (800b138 <xTaskIncrementTick+0x14c>)
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d121      	bne.n	800b058 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b014:	4b49      	ldr	r3, [pc, #292]	@ (800b13c <xTaskIncrementTick+0x150>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00b      	beq.n	800b036 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	603b      	str	r3, [r7, #0]
}
 800b030:	bf00      	nop
 800b032:	bf00      	nop
 800b034:	e7fd      	b.n	800b032 <xTaskIncrementTick+0x46>
 800b036:	4b41      	ldr	r3, [pc, #260]	@ (800b13c <xTaskIncrementTick+0x150>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	60fb      	str	r3, [r7, #12]
 800b03c:	4b40      	ldr	r3, [pc, #256]	@ (800b140 <xTaskIncrementTick+0x154>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a3e      	ldr	r2, [pc, #248]	@ (800b13c <xTaskIncrementTick+0x150>)
 800b042:	6013      	str	r3, [r2, #0]
 800b044:	4a3e      	ldr	r2, [pc, #248]	@ (800b140 <xTaskIncrementTick+0x154>)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6013      	str	r3, [r2, #0]
 800b04a:	4b3e      	ldr	r3, [pc, #248]	@ (800b144 <xTaskIncrementTick+0x158>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	3301      	adds	r3, #1
 800b050:	4a3c      	ldr	r2, [pc, #240]	@ (800b144 <xTaskIncrementTick+0x158>)
 800b052:	6013      	str	r3, [r2, #0]
 800b054:	f000 fae0 	bl	800b618 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b058:	4b3b      	ldr	r3, [pc, #236]	@ (800b148 <xTaskIncrementTick+0x15c>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	693a      	ldr	r2, [r7, #16]
 800b05e:	429a      	cmp	r2, r3
 800b060:	d348      	bcc.n	800b0f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b062:	4b36      	ldr	r3, [pc, #216]	@ (800b13c <xTaskIncrementTick+0x150>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d104      	bne.n	800b076 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b06c:	4b36      	ldr	r3, [pc, #216]	@ (800b148 <xTaskIncrementTick+0x15c>)
 800b06e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b072:	601a      	str	r2, [r3, #0]
					break;
 800b074:	e03e      	b.n	800b0f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b076:	4b31      	ldr	r3, [pc, #196]	@ (800b13c <xTaskIncrementTick+0x150>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b086:	693a      	ldr	r2, [r7, #16]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d203      	bcs.n	800b096 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b08e:	4a2e      	ldr	r2, [pc, #184]	@ (800b148 <xTaskIncrementTick+0x15c>)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b094:	e02e      	b.n	800b0f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	3304      	adds	r3, #4
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fe ff73 	bl	8009f86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d004      	beq.n	800b0b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	3318      	adds	r3, #24
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7fe ff6a 	bl	8009f86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	409a      	lsls	r2, r3
 800b0ba:	4b24      	ldr	r3, [pc, #144]	@ (800b14c <xTaskIncrementTick+0x160>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	4a22      	ldr	r2, [pc, #136]	@ (800b14c <xTaskIncrementTick+0x160>)
 800b0c2:	6013      	str	r3, [r2, #0]
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4a1f      	ldr	r2, [pc, #124]	@ (800b150 <xTaskIncrementTick+0x164>)
 800b0d2:	441a      	add	r2, r3
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	4619      	mov	r1, r3
 800b0da:	4610      	mov	r0, r2
 800b0dc:	f7fe fef6 	bl	8009ecc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0e4:	4b1b      	ldr	r3, [pc, #108]	@ (800b154 <xTaskIncrementTick+0x168>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d3b9      	bcc.n	800b062 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0f2:	e7b6      	b.n	800b062 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b0f4:	4b17      	ldr	r3, [pc, #92]	@ (800b154 <xTaskIncrementTick+0x168>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0fa:	4915      	ldr	r1, [pc, #84]	@ (800b150 <xTaskIncrementTick+0x164>)
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4413      	add	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	440b      	add	r3, r1
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d901      	bls.n	800b110 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b10c:	2301      	movs	r3, #1
 800b10e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b110:	4b11      	ldr	r3, [pc, #68]	@ (800b158 <xTaskIncrementTick+0x16c>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d007      	beq.n	800b128 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b118:	2301      	movs	r3, #1
 800b11a:	617b      	str	r3, [r7, #20]
 800b11c:	e004      	b.n	800b128 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b11e:	4b0f      	ldr	r3, [pc, #60]	@ (800b15c <xTaskIncrementTick+0x170>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	3301      	adds	r3, #1
 800b124:	4a0d      	ldr	r2, [pc, #52]	@ (800b15c <xTaskIncrementTick+0x170>)
 800b126:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b128:	697b      	ldr	r3, [r7, #20]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3718      	adds	r7, #24
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	20001ee4 	.word	0x20001ee4
 800b138:	20001ec0 	.word	0x20001ec0
 800b13c:	20001e74 	.word	0x20001e74
 800b140:	20001e78 	.word	0x20001e78
 800b144:	20001ed4 	.word	0x20001ed4
 800b148:	20001edc 	.word	0x20001edc
 800b14c:	20001ec4 	.word	0x20001ec4
 800b150:	20001dc0 	.word	0x20001dc0
 800b154:	20001dbc 	.word	0x20001dbc
 800b158:	20001ed0 	.word	0x20001ed0
 800b15c:	20001ecc 	.word	0x20001ecc

0800b160 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b160:	b480      	push	{r7}
 800b162:	b087      	sub	sp, #28
 800b164:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b166:	4b2a      	ldr	r3, [pc, #168]	@ (800b210 <vTaskSwitchContext+0xb0>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d003      	beq.n	800b176 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b16e:	4b29      	ldr	r3, [pc, #164]	@ (800b214 <vTaskSwitchContext+0xb4>)
 800b170:	2201      	movs	r2, #1
 800b172:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b174:	e045      	b.n	800b202 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800b176:	4b27      	ldr	r3, [pc, #156]	@ (800b214 <vTaskSwitchContext+0xb4>)
 800b178:	2200      	movs	r2, #0
 800b17a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b17c:	4b26      	ldr	r3, [pc, #152]	@ (800b218 <vTaskSwitchContext+0xb8>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	fab3 f383 	clz	r3, r3
 800b188:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b18a:	7afb      	ldrb	r3, [r7, #11]
 800b18c:	f1c3 031f 	rsb	r3, r3, #31
 800b190:	617b      	str	r3, [r7, #20]
 800b192:	4922      	ldr	r1, [pc, #136]	@ (800b21c <vTaskSwitchContext+0xbc>)
 800b194:	697a      	ldr	r2, [r7, #20]
 800b196:	4613      	mov	r3, r2
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	4413      	add	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	440b      	add	r3, r1
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d10b      	bne.n	800b1be <vTaskSwitchContext+0x5e>
	__asm volatile
 800b1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1aa:	f383 8811 	msr	BASEPRI, r3
 800b1ae:	f3bf 8f6f 	isb	sy
 800b1b2:	f3bf 8f4f 	dsb	sy
 800b1b6:	607b      	str	r3, [r7, #4]
}
 800b1b8:	bf00      	nop
 800b1ba:	bf00      	nop
 800b1bc:	e7fd      	b.n	800b1ba <vTaskSwitchContext+0x5a>
 800b1be:	697a      	ldr	r2, [r7, #20]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4413      	add	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	4a14      	ldr	r2, [pc, #80]	@ (800b21c <vTaskSwitchContext+0xbc>)
 800b1ca:	4413      	add	r3, r2
 800b1cc:	613b      	str	r3, [r7, #16]
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	685a      	ldr	r2, [r3, #4]
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	605a      	str	r2, [r3, #4]
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	685a      	ldr	r2, [r3, #4]
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	3308      	adds	r3, #8
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d104      	bne.n	800b1ee <vTaskSwitchContext+0x8e>
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	685a      	ldr	r2, [r3, #4]
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	605a      	str	r2, [r3, #4]
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	4a0a      	ldr	r2, [pc, #40]	@ (800b220 <vTaskSwitchContext+0xc0>)
 800b1f6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b1f8:	4b09      	ldr	r3, [pc, #36]	@ (800b220 <vTaskSwitchContext+0xc0>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	334c      	adds	r3, #76	@ 0x4c
 800b1fe:	4a09      	ldr	r2, [pc, #36]	@ (800b224 <vTaskSwitchContext+0xc4>)
 800b200:	6013      	str	r3, [r2, #0]
}
 800b202:	bf00      	nop
 800b204:	371c      	adds	r7, #28
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	20001ee4 	.word	0x20001ee4
 800b214:	20001ed0 	.word	0x20001ed0
 800b218:	20001ec4 	.word	0x20001ec4
 800b21c:	20001dc0 	.word	0x20001dc0
 800b220:	20001dbc 	.word	0x20001dbc
 800b224:	20000024 	.word	0x20000024

0800b228 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d10b      	bne.n	800b250 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b23c:	f383 8811 	msr	BASEPRI, r3
 800b240:	f3bf 8f6f 	isb	sy
 800b244:	f3bf 8f4f 	dsb	sy
 800b248:	60fb      	str	r3, [r7, #12]
}
 800b24a:	bf00      	nop
 800b24c:	bf00      	nop
 800b24e:	e7fd      	b.n	800b24c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b250:	4b07      	ldr	r3, [pc, #28]	@ (800b270 <vTaskPlaceOnEventList+0x48>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3318      	adds	r3, #24
 800b256:	4619      	mov	r1, r3
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f7fe fe5b 	bl	8009f14 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b25e:	2101      	movs	r1, #1
 800b260:	6838      	ldr	r0, [r7, #0]
 800b262:	f000 fafb 	bl	800b85c <prvAddCurrentTaskToDelayedList>
}
 800b266:	bf00      	nop
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	20001dbc 	.word	0x20001dbc

0800b274 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b274:	b580      	push	{r7, lr}
 800b276:	b086      	sub	sp, #24
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d10b      	bne.n	800b29e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b28a:	f383 8811 	msr	BASEPRI, r3
 800b28e:	f3bf 8f6f 	isb	sy
 800b292:	f3bf 8f4f 	dsb	sy
 800b296:	617b      	str	r3, [r7, #20]
}
 800b298:	bf00      	nop
 800b29a:	bf00      	nop
 800b29c:	e7fd      	b.n	800b29a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b29e:	4b0a      	ldr	r3, [pc, #40]	@ (800b2c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	3318      	adds	r3, #24
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	68f8      	ldr	r0, [r7, #12]
 800b2a8:	f7fe fe10 	bl	8009ecc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d002      	beq.n	800b2b8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b2b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b2b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b2b8:	6879      	ldr	r1, [r7, #4]
 800b2ba:	68b8      	ldr	r0, [r7, #8]
 800b2bc:	f000 face 	bl	800b85c <prvAddCurrentTaskToDelayedList>
	}
 800b2c0:	bf00      	nop
 800b2c2:	3718      	adds	r7, #24
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	20001dbc 	.word	0x20001dbc

0800b2cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b086      	sub	sp, #24
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d10b      	bne.n	800b2fa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e6:	f383 8811 	msr	BASEPRI, r3
 800b2ea:	f3bf 8f6f 	isb	sy
 800b2ee:	f3bf 8f4f 	dsb	sy
 800b2f2:	60fb      	str	r3, [r7, #12]
}
 800b2f4:	bf00      	nop
 800b2f6:	bf00      	nop
 800b2f8:	e7fd      	b.n	800b2f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	3318      	adds	r3, #24
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fe fe41 	bl	8009f86 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b304:	4b1d      	ldr	r3, [pc, #116]	@ (800b37c <xTaskRemoveFromEventList+0xb0>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d11c      	bne.n	800b346 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	3304      	adds	r3, #4
 800b310:	4618      	mov	r0, r3
 800b312:	f7fe fe38 	bl	8009f86 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b31a:	2201      	movs	r2, #1
 800b31c:	409a      	lsls	r2, r3
 800b31e:	4b18      	ldr	r3, [pc, #96]	@ (800b380 <xTaskRemoveFromEventList+0xb4>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4313      	orrs	r3, r2
 800b324:	4a16      	ldr	r2, [pc, #88]	@ (800b380 <xTaskRemoveFromEventList+0xb4>)
 800b326:	6013      	str	r3, [r2, #0]
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b32c:	4613      	mov	r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	4413      	add	r3, r2
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	4a13      	ldr	r2, [pc, #76]	@ (800b384 <xTaskRemoveFromEventList+0xb8>)
 800b336:	441a      	add	r2, r3
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	3304      	adds	r3, #4
 800b33c:	4619      	mov	r1, r3
 800b33e:	4610      	mov	r0, r2
 800b340:	f7fe fdc4 	bl	8009ecc <vListInsertEnd>
 800b344:	e005      	b.n	800b352 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	3318      	adds	r3, #24
 800b34a:	4619      	mov	r1, r3
 800b34c:	480e      	ldr	r0, [pc, #56]	@ (800b388 <xTaskRemoveFromEventList+0xbc>)
 800b34e:	f7fe fdbd 	bl	8009ecc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b356:	4b0d      	ldr	r3, [pc, #52]	@ (800b38c <xTaskRemoveFromEventList+0xc0>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d905      	bls.n	800b36c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b360:	2301      	movs	r3, #1
 800b362:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b364:	4b0a      	ldr	r3, [pc, #40]	@ (800b390 <xTaskRemoveFromEventList+0xc4>)
 800b366:	2201      	movs	r2, #1
 800b368:	601a      	str	r2, [r3, #0]
 800b36a:	e001      	b.n	800b370 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b36c:	2300      	movs	r3, #0
 800b36e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b370:	697b      	ldr	r3, [r7, #20]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3718      	adds	r7, #24
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	20001ee4 	.word	0x20001ee4
 800b380:	20001ec4 	.word	0x20001ec4
 800b384:	20001dc0 	.word	0x20001dc0
 800b388:	20001e7c 	.word	0x20001e7c
 800b38c:	20001dbc 	.word	0x20001dbc
 800b390:	20001ed0 	.word	0x20001ed0

0800b394 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b39c:	4b06      	ldr	r3, [pc, #24]	@ (800b3b8 <vTaskInternalSetTimeOutState+0x24>)
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b3a4:	4b05      	ldr	r3, [pc, #20]	@ (800b3bc <vTaskInternalSetTimeOutState+0x28>)
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	605a      	str	r2, [r3, #4]
}
 800b3ac:	bf00      	nop
 800b3ae:	370c      	adds	r7, #12
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr
 800b3b8:	20001ed4 	.word	0x20001ed4
 800b3bc:	20001ec0 	.word	0x20001ec0

0800b3c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b088      	sub	sp, #32
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d10b      	bne.n	800b3e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	613b      	str	r3, [r7, #16]
}
 800b3e2:	bf00      	nop
 800b3e4:	bf00      	nop
 800b3e6:	e7fd      	b.n	800b3e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d10b      	bne.n	800b406 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	60fb      	str	r3, [r7, #12]
}
 800b400:	bf00      	nop
 800b402:	bf00      	nop
 800b404:	e7fd      	b.n	800b402 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b406:	f000 ff87 	bl	800c318 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b40a:	4b1d      	ldr	r3, [pc, #116]	@ (800b480 <xTaskCheckForTimeOut+0xc0>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	69ba      	ldr	r2, [r7, #24]
 800b416:	1ad3      	subs	r3, r2, r3
 800b418:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b422:	d102      	bne.n	800b42a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b424:	2300      	movs	r3, #0
 800b426:	61fb      	str	r3, [r7, #28]
 800b428:	e023      	b.n	800b472 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	4b15      	ldr	r3, [pc, #84]	@ (800b484 <xTaskCheckForTimeOut+0xc4>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	429a      	cmp	r2, r3
 800b434:	d007      	beq.n	800b446 <xTaskCheckForTimeOut+0x86>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	69ba      	ldr	r2, [r7, #24]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d302      	bcc.n	800b446 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b440:	2301      	movs	r3, #1
 800b442:	61fb      	str	r3, [r7, #28]
 800b444:	e015      	b.n	800b472 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	697a      	ldr	r2, [r7, #20]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d20b      	bcs.n	800b468 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	1ad2      	subs	r2, r2, r3
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f7ff ff99 	bl	800b394 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b462:	2300      	movs	r3, #0
 800b464:	61fb      	str	r3, [r7, #28]
 800b466:	e004      	b.n	800b472 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	2200      	movs	r2, #0
 800b46c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b46e:	2301      	movs	r3, #1
 800b470:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b472:	f000 ff83 	bl	800c37c <vPortExitCritical>

	return xReturn;
 800b476:	69fb      	ldr	r3, [r7, #28]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3720      	adds	r7, #32
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	20001ec0 	.word	0x20001ec0
 800b484:	20001ed4 	.word	0x20001ed4

0800b488 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b488:	b480      	push	{r7}
 800b48a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b48c:	4b03      	ldr	r3, [pc, #12]	@ (800b49c <vTaskMissedYield+0x14>)
 800b48e:	2201      	movs	r2, #1
 800b490:	601a      	str	r2, [r3, #0]
}
 800b492:	bf00      	nop
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr
 800b49c:	20001ed0 	.word	0x20001ed0

0800b4a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b4a8:	f000 f852 	bl	800b550 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b4ac:	4b06      	ldr	r3, [pc, #24]	@ (800b4c8 <prvIdleTask+0x28>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d9f9      	bls.n	800b4a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b4b4:	4b05      	ldr	r3, [pc, #20]	@ (800b4cc <prvIdleTask+0x2c>)
 800b4b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4ba:	601a      	str	r2, [r3, #0]
 800b4bc:	f3bf 8f4f 	dsb	sy
 800b4c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b4c4:	e7f0      	b.n	800b4a8 <prvIdleTask+0x8>
 800b4c6:	bf00      	nop
 800b4c8:	20001dc0 	.word	0x20001dc0
 800b4cc:	e000ed04 	.word	0xe000ed04

0800b4d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	607b      	str	r3, [r7, #4]
 800b4da:	e00c      	b.n	800b4f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	4613      	mov	r3, r2
 800b4e0:	009b      	lsls	r3, r3, #2
 800b4e2:	4413      	add	r3, r2
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	4a12      	ldr	r2, [pc, #72]	@ (800b530 <prvInitialiseTaskLists+0x60>)
 800b4e8:	4413      	add	r3, r2
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fe fcc1 	bl	8009e72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	607b      	str	r3, [r7, #4]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2b06      	cmp	r3, #6
 800b4fa:	d9ef      	bls.n	800b4dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b4fc:	480d      	ldr	r0, [pc, #52]	@ (800b534 <prvInitialiseTaskLists+0x64>)
 800b4fe:	f7fe fcb8 	bl	8009e72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b502:	480d      	ldr	r0, [pc, #52]	@ (800b538 <prvInitialiseTaskLists+0x68>)
 800b504:	f7fe fcb5 	bl	8009e72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b508:	480c      	ldr	r0, [pc, #48]	@ (800b53c <prvInitialiseTaskLists+0x6c>)
 800b50a:	f7fe fcb2 	bl	8009e72 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b50e:	480c      	ldr	r0, [pc, #48]	@ (800b540 <prvInitialiseTaskLists+0x70>)
 800b510:	f7fe fcaf 	bl	8009e72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b514:	480b      	ldr	r0, [pc, #44]	@ (800b544 <prvInitialiseTaskLists+0x74>)
 800b516:	f7fe fcac 	bl	8009e72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b51a:	4b0b      	ldr	r3, [pc, #44]	@ (800b548 <prvInitialiseTaskLists+0x78>)
 800b51c:	4a05      	ldr	r2, [pc, #20]	@ (800b534 <prvInitialiseTaskLists+0x64>)
 800b51e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b520:	4b0a      	ldr	r3, [pc, #40]	@ (800b54c <prvInitialiseTaskLists+0x7c>)
 800b522:	4a05      	ldr	r2, [pc, #20]	@ (800b538 <prvInitialiseTaskLists+0x68>)
 800b524:	601a      	str	r2, [r3, #0]
}
 800b526:	bf00      	nop
 800b528:	3708      	adds	r7, #8
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	20001dc0 	.word	0x20001dc0
 800b534:	20001e4c 	.word	0x20001e4c
 800b538:	20001e60 	.word	0x20001e60
 800b53c:	20001e7c 	.word	0x20001e7c
 800b540:	20001e90 	.word	0x20001e90
 800b544:	20001ea8 	.word	0x20001ea8
 800b548:	20001e74 	.word	0x20001e74
 800b54c:	20001e78 	.word	0x20001e78

0800b550 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b556:	e019      	b.n	800b58c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b558:	f000 fede 	bl	800c318 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b55c:	4b10      	ldr	r3, [pc, #64]	@ (800b5a0 <prvCheckTasksWaitingTermination+0x50>)
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	3304      	adds	r3, #4
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fe fd0c 	bl	8009f86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b56e:	4b0d      	ldr	r3, [pc, #52]	@ (800b5a4 <prvCheckTasksWaitingTermination+0x54>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	3b01      	subs	r3, #1
 800b574:	4a0b      	ldr	r2, [pc, #44]	@ (800b5a4 <prvCheckTasksWaitingTermination+0x54>)
 800b576:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b578:	4b0b      	ldr	r3, [pc, #44]	@ (800b5a8 <prvCheckTasksWaitingTermination+0x58>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	3b01      	subs	r3, #1
 800b57e:	4a0a      	ldr	r2, [pc, #40]	@ (800b5a8 <prvCheckTasksWaitingTermination+0x58>)
 800b580:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b582:	f000 fefb 	bl	800c37c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f810 	bl	800b5ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b58c:	4b06      	ldr	r3, [pc, #24]	@ (800b5a8 <prvCheckTasksWaitingTermination+0x58>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1e1      	bne.n	800b558 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b594:	bf00      	nop
 800b596:	bf00      	nop
 800b598:	3708      	adds	r7, #8
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	20001e90 	.word	0x20001e90
 800b5a4:	20001ebc 	.word	0x20001ebc
 800b5a8:	20001ea4 	.word	0x20001ea4

0800b5ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	334c      	adds	r3, #76	@ 0x4c
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f002 fa91 	bl	800dae0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d108      	bne.n	800b5da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f001 f893 	bl	800c6f8 <vPortFree>
				vPortFree( pxTCB );
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f001 f890 	bl	800c6f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b5d8:	e019      	b.n	800b60e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d103      	bne.n	800b5ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f001 f887 	bl	800c6f8 <vPortFree>
	}
 800b5ea:	e010      	b.n	800b60e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b5f2:	2b02      	cmp	r3, #2
 800b5f4:	d00b      	beq.n	800b60e <prvDeleteTCB+0x62>
	__asm volatile
 800b5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5fa:	f383 8811 	msr	BASEPRI, r3
 800b5fe:	f3bf 8f6f 	isb	sy
 800b602:	f3bf 8f4f 	dsb	sy
 800b606:	60fb      	str	r3, [r7, #12]
}
 800b608:	bf00      	nop
 800b60a:	bf00      	nop
 800b60c:	e7fd      	b.n	800b60a <prvDeleteTCB+0x5e>
	}
 800b60e:	bf00      	nop
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
	...

0800b618 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b61e:	4b0c      	ldr	r3, [pc, #48]	@ (800b650 <prvResetNextTaskUnblockTime+0x38>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d104      	bne.n	800b632 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b628:	4b0a      	ldr	r3, [pc, #40]	@ (800b654 <prvResetNextTaskUnblockTime+0x3c>)
 800b62a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b62e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b630:	e008      	b.n	800b644 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b632:	4b07      	ldr	r3, [pc, #28]	@ (800b650 <prvResetNextTaskUnblockTime+0x38>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	4a04      	ldr	r2, [pc, #16]	@ (800b654 <prvResetNextTaskUnblockTime+0x3c>)
 800b642:	6013      	str	r3, [r2, #0]
}
 800b644:	bf00      	nop
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr
 800b650:	20001e74 	.word	0x20001e74
 800b654:	20001edc 	.word	0x20001edc

0800b658 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b65e:	4b05      	ldr	r3, [pc, #20]	@ (800b674 <xTaskGetCurrentTaskHandle+0x1c>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b664:	687b      	ldr	r3, [r7, #4]
	}
 800b666:	4618      	mov	r0, r3
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	20001dbc 	.word	0x20001dbc

0800b678 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b67e:	4b0b      	ldr	r3, [pc, #44]	@ (800b6ac <xTaskGetSchedulerState+0x34>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d102      	bne.n	800b68c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b686:	2301      	movs	r3, #1
 800b688:	607b      	str	r3, [r7, #4]
 800b68a:	e008      	b.n	800b69e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b68c:	4b08      	ldr	r3, [pc, #32]	@ (800b6b0 <xTaskGetSchedulerState+0x38>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d102      	bne.n	800b69a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b694:	2302      	movs	r3, #2
 800b696:	607b      	str	r3, [r7, #4]
 800b698:	e001      	b.n	800b69e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b69a:	2300      	movs	r3, #0
 800b69c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b69e:	687b      	ldr	r3, [r7, #4]
	}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	20001ec8 	.word	0x20001ec8
 800b6b0:	20001ee4 	.word	0x20001ee4

0800b6b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d070      	beq.n	800b7ac <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b6ca:	4b3b      	ldr	r3, [pc, #236]	@ (800b7b8 <xTaskPriorityDisinherit+0x104>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	693a      	ldr	r2, [r7, #16]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d00b      	beq.n	800b6ec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d8:	f383 8811 	msr	BASEPRI, r3
 800b6dc:	f3bf 8f6f 	isb	sy
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	60fb      	str	r3, [r7, #12]
}
 800b6e6:	bf00      	nop
 800b6e8:	bf00      	nop
 800b6ea:	e7fd      	b.n	800b6e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10b      	bne.n	800b70c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f8:	f383 8811 	msr	BASEPRI, r3
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	60bb      	str	r3, [r7, #8]
}
 800b706:	bf00      	nop
 800b708:	bf00      	nop
 800b70a:	e7fd      	b.n	800b708 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b710:	1e5a      	subs	r2, r3, #1
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b71e:	429a      	cmp	r2, r3
 800b720:	d044      	beq.n	800b7ac <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b726:	2b00      	cmp	r3, #0
 800b728:	d140      	bne.n	800b7ac <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	3304      	adds	r3, #4
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fe fc29 	bl	8009f86 <uxListRemove>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d115      	bne.n	800b766 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b73e:	491f      	ldr	r1, [pc, #124]	@ (800b7bc <xTaskPriorityDisinherit+0x108>)
 800b740:	4613      	mov	r3, r2
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	4413      	add	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	440b      	add	r3, r1
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d10a      	bne.n	800b766 <xTaskPriorityDisinherit+0xb2>
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b754:	2201      	movs	r2, #1
 800b756:	fa02 f303 	lsl.w	r3, r2, r3
 800b75a:	43da      	mvns	r2, r3
 800b75c:	4b18      	ldr	r3, [pc, #96]	@ (800b7c0 <xTaskPriorityDisinherit+0x10c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4013      	ands	r3, r2
 800b762:	4a17      	ldr	r2, [pc, #92]	@ (800b7c0 <xTaskPriorityDisinherit+0x10c>)
 800b764:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b772:	f1c3 0207 	rsb	r2, r3, #7
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b77e:	2201      	movs	r2, #1
 800b780:	409a      	lsls	r2, r3
 800b782:	4b0f      	ldr	r3, [pc, #60]	@ (800b7c0 <xTaskPriorityDisinherit+0x10c>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4313      	orrs	r3, r2
 800b788:	4a0d      	ldr	r2, [pc, #52]	@ (800b7c0 <xTaskPriorityDisinherit+0x10c>)
 800b78a:	6013      	str	r3, [r2, #0]
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b790:	4613      	mov	r3, r2
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	4413      	add	r3, r2
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	4a08      	ldr	r2, [pc, #32]	@ (800b7bc <xTaskPriorityDisinherit+0x108>)
 800b79a:	441a      	add	r2, r3
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	3304      	adds	r3, #4
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	4610      	mov	r0, r2
 800b7a4:	f7fe fb92 	bl	8009ecc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7ac:	697b      	ldr	r3, [r7, #20]
	}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	20001dbc 	.word	0x20001dbc
 800b7bc:	20001dc0 	.word	0x20001dc0
 800b7c0:	20001ec4 	.word	0x20001ec4

0800b7c4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800b7ce:	f000 fda3 	bl	800c318 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800b7d2:	4b20      	ldr	r3, [pc, #128]	@ (800b854 <ulTaskNotifyTake+0x90>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d113      	bne.n	800b806 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b7de:	4b1d      	ldr	r3, [pc, #116]	@ (800b854 <ulTaskNotifyTake+0x90>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00b      	beq.n	800b806 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b7ee:	2101      	movs	r1, #1
 800b7f0:	6838      	ldr	r0, [r7, #0]
 800b7f2:	f000 f833 	bl	800b85c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b7f6:	4b18      	ldr	r3, [pc, #96]	@ (800b858 <ulTaskNotifyTake+0x94>)
 800b7f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7fc:	601a      	str	r2, [r3, #0]
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b806:	f000 fdb9 	bl	800c37c <vPortExitCritical>

		taskENTER_CRITICAL();
 800b80a:	f000 fd85 	bl	800c318 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800b80e:	4b11      	ldr	r3, [pc, #68]	@ (800b854 <ulTaskNotifyTake+0x90>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b816:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00e      	beq.n	800b83c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d005      	beq.n	800b830 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800b824:	4b0b      	ldr	r3, [pc, #44]	@ (800b854 <ulTaskNotifyTake+0x90>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2200      	movs	r2, #0
 800b82a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800b82e:	e005      	b.n	800b83c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800b830:	4b08      	ldr	r3, [pc, #32]	@ (800b854 <ulTaskNotifyTake+0x90>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	3a01      	subs	r2, #1
 800b838:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b83c:	4b05      	ldr	r3, [pc, #20]	@ (800b854 <ulTaskNotifyTake+0x90>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2200      	movs	r2, #0
 800b842:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 800b846:	f000 fd99 	bl	800c37c <vPortExitCritical>

		return ulReturn;
 800b84a:	68fb      	ldr	r3, [r7, #12]
	}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3710      	adds	r7, #16
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	20001dbc 	.word	0x20001dbc
 800b858:	e000ed04 	.word	0xe000ed04

0800b85c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b866:	4b29      	ldr	r3, [pc, #164]	@ (800b90c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b86c:	4b28      	ldr	r3, [pc, #160]	@ (800b910 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3304      	adds	r3, #4
 800b872:	4618      	mov	r0, r3
 800b874:	f7fe fb87 	bl	8009f86 <uxListRemove>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10b      	bne.n	800b896 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b87e:	4b24      	ldr	r3, [pc, #144]	@ (800b910 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b884:	2201      	movs	r2, #1
 800b886:	fa02 f303 	lsl.w	r3, r2, r3
 800b88a:	43da      	mvns	r2, r3
 800b88c:	4b21      	ldr	r3, [pc, #132]	@ (800b914 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4013      	ands	r3, r2
 800b892:	4a20      	ldr	r2, [pc, #128]	@ (800b914 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b894:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b89c:	d10a      	bne.n	800b8b4 <prvAddCurrentTaskToDelayedList+0x58>
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d007      	beq.n	800b8b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8a4:	4b1a      	ldr	r3, [pc, #104]	@ (800b910 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	3304      	adds	r3, #4
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	481a      	ldr	r0, [pc, #104]	@ (800b918 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b8ae:	f7fe fb0d 	bl	8009ecc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b8b2:	e026      	b.n	800b902 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b8bc:	4b14      	ldr	r3, [pc, #80]	@ (800b910 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68ba      	ldr	r2, [r7, #8]
 800b8c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d209      	bcs.n	800b8e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8cc:	4b13      	ldr	r3, [pc, #76]	@ (800b91c <prvAddCurrentTaskToDelayedList+0xc0>)
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	4b0f      	ldr	r3, [pc, #60]	@ (800b910 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	4610      	mov	r0, r2
 800b8da:	f7fe fb1b 	bl	8009f14 <vListInsert>
}
 800b8de:	e010      	b.n	800b902 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8e0:	4b0f      	ldr	r3, [pc, #60]	@ (800b920 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	4b0a      	ldr	r3, [pc, #40]	@ (800b910 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3304      	adds	r3, #4
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	f7fe fb11 	bl	8009f14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b924 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d202      	bcs.n	800b902 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b8fc:	4a09      	ldr	r2, [pc, #36]	@ (800b924 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	6013      	str	r3, [r2, #0]
}
 800b902:	bf00      	nop
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	20001ec0 	.word	0x20001ec0
 800b910:	20001dbc 	.word	0x20001dbc
 800b914:	20001ec4 	.word	0x20001ec4
 800b918:	20001ea8 	.word	0x20001ea8
 800b91c:	20001e78 	.word	0x20001e78
 800b920:	20001e74 	.word	0x20001e74
 800b924:	20001edc 	.word	0x20001edc

0800b928 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b08a      	sub	sp, #40	@ 0x28
 800b92c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b92e:	2300      	movs	r3, #0
 800b930:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b932:	f000 fb55 	bl	800bfe0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b936:	4b1d      	ldr	r3, [pc, #116]	@ (800b9ac <xTimerCreateTimerTask+0x84>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d021      	beq.n	800b982 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b93e:	2300      	movs	r3, #0
 800b940:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b942:	2300      	movs	r3, #0
 800b944:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b946:	1d3a      	adds	r2, r7, #4
 800b948:	f107 0108 	add.w	r1, r7, #8
 800b94c:	f107 030c 	add.w	r3, r7, #12
 800b950:	4618      	mov	r0, r3
 800b952:	f7f5 fb0d 	bl	8000f70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b956:	6879      	ldr	r1, [r7, #4]
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	9202      	str	r2, [sp, #8]
 800b95e:	9301      	str	r3, [sp, #4]
 800b960:	2302      	movs	r3, #2
 800b962:	9300      	str	r3, [sp, #0]
 800b964:	2300      	movs	r3, #0
 800b966:	460a      	mov	r2, r1
 800b968:	4911      	ldr	r1, [pc, #68]	@ (800b9b0 <xTimerCreateTimerTask+0x88>)
 800b96a:	4812      	ldr	r0, [pc, #72]	@ (800b9b4 <xTimerCreateTimerTask+0x8c>)
 800b96c:	f7ff f82c 	bl	800a9c8 <xTaskCreateStatic>
 800b970:	4603      	mov	r3, r0
 800b972:	4a11      	ldr	r2, [pc, #68]	@ (800b9b8 <xTimerCreateTimerTask+0x90>)
 800b974:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b976:	4b10      	ldr	r3, [pc, #64]	@ (800b9b8 <xTimerCreateTimerTask+0x90>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d001      	beq.n	800b982 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b97e:	2301      	movs	r3, #1
 800b980:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10b      	bne.n	800b9a0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98c:	f383 8811 	msr	BASEPRI, r3
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	613b      	str	r3, [r7, #16]
}
 800b99a:	bf00      	nop
 800b99c:	bf00      	nop
 800b99e:	e7fd      	b.n	800b99c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b9a0:	697b      	ldr	r3, [r7, #20]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3718      	adds	r7, #24
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	20001f18 	.word	0x20001f18
 800b9b0:	0800edd4 	.word	0x0800edd4
 800b9b4:	0800bbb1 	.word	0x0800bbb1
 800b9b8:	20001f1c 	.word	0x20001f1c

0800b9bc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b088      	sub	sp, #32
 800b9c0:	af02      	add	r7, sp, #8
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
 800b9c8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b9ca:	2028      	movs	r0, #40	@ 0x28
 800b9cc:	f000 fdc6 	bl	800c55c <pvPortMalloc>
 800b9d0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00d      	beq.n	800b9f4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	9301      	str	r3, [sp, #4]
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	68b9      	ldr	r1, [r7, #8]
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f000 f805 	bl	800b9fe <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b9f4:	697b      	ldr	r3, [r7, #20]
	}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3718      	adds	r7, #24
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b086      	sub	sp, #24
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	60f8      	str	r0, [r7, #12]
 800ba06:	60b9      	str	r1, [r7, #8]
 800ba08:	607a      	str	r2, [r7, #4]
 800ba0a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d10b      	bne.n	800ba2a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800ba12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba16:	f383 8811 	msr	BASEPRI, r3
 800ba1a:	f3bf 8f6f 	isb	sy
 800ba1e:	f3bf 8f4f 	dsb	sy
 800ba22:	617b      	str	r3, [r7, #20]
}
 800ba24:	bf00      	nop
 800ba26:	bf00      	nop
 800ba28:	e7fd      	b.n	800ba26 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d01e      	beq.n	800ba6e <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ba30:	f000 fad6 	bl	800bfe0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ba34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba36:	68fa      	ldr	r2, [r7, #12]
 800ba38:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ba40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba42:	683a      	ldr	r2, [r7, #0]
 800ba44:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ba46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba48:	6a3a      	ldr	r2, [r7, #32]
 800ba4a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4e:	3304      	adds	r3, #4
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fe fa2e 	bl	8009eb2 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d008      	beq.n	800ba6e <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ba62:	f043 0304 	orr.w	r3, r3, #4
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ba6e:	bf00      	nop
 800ba70:	3718      	adds	r7, #24
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
	...

0800ba78 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b08a      	sub	sp, #40	@ 0x28
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
 800ba84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba86:	2300      	movs	r3, #0
 800ba88:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d10b      	bne.n	800baa8 <xTimerGenericCommand+0x30>
	__asm volatile
 800ba90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba94:	f383 8811 	msr	BASEPRI, r3
 800ba98:	f3bf 8f6f 	isb	sy
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	623b      	str	r3, [r7, #32]
}
 800baa2:	bf00      	nop
 800baa4:	bf00      	nop
 800baa6:	e7fd      	b.n	800baa4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800baa8:	4b19      	ldr	r3, [pc, #100]	@ (800bb10 <xTimerGenericCommand+0x98>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d02a      	beq.n	800bb06 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	2b05      	cmp	r3, #5
 800bac0:	dc18      	bgt.n	800baf4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bac2:	f7ff fdd9 	bl	800b678 <xTaskGetSchedulerState>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b02      	cmp	r3, #2
 800baca:	d109      	bne.n	800bae0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bacc:	4b10      	ldr	r3, [pc, #64]	@ (800bb10 <xTimerGenericCommand+0x98>)
 800bace:	6818      	ldr	r0, [r3, #0]
 800bad0:	f107 0114 	add.w	r1, r7, #20
 800bad4:	2300      	movs	r3, #0
 800bad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bad8:	f7fe fb86 	bl	800a1e8 <xQueueGenericSend>
 800badc:	6278      	str	r0, [r7, #36]	@ 0x24
 800bade:	e012      	b.n	800bb06 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bae0:	4b0b      	ldr	r3, [pc, #44]	@ (800bb10 <xTimerGenericCommand+0x98>)
 800bae2:	6818      	ldr	r0, [r3, #0]
 800bae4:	f107 0114 	add.w	r1, r7, #20
 800bae8:	2300      	movs	r3, #0
 800baea:	2200      	movs	r2, #0
 800baec:	f7fe fb7c 	bl	800a1e8 <xQueueGenericSend>
 800baf0:	6278      	str	r0, [r7, #36]	@ 0x24
 800baf2:	e008      	b.n	800bb06 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800baf4:	4b06      	ldr	r3, [pc, #24]	@ (800bb10 <xTimerGenericCommand+0x98>)
 800baf6:	6818      	ldr	r0, [r3, #0]
 800baf8:	f107 0114 	add.w	r1, r7, #20
 800bafc:	2300      	movs	r3, #0
 800bafe:	683a      	ldr	r2, [r7, #0]
 800bb00:	f7fe fc74 	bl	800a3ec <xQueueGenericSendFromISR>
 800bb04:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3728      	adds	r7, #40	@ 0x28
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	20001f18 	.word	0x20001f18

0800bb14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b088      	sub	sp, #32
 800bb18:	af02      	add	r7, sp, #8
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb1e:	4b23      	ldr	r3, [pc, #140]	@ (800bbac <prvProcessExpiredTimer+0x98>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7fe fa2a 	bl	8009f86 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bb38:	f003 0304 	and.w	r3, r3, #4
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d023      	beq.n	800bb88 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	699a      	ldr	r2, [r3, #24]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	18d1      	adds	r1, r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	683a      	ldr	r2, [r7, #0]
 800bb4c:	6978      	ldr	r0, [r7, #20]
 800bb4e:	f000 f8d5 	bl	800bcfc <prvInsertTimerInActiveList>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d020      	beq.n	800bb9a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb58:	2300      	movs	r3, #0
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	2100      	movs	r1, #0
 800bb62:	6978      	ldr	r0, [r7, #20]
 800bb64:	f7ff ff88 	bl	800ba78 <xTimerGenericCommand>
 800bb68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d114      	bne.n	800bb9a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bb70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb74:	f383 8811 	msr	BASEPRI, r3
 800bb78:	f3bf 8f6f 	isb	sy
 800bb7c:	f3bf 8f4f 	dsb	sy
 800bb80:	60fb      	str	r3, [r7, #12]
}
 800bb82:	bf00      	nop
 800bb84:	bf00      	nop
 800bb86:	e7fd      	b.n	800bb84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bb8e:	f023 0301 	bic.w	r3, r3, #1
 800bb92:	b2da      	uxtb	r2, r3
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	6a1b      	ldr	r3, [r3, #32]
 800bb9e:	6978      	ldr	r0, [r7, #20]
 800bba0:	4798      	blx	r3
}
 800bba2:	bf00      	nop
 800bba4:	3718      	adds	r7, #24
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	20001f10 	.word	0x20001f10

0800bbb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbb8:	f107 0308 	add.w	r3, r7, #8
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f000 f859 	bl	800bc74 <prvGetNextExpireTime>
 800bbc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f000 f805 	bl	800bbd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bbce:	f000 f8d7 	bl	800bd80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbd2:	bf00      	nop
 800bbd4:	e7f0      	b.n	800bbb8 <prvTimerTask+0x8>
	...

0800bbd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bbe2:	f7ff f947 	bl	800ae74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbe6:	f107 0308 	add.w	r3, r7, #8
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 f866 	bl	800bcbc <prvSampleTimeNow>
 800bbf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d130      	bne.n	800bc5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d10a      	bne.n	800bc14 <prvProcessTimerOrBlockTask+0x3c>
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d806      	bhi.n	800bc14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc06:	f7ff f943 	bl	800ae90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc0a:	68f9      	ldr	r1, [r7, #12]
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f7ff ff81 	bl	800bb14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc12:	e024      	b.n	800bc5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d008      	beq.n	800bc2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc1a:	4b13      	ldr	r3, [pc, #76]	@ (800bc68 <prvProcessTimerOrBlockTask+0x90>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d101      	bne.n	800bc28 <prvProcessTimerOrBlockTask+0x50>
 800bc24:	2301      	movs	r3, #1
 800bc26:	e000      	b.n	800bc2a <prvProcessTimerOrBlockTask+0x52>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc2c:	4b0f      	ldr	r3, [pc, #60]	@ (800bc6c <prvProcessTimerOrBlockTask+0x94>)
 800bc2e:	6818      	ldr	r0, [r3, #0]
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	683a      	ldr	r2, [r7, #0]
 800bc38:	4619      	mov	r1, r3
 800bc3a:	f7fe fe91 	bl	800a960 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc3e:	f7ff f927 	bl	800ae90 <xTaskResumeAll>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d10a      	bne.n	800bc5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc48:	4b09      	ldr	r3, [pc, #36]	@ (800bc70 <prvProcessTimerOrBlockTask+0x98>)
 800bc4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc4e:	601a      	str	r2, [r3, #0]
 800bc50:	f3bf 8f4f 	dsb	sy
 800bc54:	f3bf 8f6f 	isb	sy
}
 800bc58:	e001      	b.n	800bc5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc5a:	f7ff f919 	bl	800ae90 <xTaskResumeAll>
}
 800bc5e:	bf00      	nop
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	20001f14 	.word	0x20001f14
 800bc6c:	20001f18 	.word	0x20001f18
 800bc70:	e000ed04 	.word	0xe000ed04

0800bc74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc7c:	4b0e      	ldr	r3, [pc, #56]	@ (800bcb8 <prvGetNextExpireTime+0x44>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d101      	bne.n	800bc8a <prvGetNextExpireTime+0x16>
 800bc86:	2201      	movs	r2, #1
 800bc88:	e000      	b.n	800bc8c <prvGetNextExpireTime+0x18>
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d105      	bne.n	800bca4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc98:	4b07      	ldr	r3, [pc, #28]	@ (800bcb8 <prvGetNextExpireTime+0x44>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	60fb      	str	r3, [r7, #12]
 800bca2:	e001      	b.n	800bca8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bca4:	2300      	movs	r3, #0
 800bca6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bca8:	68fb      	ldr	r3, [r7, #12]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3714      	adds	r7, #20
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr
 800bcb6:	bf00      	nop
 800bcb8:	20001f10 	.word	0x20001f10

0800bcbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bcc4:	f7ff f982 	bl	800afcc <xTaskGetTickCount>
 800bcc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bcca:	4b0b      	ldr	r3, [pc, #44]	@ (800bcf8 <prvSampleTimeNow+0x3c>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d205      	bcs.n	800bce0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bcd4:	f000 f91e 	bl	800bf14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	e002      	b.n	800bce6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bce6:	4a04      	ldr	r2, [pc, #16]	@ (800bcf8 <prvSampleTimeNow+0x3c>)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bcec:	68fb      	ldr	r3, [r7, #12]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	20001f20 	.word	0x20001f20

0800bcfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b086      	sub	sp, #24
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	607a      	str	r2, [r7, #4]
 800bd08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	68fa      	ldr	r2, [r7, #12]
 800bd18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd1a:	68ba      	ldr	r2, [r7, #8]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d812      	bhi.n	800bd48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	1ad2      	subs	r2, r2, r3
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	699b      	ldr	r3, [r3, #24]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d302      	bcc.n	800bd36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd30:	2301      	movs	r3, #1
 800bd32:	617b      	str	r3, [r7, #20]
 800bd34:	e01b      	b.n	800bd6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd36:	4b10      	ldr	r3, [pc, #64]	@ (800bd78 <prvInsertTimerInActiveList+0x7c>)
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	4619      	mov	r1, r3
 800bd40:	4610      	mov	r0, r2
 800bd42:	f7fe f8e7 	bl	8009f14 <vListInsert>
 800bd46:	e012      	b.n	800bd6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d206      	bcs.n	800bd5e <prvInsertTimerInActiveList+0x62>
 800bd50:	68ba      	ldr	r2, [r7, #8]
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d302      	bcc.n	800bd5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	617b      	str	r3, [r7, #20]
 800bd5c:	e007      	b.n	800bd6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd5e:	4b07      	ldr	r3, [pc, #28]	@ (800bd7c <prvInsertTimerInActiveList+0x80>)
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	3304      	adds	r3, #4
 800bd66:	4619      	mov	r1, r3
 800bd68:	4610      	mov	r0, r2
 800bd6a:	f7fe f8d3 	bl	8009f14 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd6e:	697b      	ldr	r3, [r7, #20]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3718      	adds	r7, #24
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	20001f14 	.word	0x20001f14
 800bd7c:	20001f10 	.word	0x20001f10

0800bd80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b08c      	sub	sp, #48	@ 0x30
 800bd84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd86:	e0b2      	b.n	800beee <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f2c0 80af 	blt.w	800beee <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd96:	695b      	ldr	r3, [r3, #20]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d004      	beq.n	800bda6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9e:	3304      	adds	r3, #4
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7fe f8f0 	bl	8009f86 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bda6:	1d3b      	adds	r3, r7, #4
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7ff ff87 	bl	800bcbc <prvSampleTimeNow>
 800bdae:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	2b09      	cmp	r3, #9
 800bdb4:	f200 8098 	bhi.w	800bee8 <prvProcessReceivedCommands+0x168>
 800bdb8:	a201      	add	r2, pc, #4	@ (adr r2, 800bdc0 <prvProcessReceivedCommands+0x40>)
 800bdba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbe:	bf00      	nop
 800bdc0:	0800bde9 	.word	0x0800bde9
 800bdc4:	0800bde9 	.word	0x0800bde9
 800bdc8:	0800bde9 	.word	0x0800bde9
 800bdcc:	0800be5f 	.word	0x0800be5f
 800bdd0:	0800be73 	.word	0x0800be73
 800bdd4:	0800bebf 	.word	0x0800bebf
 800bdd8:	0800bde9 	.word	0x0800bde9
 800bddc:	0800bde9 	.word	0x0800bde9
 800bde0:	0800be5f 	.word	0x0800be5f
 800bde4:	0800be73 	.word	0x0800be73
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bde8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bdee:	f043 0301 	orr.w	r3, r3, #1
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdfe:	699b      	ldr	r3, [r3, #24]
 800be00:	18d1      	adds	r1, r2, r3
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	6a3a      	ldr	r2, [r7, #32]
 800be06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800be08:	f7ff ff78 	bl	800bcfc <prvInsertTimerInActiveList>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d06c      	beq.n	800beec <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be14:	6a1b      	ldr	r3, [r3, #32]
 800be16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800be18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800be20:	f003 0304 	and.w	r3, r3, #4
 800be24:	2b00      	cmp	r3, #0
 800be26:	d061      	beq.n	800beec <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be2c:	699b      	ldr	r3, [r3, #24]
 800be2e:	441a      	add	r2, r3
 800be30:	2300      	movs	r3, #0
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	2300      	movs	r3, #0
 800be36:	2100      	movs	r1, #0
 800be38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800be3a:	f7ff fe1d 	bl	800ba78 <xTimerGenericCommand>
 800be3e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d152      	bne.n	800beec <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800be46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be4a:	f383 8811 	msr	BASEPRI, r3
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	61bb      	str	r3, [r7, #24]
}
 800be58:	bf00      	nop
 800be5a:	bf00      	nop
 800be5c:	e7fd      	b.n	800be5a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800be64:	f023 0301 	bic.w	r3, r3, #1
 800be68:	b2da      	uxtb	r2, r3
 800be6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800be70:	e03d      	b.n	800beee <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800be78:	f043 0301 	orr.w	r3, r3, #1
 800be7c:	b2da      	uxtb	r2, r3
 800be7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be88:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800be8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8c:	699b      	ldr	r3, [r3, #24]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d10b      	bne.n	800beaa <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800be92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be96:	f383 8811 	msr	BASEPRI, r3
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	617b      	str	r3, [r7, #20]
}
 800bea4:	bf00      	nop
 800bea6:	bf00      	nop
 800bea8:	e7fd      	b.n	800bea6 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800beaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beac:	699a      	ldr	r2, [r3, #24]
 800beae:	6a3b      	ldr	r3, [r7, #32]
 800beb0:	18d1      	adds	r1, r2, r3
 800beb2:	6a3b      	ldr	r3, [r7, #32]
 800beb4:	6a3a      	ldr	r2, [r7, #32]
 800beb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800beb8:	f7ff ff20 	bl	800bcfc <prvInsertTimerInActiveList>
					break;
 800bebc:	e017      	b.n	800beee <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bec4:	f003 0302 	and.w	r3, r3, #2
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d103      	bne.n	800bed4 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800becc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bece:	f000 fc13 	bl	800c6f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bed2:	e00c      	b.n	800beee <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bed6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800beda:	f023 0301 	bic.w	r3, r3, #1
 800bede:	b2da      	uxtb	r2, r3
 800bee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800bee6:	e002      	b.n	800beee <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800bee8:	bf00      	nop
 800beea:	e000      	b.n	800beee <prvProcessReceivedCommands+0x16e>
					break;
 800beec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800beee:	4b08      	ldr	r3, [pc, #32]	@ (800bf10 <prvProcessReceivedCommands+0x190>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f107 0108 	add.w	r1, r7, #8
 800bef6:	2200      	movs	r2, #0
 800bef8:	4618      	mov	r0, r3
 800befa:	f7fe fb15 	bl	800a528 <xQueueReceive>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f47f af41 	bne.w	800bd88 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bf06:	bf00      	nop
 800bf08:	bf00      	nop
 800bf0a:	3728      	adds	r7, #40	@ 0x28
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	20001f18 	.word	0x20001f18

0800bf14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b088      	sub	sp, #32
 800bf18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf1a:	e049      	b.n	800bfb0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf1c:	4b2e      	ldr	r3, [pc, #184]	@ (800bfd8 <prvSwitchTimerLists+0xc4>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf26:	4b2c      	ldr	r3, [pc, #176]	@ (800bfd8 <prvSwitchTimerLists+0xc4>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	3304      	adds	r3, #4
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fe f826 	bl	8009f86 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6a1b      	ldr	r3, [r3, #32]
 800bf3e:	68f8      	ldr	r0, [r7, #12]
 800bf40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bf48:	f003 0304 	and.w	r3, r3, #4
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d02f      	beq.n	800bfb0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	699b      	ldr	r3, [r3, #24]
 800bf54:	693a      	ldr	r2, [r7, #16]
 800bf56:	4413      	add	r3, r2
 800bf58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bf5a:	68ba      	ldr	r2, [r7, #8]
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d90e      	bls.n	800bf80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	68ba      	ldr	r2, [r7, #8]
 800bf66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf6e:	4b1a      	ldr	r3, [pc, #104]	@ (800bfd8 <prvSwitchTimerLists+0xc4>)
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	3304      	adds	r3, #4
 800bf76:	4619      	mov	r1, r3
 800bf78:	4610      	mov	r0, r2
 800bf7a:	f7fd ffcb 	bl	8009f14 <vListInsert>
 800bf7e:	e017      	b.n	800bfb0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf80:	2300      	movs	r3, #0
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	2300      	movs	r3, #0
 800bf86:	693a      	ldr	r2, [r7, #16]
 800bf88:	2100      	movs	r1, #0
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f7ff fd74 	bl	800ba78 <xTimerGenericCommand>
 800bf90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d10b      	bne.n	800bfb0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bf98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf9c:	f383 8811 	msr	BASEPRI, r3
 800bfa0:	f3bf 8f6f 	isb	sy
 800bfa4:	f3bf 8f4f 	dsb	sy
 800bfa8:	603b      	str	r3, [r7, #0]
}
 800bfaa:	bf00      	nop
 800bfac:	bf00      	nop
 800bfae:	e7fd      	b.n	800bfac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bfb0:	4b09      	ldr	r3, [pc, #36]	@ (800bfd8 <prvSwitchTimerLists+0xc4>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1b0      	bne.n	800bf1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bfba:	4b07      	ldr	r3, [pc, #28]	@ (800bfd8 <prvSwitchTimerLists+0xc4>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bfc0:	4b06      	ldr	r3, [pc, #24]	@ (800bfdc <prvSwitchTimerLists+0xc8>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a04      	ldr	r2, [pc, #16]	@ (800bfd8 <prvSwitchTimerLists+0xc4>)
 800bfc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bfc8:	4a04      	ldr	r2, [pc, #16]	@ (800bfdc <prvSwitchTimerLists+0xc8>)
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	6013      	str	r3, [r2, #0]
}
 800bfce:	bf00      	nop
 800bfd0:	3718      	adds	r7, #24
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	20001f10 	.word	0x20001f10
 800bfdc:	20001f14 	.word	0x20001f14

0800bfe0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bfe6:	f000 f997 	bl	800c318 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bfea:	4b15      	ldr	r3, [pc, #84]	@ (800c040 <prvCheckForValidListAndQueue+0x60>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d120      	bne.n	800c034 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bff2:	4814      	ldr	r0, [pc, #80]	@ (800c044 <prvCheckForValidListAndQueue+0x64>)
 800bff4:	f7fd ff3d 	bl	8009e72 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bff8:	4813      	ldr	r0, [pc, #76]	@ (800c048 <prvCheckForValidListAndQueue+0x68>)
 800bffa:	f7fd ff3a 	bl	8009e72 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bffe:	4b13      	ldr	r3, [pc, #76]	@ (800c04c <prvCheckForValidListAndQueue+0x6c>)
 800c000:	4a10      	ldr	r2, [pc, #64]	@ (800c044 <prvCheckForValidListAndQueue+0x64>)
 800c002:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c004:	4b12      	ldr	r3, [pc, #72]	@ (800c050 <prvCheckForValidListAndQueue+0x70>)
 800c006:	4a10      	ldr	r2, [pc, #64]	@ (800c048 <prvCheckForValidListAndQueue+0x68>)
 800c008:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c00a:	2300      	movs	r3, #0
 800c00c:	9300      	str	r3, [sp, #0]
 800c00e:	4b11      	ldr	r3, [pc, #68]	@ (800c054 <prvCheckForValidListAndQueue+0x74>)
 800c010:	4a11      	ldr	r2, [pc, #68]	@ (800c058 <prvCheckForValidListAndQueue+0x78>)
 800c012:	210c      	movs	r1, #12
 800c014:	200a      	movs	r0, #10
 800c016:	f7fe f84b 	bl	800a0b0 <xQueueGenericCreateStatic>
 800c01a:	4603      	mov	r3, r0
 800c01c:	4a08      	ldr	r2, [pc, #32]	@ (800c040 <prvCheckForValidListAndQueue+0x60>)
 800c01e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c020:	4b07      	ldr	r3, [pc, #28]	@ (800c040 <prvCheckForValidListAndQueue+0x60>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d005      	beq.n	800c034 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c028:	4b05      	ldr	r3, [pc, #20]	@ (800c040 <prvCheckForValidListAndQueue+0x60>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	490b      	ldr	r1, [pc, #44]	@ (800c05c <prvCheckForValidListAndQueue+0x7c>)
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fe fc6c 	bl	800a90c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c034:	f000 f9a2 	bl	800c37c <vPortExitCritical>
}
 800c038:	bf00      	nop
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	20001f18 	.word	0x20001f18
 800c044:	20001ee8 	.word	0x20001ee8
 800c048:	20001efc 	.word	0x20001efc
 800c04c:	20001f10 	.word	0x20001f10
 800c050:	20001f14 	.word	0x20001f14
 800c054:	20001f9c 	.word	0x20001f9c
 800c058:	20001f24 	.word	0x20001f24
 800c05c:	0800eddc 	.word	0x0800eddc

0800c060 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d10b      	bne.n	800c08a <xTimerIsTimerActive+0x2a>
	__asm volatile
 800c072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c076:	f383 8811 	msr	BASEPRI, r3
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	60fb      	str	r3, [r7, #12]
}
 800c084:	bf00      	nop
 800c086:	bf00      	nop
 800c088:	e7fd      	b.n	800c086 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800c08a:	f000 f945 	bl	800c318 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c094:	f003 0301 	and.w	r3, r3, #1
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d102      	bne.n	800c0a2 <xTimerIsTimerActive+0x42>
		{
			xReturn = pdFALSE;
 800c09c:	2300      	movs	r3, #0
 800c09e:	617b      	str	r3, [r7, #20]
 800c0a0:	e001      	b.n	800c0a6 <xTimerIsTimerActive+0x46>
		}
		else
		{
			xReturn = pdTRUE;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800c0a6:	f000 f969 	bl	800c37c <vPortExitCritical>

	return xReturn;
 800c0aa:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3718      	adds	r7, #24
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	3b04      	subs	r3, #4
 800c0c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c0cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3b04      	subs	r3, #4
 800c0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	f023 0201 	bic.w	r2, r3, #1
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3b04      	subs	r3, #4
 800c0e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0e4:	4a0c      	ldr	r2, [pc, #48]	@ (800c118 <pxPortInitialiseStack+0x64>)
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	3b14      	subs	r3, #20
 800c0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	3b04      	subs	r3, #4
 800c0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f06f 0202 	mvn.w	r2, #2
 800c102:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	3b20      	subs	r3, #32
 800c108:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c10a:	68fb      	ldr	r3, [r7, #12]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	0800c11d 	.word	0x0800c11d

0800c11c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c126:	4b13      	ldr	r3, [pc, #76]	@ (800c174 <prvTaskExitError+0x58>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c12e:	d00b      	beq.n	800c148 <prvTaskExitError+0x2c>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	60fb      	str	r3, [r7, #12]
}
 800c142:	bf00      	nop
 800c144:	bf00      	nop
 800c146:	e7fd      	b.n	800c144 <prvTaskExitError+0x28>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	60bb      	str	r3, [r7, #8]
}
 800c15a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c15c:	bf00      	nop
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d0fc      	beq.n	800c15e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c164:	bf00      	nop
 800c166:	bf00      	nop
 800c168:	3714      	adds	r7, #20
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	2000000c 	.word	0x2000000c
	...

0800c180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c180:	4b07      	ldr	r3, [pc, #28]	@ (800c1a0 <pxCurrentTCBConst2>)
 800c182:	6819      	ldr	r1, [r3, #0]
 800c184:	6808      	ldr	r0, [r1, #0]
 800c186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18a:	f380 8809 	msr	PSP, r0
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	f04f 0000 	mov.w	r0, #0
 800c196:	f380 8811 	msr	BASEPRI, r0
 800c19a:	4770      	bx	lr
 800c19c:	f3af 8000 	nop.w

0800c1a0 <pxCurrentTCBConst2>:
 800c1a0:	20001dbc 	.word	0x20001dbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c1a4:	bf00      	nop
 800c1a6:	bf00      	nop

0800c1a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c1a8:	4808      	ldr	r0, [pc, #32]	@ (800c1cc <prvPortStartFirstTask+0x24>)
 800c1aa:	6800      	ldr	r0, [r0, #0]
 800c1ac:	6800      	ldr	r0, [r0, #0]
 800c1ae:	f380 8808 	msr	MSP, r0
 800c1b2:	f04f 0000 	mov.w	r0, #0
 800c1b6:	f380 8814 	msr	CONTROL, r0
 800c1ba:	b662      	cpsie	i
 800c1bc:	b661      	cpsie	f
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	df00      	svc	0
 800c1c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c1ca:	bf00      	nop
 800c1cc:	e000ed08 	.word	0xe000ed08

0800c1d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c1d6:	4b47      	ldr	r3, [pc, #284]	@ (800c2f4 <xPortStartScheduler+0x124>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a47      	ldr	r2, [pc, #284]	@ (800c2f8 <xPortStartScheduler+0x128>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d10b      	bne.n	800c1f8 <xPortStartScheduler+0x28>
	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	613b      	str	r3, [r7, #16]
}
 800c1f2:	bf00      	nop
 800c1f4:	bf00      	nop
 800c1f6:	e7fd      	b.n	800c1f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c1f8:	4b3e      	ldr	r3, [pc, #248]	@ (800c2f4 <xPortStartScheduler+0x124>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a3f      	ldr	r2, [pc, #252]	@ (800c2fc <xPortStartScheduler+0x12c>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d10b      	bne.n	800c21a <xPortStartScheduler+0x4a>
	__asm volatile
 800c202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c206:	f383 8811 	msr	BASEPRI, r3
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	60fb      	str	r3, [r7, #12]
}
 800c214:	bf00      	nop
 800c216:	bf00      	nop
 800c218:	e7fd      	b.n	800c216 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c21a:	4b39      	ldr	r3, [pc, #228]	@ (800c300 <xPortStartScheduler+0x130>)
 800c21c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	b2db      	uxtb	r3, r3
 800c224:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	22ff      	movs	r2, #255	@ 0xff
 800c22a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	b2db      	uxtb	r3, r3
 800c232:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c234:	78fb      	ldrb	r3, [r7, #3]
 800c236:	b2db      	uxtb	r3, r3
 800c238:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c23c:	b2da      	uxtb	r2, r3
 800c23e:	4b31      	ldr	r3, [pc, #196]	@ (800c304 <xPortStartScheduler+0x134>)
 800c240:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c242:	4b31      	ldr	r3, [pc, #196]	@ (800c308 <xPortStartScheduler+0x138>)
 800c244:	2207      	movs	r2, #7
 800c246:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c248:	e009      	b.n	800c25e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c24a:	4b2f      	ldr	r3, [pc, #188]	@ (800c308 <xPortStartScheduler+0x138>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	3b01      	subs	r3, #1
 800c250:	4a2d      	ldr	r2, [pc, #180]	@ (800c308 <xPortStartScheduler+0x138>)
 800c252:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c254:	78fb      	ldrb	r3, [r7, #3]
 800c256:	b2db      	uxtb	r3, r3
 800c258:	005b      	lsls	r3, r3, #1
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c25e:	78fb      	ldrb	r3, [r7, #3]
 800c260:	b2db      	uxtb	r3, r3
 800c262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c266:	2b80      	cmp	r3, #128	@ 0x80
 800c268:	d0ef      	beq.n	800c24a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c26a:	4b27      	ldr	r3, [pc, #156]	@ (800c308 <xPortStartScheduler+0x138>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f1c3 0307 	rsb	r3, r3, #7
 800c272:	2b04      	cmp	r3, #4
 800c274:	d00b      	beq.n	800c28e <xPortStartScheduler+0xbe>
	__asm volatile
 800c276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	60bb      	str	r3, [r7, #8]
}
 800c288:	bf00      	nop
 800c28a:	bf00      	nop
 800c28c:	e7fd      	b.n	800c28a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c28e:	4b1e      	ldr	r3, [pc, #120]	@ (800c308 <xPortStartScheduler+0x138>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	021b      	lsls	r3, r3, #8
 800c294:	4a1c      	ldr	r2, [pc, #112]	@ (800c308 <xPortStartScheduler+0x138>)
 800c296:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c298:	4b1b      	ldr	r3, [pc, #108]	@ (800c308 <xPortStartScheduler+0x138>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c2a0:	4a19      	ldr	r2, [pc, #100]	@ (800c308 <xPortStartScheduler+0x138>)
 800c2a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	b2da      	uxtb	r2, r3
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c2ac:	4b17      	ldr	r3, [pc, #92]	@ (800c30c <xPortStartScheduler+0x13c>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a16      	ldr	r2, [pc, #88]	@ (800c30c <xPortStartScheduler+0x13c>)
 800c2b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c2b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c2b8:	4b14      	ldr	r3, [pc, #80]	@ (800c30c <xPortStartScheduler+0x13c>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a13      	ldr	r2, [pc, #76]	@ (800c30c <xPortStartScheduler+0x13c>)
 800c2be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c2c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c2c4:	f000 f8da 	bl	800c47c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c2c8:	4b11      	ldr	r3, [pc, #68]	@ (800c310 <xPortStartScheduler+0x140>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c2ce:	f000 f8f9 	bl	800c4c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c2d2:	4b10      	ldr	r3, [pc, #64]	@ (800c314 <xPortStartScheduler+0x144>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a0f      	ldr	r2, [pc, #60]	@ (800c314 <xPortStartScheduler+0x144>)
 800c2d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c2dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c2de:	f7ff ff63 	bl	800c1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c2e2:	f7fe ff3d 	bl	800b160 <vTaskSwitchContext>
	prvTaskExitError();
 800c2e6:	f7ff ff19 	bl	800c11c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3718      	adds	r7, #24
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	e000ed00 	.word	0xe000ed00
 800c2f8:	410fc271 	.word	0x410fc271
 800c2fc:	410fc270 	.word	0x410fc270
 800c300:	e000e400 	.word	0xe000e400
 800c304:	20001fe4 	.word	0x20001fe4
 800c308:	20001fe8 	.word	0x20001fe8
 800c30c:	e000ed20 	.word	0xe000ed20
 800c310:	2000000c 	.word	0x2000000c
 800c314:	e000ef34 	.word	0xe000ef34

0800c318 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	607b      	str	r3, [r7, #4]
}
 800c330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c332:	4b10      	ldr	r3, [pc, #64]	@ (800c374 <vPortEnterCritical+0x5c>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3301      	adds	r3, #1
 800c338:	4a0e      	ldr	r2, [pc, #56]	@ (800c374 <vPortEnterCritical+0x5c>)
 800c33a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c33c:	4b0d      	ldr	r3, [pc, #52]	@ (800c374 <vPortEnterCritical+0x5c>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2b01      	cmp	r3, #1
 800c342:	d110      	bne.n	800c366 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c344:	4b0c      	ldr	r3, [pc, #48]	@ (800c378 <vPortEnterCritical+0x60>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00b      	beq.n	800c366 <vPortEnterCritical+0x4e>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	603b      	str	r3, [r7, #0]
}
 800c360:	bf00      	nop
 800c362:	bf00      	nop
 800c364:	e7fd      	b.n	800c362 <vPortEnterCritical+0x4a>
	}
}
 800c366:	bf00      	nop
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	2000000c 	.word	0x2000000c
 800c378:	e000ed04 	.word	0xe000ed04

0800c37c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c382:	4b12      	ldr	r3, [pc, #72]	@ (800c3cc <vPortExitCritical+0x50>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d10b      	bne.n	800c3a2 <vPortExitCritical+0x26>
	__asm volatile
 800c38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c38e:	f383 8811 	msr	BASEPRI, r3
 800c392:	f3bf 8f6f 	isb	sy
 800c396:	f3bf 8f4f 	dsb	sy
 800c39a:	607b      	str	r3, [r7, #4]
}
 800c39c:	bf00      	nop
 800c39e:	bf00      	nop
 800c3a0:	e7fd      	b.n	800c39e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c3a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c3cc <vPortExitCritical+0x50>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	4a08      	ldr	r2, [pc, #32]	@ (800c3cc <vPortExitCritical+0x50>)
 800c3aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c3ac:	4b07      	ldr	r3, [pc, #28]	@ (800c3cc <vPortExitCritical+0x50>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d105      	bne.n	800c3c0 <vPortExitCritical+0x44>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	f383 8811 	msr	BASEPRI, r3
}
 800c3be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c3c0:	bf00      	nop
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	2000000c 	.word	0x2000000c

0800c3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c3d0:	f3ef 8009 	mrs	r0, PSP
 800c3d4:	f3bf 8f6f 	isb	sy
 800c3d8:	4b15      	ldr	r3, [pc, #84]	@ (800c430 <pxCurrentTCBConst>)
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	f01e 0f10 	tst.w	lr, #16
 800c3e0:	bf08      	it	eq
 800c3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ea:	6010      	str	r0, [r2, #0]
 800c3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c3f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c3f4:	f380 8811 	msr	BASEPRI, r0
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	f3bf 8f6f 	isb	sy
 800c400:	f7fe feae 	bl	800b160 <vTaskSwitchContext>
 800c404:	f04f 0000 	mov.w	r0, #0
 800c408:	f380 8811 	msr	BASEPRI, r0
 800c40c:	bc09      	pop	{r0, r3}
 800c40e:	6819      	ldr	r1, [r3, #0]
 800c410:	6808      	ldr	r0, [r1, #0]
 800c412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c416:	f01e 0f10 	tst.w	lr, #16
 800c41a:	bf08      	it	eq
 800c41c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c420:	f380 8809 	msr	PSP, r0
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	f3af 8000 	nop.w

0800c430 <pxCurrentTCBConst>:
 800c430:	20001dbc 	.word	0x20001dbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c434:	bf00      	nop
 800c436:	bf00      	nop

0800c438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	607b      	str	r3, [r7, #4]
}
 800c450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c452:	f7fe fdcb 	bl	800afec <xTaskIncrementTick>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d003      	beq.n	800c464 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c45c:	4b06      	ldr	r3, [pc, #24]	@ (800c478 <SysTick_Handler+0x40>)
 800c45e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c462:	601a      	str	r2, [r3, #0]
 800c464:	2300      	movs	r3, #0
 800c466:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	f383 8811 	msr	BASEPRI, r3
}
 800c46e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c470:	bf00      	nop
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	e000ed04 	.word	0xe000ed04

0800c47c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c47c:	b480      	push	{r7}
 800c47e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c480:	4b0b      	ldr	r3, [pc, #44]	@ (800c4b0 <vPortSetupTimerInterrupt+0x34>)
 800c482:	2200      	movs	r2, #0
 800c484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c486:	4b0b      	ldr	r3, [pc, #44]	@ (800c4b4 <vPortSetupTimerInterrupt+0x38>)
 800c488:	2200      	movs	r2, #0
 800c48a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c48c:	4b0a      	ldr	r3, [pc, #40]	@ (800c4b8 <vPortSetupTimerInterrupt+0x3c>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a0a      	ldr	r2, [pc, #40]	@ (800c4bc <vPortSetupTimerInterrupt+0x40>)
 800c492:	fba2 2303 	umull	r2, r3, r2, r3
 800c496:	099b      	lsrs	r3, r3, #6
 800c498:	4a09      	ldr	r2, [pc, #36]	@ (800c4c0 <vPortSetupTimerInterrupt+0x44>)
 800c49a:	3b01      	subs	r3, #1
 800c49c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c49e:	4b04      	ldr	r3, [pc, #16]	@ (800c4b0 <vPortSetupTimerInterrupt+0x34>)
 800c4a0:	2207      	movs	r2, #7
 800c4a2:	601a      	str	r2, [r3, #0]
}
 800c4a4:	bf00      	nop
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	e000e010 	.word	0xe000e010
 800c4b4:	e000e018 	.word	0xe000e018
 800c4b8:	20000000 	.word	0x20000000
 800c4bc:	10624dd3 	.word	0x10624dd3
 800c4c0:	e000e014 	.word	0xe000e014

0800c4c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c4c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c4d4 <vPortEnableVFP+0x10>
 800c4c8:	6801      	ldr	r1, [r0, #0]
 800c4ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c4ce:	6001      	str	r1, [r0, #0]
 800c4d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c4d2:	bf00      	nop
 800c4d4:	e000ed88 	.word	0xe000ed88

0800c4d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c4de:	f3ef 8305 	mrs	r3, IPSR
 800c4e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2b0f      	cmp	r3, #15
 800c4e8:	d915      	bls.n	800c516 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4ea:	4a18      	ldr	r2, [pc, #96]	@ (800c54c <vPortValidateInterruptPriority+0x74>)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4f4:	4b16      	ldr	r3, [pc, #88]	@ (800c550 <vPortValidateInterruptPriority+0x78>)
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	7afa      	ldrb	r2, [r7, #11]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d20b      	bcs.n	800c516 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	607b      	str	r3, [r7, #4]
}
 800c510:	bf00      	nop
 800c512:	bf00      	nop
 800c514:	e7fd      	b.n	800c512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c516:	4b0f      	ldr	r3, [pc, #60]	@ (800c554 <vPortValidateInterruptPriority+0x7c>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c51e:	4b0e      	ldr	r3, [pc, #56]	@ (800c558 <vPortValidateInterruptPriority+0x80>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	429a      	cmp	r2, r3
 800c524:	d90b      	bls.n	800c53e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52a:	f383 8811 	msr	BASEPRI, r3
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	603b      	str	r3, [r7, #0]
}
 800c538:	bf00      	nop
 800c53a:	bf00      	nop
 800c53c:	e7fd      	b.n	800c53a <vPortValidateInterruptPriority+0x62>
	}
 800c53e:	bf00      	nop
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	e000e3f0 	.word	0xe000e3f0
 800c550:	20001fe4 	.word	0x20001fe4
 800c554:	e000ed0c 	.word	0xe000ed0c
 800c558:	20001fe8 	.word	0x20001fe8

0800c55c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b08a      	sub	sp, #40	@ 0x28
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c564:	2300      	movs	r3, #0
 800c566:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c568:	f7fe fc84 	bl	800ae74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c56c:	4b5c      	ldr	r3, [pc, #368]	@ (800c6e0 <pvPortMalloc+0x184>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d101      	bne.n	800c578 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c574:	f000 f924 	bl	800c7c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c578:	4b5a      	ldr	r3, [pc, #360]	@ (800c6e4 <pvPortMalloc+0x188>)
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	4013      	ands	r3, r2
 800c580:	2b00      	cmp	r3, #0
 800c582:	f040 8095 	bne.w	800c6b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d01e      	beq.n	800c5ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c58c:	2208      	movs	r2, #8
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4413      	add	r3, r2
 800c592:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f003 0307 	and.w	r3, r3, #7
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d015      	beq.n	800c5ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f023 0307 	bic.w	r3, r3, #7
 800c5a4:	3308      	adds	r3, #8
 800c5a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f003 0307 	and.w	r3, r3, #7
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00b      	beq.n	800c5ca <pvPortMalloc+0x6e>
	__asm volatile
 800c5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b6:	f383 8811 	msr	BASEPRI, r3
 800c5ba:	f3bf 8f6f 	isb	sy
 800c5be:	f3bf 8f4f 	dsb	sy
 800c5c2:	617b      	str	r3, [r7, #20]
}
 800c5c4:	bf00      	nop
 800c5c6:	bf00      	nop
 800c5c8:	e7fd      	b.n	800c5c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d06f      	beq.n	800c6b0 <pvPortMalloc+0x154>
 800c5d0:	4b45      	ldr	r3, [pc, #276]	@ (800c6e8 <pvPortMalloc+0x18c>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d86a      	bhi.n	800c6b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5da:	4b44      	ldr	r3, [pc, #272]	@ (800c6ec <pvPortMalloc+0x190>)
 800c5dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5de:	4b43      	ldr	r3, [pc, #268]	@ (800c6ec <pvPortMalloc+0x190>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5e4:	e004      	b.n	800c5f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d903      	bls.n	800c602 <pvPortMalloc+0xa6>
 800c5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1f1      	bne.n	800c5e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c602:	4b37      	ldr	r3, [pc, #220]	@ (800c6e0 <pvPortMalloc+0x184>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c608:	429a      	cmp	r2, r3
 800c60a:	d051      	beq.n	800c6b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c60c:	6a3b      	ldr	r3, [r7, #32]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2208      	movs	r2, #8
 800c612:	4413      	add	r3, r2
 800c614:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	6a3b      	ldr	r3, [r7, #32]
 800c61c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c620:	685a      	ldr	r2, [r3, #4]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	1ad2      	subs	r2, r2, r3
 800c626:	2308      	movs	r3, #8
 800c628:	005b      	lsls	r3, r3, #1
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d920      	bls.n	800c670 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c62e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	4413      	add	r3, r2
 800c634:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c636:	69bb      	ldr	r3, [r7, #24]
 800c638:	f003 0307 	and.w	r3, r3, #7
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d00b      	beq.n	800c658 <pvPortMalloc+0xfc>
	__asm volatile
 800c640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c644:	f383 8811 	msr	BASEPRI, r3
 800c648:	f3bf 8f6f 	isb	sy
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	613b      	str	r3, [r7, #16]
}
 800c652:	bf00      	nop
 800c654:	bf00      	nop
 800c656:	e7fd      	b.n	800c654 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	1ad2      	subs	r2, r2, r3
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c66a:	69b8      	ldr	r0, [r7, #24]
 800c66c:	f000 f90a 	bl	800c884 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c670:	4b1d      	ldr	r3, [pc, #116]	@ (800c6e8 <pvPortMalloc+0x18c>)
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	4a1b      	ldr	r2, [pc, #108]	@ (800c6e8 <pvPortMalloc+0x18c>)
 800c67c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c67e:	4b1a      	ldr	r3, [pc, #104]	@ (800c6e8 <pvPortMalloc+0x18c>)
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	4b1b      	ldr	r3, [pc, #108]	@ (800c6f0 <pvPortMalloc+0x194>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	429a      	cmp	r2, r3
 800c688:	d203      	bcs.n	800c692 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c68a:	4b17      	ldr	r3, [pc, #92]	@ (800c6e8 <pvPortMalloc+0x18c>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a18      	ldr	r2, [pc, #96]	@ (800c6f0 <pvPortMalloc+0x194>)
 800c690:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c694:	685a      	ldr	r2, [r3, #4]
 800c696:	4b13      	ldr	r3, [pc, #76]	@ (800c6e4 <pvPortMalloc+0x188>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	431a      	orrs	r2, r3
 800c69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c6a6:	4b13      	ldr	r3, [pc, #76]	@ (800c6f4 <pvPortMalloc+0x198>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	4a11      	ldr	r2, [pc, #68]	@ (800c6f4 <pvPortMalloc+0x198>)
 800c6ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c6b0:	f7fe fbee 	bl	800ae90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	f003 0307 	and.w	r3, r3, #7
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00b      	beq.n	800c6d6 <pvPortMalloc+0x17a>
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	60fb      	str	r3, [r7, #12]
}
 800c6d0:	bf00      	nop
 800c6d2:	bf00      	nop
 800c6d4:	e7fd      	b.n	800c6d2 <pvPortMalloc+0x176>
	return pvReturn;
 800c6d6:	69fb      	ldr	r3, [r7, #28]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3728      	adds	r7, #40	@ 0x28
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	20002bf4 	.word	0x20002bf4
 800c6e4:	20002c08 	.word	0x20002c08
 800c6e8:	20002bf8 	.word	0x20002bf8
 800c6ec:	20002bec 	.word	0x20002bec
 800c6f0:	20002bfc 	.word	0x20002bfc
 800c6f4:	20002c00 	.word	0x20002c00

0800c6f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b086      	sub	sp, #24
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d04f      	beq.n	800c7aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c70a:	2308      	movs	r3, #8
 800c70c:	425b      	negs	r3, r3
 800c70e:	697a      	ldr	r2, [r7, #20]
 800c710:	4413      	add	r3, r2
 800c712:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	685a      	ldr	r2, [r3, #4]
 800c71c:	4b25      	ldr	r3, [pc, #148]	@ (800c7b4 <vPortFree+0xbc>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4013      	ands	r3, r2
 800c722:	2b00      	cmp	r3, #0
 800c724:	d10b      	bne.n	800c73e <vPortFree+0x46>
	__asm volatile
 800c726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c72a:	f383 8811 	msr	BASEPRI, r3
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	60fb      	str	r3, [r7, #12]
}
 800c738:	bf00      	nop
 800c73a:	bf00      	nop
 800c73c:	e7fd      	b.n	800c73a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00b      	beq.n	800c75e <vPortFree+0x66>
	__asm volatile
 800c746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	60bb      	str	r3, [r7, #8]
}
 800c758:	bf00      	nop
 800c75a:	bf00      	nop
 800c75c:	e7fd      	b.n	800c75a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	685a      	ldr	r2, [r3, #4]
 800c762:	4b14      	ldr	r3, [pc, #80]	@ (800c7b4 <vPortFree+0xbc>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4013      	ands	r3, r2
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d01e      	beq.n	800c7aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d11a      	bne.n	800c7aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	685a      	ldr	r2, [r3, #4]
 800c778:	4b0e      	ldr	r3, [pc, #56]	@ (800c7b4 <vPortFree+0xbc>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	43db      	mvns	r3, r3
 800c77e:	401a      	ands	r2, r3
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c784:	f7fe fb76 	bl	800ae74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	685a      	ldr	r2, [r3, #4]
 800c78c:	4b0a      	ldr	r3, [pc, #40]	@ (800c7b8 <vPortFree+0xc0>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4413      	add	r3, r2
 800c792:	4a09      	ldr	r2, [pc, #36]	@ (800c7b8 <vPortFree+0xc0>)
 800c794:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c796:	6938      	ldr	r0, [r7, #16]
 800c798:	f000 f874 	bl	800c884 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c79c:	4b07      	ldr	r3, [pc, #28]	@ (800c7bc <vPortFree+0xc4>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	4a06      	ldr	r2, [pc, #24]	@ (800c7bc <vPortFree+0xc4>)
 800c7a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c7a6:	f7fe fb73 	bl	800ae90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c7aa:	bf00      	nop
 800c7ac:	3718      	adds	r7, #24
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	20002c08 	.word	0x20002c08
 800c7b8:	20002bf8 	.word	0x20002bf8
 800c7bc:	20002c04 	.word	0x20002c04

0800c7c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c7c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c7ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7cc:	4b27      	ldr	r3, [pc, #156]	@ (800c86c <prvHeapInit+0xac>)
 800c7ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f003 0307 	and.w	r3, r3, #7
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00c      	beq.n	800c7f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	3307      	adds	r3, #7
 800c7de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	f023 0307 	bic.w	r3, r3, #7
 800c7e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	1ad3      	subs	r3, r2, r3
 800c7ee:	4a1f      	ldr	r2, [pc, #124]	@ (800c86c <prvHeapInit+0xac>)
 800c7f0:	4413      	add	r3, r2
 800c7f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c870 <prvHeapInit+0xb0>)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7fe:	4b1c      	ldr	r3, [pc, #112]	@ (800c870 <prvHeapInit+0xb0>)
 800c800:	2200      	movs	r2, #0
 800c802:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	4413      	add	r3, r2
 800c80a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c80c:	2208      	movs	r2, #8
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	1a9b      	subs	r3, r3, r2
 800c812:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f023 0307 	bic.w	r3, r3, #7
 800c81a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	4a15      	ldr	r2, [pc, #84]	@ (800c874 <prvHeapInit+0xb4>)
 800c820:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c822:	4b14      	ldr	r3, [pc, #80]	@ (800c874 <prvHeapInit+0xb4>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2200      	movs	r2, #0
 800c828:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c82a:	4b12      	ldr	r3, [pc, #72]	@ (800c874 <prvHeapInit+0xb4>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2200      	movs	r2, #0
 800c830:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	1ad2      	subs	r2, r2, r3
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c840:	4b0c      	ldr	r3, [pc, #48]	@ (800c874 <prvHeapInit+0xb4>)
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	4a0a      	ldr	r2, [pc, #40]	@ (800c878 <prvHeapInit+0xb8>)
 800c84e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	4a09      	ldr	r2, [pc, #36]	@ (800c87c <prvHeapInit+0xbc>)
 800c856:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c858:	4b09      	ldr	r3, [pc, #36]	@ (800c880 <prvHeapInit+0xc0>)
 800c85a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c85e:	601a      	str	r2, [r3, #0]
}
 800c860:	bf00      	nop
 800c862:	3714      	adds	r7, #20
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr
 800c86c:	20001fec 	.word	0x20001fec
 800c870:	20002bec 	.word	0x20002bec
 800c874:	20002bf4 	.word	0x20002bf4
 800c878:	20002bfc 	.word	0x20002bfc
 800c87c:	20002bf8 	.word	0x20002bf8
 800c880:	20002c08 	.word	0x20002c08

0800c884 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c88c:	4b28      	ldr	r3, [pc, #160]	@ (800c930 <prvInsertBlockIntoFreeList+0xac>)
 800c88e:	60fb      	str	r3, [r7, #12]
 800c890:	e002      	b.n	800c898 <prvInsertBlockIntoFreeList+0x14>
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	60fb      	str	r3, [r7, #12]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d8f7      	bhi.n	800c892 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	68ba      	ldr	r2, [r7, #8]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d108      	bne.n	800c8c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	685a      	ldr	r2, [r3, #4]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	441a      	add	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	441a      	add	r2, r3
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d118      	bne.n	800c90c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	4b15      	ldr	r3, [pc, #84]	@ (800c934 <prvInsertBlockIntoFreeList+0xb0>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d00d      	beq.n	800c902 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	685a      	ldr	r2, [r3, #4]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	441a      	add	r2, r3
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	601a      	str	r2, [r3, #0]
 800c900:	e008      	b.n	800c914 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c902:	4b0c      	ldr	r3, [pc, #48]	@ (800c934 <prvInsertBlockIntoFreeList+0xb0>)
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	601a      	str	r2, [r3, #0]
 800c90a:	e003      	b.n	800c914 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d002      	beq.n	800c922 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c922:	bf00      	nop
 800c924:	3714      	adds	r7, #20
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	20002bec 	.word	0x20002bec
 800c934:	20002bf4 	.word	0x20002bf4

0800c938 <DCMotor_MotorInit>:
extern DualDrive_handle_t DualDrive_handle;

//single motor init
void DCMotor_MotorInit(Motor_t *motor, TIM_HandleTypeDef motor_tim,
		uint32_t FWD_Channel, uint32_t REV_Channel)
{
 800c938:	b084      	sub	sp, #16
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b082      	sub	sp, #8
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
 800c942:	f107 0014 	add.w	r0, r7, #20
 800c946:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	motor->timer = motor_tim;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	3308      	adds	r3, #8
 800c94e:	f107 0114 	add.w	r1, r7, #20
 800c952:	224c      	movs	r2, #76	@ 0x4c
 800c954:	4618      	mov	r0, r3
 800c956:	f001 f956 	bl	800dc06 <memcpy>
	motor->FWD_Channel = FWD_Channel;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c95e:	655a      	str	r2, [r3, #84]	@ 0x54
	motor->REV_Channel = REV_Channel;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c964:	659a      	str	r2, [r3, #88]	@ 0x58
	motor->FWD_current_pulse = 0;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	motor->FWD_target_pulse = 0;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	motor->REV_current_pulse = 0;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	motor->REV_target_pulse = 0;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
}
 800c986:	bf00      	nop
 800c988:	3708      	adds	r7, #8
 800c98a:	46bd      	mov	sp, r7
 800c98c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c990:	b004      	add	sp, #16
 800c992:	4770      	bx	lr

0800c994 <DCMotor_StartPWM>:

void DCMotor_StartPWM(Motor_t *motor)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
	// Set the PWM values using the timer
	__HAL_TIM_SET_COMPARE(&motor->timer, motor->FWD_Channel,
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d106      	bne.n	800c9b2 <DCMotor_StartPWM+0x1e>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	635a      	str	r2, [r3, #52]	@ 0x34
 800c9b0:	e036      	b.n	800ca20 <DCMotor_StartPWM+0x8c>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9b6:	2b04      	cmp	r3, #4
 800c9b8:	d107      	bne.n	800c9ca <DCMotor_StartPWM+0x36>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8b3 1060 	ldrh.w	r1, [r3, #96]	@ 0x60
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	689a      	ldr	r2, [r3, #8]
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	6393      	str	r3, [r2, #56]	@ 0x38
 800c9c8:	e02a      	b.n	800ca20 <DCMotor_StartPWM+0x8c>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9ce:	2b08      	cmp	r3, #8
 800c9d0:	d107      	bne.n	800c9e2 <DCMotor_StartPWM+0x4e>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8b3 1060 	ldrh.w	r1, [r3, #96]	@ 0x60
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	689a      	ldr	r2, [r3, #8]
 800c9dc:	460b      	mov	r3, r1
 800c9de:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800c9e0:	e01e      	b.n	800ca20 <DCMotor_StartPWM+0x8c>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9e6:	2b0c      	cmp	r3, #12
 800c9e8:	d107      	bne.n	800c9fa <DCMotor_StartPWM+0x66>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8b3 1060 	ldrh.w	r1, [r3, #96]	@ 0x60
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	689a      	ldr	r2, [r3, #8]
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	6413      	str	r3, [r2, #64]	@ 0x40
 800c9f8:	e012      	b.n	800ca20 <DCMotor_StartPWM+0x8c>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9fe:	2b10      	cmp	r3, #16
 800ca00:	d107      	bne.n	800ca12 <DCMotor_StartPWM+0x7e>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8b3 1060 	ldrh.w	r1, [r3, #96]	@ 0x60
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	689a      	ldr	r2, [r3, #8]
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	6493      	str	r3, [r2, #72]	@ 0x48
 800ca10:	e006      	b.n	800ca20 <DCMotor_StartPWM+0x8c>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8b3 1060 	ldrh.w	r1, [r3, #96]	@ 0x60
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	689a      	ldr	r2, [r3, #8]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
			motor->FWD_current_pulse);
	__HAL_TIM_SET_COMPARE(&motor->timer, motor->REV_Channel,
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d106      	bne.n	800ca36 <DCMotor_StartPWM+0xa2>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	635a      	str	r2, [r3, #52]	@ 0x34
 800ca34:	e036      	b.n	800caa4 <DCMotor_StartPWM+0x110>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca3a:	2b04      	cmp	r3, #4
 800ca3c:	d107      	bne.n	800ca4e <DCMotor_StartPWM+0xba>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8b3 1062 	ldrh.w	r1, [r3, #98]	@ 0x62
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	689a      	ldr	r2, [r3, #8]
 800ca48:	460b      	mov	r3, r1
 800ca4a:	6393      	str	r3, [r2, #56]	@ 0x38
 800ca4c:	e02a      	b.n	800caa4 <DCMotor_StartPWM+0x110>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca52:	2b08      	cmp	r3, #8
 800ca54:	d107      	bne.n	800ca66 <DCMotor_StartPWM+0xd2>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8b3 1062 	ldrh.w	r1, [r3, #98]	@ 0x62
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	689a      	ldr	r2, [r3, #8]
 800ca60:	460b      	mov	r3, r1
 800ca62:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800ca64:	e01e      	b.n	800caa4 <DCMotor_StartPWM+0x110>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca6a:	2b0c      	cmp	r3, #12
 800ca6c:	d107      	bne.n	800ca7e <DCMotor_StartPWM+0xea>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8b3 1062 	ldrh.w	r1, [r3, #98]	@ 0x62
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	689a      	ldr	r2, [r3, #8]
 800ca78:	460b      	mov	r3, r1
 800ca7a:	6413      	str	r3, [r2, #64]	@ 0x40
 800ca7c:	e012      	b.n	800caa4 <DCMotor_StartPWM+0x110>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca82:	2b10      	cmp	r3, #16
 800ca84:	d107      	bne.n	800ca96 <DCMotor_StartPWM+0x102>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8b3 1062 	ldrh.w	r1, [r3, #98]	@ 0x62
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	689a      	ldr	r2, [r3, #8]
 800ca90:	460b      	mov	r3, r1
 800ca92:	6493      	str	r3, [r2, #72]	@ 0x48
 800ca94:	e006      	b.n	800caa4 <DCMotor_StartPWM+0x110>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8b3 1062 	ldrh.w	r1, [r3, #98]	@ 0x62
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	689a      	ldr	r2, [r3, #8]
 800caa0:	460b      	mov	r3, r1
 800caa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
			motor->REV_current_pulse);

	HAL_TIM_PWM_Start(&motor->timer, motor->FWD_Channel);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f103 0208 	add.w	r2, r3, #8
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caae:	4619      	mov	r1, r3
 800cab0:	4610      	mov	r0, r2
 800cab2:	f7f9 fed9 	bl	8006868 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&motor->timer, motor->REV_Channel);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f103 0208 	add.w	r2, r3, #8
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cac0:	4619      	mov	r1, r3
 800cac2:	4610      	mov	r0, r2
 800cac4:	f7f9 fed0 	bl	8006868 <HAL_TIM_PWM_Start>
}
 800cac8:	bf00      	nop
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <DCMotor_SetSpeed>:

//speed should be bewteen 0-100 for percentage of max speed
//rotation sign is either POSITIVE_ROTATION or NEGATIVE_ROTATION
HAL_StatusTypeDef DCMotor_SetSpeed(Motor_t *motor, uint8_t speed,
		uint8_t rotation_sign)
{
 800cad0:	b590      	push	{r4, r7, lr}
 800cad2:	b087      	sub	sp, #28
 800cad4:	af02      	add	r7, sp, #8
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	460b      	mov	r3, r1
 800cada:	70fb      	strb	r3, [r7, #3]
 800cadc:	4613      	mov	r3, r2
 800cade:	70bb      	strb	r3, [r7, #2]
	if (((rotation_sign != POSITIVE_ROTATION)
 800cae0:	78bb      	ldrb	r3, [r7, #2]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d002      	beq.n	800caec <DCMotor_SetSpeed+0x1c>
			&& (rotation_sign != NEGATIVE_ROTATION)) || (speed > 100))
 800cae6:	78bb      	ldrb	r3, [r7, #2]
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d102      	bne.n	800caf2 <DCMotor_SetSpeed+0x22>
 800caec:	78fb      	ldrb	r3, [r7, #3]
 800caee:	2b64      	cmp	r3, #100	@ 0x64
 800caf0:	d901      	bls.n	800caf6 <DCMotor_SetSpeed+0x26>
	{
		return HAL_ERROR;
 800caf2:	2301      	movs	r3, #1
 800caf4:	e04d      	b.n	800cb92 <DCMotor_SetSpeed+0xc2>
	}

	motor->set_rpm = speed;
 800caf6:	78fa      	ldrb	r2, [r7, #3]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	601a      	str	r2, [r3, #0]
	motor->set_rotation_sign = rotation_sign;
 800cafc:	78ba      	ldrb	r2, [r7, #2]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	605a      	str	r2, [r3, #4]

	uint16_t pulse = MAX_PULSE * speed / 100;
 800cb02:	78fb      	ldrb	r3, [r7, #3]
 800cb04:	f641 228f 	movw	r2, #6799	@ 0x1a8f
 800cb08:	fb02 f303 	mul.w	r3, r2, r3
 800cb0c:	4a23      	ldr	r2, [pc, #140]	@ (800cb9c <DCMotor_SetSpeed+0xcc>)
 800cb0e:	fb82 1203 	smull	r1, r2, r2, r3
 800cb12:	1152      	asrs	r2, r2, #5
 800cb14:	17db      	asrs	r3, r3, #31
 800cb16:	1ad3      	subs	r3, r2, r3
 800cb18:	81fb      	strh	r3, [r7, #14]

	if (motor->set_rotation_sign == POSITIVE_ROTATION)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d108      	bne.n	800cb34 <DCMotor_SetSpeed+0x64>
	{
		motor->FWD_target_pulse = pulse;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	89fa      	ldrh	r2, [r7, #14]
 800cb26:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
		motor->REV_target_pulse = 0;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 800cb32:	e00b      	b.n	800cb4c <DCMotor_SetSpeed+0x7c>
	}
	else if (motor->set_rotation_sign == NEGATIVE_ROTATION)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d107      	bne.n	800cb4c <DCMotor_SetSpeed+0x7c>
	{
		motor->FWD_target_pulse = 0;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
		motor->REV_target_pulse = pulse;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	89fa      	ldrh	r2, [r7, #14]
 800cb48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	}
	motor->FWD_current_pulse = 0;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	motor->REV_current_pulse = 0;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

	DualDrive_handle.current_motor = motor;
 800cb5c:	4a10      	ldr	r2, [pc, #64]	@ (800cba0 <DCMotor_SetSpeed+0xd0>)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

//Start the ramp timer
	if (xTimerIsTimerActive(DualDrive_handle.dual_drive_timer) == pdFALSE)
 800cb64:	4b0e      	ldr	r3, [pc, #56]	@ (800cba0 <DCMotor_SetSpeed+0xd0>)
 800cb66:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7ff fa78 	bl	800c060 <xTimerIsTimerActive>
 800cb70:	4603      	mov	r3, r0
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d10c      	bne.n	800cb90 <DCMotor_SetSpeed+0xc0>
	{
		xTimerStart(DualDrive_handle.dual_drive_timer, 0); // Start the ramp timer
 800cb76:	4b0a      	ldr	r3, [pc, #40]	@ (800cba0 <DCMotor_SetSpeed+0xd0>)
 800cb78:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 800cb7c:	f7fe fa26 	bl	800afcc <xTaskGetTickCount>
 800cb80:	4602      	mov	r2, r0
 800cb82:	2300      	movs	r3, #0
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	2300      	movs	r3, #0
 800cb88:	2101      	movs	r1, #1
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f7fe ff74 	bl	800ba78 <xTimerGenericCommand>
	}

	return HAL_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3714      	adds	r7, #20
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd90      	pop	{r4, r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	51eb851f 	.word	0x51eb851f
 800cba0:	2000191c 	.word	0x2000191c

0800cba4 <DCMotor_InitPWMRampTimer>:
	motor->FWD_target_pulse = MAX_PULSE;
	motor->REV_target_pulse = MAX_PULSE;
}

void DCMotor_InitPWMRampTimer()
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af02      	add	r7, sp, #8
	// Create a timer that will call vRampTimerCallback every 10ms (for smooth ramping)
	DualDrive_handle.dual_drive_timer = xTimerCreate("DCMotor_RampTimer",
 800cbaa:	4b07      	ldr	r3, [pc, #28]	@ (800cbc8 <DCMotor_InitPWMRampTimer+0x24>)
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	2300      	movs	r3, #0
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	210a      	movs	r1, #10
 800cbb4:	4805      	ldr	r0, [pc, #20]	@ (800cbcc <DCMotor_InitPWMRampTimer+0x28>)
 800cbb6:	f7fe ff01 	bl	800b9bc <xTimerCreate>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	4a04      	ldr	r2, [pc, #16]	@ (800cbd0 <DCMotor_InitPWMRampTimer+0x2c>)
 800cbbe:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
			pdMS_TO_TICKS(10), pdTRUE, NULL, vRampTimerCallback);
	if (DualDrive_handle.dual_drive_timer == NULL)
	{
		// Handle error if timer creation fails
	}
}
 800cbc2:	bf00      	nop
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	0800cd1d 	.word	0x0800cd1d
 800cbcc:	0800ede4 	.word	0x0800ede4
 800cbd0:	2000191c 	.word	0x2000191c

0800cbd4 <DCMotor_Init>:

void DCMotor_Init(DualDrive_handle_t *DualDrive_handle)
{
 800cbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbd6:	b095      	sub	sp, #84	@ 0x54
 800cbd8:	af12      	add	r7, sp, #72	@ 0x48
 800cbda:	6078      	str	r0, [r7, #4]
	DCMotor_MotorInit(&DualDrive_handle->motor_right, htim1, TIM_CHANNEL_1,
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f103 0c7c 	add.w	ip, r3, #124	@ 0x7c
 800cbe2:	4e21      	ldr	r6, [pc, #132]	@ (800cc68 <DCMotor_Init+0x94>)
 800cbe4:	2304      	movs	r3, #4
 800cbe6:	9311      	str	r3, [sp, #68]	@ 0x44
 800cbe8:	2300      	movs	r3, #0
 800cbea:	9310      	str	r3, [sp, #64]	@ 0x40
 800cbec:	466d      	mov	r5, sp
 800cbee:	f106 040c 	add.w	r4, r6, #12
 800cbf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbfe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cc02:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800cc06:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800cc0a:	4660      	mov	r0, ip
 800cc0c:	f7ff fe94 	bl	800c938 <DCMotor_MotorInit>
	TIM_CHANNEL_2);
	DCMotor_MotorInit(&DualDrive_handle->motor_left, htim1, TIM_CHANNEL_3,
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	603b      	str	r3, [r7, #0]
 800cc14:	4e14      	ldr	r6, [pc, #80]	@ (800cc68 <DCMotor_Init+0x94>)
 800cc16:	230c      	movs	r3, #12
 800cc18:	9311      	str	r3, [sp, #68]	@ 0x44
 800cc1a:	2308      	movs	r3, #8
 800cc1c:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc1e:	466d      	mov	r5, sp
 800cc20:	f106 040c 	add.w	r4, r6, #12
 800cc24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cc34:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800cc38:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800cc3c:	6838      	ldr	r0, [r7, #0]
 800cc3e:	f7ff fe7b 	bl	800c938 <DCMotor_MotorInit>
	TIM_CHANNEL_4);
	DualDrive_handle->current_motor = NULL;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2200      	movs	r2, #0
 800cc46:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	DCMotor_StartPWM(&DualDrive_handle->motor_right);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	337c      	adds	r3, #124	@ 0x7c
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7ff fea0 	bl	800c994 <DCMotor_StartPWM>
	DCMotor_StartPWM(&DualDrive_handle->motor_left);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7ff fe9c 	bl	800c994 <DCMotor_StartPWM>
	DCMotor_InitPWMRampTimer();
 800cc5c:	f7ff ffa2 	bl	800cba4 <DCMotor_InitPWMRampTimer>

}
 800cc60:	bf00      	nop
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc68:	20001ad4 	.word	0x20001ad4

0800cc6c <DCMotor_Forward>:

int DCMotor_Forward(DualDrive_handle_t *DualDrive_handle,uint8_t speed)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	460b      	mov	r3, r1
 800cc76:	70fb      	strb	r3, [r7, #3]
	DCMotor_SetSpeed(&DualDrive_handle->motor_right, 60, POSITIVE_ROTATION);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	337c      	adds	r3, #124	@ 0x7c
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	213c      	movs	r1, #60	@ 0x3c
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7ff ff25 	bl	800cad0 <DCMotor_SetSpeed>
	vTaskDelay(200);
 800cc86:	20c8      	movs	r0, #200	@ 0xc8
 800cc88:	f7fe f84e 	bl	800ad28 <vTaskDelay>

	DCMotor_SetSpeed(&DualDrive_handle->motor_left, 60, POSITIVE_ROTATION);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	213c      	movs	r1, #60	@ 0x3c
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7ff ff1c 	bl	800cad0 <DCMotor_SetSpeed>

}
 800cc98:	bf00      	nop
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3708      	adds	r7, #8
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}

0800cca2 <DCMotor_Task>:


void DCMotor_Task(void *argument)
{
 800cca2:	b580      	push	{r7, lr}
 800cca4:	b084      	sub	sp, #16
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	6078      	str	r0, [r7, #4]
	DualDrive_handle_t *DualDrive_handle = (DualDrive_handle_t*) argument;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	60fb      	str	r3, [r7, #12]
	DCMotor_Init(DualDrive_handle);
 800ccae:	68f8      	ldr	r0, [r7, #12]
 800ccb0:	f7ff ff90 	bl	800cbd4 <DCMotor_Init>
	DCMotor_Forward(DualDrive_handle,60);
 800ccb4:	213c      	movs	r1, #60	@ 0x3c
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	f7ff ffd8 	bl	800cc6c <DCMotor_Forward>
	for (;;)
	{
		vTaskDelay(10);
 800ccbc:	200a      	movs	r0, #10
 800ccbe:	f7fe f833 	bl	800ad28 <vTaskDelay>
 800ccc2:	e7fb      	b.n	800ccbc <DCMotor_Task+0x1a>

0800ccc4 <DCMotor_CreateTask>:
	}
}

int DCMotor_CreateTask(DualDrive_handle_t *DualDrive_handle)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af04      	add	r7, sp, #16
 800ccca:	6078      	str	r0, [r7, #4]
	// Initialize the TCB to zero
	DualDrive_handle->h_task = NULL;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

	// Create the shell task statically
	DualDrive_handle->h_task = xTaskCreateStatic(
 800ccd4:	4b0d      	ldr	r3, [pc, #52]	@ (800cd0c <DCMotor_CreateTask+0x48>)
 800ccd6:	9302      	str	r3, [sp, #8]
 800ccd8:	4b0d      	ldr	r3, [pc, #52]	@ (800cd10 <DCMotor_CreateTask+0x4c>)
 800ccda:	9301      	str	r3, [sp, #4]
 800ccdc:	2303      	movs	r3, #3
 800ccde:	9300      	str	r3, [sp, #0]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2240      	movs	r2, #64	@ 0x40
 800cce4:	490b      	ldr	r1, [pc, #44]	@ (800cd14 <DCMotor_CreateTask+0x50>)
 800cce6:	480c      	ldr	r0, [pc, #48]	@ (800cd18 <DCMotor_CreateTask+0x54>)
 800cce8:	f7fd fe6e 	bl	800a9c8 <xTaskCreateStatic>
 800ccec:	4602      	mov	r2, r0
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	    DCMotor_task_stack,          // Stack buffer
	    &DCMotor_task_tcb            // Task control block
	);

	// Check if task creation was successful
	if (DualDrive_handle->h_task == NULL)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d101      	bne.n	800cd02 <DCMotor_CreateTask+0x3e>
	{
		return 1;  // Task creation failed
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e000      	b.n	800cd04 <DCMotor_CreateTask+0x40>
	}
	return 0;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3708      	adds	r7, #8
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	20002d0c 	.word	0x20002d0c
 800cd10:	20002c0c 	.word	0x20002c0c
 800cd14:	0800edf8 	.word	0x0800edf8
 800cd18:	0800cca3 	.word	0x0800cca3

0800cd1c <vRampTimerCallback>:

// Timer callback to update motor PWM values gradually
void vRampTimerCallback(TimerHandle_t xTimer)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b086      	sub	sp, #24
 800cd20:	af02      	add	r7, sp, #8
 800cd22:	6078      	str	r0, [r7, #4]
	// Loop through each motor in the array

	Motor_t *motor = DualDrive_handle.current_motor;
 800cd24:	4b8e      	ldr	r3, [pc, #568]	@ (800cf60 <vRampTimerCallback+0x244>)
 800cd26:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800cd2a:	60fb      	str	r3, [r7, #12]

	// Ramp the forward pulse
	if (motor->FWD_current_pulse < motor->FWD_target_pulse)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d216      	bcs.n	800cd6a <vRampTimerCallback+0x4e>
	{
		motor->FWD_current_pulse += 250; // Increment by 250 (adjust the step size as needed)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cd42:	33fa      	adds	r3, #250	@ 0xfa
 800cd44:	b29a      	uxth	r2, r3
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
		if (motor->FWD_current_pulse > motor->FWD_target_pulse)
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d924      	bls.n	800cda6 <vRampTimerCallback+0x8a>
		{
			motor->FWD_current_pulse = motor->FWD_target_pulse; // Clamp to target
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cd68:	e01d      	b.n	800cda6 <vRampTimerCallback+0x8a>
		}
	}
	else if (motor->FWD_current_pulse > motor->FWD_target_pulse)
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d915      	bls.n	800cda6 <vRampTimerCallback+0x8a>
	{
		motor->FWD_current_pulse -= 250;  // Decrement by 250
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cd80:	3bfa      	subs	r3, #250	@ 0xfa
 800cd82:	b29a      	uxth	r2, r3
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
		if (motor->FWD_current_pulse < motor->FWD_target_pulse)
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d205      	bcs.n	800cda6 <vRampTimerCallback+0x8a>
		{
			motor->FWD_current_pulse = motor->FWD_target_pulse; // Clamp to target
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
		}
	}

	// Ramp the reverse pulse
	if (motor->REV_current_pulse < motor->REV_target_pulse)
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d216      	bcs.n	800cde4 <vRampTimerCallback+0xc8>
	{
		motor->REV_current_pulse += 250;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cdbc:	33fa      	adds	r3, #250	@ 0xfa
 800cdbe:	b29a      	uxth	r2, r3
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
		if (motor->REV_current_pulse > motor->REV_target_pulse)
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d924      	bls.n	800ce20 <vRampTimerCallback+0x104>
		{
			motor->REV_current_pulse = motor->REV_target_pulse;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800cde2:	e01d      	b.n	800ce20 <vRampTimerCallback+0x104>
		}
	}
	else if (motor->REV_current_pulse > motor->REV_target_pulse)
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d915      	bls.n	800ce20 <vRampTimerCallback+0x104>
	{
		motor->REV_current_pulse -= 250;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cdfa:	3bfa      	subs	r3, #250	@ 0xfa
 800cdfc:	b29a      	uxth	r2, r3
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
		if (motor->REV_current_pulse < motor->REV_target_pulse)
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d205      	bcs.n	800ce20 <vRampTimerCallback+0x104>
		{
			motor->REV_current_pulse = motor->REV_target_pulse;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
		}
	}

	// Set the PWM values using the timer
	__HAL_TIM_SET_COMPARE(&motor->timer, motor->FWD_Channel,
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d106      	bne.n	800ce36 <vRampTimerCallback+0x11a>
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	689b      	ldr	r3, [r3, #8]
 800ce32:	635a      	str	r2, [r3, #52]	@ 0x34
 800ce34:	e036      	b.n	800cea4 <vRampTimerCallback+0x188>
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce3a:	2b04      	cmp	r3, #4
 800ce3c:	d107      	bne.n	800ce4e <vRampTimerCallback+0x132>
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f8b3 1060 	ldrh.w	r1, [r3, #96]	@ 0x60
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	689a      	ldr	r2, [r3, #8]
 800ce48:	460b      	mov	r3, r1
 800ce4a:	6393      	str	r3, [r2, #56]	@ 0x38
 800ce4c:	e02a      	b.n	800cea4 <vRampTimerCallback+0x188>
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce52:	2b08      	cmp	r3, #8
 800ce54:	d107      	bne.n	800ce66 <vRampTimerCallback+0x14a>
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f8b3 1060 	ldrh.w	r1, [r3, #96]	@ 0x60
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	689a      	ldr	r2, [r3, #8]
 800ce60:	460b      	mov	r3, r1
 800ce62:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800ce64:	e01e      	b.n	800cea4 <vRampTimerCallback+0x188>
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce6a:	2b0c      	cmp	r3, #12
 800ce6c:	d107      	bne.n	800ce7e <vRampTimerCallback+0x162>
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	f8b3 1060 	ldrh.w	r1, [r3, #96]	@ 0x60
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	689a      	ldr	r2, [r3, #8]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	6413      	str	r3, [r2, #64]	@ 0x40
 800ce7c:	e012      	b.n	800cea4 <vRampTimerCallback+0x188>
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce82:	2b10      	cmp	r3, #16
 800ce84:	d107      	bne.n	800ce96 <vRampTimerCallback+0x17a>
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f8b3 1060 	ldrh.w	r1, [r3, #96]	@ 0x60
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	689a      	ldr	r2, [r3, #8]
 800ce90:	460b      	mov	r3, r1
 800ce92:	6493      	str	r3, [r2, #72]	@ 0x48
 800ce94:	e006      	b.n	800cea4 <vRampTimerCallback+0x188>
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f8b3 1060 	ldrh.w	r1, [r3, #96]	@ 0x60
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	689a      	ldr	r2, [r3, #8]
 800cea0:	460b      	mov	r3, r1
 800cea2:	64d3      	str	r3, [r2, #76]	@ 0x4c
			motor->FWD_current_pulse);
	__HAL_TIM_SET_COMPARE(&motor->timer, motor->REV_Channel,
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d106      	bne.n	800ceba <vRampTimerCallback+0x19e>
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	689b      	ldr	r3, [r3, #8]
 800ceb6:	635a      	str	r2, [r3, #52]	@ 0x34
 800ceb8:	e036      	b.n	800cf28 <vRampTimerCallback+0x20c>
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cebe:	2b04      	cmp	r3, #4
 800cec0:	d107      	bne.n	800ced2 <vRampTimerCallback+0x1b6>
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	f8b3 1062 	ldrh.w	r1, [r3, #98]	@ 0x62
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	689a      	ldr	r2, [r3, #8]
 800cecc:	460b      	mov	r3, r1
 800cece:	6393      	str	r3, [r2, #56]	@ 0x38
 800ced0:	e02a      	b.n	800cf28 <vRampTimerCallback+0x20c>
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ced6:	2b08      	cmp	r3, #8
 800ced8:	d107      	bne.n	800ceea <vRampTimerCallback+0x1ce>
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f8b3 1062 	ldrh.w	r1, [r3, #98]	@ 0x62
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	689a      	ldr	r2, [r3, #8]
 800cee4:	460b      	mov	r3, r1
 800cee6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800cee8:	e01e      	b.n	800cf28 <vRampTimerCallback+0x20c>
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ceee:	2b0c      	cmp	r3, #12
 800cef0:	d107      	bne.n	800cf02 <vRampTimerCallback+0x1e6>
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f8b3 1062 	ldrh.w	r1, [r3, #98]	@ 0x62
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	689a      	ldr	r2, [r3, #8]
 800cefc:	460b      	mov	r3, r1
 800cefe:	6413      	str	r3, [r2, #64]	@ 0x40
 800cf00:	e012      	b.n	800cf28 <vRampTimerCallback+0x20c>
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf06:	2b10      	cmp	r3, #16
 800cf08:	d107      	bne.n	800cf1a <vRampTimerCallback+0x1fe>
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f8b3 1062 	ldrh.w	r1, [r3, #98]	@ 0x62
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	689a      	ldr	r2, [r3, #8]
 800cf14:	460b      	mov	r3, r1
 800cf16:	6493      	str	r3, [r2, #72]	@ 0x48
 800cf18:	e006      	b.n	800cf28 <vRampTimerCallback+0x20c>
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	f8b3 1062 	ldrh.w	r1, [r3, #98]	@ 0x62
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	689a      	ldr	r2, [r3, #8]
 800cf24:	460b      	mov	r3, r1
 800cf26:	64d3      	str	r3, [r2, #76]	@ 0x4c
			motor->REV_current_pulse);

	// If the pulses are equal to the target, stop the timer (optional)
	if (motor->FWD_current_pulse == motor->FWD_target_pulse
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d10f      	bne.n	800cf58 <vRampTimerCallback+0x23c>
			&& motor->REV_current_pulse == motor->REV_target_pulse)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d107      	bne.n	800cf58 <vRampTimerCallback+0x23c>
	{
		xTimerStop(xTimer, 0);
 800cf48:	2300      	movs	r3, #0
 800cf4a:	9300      	str	r3, [sp, #0]
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	2200      	movs	r2, #0
 800cf50:	2103      	movs	r1, #3
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f7fe fd90 	bl	800ba78 <xTimerGenericCommand>
	}
}
 800cf58:	bf00      	nop
 800cf5a:	3710      	adds	r7, #16
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	2000191c 	.word	0x2000191c

0800cf64 <task_shell>:
 * `shell_run`. It yields to other tasks with a delay to ensure the RTOS remains responsive.
 *
 * @param unused Unused parameter required by FreeRTOS task function signature.
 */
void task_shell(void *unused)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		shell_run(&h_shell);  // Main shell processing loop
 800cf6c:	4803      	ldr	r0, [pc, #12]	@ (800cf7c <task_shell+0x18>)
 800cf6e:	f000 f9f3 	bl	800d358 <shell_run>

		// Delay to allow other tasks to run
		vTaskDelay(pdMS_TO_TICKS(100));  // 10 ms delay for yielding
 800cf72:	2064      	movs	r0, #100	@ 0x64
 800cf74:	f7fd fed8 	bl	800ad28 <vTaskDelay>
		shell_run(&h_shell);  // Main shell processing loop
 800cf78:	bf00      	nop
 800cf7a:	e7f7      	b.n	800cf6c <task_shell+0x8>
 800cf7c:	20002dac 	.word	0x20002dac

0800cf80 <shell_createShellTask>:
 *
 * @param h_shell Pointer to the main shell structure.
 * @return 0 on success, 1 on failure.
 */
int shell_createShellTask(h_shell_t *h_shell)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b086      	sub	sp, #24
 800cf84:	af04      	add	r7, sp, #16
 800cf86:	6078      	str	r0, [r7, #4]
	// Initialize the TCB to zero
	h_shell->h_task = NULL;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

	// Create the shell task statically
	h_shell->h_task = xTaskCreateStatic(
 800cf90:	4b0e      	ldr	r3, [pc, #56]	@ (800cfcc <shell_createShellTask+0x4c>)
 800cf92:	9302      	str	r3, [sp, #8]
 800cf94:	4b0e      	ldr	r3, [pc, #56]	@ (800cfd0 <shell_createShellTask+0x50>)
 800cf96:	9301      	str	r3, [sp, #4]
 800cf98:	2305      	movs	r3, #5
 800cf9a:	9300      	str	r3, [sp, #0]
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cfa2:	490c      	ldr	r1, [pc, #48]	@ (800cfd4 <shell_createShellTask+0x54>)
 800cfa4:	480c      	ldr	r0, [pc, #48]	@ (800cfd8 <shell_createShellTask+0x58>)
 800cfa6:	f7fd fd0f 	bl	800a9c8 <xTaskCreateStatic>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
			task_shell, "task_shell", TASK_SHELL_STACK_DEPTH,
			NULL, TASK_SHELL_PRIORITY, task_stack, &task_tcb);

	// Check if task creation was successful
	if (h_shell->h_task == NULL)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d101      	bne.n	800cfc0 <shell_createShellTask+0x40>
	{
		return 1;  // Task creation failed
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e000      	b.n	800cfc2 <shell_createShellTask+0x42>
	}
	return 0;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3708      	adds	r7, #8
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	20004184 	.word	0x20004184
 800cfd0:	20003184 	.word	0x20003184
 800cfd4:	0800ee08 	.word	0x0800ee08
 800cfd8:	0800cf65 	.word	0x0800cf65

0800cfdc <sh_help>:
 * @param argc Argument count (unused in this function).
 * @param argv Argument vector (unused in this function).
 * @return 0 on success.
 */
static int sh_help(h_shell_t *h_shell, int argc, char **argv)
{
 800cfdc:	b590      	push	{r4, r7, lr}
 800cfde:	b089      	sub	sp, #36	@ 0x24
 800cfe0:	af02      	add	r7, sp, #8
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
	int i;
	for (i = 0; i < h_shell->shell_func_list_size; i++)
 800cfe8:	2300      	movs	r3, #0
 800cfea:	617b      	str	r3, [r7, #20]
 800cfec:	e02f      	b.n	800d04e <sh_help+0x72>
	{
		int size;
		memset(h_shell->print_buffer, 0, BUFFER_SIZE);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	3304      	adds	r3, #4
 800cff2:	2264      	movs	r2, #100	@ 0x64
 800cff4:	2100      	movs	r1, #0
 800cff6:	4618      	mov	r0, r3
 800cff8:	f000 fd6a 	bl	800dad0 <memset>
		size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "%s: %s\r\n",
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	1d18      	adds	r0, r3, #4
 800d000:	68f9      	ldr	r1, [r7, #12]
 800d002:	697a      	ldr	r2, [r7, #20]
 800d004:	4613      	mov	r3, r2
 800d006:	005b      	lsls	r3, r3, #1
 800d008:	4413      	add	r3, r2
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	440b      	add	r3, r1
 800d00e:	3368      	adds	r3, #104	@ 0x68
 800d010:	681c      	ldr	r4, [r3, #0]
 800d012:	68f9      	ldr	r1, [r7, #12]
 800d014:	697a      	ldr	r2, [r7, #20]
 800d016:	4613      	mov	r3, r2
 800d018:	005b      	lsls	r3, r3, #1
 800d01a:	4413      	add	r3, r2
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	440b      	add	r3, r1
 800d020:	3370      	adds	r3, #112	@ 0x70
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	9300      	str	r3, [sp, #0]
 800d026:	4623      	mov	r3, r4
 800d028:	4a0e      	ldr	r2, [pc, #56]	@ (800d064 <sh_help+0x88>)
 800d02a:	2164      	movs	r1, #100	@ 0x64
 800d02c:	f000 fb54 	bl	800d6d8 <sniprintf>
 800d030:	6138      	str	r0, [r7, #16]
				h_shell->shell_func_list[i].name,
				h_shell->shell_func_list[i].description);

		h_shell->drv_shell.drv_shell_transmit(h_shell->print_buffer, size);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 800d038:	68fa      	ldr	r2, [r7, #12]
 800d03a:	3204      	adds	r2, #4
 800d03c:	6939      	ldr	r1, [r7, #16]
 800d03e:	b289      	uxth	r1, r1
 800d040:	4610      	mov	r0, r2
 800d042:	4798      	blx	r3
		shell_drv_uart_waitTransmitComplete();  // Wait for transmission to complete
 800d044:	f000 fa8c 	bl	800d560 <shell_drv_uart_waitTransmitComplete>
	for (i = 0; i < h_shell->shell_func_list_size; i++)
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	3301      	adds	r3, #1
 800d04c:	617b      	str	r3, [r7, #20]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	697a      	ldr	r2, [r7, #20]
 800d054:	429a      	cmp	r2, r3
 800d056:	dbca      	blt.n	800cfee <sh_help+0x12>
	}

	return 0;
 800d058:	2300      	movs	r3, #0
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	371c      	adds	r7, #28
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd90      	pop	{r4, r7, pc}
 800d062:	bf00      	nop
 800d064:	0800ee14 	.word	0x0800ee14

0800d068 <shell_init>:
 * reception functions, and adds a default "help" command.
 *
 * @param h_shell Pointer to the main shell structure.
 */
void shell_init(h_shell_t *h_shell)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
	h_shell->shell_func_list_size = 0;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	601a      	str	r2, [r3, #0]
	h_shell->drv_shell.drv_shell_receive = shell_drv_uart_receive;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	4a08      	ldr	r2, [pc, #32]	@ (800d09c <shell_init+0x34>)
 800d07a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0
	h_shell->drv_shell.drv_shell_transmit = shell_drv_uart_transmit;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4a07      	ldr	r2, [pc, #28]	@ (800d0a0 <shell_init+0x38>)
 800d082:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc

	// Add the default help command
	shell_add(h_shell, "help", sh_help, "Help");
 800d086:	4b07      	ldr	r3, [pc, #28]	@ (800d0a4 <shell_init+0x3c>)
 800d088:	4a07      	ldr	r2, [pc, #28]	@ (800d0a8 <shell_init+0x40>)
 800d08a:	4908      	ldr	r1, [pc, #32]	@ (800d0ac <shell_init+0x44>)
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 f80f 	bl	800d0b0 <shell_add>
}
 800d092:	bf00      	nop
 800d094:	3708      	adds	r7, #8
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	0800d4dd 	.word	0x0800d4dd
 800d0a0:	0800d515 	.word	0x0800d515
 800d0a4:	0800ee20 	.word	0x0800ee20
 800d0a8:	0800cfdd 	.word	0x0800cfdd
 800d0ac:	0800ee28 	.word	0x0800ee28

0800d0b0 <shell_add>:
 * @param pfunc Pointer to the function that implements the command.
 * @param description Command description.
 * @return 0 on success, -1 if the function list is full.
 */
int shell_add(h_shell_t *h_shell, char *name, shell_func_pointer_t pfunc, char *description)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b085      	sub	sp, #20
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	60b9      	str	r1, [r7, #8]
 800d0ba:	607a      	str	r2, [r7, #4]
 800d0bc:	603b      	str	r3, [r7, #0]
	if (h_shell->shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE)
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2b3f      	cmp	r3, #63	@ 0x3f
 800d0c4:	dc27      	bgt.n	800d116 <shell_add+0x66>
	{
		h_shell->shell_func_list[h_shell->shell_func_list_size].name = name;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	68f9      	ldr	r1, [r7, #12]
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	005b      	lsls	r3, r3, #1
 800d0d0:	4413      	add	r3, r2
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	440b      	add	r3, r1
 800d0d6:	3368      	adds	r3, #104	@ 0x68
 800d0d8:	68ba      	ldr	r2, [r7, #8]
 800d0da:	601a      	str	r2, [r3, #0]
		h_shell->shell_func_list[h_shell->shell_func_list_size].func = pfunc;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	68f9      	ldr	r1, [r7, #12]
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	005b      	lsls	r3, r3, #1
 800d0e6:	4413      	add	r3, r2
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	440b      	add	r3, r1
 800d0ec:	336c      	adds	r3, #108	@ 0x6c
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	601a      	str	r2, [r3, #0]
		h_shell->shell_func_list[h_shell->shell_func_list_size].description = description;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	68f9      	ldr	r1, [r7, #12]
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	005b      	lsls	r3, r3, #1
 800d0fc:	4413      	add	r3, r2
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	440b      	add	r3, r1
 800d102:	3370      	adds	r3, #112	@ 0x70
 800d104:	683a      	ldr	r2, [r7, #0]
 800d106:	601a      	str	r2, [r3, #0]
		h_shell->shell_func_list_size++;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	1c5a      	adds	r2, r3, #1
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	601a      	str	r2, [r3, #0]
		return 0;
 800d112:	2300      	movs	r3, #0
 800d114:	e001      	b.n	800d11a <shell_add+0x6a>
	}
	return -1;
 800d116:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3714      	adds	r7, #20
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr
	...

0800d128 <shell_exec>:
 * @param h_shell Pointer to the main shell structure.
 * @return Result of command execution, or -1 if the command is invalid or if
 *         memory allocation fails.
 */
static int shell_exec(h_shell_t *h_shell)
{
 800d128:	b5b0      	push	{r4, r5, r7, lr}
 800d12a:	b0aa      	sub	sp, #168	@ 0xa8
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
	if (h_shell == NULL)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d102      	bne.n	800d13c <shell_exec+0x14>
	{
		return -1; // Invalid parameters
 800d136:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d13a:	e100      	b.n	800d33e <shell_exec+0x216>
	}

	char buf[BUFFER_SIZE];
	char *token;
	char *argv[ARGC_MAX];
	int argc = 0;
 800d13c:	2300      	movs	r3, #0
 800d13e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	// Safely copy the command buffer
	strncpy(buf, h_shell->cmd_buffer, BUFFER_SIZE - 1);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f503 715a 	add.w	r1, r3, #872	@ 0x368
 800d148:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d14c:	2263      	movs	r2, #99	@ 0x63
 800d14e:	4618      	mov	r0, r3
 800d150:	f000 fc4f 	bl	800d9f2 <strncpy>
	buf[BUFFER_SIZE - 1] = '\0'; // Null-terminate to avoid overflow
 800d154:	2300      	movs	r3, #0
 800d156:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

	// Tokenize the command buffer into arguments
	token = strtok(buf, " ");
 800d15a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d15e:	497a      	ldr	r1, [pc, #488]	@ (800d348 <shell_exec+0x220>)
 800d160:	4618      	mov	r0, r3
 800d162:	f000 fc59 	bl	800da18 <strtok>
 800d166:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	while (token != NULL && argc < ARGC_MAX)
 800d16a:	e054      	b.n	800d216 <shell_exec+0xee>
	{
		argv[argc] = strdup(token); // Duplicate each token
 800d16c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800d170:	f000 fc24 	bl	800d9bc <strdup>
 800d174:	4603      	mov	r3, r0
 800d176:	461a      	mov	r2, r3
 800d178:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	33a8      	adds	r3, #168	@ 0xa8
 800d180:	443b      	add	r3, r7
 800d182:	f843 2ca0 	str.w	r2, [r3, #-160]
		if (argv[argc] == NULL)
 800d186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d18a:	009b      	lsls	r3, r3, #2
 800d18c:	33a8      	adds	r3, #168	@ 0xa8
 800d18e:	443b      	add	r3, r7
 800d190:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d133      	bne.n	800d200 <shell_exec+0xd8>
		{
			// Memory allocation failed; clean up and return
			for (int j = 0; j < argc; j++)
 800d198:	2300      	movs	r3, #0
 800d19a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d19e:	e00e      	b.n	800d1be <shell_exec+0x96>
			{
				free(argv[j]);
 800d1a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	33a8      	adds	r3, #168	@ 0xa8
 800d1a8:	443b      	add	r3, r7
 800d1aa:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f000 f9e8 	bl	800d584 <free>
			for (int j = 0; j < argc; j++)
 800d1b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d1be:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800d1c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	dbea      	blt.n	800d1a0 <shell_exec+0x78>
			}
			snprintf(h_shell->print_buffer, BUFFER_SIZE, "Error: Memory allocation failed\r\n");
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	3304      	adds	r3, #4
 800d1ce:	4a5f      	ldr	r2, [pc, #380]	@ (800d34c <shell_exec+0x224>)
 800d1d0:	2164      	movs	r1, #100	@ 0x64
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f000 fa80 	bl	800d6d8 <sniprintf>
			h_shell->drv_shell.drv_shell_transmit(h_shell->print_buffer, strlen(h_shell->print_buffer));
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8d3 43cc 	ldr.w	r4, [r3, #972]	@ 0x3cc
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	1d1d      	adds	r5, r3, #4
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	3304      	adds	r3, #4
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7f3 f81a 	bl	8000220 <strlen>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	47a0      	blx	r4
			shell_drv_uart_waitTransmitComplete();  // Wait for transmission to complete
 800d1f6:	f000 f9b3 	bl	800d560 <shell_drv_uart_waitTransmitComplete>
			return -1;
 800d1fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d1fe:	e09e      	b.n	800d33e <shell_exec+0x216>
		}
		argc++; // Increment argument count
 800d200:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d204:	3301      	adds	r3, #1
 800d206:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		token = strtok(NULL, " ");
 800d20a:	494f      	ldr	r1, [pc, #316]	@ (800d348 <shell_exec+0x220>)
 800d20c:	2000      	movs	r0, #0
 800d20e:	f000 fc03 	bl	800da18 <strtok>
 800d212:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	while (token != NULL && argc < ARGC_MAX)
 800d216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d003      	beq.n	800d226 <shell_exec+0xfe>
 800d21e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d222:	2b07      	cmp	r3, #7
 800d224:	dda2      	ble.n	800d16c <shell_exec+0x44>
	}

	// Check if any command was entered
	if (argc == 0)
 800d226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d11a      	bne.n	800d264 <shell_exec+0x13c>
	{
		snprintf(h_shell->print_buffer, BUFFER_SIZE, "Error: No command entered\r\n");
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	3304      	adds	r3, #4
 800d232:	4a47      	ldr	r2, [pc, #284]	@ (800d350 <shell_exec+0x228>)
 800d234:	2164      	movs	r1, #100	@ 0x64
 800d236:	4618      	mov	r0, r3
 800d238:	f000 fa4e 	bl	800d6d8 <sniprintf>
		h_shell->drv_shell.drv_shell_transmit(h_shell->print_buffer, strlen(h_shell->print_buffer));
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8d3 43cc 	ldr.w	r4, [r3, #972]	@ 0x3cc
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	1d1d      	adds	r5, r3, #4
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	3304      	adds	r3, #4
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7f2 ffe8 	bl	8000220 <strlen>
 800d250:	4603      	mov	r3, r0
 800d252:	b29b      	uxth	r3, r3
 800d254:	4619      	mov	r1, r3
 800d256:	4628      	mov	r0, r5
 800d258:	47a0      	blx	r4
		shell_drv_uart_waitTransmitComplete();  // Wait for transmission to complete
 800d25a:	f000 f981 	bl	800d560 <shell_drv_uart_waitTransmitComplete>
		return -1;
 800d25e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d262:	e06c      	b.n	800d33e <shell_exec+0x216>
	}

	// Lookup and execute the command
	char *user_func = argv[0]; // First token is the command
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	for (int i = 0; i < h_shell->shell_func_list_size; i++)
 800d26a:	2300      	movs	r3, #0
 800d26c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d270:	e044      	b.n	800d2fc <shell_exec+0x1d4>
	{
		if (strcmp(h_shell->shell_func_list[i].name, user_func) == 0)
 800d272:	6879      	ldr	r1, [r7, #4]
 800d274:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d278:	4613      	mov	r3, r2
 800d27a:	005b      	lsls	r3, r3, #1
 800d27c:	4413      	add	r3, r2
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	440b      	add	r3, r1
 800d282:	3368      	adds	r3, #104	@ 0x68
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7f2 ffd0 	bl	8000230 <strcmp>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d12d      	bne.n	800d2f2 <shell_exec+0x1ca>
		{
			// Execute the command
			int result = h_shell->shell_func_list[i].func(h_shell, argc, argv);
 800d296:	6879      	ldr	r1, [r7, #4]
 800d298:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d29c:	4613      	mov	r3, r2
 800d29e:	005b      	lsls	r3, r3, #1
 800d2a0:	4413      	add	r3, r2
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	440b      	add	r3, r1
 800d2a6:	336c      	adds	r3, #108	@ 0x6c
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f107 0208 	add.w	r2, r7, #8
 800d2ae:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	4798      	blx	r3
 800d2b6:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

			// Clean up dynamically allocated memory
			for (int j = 0; j < argc; j++)
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d2c0:	e00e      	b.n	800d2e0 <shell_exec+0x1b8>
			{
				free(argv[j]);
 800d2c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	33a8      	adds	r3, #168	@ 0xa8
 800d2ca:	443b      	add	r3, r7
 800d2cc:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f000 f957 	bl	800d584 <free>
			for (int j = 0; j < argc; j++)
 800d2d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d2da:	3301      	adds	r3, #1
 800d2dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d2e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d2e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	dbea      	blt.n	800d2c2 <shell_exec+0x19a>
			}
			return result;
 800d2ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d2f0:	e025      	b.n	800d33e <shell_exec+0x216>
	for (int i = 0; i < h_shell->shell_func_list_size; i++)
 800d2f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d304:	429a      	cmp	r2, r3
 800d306:	dbb4      	blt.n	800d272 <shell_exec+0x14a>
		}
	}
	snprintf(h_shell->print_buffer, BUFFER_SIZE, "Error: No such command %s\r\n",user_func);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	1d18      	adds	r0, r3, #4
 800d30c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d310:	4a10      	ldr	r2, [pc, #64]	@ (800d354 <shell_exec+0x22c>)
 800d312:	2164      	movs	r1, #100	@ 0x64
 800d314:	f000 f9e0 	bl	800d6d8 <sniprintf>
	h_shell->drv_shell.drv_shell_transmit(h_shell->print_buffer, strlen(h_shell->print_buffer));
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 43cc 	ldr.w	r4, [r3, #972]	@ 0x3cc
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	1d1d      	adds	r5, r3, #4
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	3304      	adds	r3, #4
 800d326:	4618      	mov	r0, r3
 800d328:	f7f2 ff7a 	bl	8000220 <strlen>
 800d32c:	4603      	mov	r3, r0
 800d32e:	b29b      	uxth	r3, r3
 800d330:	4619      	mov	r1, r3
 800d332:	4628      	mov	r0, r5
 800d334:	47a0      	blx	r4
	shell_drv_uart_waitTransmitComplete();  // Wait for transmission to complete
 800d336:	f000 f913 	bl	800d560 <shell_drv_uart_waitTransmitComplete>

	return -1;
 800d33a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff

}
 800d33e:	4618      	mov	r0, r3
 800d340:	37a8      	adds	r7, #168	@ 0xa8
 800d342:	46bd      	mov	sp, r7
 800d344:	bdb0      	pop	{r4, r5, r7, pc}
 800d346:	bf00      	nop
 800d348:	0800ee30 	.word	0x0800ee30
 800d34c:	0800ee34 	.word	0x0800ee34
 800d350:	0800ee58 	.word	0x0800ee58
 800d354:	0800ee74 	.word	0x0800ee74

0800d358 <shell_run>:
 *
 * @param h_shell Pointer to the main shell structure.
 * @return Always returns 0 as it is non-blocking and runs indefinitely.
 */
int shell_run(h_shell_t *h_shell)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
	static int reading = 0;  /**< Indicates if the shell is currently reading input */
	char c;
	int size;

	// State 1: Show prompt if not already reading input
	if (!reading)
 800d360:	4b57      	ldr	r3, [pc, #348]	@ (800d4c0 <shell_run+0x168>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d10a      	bne.n	800d37e <shell_run+0x26>
	{
		h_shell->drv_shell.drv_shell_transmit(prompt, 2); // Send the prompt
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 800d36e:	2102      	movs	r1, #2
 800d370:	4854      	ldr	r0, [pc, #336]	@ (800d4c4 <shell_run+0x16c>)
 800d372:	4798      	blx	r3
		shell_drv_uart_waitTransmitComplete();  // Wait for prompt transmission to complete
 800d374:	f000 f8f4 	bl	800d560 <shell_drv_uart_waitTransmitComplete>
		reading = 1;  // Switch to reading mode
 800d378:	4b51      	ldr	r3, [pc, #324]	@ (800d4c0 <shell_run+0x168>)
 800d37a:	2201      	movs	r2, #1
 800d37c:	601a      	str	r2, [r3, #0]
	}

	// State 2: Check for received character (non-blocking)
	if (shell_drv_uart_receive(&c, 1))
 800d37e:	f107 030b 	add.w	r3, r7, #11
 800d382:	2101      	movs	r1, #1
 800d384:	4618      	mov	r0, r3
 800d386:	f000 f8a9 	bl	800d4dc <shell_drv_uart_receive>
 800d38a:	4603      	mov	r3, r0
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	f000 8091 	beq.w	800d4b4 <shell_run+0x15c>
	{
		shell_drv_uart_waitReceiveComplete();  // Wait for character reception
 800d392:	f000 f8db 	bl	800d54c <shell_drv_uart_waitReceiveComplete>

		// Process the received character
		switch (c)
 800d396:	7afb      	ldrb	r3, [r7, #11]
 800d398:	2b08      	cmp	r3, #8
 800d39a:	d055      	beq.n	800d448 <shell_run+0xf0>
 800d39c:	2b0d      	cmp	r3, #13
 800d39e:	d16c      	bne.n	800d47a <shell_run+0x122>
		{
		case '\r':  // Process RETURN key
			if (pos > 0)  // Only process if there's something in the buffer
 800d3a0:	4b49      	ldr	r3, [pc, #292]	@ (800d4c8 <shell_run+0x170>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	dd35      	ble.n	800d414 <shell_run+0xbc>
			{
				// Transmit newline to indicate command entry completion
				size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	3304      	adds	r3, #4
 800d3ac:	4a47      	ldr	r2, [pc, #284]	@ (800d4cc <shell_run+0x174>)
 800d3ae:	2164      	movs	r1, #100	@ 0x64
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f000 f991 	bl	800d6d8 <sniprintf>
 800d3b6:	60f8      	str	r0, [r7, #12]
				h_shell->drv_shell.drv_shell_transmit(h_shell->print_buffer, size);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	3204      	adds	r2, #4
 800d3c2:	68f9      	ldr	r1, [r7, #12]
 800d3c4:	b289      	uxth	r1, r1
 800d3c6:	4610      	mov	r0, r2
 800d3c8:	4798      	blx	r3
				shell_drv_uart_waitTransmitComplete();
 800d3ca:	f000 f8c9 	bl	800d560 <shell_drv_uart_waitTransmitComplete>

				// Add NULL terminator to the command buffer and echo the command
				h_shell->cmd_buffer[pos++] = 0;
 800d3ce:	4b3e      	ldr	r3, [pc, #248]	@ (800d4c8 <shell_run+0x170>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	1c5a      	adds	r2, r3, #1
 800d3d4:	493c      	ldr	r1, [pc, #240]	@ (800d4c8 <shell_run+0x170>)
 800d3d6:	600a      	str	r2, [r1, #0]
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	4413      	add	r3, r2
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f883 2368 	strb.w	r2, [r3, #872]	@ 0x368
				size = snprintf(h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	1d18      	adds	r0, r3, #4
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800d3ec:	4a38      	ldr	r2, [pc, #224]	@ (800d4d0 <shell_run+0x178>)
 800d3ee:	2164      	movs	r1, #100	@ 0x64
 800d3f0:	f000 f972 	bl	800d6d8 <sniprintf>
 800d3f4:	60f8      	str	r0, [r7, #12]
				h_shell->drv_shell.drv_shell_transmit(h_shell->print_buffer, size);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	3204      	adds	r2, #4
 800d400:	68f9      	ldr	r1, [r7, #12]
 800d402:	b289      	uxth	r1, r1
 800d404:	4610      	mov	r0, r2
 800d406:	4798      	blx	r3
				shell_drv_uart_waitTransmitComplete();
 800d408:	f000 f8aa 	bl	800d560 <shell_drv_uart_waitTransmitComplete>

				shell_exec(h_shell);  // Execute the command after input is complete
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f7ff fe8b 	bl	800d128 <shell_exec>
 800d412:	e012      	b.n	800d43a <shell_run+0xe2>
			}
			else  // If buffer is empty, print an error or ignore
			{
				size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "\r\nError: No command entered\r\n");
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	3304      	adds	r3, #4
 800d418:	4a2e      	ldr	r2, [pc, #184]	@ (800d4d4 <shell_run+0x17c>)
 800d41a:	2164      	movs	r1, #100	@ 0x64
 800d41c:	4618      	mov	r0, r3
 800d41e:	f000 f95b 	bl	800d6d8 <sniprintf>
 800d422:	60f8      	str	r0, [r7, #12]
				h_shell->drv_shell.drv_shell_transmit(h_shell->print_buffer, size);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	3204      	adds	r2, #4
 800d42e:	68f9      	ldr	r1, [r7, #12]
 800d430:	b289      	uxth	r1, r1
 800d432:	4610      	mov	r0, r2
 800d434:	4798      	blx	r3
				shell_drv_uart_waitTransmitComplete();
 800d436:	f000 f893 	bl	800d560 <shell_drv_uart_waitTransmitComplete>
			}
			// Reset reading state and buffer
			reading = 0;  // Exit reading state
 800d43a:	4b21      	ldr	r3, [pc, #132]	@ (800d4c0 <shell_run+0x168>)
 800d43c:	2200      	movs	r2, #0
 800d43e:	601a      	str	r2, [r3, #0]
			pos = 0;      // Reset buffer
 800d440:	4b21      	ldr	r3, [pc, #132]	@ (800d4c8 <shell_run+0x170>)
 800d442:	2200      	movs	r2, #0
 800d444:	601a      	str	r2, [r3, #0]
			break;
 800d446:	e035      	b.n	800d4b4 <shell_run+0x15c>

		case '\b':  // Process BACKSPACE key
			if (pos > 0)
 800d448:	4b1f      	ldr	r3, [pc, #124]	@ (800d4c8 <shell_run+0x170>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	dd2e      	ble.n	800d4ae <shell_run+0x156>
			{
				pos--;  // Remove last character from buffer
 800d450:	4b1d      	ldr	r3, [pc, #116]	@ (800d4c8 <shell_run+0x170>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	3b01      	subs	r3, #1
 800d456:	4a1c      	ldr	r2, [pc, #112]	@ (800d4c8 <shell_run+0x170>)
 800d458:	6013      	str	r3, [r2, #0]
				h_shell->drv_shell.drv_shell_transmit(backspace, sizeof(backspace) - 1); // Send backspace sequence
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 800d460:	2103      	movs	r1, #3
 800d462:	481d      	ldr	r0, [pc, #116]	@ (800d4d8 <shell_run+0x180>)
 800d464:	4798      	blx	r3
				shell_drv_uart_waitTransmitComplete();  // Wait for transmission to complete
 800d466:	f000 f87b 	bl	800d560 <shell_drv_uart_waitTransmitComplete>
				h_shell->cmd_buffer[pos] = 0;  // Null terminate the command buffer after removing char
 800d46a:	4b17      	ldr	r3, [pc, #92]	@ (800d4c8 <shell_run+0x170>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	4413      	add	r3, r2
 800d472:	2200      	movs	r2, #0
 800d474:	f883 2368 	strb.w	r2, [r3, #872]	@ 0x368
			}
			break;
 800d478:	e019      	b.n	800d4ae <shell_run+0x156>

		default:  // Handle other characters
			if (pos < BUFFER_SIZE)
 800d47a:	4b13      	ldr	r3, [pc, #76]	@ (800d4c8 <shell_run+0x170>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2b63      	cmp	r3, #99	@ 0x63
 800d480:	dc17      	bgt.n	800d4b2 <shell_run+0x15a>
			{
				h_shell->drv_shell.drv_shell_transmit(&c, 1);  // Echo the character back to terminal
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 800d488:	f107 020b 	add.w	r2, r7, #11
 800d48c:	2101      	movs	r1, #1
 800d48e:	4610      	mov	r0, r2
 800d490:	4798      	blx	r3
				shell_drv_uart_waitTransmitComplete();
 800d492:	f000 f865 	bl	800d560 <shell_drv_uart_waitTransmitComplete>

				h_shell->cmd_buffer[pos++] = c;  // Store the character in buffer
 800d496:	4b0c      	ldr	r3, [pc, #48]	@ (800d4c8 <shell_run+0x170>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	1c5a      	adds	r2, r3, #1
 800d49c:	490a      	ldr	r1, [pc, #40]	@ (800d4c8 <shell_run+0x170>)
 800d49e:	600a      	str	r2, [r1, #0]
 800d4a0:	7af9      	ldrb	r1, [r7, #11]
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	4413      	add	r3, r2
 800d4a6:	460a      	mov	r2, r1
 800d4a8:	f883 2368 	strb.w	r2, [r3, #872]	@ 0x368
			}
			break;
 800d4ac:	e001      	b.n	800d4b2 <shell_run+0x15a>
			break;
 800d4ae:	bf00      	nop
 800d4b0:	e000      	b.n	800d4b4 <shell_run+0x15c>
			break;
 800d4b2:	bf00      	nop
		}
	}

	return 0;  // Function returns immediately without blocking
 800d4b4:	2300      	movs	r3, #0
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3710      	adds	r7, #16
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	20004224 	.word	0x20004224
 800d4c4:	20000014 	.word	0x20000014
 800d4c8:	20004228 	.word	0x20004228
 800d4cc:	0800ee90 	.word	0x0800ee90
 800d4d0:	0800ee94 	.word	0x0800ee94
 800d4d4:	0800ee9c 	.word	0x0800ee9c
 800d4d8:	20000010 	.word	0x20000010

0800d4dc <shell_drv_uart_receive>:
 * @param pData Pointer to the buffer where received data will be stored.
 * @param size Number of bytes to receive.
 * @return Number of bytes expected to be received.
 */
uint8_t shell_drv_uart_receive(char *pData, uint16_t size)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	807b      	strh	r3, [r7, #2]
    // Register the current task as the one to notify when RX is complete
    uartRxTaskHandle = xTaskGetCurrentTaskHandle();
 800d4e8:	f7fe f8b6 	bl	800b658 <xTaskGetCurrentTaskHandle>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	4a07      	ldr	r2, [pc, #28]	@ (800d50c <shell_drv_uart_receive+0x30>)
 800d4f0:	6013      	str	r3, [r2, #0]

    // Start UART reception in interrupt mode (non-blocking)
    HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)pData, size);
 800d4f2:	887b      	ldrh	r3, [r7, #2]
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	6879      	ldr	r1, [r7, #4]
 800d4f8:	4805      	ldr	r0, [pc, #20]	@ (800d510 <shell_drv_uart_receive+0x34>)
 800d4fa:	f7fa fdfb 	bl	80080f4 <HAL_UART_Receive_IT>

    // Task will check completion via notification, so return immediately
    return size;
 800d4fe:	887b      	ldrh	r3, [r7, #2]
 800d500:	b2db      	uxtb	r3, r3
}
 800d502:	4618      	mov	r0, r3
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	2000422c 	.word	0x2000422c
 800d510:	20001c50 	.word	0x20001c50

0800d514 <shell_drv_uart_transmit>:
 * @param pData Pointer to the buffer containing data to be transmitted.
 * @param size Number of bytes to transmit.
 * @return Number of bytes expected to be transmitted.
 */
uint8_t shell_drv_uart_transmit(char *pData, uint16_t size)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b082      	sub	sp, #8
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	460b      	mov	r3, r1
 800d51e:	807b      	strh	r3, [r7, #2]
    // Register the current task as the one to notify when TX is complete
    uartTxTaskHandle = xTaskGetCurrentTaskHandle();
 800d520:	f7fe f89a 	bl	800b658 <xTaskGetCurrentTaskHandle>
 800d524:	4603      	mov	r3, r0
 800d526:	4a07      	ldr	r2, [pc, #28]	@ (800d544 <shell_drv_uart_transmit+0x30>)
 800d528:	6013      	str	r3, [r2, #0]

    // Start UART transmission in interrupt mode (non-blocking)
    HAL_UART_Transmit_IT(&UART_DEVICE, (uint8_t*)pData, size);
 800d52a:	887b      	ldrh	r3, [r7, #2]
 800d52c:	461a      	mov	r2, r3
 800d52e:	6879      	ldr	r1, [r7, #4]
 800d530:	4805      	ldr	r0, [pc, #20]	@ (800d548 <shell_drv_uart_transmit+0x34>)
 800d532:	f7fa fd4b 	bl	8007fcc <HAL_UART_Transmit_IT>

    // Task will check completion via notification, so return immediately
    return size;
 800d536:	887b      	ldrh	r3, [r7, #2]
 800d538:	b2db      	uxtb	r3, r3
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3708      	adds	r7, #8
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	20004230 	.word	0x20004230
 800d548:	20001c50 	.word	0x20001c50

0800d54c <shell_drv_uart_waitReceiveComplete>:
 * the completion of the UART receive operation.
 *
 * @return Status of receive completion, typically 1 on success.
 */
uint8_t shell_drv_uart_waitReceiveComplete(void)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	af00      	add	r7, sp, #0
    // Wait for RX task notification (blocking if necessary)
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800d550:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800d554:	2001      	movs	r0, #1
 800d556:	f7fe f935 	bl	800b7c4 <ulTaskNotifyTake>
    return 1;
 800d55a:	2301      	movs	r3, #1
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <shell_drv_uart_waitTransmitComplete>:
 * the completion of the UART transmit operation.
 *
 * @return Status of transmit completion, typically 1 on success.
 */
uint8_t shell_drv_uart_waitTransmitComplete(void)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	af00      	add	r7, sp, #0
    // Wait for TX task notification (blocking if necessary)
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800d564:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800d568:	2001      	movs	r0, #1
 800d56a:	f7fe f92b 	bl	800b7c4 <ulTaskNotifyTake>
    return 1;
 800d56e:	2301      	movs	r3, #1
}
 800d570:	4618      	mov	r0, r3
 800d572:	bd80      	pop	{r7, pc}

0800d574 <malloc>:
 800d574:	4b02      	ldr	r3, [pc, #8]	@ (800d580 <malloc+0xc>)
 800d576:	4601      	mov	r1, r0
 800d578:	6818      	ldr	r0, [r3, #0]
 800d57a:	f000 b82d 	b.w	800d5d8 <_malloc_r>
 800d57e:	bf00      	nop
 800d580:	20000024 	.word	0x20000024

0800d584 <free>:
 800d584:	4b02      	ldr	r3, [pc, #8]	@ (800d590 <free+0xc>)
 800d586:	4601      	mov	r1, r0
 800d588:	6818      	ldr	r0, [r3, #0]
 800d58a:	f000 bb69 	b.w	800dc60 <_free_r>
 800d58e:	bf00      	nop
 800d590:	20000024 	.word	0x20000024

0800d594 <sbrk_aligned>:
 800d594:	b570      	push	{r4, r5, r6, lr}
 800d596:	4e0f      	ldr	r6, [pc, #60]	@ (800d5d4 <sbrk_aligned+0x40>)
 800d598:	460c      	mov	r4, r1
 800d59a:	6831      	ldr	r1, [r6, #0]
 800d59c:	4605      	mov	r5, r0
 800d59e:	b911      	cbnz	r1, 800d5a6 <sbrk_aligned+0x12>
 800d5a0:	f000 faf4 	bl	800db8c <_sbrk_r>
 800d5a4:	6030      	str	r0, [r6, #0]
 800d5a6:	4621      	mov	r1, r4
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	f000 faef 	bl	800db8c <_sbrk_r>
 800d5ae:	1c43      	adds	r3, r0, #1
 800d5b0:	d103      	bne.n	800d5ba <sbrk_aligned+0x26>
 800d5b2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ba:	1cc4      	adds	r4, r0, #3
 800d5bc:	f024 0403 	bic.w	r4, r4, #3
 800d5c0:	42a0      	cmp	r0, r4
 800d5c2:	d0f8      	beq.n	800d5b6 <sbrk_aligned+0x22>
 800d5c4:	1a21      	subs	r1, r4, r0
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	f000 fae0 	bl	800db8c <_sbrk_r>
 800d5cc:	3001      	adds	r0, #1
 800d5ce:	d1f2      	bne.n	800d5b6 <sbrk_aligned+0x22>
 800d5d0:	e7ef      	b.n	800d5b2 <sbrk_aligned+0x1e>
 800d5d2:	bf00      	nop
 800d5d4:	20004234 	.word	0x20004234

0800d5d8 <_malloc_r>:
 800d5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5dc:	1ccd      	adds	r5, r1, #3
 800d5de:	f025 0503 	bic.w	r5, r5, #3
 800d5e2:	3508      	adds	r5, #8
 800d5e4:	2d0c      	cmp	r5, #12
 800d5e6:	bf38      	it	cc
 800d5e8:	250c      	movcc	r5, #12
 800d5ea:	2d00      	cmp	r5, #0
 800d5ec:	4606      	mov	r6, r0
 800d5ee:	db01      	blt.n	800d5f4 <_malloc_r+0x1c>
 800d5f0:	42a9      	cmp	r1, r5
 800d5f2:	d904      	bls.n	800d5fe <_malloc_r+0x26>
 800d5f4:	230c      	movs	r3, #12
 800d5f6:	6033      	str	r3, [r6, #0]
 800d5f8:	2000      	movs	r0, #0
 800d5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d6d4 <_malloc_r+0xfc>
 800d602:	f000 f89d 	bl	800d740 <__malloc_lock>
 800d606:	f8d8 3000 	ldr.w	r3, [r8]
 800d60a:	461c      	mov	r4, r3
 800d60c:	bb44      	cbnz	r4, 800d660 <_malloc_r+0x88>
 800d60e:	4629      	mov	r1, r5
 800d610:	4630      	mov	r0, r6
 800d612:	f7ff ffbf 	bl	800d594 <sbrk_aligned>
 800d616:	1c43      	adds	r3, r0, #1
 800d618:	4604      	mov	r4, r0
 800d61a:	d158      	bne.n	800d6ce <_malloc_r+0xf6>
 800d61c:	f8d8 4000 	ldr.w	r4, [r8]
 800d620:	4627      	mov	r7, r4
 800d622:	2f00      	cmp	r7, #0
 800d624:	d143      	bne.n	800d6ae <_malloc_r+0xd6>
 800d626:	2c00      	cmp	r4, #0
 800d628:	d04b      	beq.n	800d6c2 <_malloc_r+0xea>
 800d62a:	6823      	ldr	r3, [r4, #0]
 800d62c:	4639      	mov	r1, r7
 800d62e:	4630      	mov	r0, r6
 800d630:	eb04 0903 	add.w	r9, r4, r3
 800d634:	f000 faaa 	bl	800db8c <_sbrk_r>
 800d638:	4581      	cmp	r9, r0
 800d63a:	d142      	bne.n	800d6c2 <_malloc_r+0xea>
 800d63c:	6821      	ldr	r1, [r4, #0]
 800d63e:	1a6d      	subs	r5, r5, r1
 800d640:	4629      	mov	r1, r5
 800d642:	4630      	mov	r0, r6
 800d644:	f7ff ffa6 	bl	800d594 <sbrk_aligned>
 800d648:	3001      	adds	r0, #1
 800d64a:	d03a      	beq.n	800d6c2 <_malloc_r+0xea>
 800d64c:	6823      	ldr	r3, [r4, #0]
 800d64e:	442b      	add	r3, r5
 800d650:	6023      	str	r3, [r4, #0]
 800d652:	f8d8 3000 	ldr.w	r3, [r8]
 800d656:	685a      	ldr	r2, [r3, #4]
 800d658:	bb62      	cbnz	r2, 800d6b4 <_malloc_r+0xdc>
 800d65a:	f8c8 7000 	str.w	r7, [r8]
 800d65e:	e00f      	b.n	800d680 <_malloc_r+0xa8>
 800d660:	6822      	ldr	r2, [r4, #0]
 800d662:	1b52      	subs	r2, r2, r5
 800d664:	d420      	bmi.n	800d6a8 <_malloc_r+0xd0>
 800d666:	2a0b      	cmp	r2, #11
 800d668:	d917      	bls.n	800d69a <_malloc_r+0xc2>
 800d66a:	1961      	adds	r1, r4, r5
 800d66c:	42a3      	cmp	r3, r4
 800d66e:	6025      	str	r5, [r4, #0]
 800d670:	bf18      	it	ne
 800d672:	6059      	strne	r1, [r3, #4]
 800d674:	6863      	ldr	r3, [r4, #4]
 800d676:	bf08      	it	eq
 800d678:	f8c8 1000 	streq.w	r1, [r8]
 800d67c:	5162      	str	r2, [r4, r5]
 800d67e:	604b      	str	r3, [r1, #4]
 800d680:	4630      	mov	r0, r6
 800d682:	f000 f863 	bl	800d74c <__malloc_unlock>
 800d686:	f104 000b 	add.w	r0, r4, #11
 800d68a:	1d23      	adds	r3, r4, #4
 800d68c:	f020 0007 	bic.w	r0, r0, #7
 800d690:	1ac2      	subs	r2, r0, r3
 800d692:	bf1c      	itt	ne
 800d694:	1a1b      	subne	r3, r3, r0
 800d696:	50a3      	strne	r3, [r4, r2]
 800d698:	e7af      	b.n	800d5fa <_malloc_r+0x22>
 800d69a:	6862      	ldr	r2, [r4, #4]
 800d69c:	42a3      	cmp	r3, r4
 800d69e:	bf0c      	ite	eq
 800d6a0:	f8c8 2000 	streq.w	r2, [r8]
 800d6a4:	605a      	strne	r2, [r3, #4]
 800d6a6:	e7eb      	b.n	800d680 <_malloc_r+0xa8>
 800d6a8:	4623      	mov	r3, r4
 800d6aa:	6864      	ldr	r4, [r4, #4]
 800d6ac:	e7ae      	b.n	800d60c <_malloc_r+0x34>
 800d6ae:	463c      	mov	r4, r7
 800d6b0:	687f      	ldr	r7, [r7, #4]
 800d6b2:	e7b6      	b.n	800d622 <_malloc_r+0x4a>
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	42a3      	cmp	r3, r4
 800d6ba:	d1fb      	bne.n	800d6b4 <_malloc_r+0xdc>
 800d6bc:	2300      	movs	r3, #0
 800d6be:	6053      	str	r3, [r2, #4]
 800d6c0:	e7de      	b.n	800d680 <_malloc_r+0xa8>
 800d6c2:	230c      	movs	r3, #12
 800d6c4:	6033      	str	r3, [r6, #0]
 800d6c6:	4630      	mov	r0, r6
 800d6c8:	f000 f840 	bl	800d74c <__malloc_unlock>
 800d6cc:	e794      	b.n	800d5f8 <_malloc_r+0x20>
 800d6ce:	6005      	str	r5, [r0, #0]
 800d6d0:	e7d6      	b.n	800d680 <_malloc_r+0xa8>
 800d6d2:	bf00      	nop
 800d6d4:	20004238 	.word	0x20004238

0800d6d8 <sniprintf>:
 800d6d8:	b40c      	push	{r2, r3}
 800d6da:	b530      	push	{r4, r5, lr}
 800d6dc:	4b17      	ldr	r3, [pc, #92]	@ (800d73c <sniprintf+0x64>)
 800d6de:	1e0c      	subs	r4, r1, #0
 800d6e0:	681d      	ldr	r5, [r3, #0]
 800d6e2:	b09d      	sub	sp, #116	@ 0x74
 800d6e4:	da08      	bge.n	800d6f8 <sniprintf+0x20>
 800d6e6:	238b      	movs	r3, #139	@ 0x8b
 800d6e8:	602b      	str	r3, [r5, #0]
 800d6ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6ee:	b01d      	add	sp, #116	@ 0x74
 800d6f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6f4:	b002      	add	sp, #8
 800d6f6:	4770      	bx	lr
 800d6f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d6fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d700:	bf14      	ite	ne
 800d702:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800d706:	4623      	moveq	r3, r4
 800d708:	9304      	str	r3, [sp, #16]
 800d70a:	9307      	str	r3, [sp, #28]
 800d70c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d710:	9002      	str	r0, [sp, #8]
 800d712:	9006      	str	r0, [sp, #24]
 800d714:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d718:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d71a:	ab21      	add	r3, sp, #132	@ 0x84
 800d71c:	a902      	add	r1, sp, #8
 800d71e:	4628      	mov	r0, r5
 800d720:	9301      	str	r3, [sp, #4]
 800d722:	f000 fb43 	bl	800ddac <_svfiprintf_r>
 800d726:	1c43      	adds	r3, r0, #1
 800d728:	bfbc      	itt	lt
 800d72a:	238b      	movlt	r3, #139	@ 0x8b
 800d72c:	602b      	strlt	r3, [r5, #0]
 800d72e:	2c00      	cmp	r4, #0
 800d730:	d0dd      	beq.n	800d6ee <sniprintf+0x16>
 800d732:	9b02      	ldr	r3, [sp, #8]
 800d734:	2200      	movs	r2, #0
 800d736:	701a      	strb	r2, [r3, #0]
 800d738:	e7d9      	b.n	800d6ee <sniprintf+0x16>
 800d73a:	bf00      	nop
 800d73c:	20000024 	.word	0x20000024

0800d740 <__malloc_lock>:
 800d740:	4801      	ldr	r0, [pc, #4]	@ (800d748 <__malloc_lock+0x8>)
 800d742:	f000 ba5e 	b.w	800dc02 <__retarget_lock_acquire_recursive>
 800d746:	bf00      	nop
 800d748:	2000437c 	.word	0x2000437c

0800d74c <__malloc_unlock>:
 800d74c:	4801      	ldr	r0, [pc, #4]	@ (800d754 <__malloc_unlock+0x8>)
 800d74e:	f000 ba59 	b.w	800dc04 <__retarget_lock_release_recursive>
 800d752:	bf00      	nop
 800d754:	2000437c 	.word	0x2000437c

0800d758 <std>:
 800d758:	2300      	movs	r3, #0
 800d75a:	b510      	push	{r4, lr}
 800d75c:	4604      	mov	r4, r0
 800d75e:	e9c0 3300 	strd	r3, r3, [r0]
 800d762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d766:	6083      	str	r3, [r0, #8]
 800d768:	8181      	strh	r1, [r0, #12]
 800d76a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d76c:	81c2      	strh	r2, [r0, #14]
 800d76e:	6183      	str	r3, [r0, #24]
 800d770:	4619      	mov	r1, r3
 800d772:	2208      	movs	r2, #8
 800d774:	305c      	adds	r0, #92	@ 0x5c
 800d776:	f000 f9ab 	bl	800dad0 <memset>
 800d77a:	4b0d      	ldr	r3, [pc, #52]	@ (800d7b0 <std+0x58>)
 800d77c:	6263      	str	r3, [r4, #36]	@ 0x24
 800d77e:	4b0d      	ldr	r3, [pc, #52]	@ (800d7b4 <std+0x5c>)
 800d780:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d782:	4b0d      	ldr	r3, [pc, #52]	@ (800d7b8 <std+0x60>)
 800d784:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d786:	4b0d      	ldr	r3, [pc, #52]	@ (800d7bc <std+0x64>)
 800d788:	6323      	str	r3, [r4, #48]	@ 0x30
 800d78a:	4b0d      	ldr	r3, [pc, #52]	@ (800d7c0 <std+0x68>)
 800d78c:	6224      	str	r4, [r4, #32]
 800d78e:	429c      	cmp	r4, r3
 800d790:	d006      	beq.n	800d7a0 <std+0x48>
 800d792:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d796:	4294      	cmp	r4, r2
 800d798:	d002      	beq.n	800d7a0 <std+0x48>
 800d79a:	33d0      	adds	r3, #208	@ 0xd0
 800d79c:	429c      	cmp	r4, r3
 800d79e:	d105      	bne.n	800d7ac <std+0x54>
 800d7a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7a8:	f000 ba2a 	b.w	800dc00 <__retarget_lock_init_recursive>
 800d7ac:	bd10      	pop	{r4, pc}
 800d7ae:	bf00      	nop
 800d7b0:	0800e69d 	.word	0x0800e69d
 800d7b4:	0800e6bf 	.word	0x0800e6bf
 800d7b8:	0800e6f7 	.word	0x0800e6f7
 800d7bc:	0800e71b 	.word	0x0800e71b
 800d7c0:	2000423c 	.word	0x2000423c

0800d7c4 <stdio_exit_handler>:
 800d7c4:	4a02      	ldr	r2, [pc, #8]	@ (800d7d0 <stdio_exit_handler+0xc>)
 800d7c6:	4903      	ldr	r1, [pc, #12]	@ (800d7d4 <stdio_exit_handler+0x10>)
 800d7c8:	4803      	ldr	r0, [pc, #12]	@ (800d7d8 <stdio_exit_handler+0x14>)
 800d7ca:	f000 b869 	b.w	800d8a0 <_fwalk_sglue>
 800d7ce:	bf00      	nop
 800d7d0:	20000018 	.word	0x20000018
 800d7d4:	0800e64d 	.word	0x0800e64d
 800d7d8:	20000028 	.word	0x20000028

0800d7dc <cleanup_stdio>:
 800d7dc:	6841      	ldr	r1, [r0, #4]
 800d7de:	4b0c      	ldr	r3, [pc, #48]	@ (800d810 <cleanup_stdio+0x34>)
 800d7e0:	4299      	cmp	r1, r3
 800d7e2:	b510      	push	{r4, lr}
 800d7e4:	4604      	mov	r4, r0
 800d7e6:	d001      	beq.n	800d7ec <cleanup_stdio+0x10>
 800d7e8:	f000 ff30 	bl	800e64c <_fflush_r>
 800d7ec:	68a1      	ldr	r1, [r4, #8]
 800d7ee:	4b09      	ldr	r3, [pc, #36]	@ (800d814 <cleanup_stdio+0x38>)
 800d7f0:	4299      	cmp	r1, r3
 800d7f2:	d002      	beq.n	800d7fa <cleanup_stdio+0x1e>
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	f000 ff29 	bl	800e64c <_fflush_r>
 800d7fa:	68e1      	ldr	r1, [r4, #12]
 800d7fc:	4b06      	ldr	r3, [pc, #24]	@ (800d818 <cleanup_stdio+0x3c>)
 800d7fe:	4299      	cmp	r1, r3
 800d800:	d004      	beq.n	800d80c <cleanup_stdio+0x30>
 800d802:	4620      	mov	r0, r4
 800d804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d808:	f000 bf20 	b.w	800e64c <_fflush_r>
 800d80c:	bd10      	pop	{r4, pc}
 800d80e:	bf00      	nop
 800d810:	2000423c 	.word	0x2000423c
 800d814:	200042a4 	.word	0x200042a4
 800d818:	2000430c 	.word	0x2000430c

0800d81c <global_stdio_init.part.0>:
 800d81c:	b510      	push	{r4, lr}
 800d81e:	4b0b      	ldr	r3, [pc, #44]	@ (800d84c <global_stdio_init.part.0+0x30>)
 800d820:	4c0b      	ldr	r4, [pc, #44]	@ (800d850 <global_stdio_init.part.0+0x34>)
 800d822:	4a0c      	ldr	r2, [pc, #48]	@ (800d854 <global_stdio_init.part.0+0x38>)
 800d824:	601a      	str	r2, [r3, #0]
 800d826:	4620      	mov	r0, r4
 800d828:	2200      	movs	r2, #0
 800d82a:	2104      	movs	r1, #4
 800d82c:	f7ff ff94 	bl	800d758 <std>
 800d830:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d834:	2201      	movs	r2, #1
 800d836:	2109      	movs	r1, #9
 800d838:	f7ff ff8e 	bl	800d758 <std>
 800d83c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d840:	2202      	movs	r2, #2
 800d842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d846:	2112      	movs	r1, #18
 800d848:	f7ff bf86 	b.w	800d758 <std>
 800d84c:	20004374 	.word	0x20004374
 800d850:	2000423c 	.word	0x2000423c
 800d854:	0800d7c5 	.word	0x0800d7c5

0800d858 <__sfp_lock_acquire>:
 800d858:	4801      	ldr	r0, [pc, #4]	@ (800d860 <__sfp_lock_acquire+0x8>)
 800d85a:	f000 b9d2 	b.w	800dc02 <__retarget_lock_acquire_recursive>
 800d85e:	bf00      	nop
 800d860:	2000437d 	.word	0x2000437d

0800d864 <__sfp_lock_release>:
 800d864:	4801      	ldr	r0, [pc, #4]	@ (800d86c <__sfp_lock_release+0x8>)
 800d866:	f000 b9cd 	b.w	800dc04 <__retarget_lock_release_recursive>
 800d86a:	bf00      	nop
 800d86c:	2000437d 	.word	0x2000437d

0800d870 <__sinit>:
 800d870:	b510      	push	{r4, lr}
 800d872:	4604      	mov	r4, r0
 800d874:	f7ff fff0 	bl	800d858 <__sfp_lock_acquire>
 800d878:	6a23      	ldr	r3, [r4, #32]
 800d87a:	b11b      	cbz	r3, 800d884 <__sinit+0x14>
 800d87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d880:	f7ff bff0 	b.w	800d864 <__sfp_lock_release>
 800d884:	4b04      	ldr	r3, [pc, #16]	@ (800d898 <__sinit+0x28>)
 800d886:	6223      	str	r3, [r4, #32]
 800d888:	4b04      	ldr	r3, [pc, #16]	@ (800d89c <__sinit+0x2c>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d1f5      	bne.n	800d87c <__sinit+0xc>
 800d890:	f7ff ffc4 	bl	800d81c <global_stdio_init.part.0>
 800d894:	e7f2      	b.n	800d87c <__sinit+0xc>
 800d896:	bf00      	nop
 800d898:	0800d7dd 	.word	0x0800d7dd
 800d89c:	20004374 	.word	0x20004374

0800d8a0 <_fwalk_sglue>:
 800d8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8a4:	4607      	mov	r7, r0
 800d8a6:	4688      	mov	r8, r1
 800d8a8:	4614      	mov	r4, r2
 800d8aa:	2600      	movs	r6, #0
 800d8ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8b0:	f1b9 0901 	subs.w	r9, r9, #1
 800d8b4:	d505      	bpl.n	800d8c2 <_fwalk_sglue+0x22>
 800d8b6:	6824      	ldr	r4, [r4, #0]
 800d8b8:	2c00      	cmp	r4, #0
 800d8ba:	d1f7      	bne.n	800d8ac <_fwalk_sglue+0xc>
 800d8bc:	4630      	mov	r0, r6
 800d8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8c2:	89ab      	ldrh	r3, [r5, #12]
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d907      	bls.n	800d8d8 <_fwalk_sglue+0x38>
 800d8c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	d003      	beq.n	800d8d8 <_fwalk_sglue+0x38>
 800d8d0:	4629      	mov	r1, r5
 800d8d2:	4638      	mov	r0, r7
 800d8d4:	47c0      	blx	r8
 800d8d6:	4306      	orrs	r6, r0
 800d8d8:	3568      	adds	r5, #104	@ 0x68
 800d8da:	e7e9      	b.n	800d8b0 <_fwalk_sglue+0x10>

0800d8dc <iprintf>:
 800d8dc:	b40f      	push	{r0, r1, r2, r3}
 800d8de:	b507      	push	{r0, r1, r2, lr}
 800d8e0:	4906      	ldr	r1, [pc, #24]	@ (800d8fc <iprintf+0x20>)
 800d8e2:	ab04      	add	r3, sp, #16
 800d8e4:	6808      	ldr	r0, [r1, #0]
 800d8e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ea:	6881      	ldr	r1, [r0, #8]
 800d8ec:	9301      	str	r3, [sp, #4]
 800d8ee:	f000 fb83 	bl	800dff8 <_vfiprintf_r>
 800d8f2:	b003      	add	sp, #12
 800d8f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8f8:	b004      	add	sp, #16
 800d8fa:	4770      	bx	lr
 800d8fc:	20000024 	.word	0x20000024

0800d900 <_puts_r>:
 800d900:	6a03      	ldr	r3, [r0, #32]
 800d902:	b570      	push	{r4, r5, r6, lr}
 800d904:	6884      	ldr	r4, [r0, #8]
 800d906:	4605      	mov	r5, r0
 800d908:	460e      	mov	r6, r1
 800d90a:	b90b      	cbnz	r3, 800d910 <_puts_r+0x10>
 800d90c:	f7ff ffb0 	bl	800d870 <__sinit>
 800d910:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d912:	07db      	lsls	r3, r3, #31
 800d914:	d405      	bmi.n	800d922 <_puts_r+0x22>
 800d916:	89a3      	ldrh	r3, [r4, #12]
 800d918:	0598      	lsls	r0, r3, #22
 800d91a:	d402      	bmi.n	800d922 <_puts_r+0x22>
 800d91c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d91e:	f000 f970 	bl	800dc02 <__retarget_lock_acquire_recursive>
 800d922:	89a3      	ldrh	r3, [r4, #12]
 800d924:	0719      	lsls	r1, r3, #28
 800d926:	d502      	bpl.n	800d92e <_puts_r+0x2e>
 800d928:	6923      	ldr	r3, [r4, #16]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d135      	bne.n	800d99a <_puts_r+0x9a>
 800d92e:	4621      	mov	r1, r4
 800d930:	4628      	mov	r0, r5
 800d932:	f000 ff75 	bl	800e820 <__swsetup_r>
 800d936:	b380      	cbz	r0, 800d99a <_puts_r+0x9a>
 800d938:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d93c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d93e:	07da      	lsls	r2, r3, #31
 800d940:	d405      	bmi.n	800d94e <_puts_r+0x4e>
 800d942:	89a3      	ldrh	r3, [r4, #12]
 800d944:	059b      	lsls	r3, r3, #22
 800d946:	d402      	bmi.n	800d94e <_puts_r+0x4e>
 800d948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d94a:	f000 f95b 	bl	800dc04 <__retarget_lock_release_recursive>
 800d94e:	4628      	mov	r0, r5
 800d950:	bd70      	pop	{r4, r5, r6, pc}
 800d952:	2b00      	cmp	r3, #0
 800d954:	da04      	bge.n	800d960 <_puts_r+0x60>
 800d956:	69a2      	ldr	r2, [r4, #24]
 800d958:	429a      	cmp	r2, r3
 800d95a:	dc17      	bgt.n	800d98c <_puts_r+0x8c>
 800d95c:	290a      	cmp	r1, #10
 800d95e:	d015      	beq.n	800d98c <_puts_r+0x8c>
 800d960:	6823      	ldr	r3, [r4, #0]
 800d962:	1c5a      	adds	r2, r3, #1
 800d964:	6022      	str	r2, [r4, #0]
 800d966:	7019      	strb	r1, [r3, #0]
 800d968:	68a3      	ldr	r3, [r4, #8]
 800d96a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d96e:	3b01      	subs	r3, #1
 800d970:	60a3      	str	r3, [r4, #8]
 800d972:	2900      	cmp	r1, #0
 800d974:	d1ed      	bne.n	800d952 <_puts_r+0x52>
 800d976:	2b00      	cmp	r3, #0
 800d978:	da11      	bge.n	800d99e <_puts_r+0x9e>
 800d97a:	4622      	mov	r2, r4
 800d97c:	210a      	movs	r1, #10
 800d97e:	4628      	mov	r0, r5
 800d980:	f000 ff10 	bl	800e7a4 <__swbuf_r>
 800d984:	3001      	adds	r0, #1
 800d986:	d0d7      	beq.n	800d938 <_puts_r+0x38>
 800d988:	250a      	movs	r5, #10
 800d98a:	e7d7      	b.n	800d93c <_puts_r+0x3c>
 800d98c:	4622      	mov	r2, r4
 800d98e:	4628      	mov	r0, r5
 800d990:	f000 ff08 	bl	800e7a4 <__swbuf_r>
 800d994:	3001      	adds	r0, #1
 800d996:	d1e7      	bne.n	800d968 <_puts_r+0x68>
 800d998:	e7ce      	b.n	800d938 <_puts_r+0x38>
 800d99a:	3e01      	subs	r6, #1
 800d99c:	e7e4      	b.n	800d968 <_puts_r+0x68>
 800d99e:	6823      	ldr	r3, [r4, #0]
 800d9a0:	1c5a      	adds	r2, r3, #1
 800d9a2:	6022      	str	r2, [r4, #0]
 800d9a4:	220a      	movs	r2, #10
 800d9a6:	701a      	strb	r2, [r3, #0]
 800d9a8:	e7ee      	b.n	800d988 <_puts_r+0x88>
	...

0800d9ac <puts>:
 800d9ac:	4b02      	ldr	r3, [pc, #8]	@ (800d9b8 <puts+0xc>)
 800d9ae:	4601      	mov	r1, r0
 800d9b0:	6818      	ldr	r0, [r3, #0]
 800d9b2:	f7ff bfa5 	b.w	800d900 <_puts_r>
 800d9b6:	bf00      	nop
 800d9b8:	20000024 	.word	0x20000024

0800d9bc <strdup>:
 800d9bc:	4b02      	ldr	r3, [pc, #8]	@ (800d9c8 <strdup+0xc>)
 800d9be:	4601      	mov	r1, r0
 800d9c0:	6818      	ldr	r0, [r3, #0]
 800d9c2:	f000 b803 	b.w	800d9cc <_strdup_r>
 800d9c6:	bf00      	nop
 800d9c8:	20000024 	.word	0x20000024

0800d9cc <_strdup_r>:
 800d9cc:	b570      	push	{r4, r5, r6, lr}
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	4608      	mov	r0, r1
 800d9d2:	460d      	mov	r5, r1
 800d9d4:	f7f2 fc24 	bl	8000220 <strlen>
 800d9d8:	1c46      	adds	r6, r0, #1
 800d9da:	4631      	mov	r1, r6
 800d9dc:	4620      	mov	r0, r4
 800d9de:	f7ff fdfb 	bl	800d5d8 <_malloc_r>
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	b118      	cbz	r0, 800d9ee <_strdup_r+0x22>
 800d9e6:	4632      	mov	r2, r6
 800d9e8:	4629      	mov	r1, r5
 800d9ea:	f000 f90c 	bl	800dc06 <memcpy>
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	bd70      	pop	{r4, r5, r6, pc}

0800d9f2 <strncpy>:
 800d9f2:	b510      	push	{r4, lr}
 800d9f4:	3901      	subs	r1, #1
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	b132      	cbz	r2, 800da08 <strncpy+0x16>
 800d9fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d9fe:	f803 4b01 	strb.w	r4, [r3], #1
 800da02:	3a01      	subs	r2, #1
 800da04:	2c00      	cmp	r4, #0
 800da06:	d1f7      	bne.n	800d9f8 <strncpy+0x6>
 800da08:	441a      	add	r2, r3
 800da0a:	2100      	movs	r1, #0
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d100      	bne.n	800da12 <strncpy+0x20>
 800da10:	bd10      	pop	{r4, pc}
 800da12:	f803 1b01 	strb.w	r1, [r3], #1
 800da16:	e7f9      	b.n	800da0c <strncpy+0x1a>

0800da18 <strtok>:
 800da18:	4b16      	ldr	r3, [pc, #88]	@ (800da74 <strtok+0x5c>)
 800da1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da1e:	681f      	ldr	r7, [r3, #0]
 800da20:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800da22:	4605      	mov	r5, r0
 800da24:	460e      	mov	r6, r1
 800da26:	b9ec      	cbnz	r4, 800da64 <strtok+0x4c>
 800da28:	2050      	movs	r0, #80	@ 0x50
 800da2a:	f7ff fda3 	bl	800d574 <malloc>
 800da2e:	4602      	mov	r2, r0
 800da30:	6478      	str	r0, [r7, #68]	@ 0x44
 800da32:	b920      	cbnz	r0, 800da3e <strtok+0x26>
 800da34:	4b10      	ldr	r3, [pc, #64]	@ (800da78 <strtok+0x60>)
 800da36:	4811      	ldr	r0, [pc, #68]	@ (800da7c <strtok+0x64>)
 800da38:	215b      	movs	r1, #91	@ 0x5b
 800da3a:	f000 f8f3 	bl	800dc24 <__assert_func>
 800da3e:	e9c0 4400 	strd	r4, r4, [r0]
 800da42:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800da46:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800da4a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800da4e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800da52:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800da56:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800da5a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800da5e:	6184      	str	r4, [r0, #24]
 800da60:	7704      	strb	r4, [r0, #28]
 800da62:	6244      	str	r4, [r0, #36]	@ 0x24
 800da64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da66:	4631      	mov	r1, r6
 800da68:	4628      	mov	r0, r5
 800da6a:	2301      	movs	r3, #1
 800da6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da70:	f000 b806 	b.w	800da80 <__strtok_r>
 800da74:	20000024 	.word	0x20000024
 800da78:	0800eefc 	.word	0x0800eefc
 800da7c:	0800ef13 	.word	0x0800ef13

0800da80 <__strtok_r>:
 800da80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da82:	4604      	mov	r4, r0
 800da84:	b908      	cbnz	r0, 800da8a <__strtok_r+0xa>
 800da86:	6814      	ldr	r4, [r2, #0]
 800da88:	b144      	cbz	r4, 800da9c <__strtok_r+0x1c>
 800da8a:	4620      	mov	r0, r4
 800da8c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800da90:	460f      	mov	r7, r1
 800da92:	f817 6b01 	ldrb.w	r6, [r7], #1
 800da96:	b91e      	cbnz	r6, 800daa0 <__strtok_r+0x20>
 800da98:	b965      	cbnz	r5, 800dab4 <__strtok_r+0x34>
 800da9a:	6015      	str	r5, [r2, #0]
 800da9c:	2000      	movs	r0, #0
 800da9e:	e005      	b.n	800daac <__strtok_r+0x2c>
 800daa0:	42b5      	cmp	r5, r6
 800daa2:	d1f6      	bne.n	800da92 <__strtok_r+0x12>
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d1f0      	bne.n	800da8a <__strtok_r+0xa>
 800daa8:	6014      	str	r4, [r2, #0]
 800daaa:	7003      	strb	r3, [r0, #0]
 800daac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daae:	461c      	mov	r4, r3
 800dab0:	e00c      	b.n	800dacc <__strtok_r+0x4c>
 800dab2:	b915      	cbnz	r5, 800daba <__strtok_r+0x3a>
 800dab4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dab8:	460e      	mov	r6, r1
 800daba:	f816 5b01 	ldrb.w	r5, [r6], #1
 800dabe:	42ab      	cmp	r3, r5
 800dac0:	d1f7      	bne.n	800dab2 <__strtok_r+0x32>
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d0f3      	beq.n	800daae <__strtok_r+0x2e>
 800dac6:	2300      	movs	r3, #0
 800dac8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800dacc:	6014      	str	r4, [r2, #0]
 800dace:	e7ed      	b.n	800daac <__strtok_r+0x2c>

0800dad0 <memset>:
 800dad0:	4402      	add	r2, r0
 800dad2:	4603      	mov	r3, r0
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d100      	bne.n	800dada <memset+0xa>
 800dad8:	4770      	bx	lr
 800dada:	f803 1b01 	strb.w	r1, [r3], #1
 800dade:	e7f9      	b.n	800dad4 <memset+0x4>

0800dae0 <_reclaim_reent>:
 800dae0:	4b29      	ldr	r3, [pc, #164]	@ (800db88 <_reclaim_reent+0xa8>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4283      	cmp	r3, r0
 800dae6:	b570      	push	{r4, r5, r6, lr}
 800dae8:	4604      	mov	r4, r0
 800daea:	d04b      	beq.n	800db84 <_reclaim_reent+0xa4>
 800daec:	69c3      	ldr	r3, [r0, #28]
 800daee:	b1ab      	cbz	r3, 800db1c <_reclaim_reent+0x3c>
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	b16b      	cbz	r3, 800db10 <_reclaim_reent+0x30>
 800daf4:	2500      	movs	r5, #0
 800daf6:	69e3      	ldr	r3, [r4, #28]
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	5959      	ldr	r1, [r3, r5]
 800dafc:	2900      	cmp	r1, #0
 800dafe:	d13b      	bne.n	800db78 <_reclaim_reent+0x98>
 800db00:	3504      	adds	r5, #4
 800db02:	2d80      	cmp	r5, #128	@ 0x80
 800db04:	d1f7      	bne.n	800daf6 <_reclaim_reent+0x16>
 800db06:	69e3      	ldr	r3, [r4, #28]
 800db08:	4620      	mov	r0, r4
 800db0a:	68d9      	ldr	r1, [r3, #12]
 800db0c:	f000 f8a8 	bl	800dc60 <_free_r>
 800db10:	69e3      	ldr	r3, [r4, #28]
 800db12:	6819      	ldr	r1, [r3, #0]
 800db14:	b111      	cbz	r1, 800db1c <_reclaim_reent+0x3c>
 800db16:	4620      	mov	r0, r4
 800db18:	f000 f8a2 	bl	800dc60 <_free_r>
 800db1c:	6961      	ldr	r1, [r4, #20]
 800db1e:	b111      	cbz	r1, 800db26 <_reclaim_reent+0x46>
 800db20:	4620      	mov	r0, r4
 800db22:	f000 f89d 	bl	800dc60 <_free_r>
 800db26:	69e1      	ldr	r1, [r4, #28]
 800db28:	b111      	cbz	r1, 800db30 <_reclaim_reent+0x50>
 800db2a:	4620      	mov	r0, r4
 800db2c:	f000 f898 	bl	800dc60 <_free_r>
 800db30:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800db32:	b111      	cbz	r1, 800db3a <_reclaim_reent+0x5a>
 800db34:	4620      	mov	r0, r4
 800db36:	f000 f893 	bl	800dc60 <_free_r>
 800db3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db3c:	b111      	cbz	r1, 800db44 <_reclaim_reent+0x64>
 800db3e:	4620      	mov	r0, r4
 800db40:	f000 f88e 	bl	800dc60 <_free_r>
 800db44:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800db46:	b111      	cbz	r1, 800db4e <_reclaim_reent+0x6e>
 800db48:	4620      	mov	r0, r4
 800db4a:	f000 f889 	bl	800dc60 <_free_r>
 800db4e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800db50:	b111      	cbz	r1, 800db58 <_reclaim_reent+0x78>
 800db52:	4620      	mov	r0, r4
 800db54:	f000 f884 	bl	800dc60 <_free_r>
 800db58:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800db5a:	b111      	cbz	r1, 800db62 <_reclaim_reent+0x82>
 800db5c:	4620      	mov	r0, r4
 800db5e:	f000 f87f 	bl	800dc60 <_free_r>
 800db62:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800db64:	b111      	cbz	r1, 800db6c <_reclaim_reent+0x8c>
 800db66:	4620      	mov	r0, r4
 800db68:	f000 f87a 	bl	800dc60 <_free_r>
 800db6c:	6a23      	ldr	r3, [r4, #32]
 800db6e:	b14b      	cbz	r3, 800db84 <_reclaim_reent+0xa4>
 800db70:	4620      	mov	r0, r4
 800db72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db76:	4718      	bx	r3
 800db78:	680e      	ldr	r6, [r1, #0]
 800db7a:	4620      	mov	r0, r4
 800db7c:	f000 f870 	bl	800dc60 <_free_r>
 800db80:	4631      	mov	r1, r6
 800db82:	e7bb      	b.n	800dafc <_reclaim_reent+0x1c>
 800db84:	bd70      	pop	{r4, r5, r6, pc}
 800db86:	bf00      	nop
 800db88:	20000024 	.word	0x20000024

0800db8c <_sbrk_r>:
 800db8c:	b538      	push	{r3, r4, r5, lr}
 800db8e:	4d06      	ldr	r5, [pc, #24]	@ (800dba8 <_sbrk_r+0x1c>)
 800db90:	2300      	movs	r3, #0
 800db92:	4604      	mov	r4, r0
 800db94:	4608      	mov	r0, r1
 800db96:	602b      	str	r3, [r5, #0]
 800db98:	f7f4 f824 	bl	8001be4 <_sbrk>
 800db9c:	1c43      	adds	r3, r0, #1
 800db9e:	d102      	bne.n	800dba6 <_sbrk_r+0x1a>
 800dba0:	682b      	ldr	r3, [r5, #0]
 800dba2:	b103      	cbz	r3, 800dba6 <_sbrk_r+0x1a>
 800dba4:	6023      	str	r3, [r4, #0]
 800dba6:	bd38      	pop	{r3, r4, r5, pc}
 800dba8:	20004378 	.word	0x20004378

0800dbac <__errno>:
 800dbac:	4b01      	ldr	r3, [pc, #4]	@ (800dbb4 <__errno+0x8>)
 800dbae:	6818      	ldr	r0, [r3, #0]
 800dbb0:	4770      	bx	lr
 800dbb2:	bf00      	nop
 800dbb4:	20000024 	.word	0x20000024

0800dbb8 <__libc_init_array>:
 800dbb8:	b570      	push	{r4, r5, r6, lr}
 800dbba:	4d0d      	ldr	r5, [pc, #52]	@ (800dbf0 <__libc_init_array+0x38>)
 800dbbc:	4c0d      	ldr	r4, [pc, #52]	@ (800dbf4 <__libc_init_array+0x3c>)
 800dbbe:	1b64      	subs	r4, r4, r5
 800dbc0:	10a4      	asrs	r4, r4, #2
 800dbc2:	2600      	movs	r6, #0
 800dbc4:	42a6      	cmp	r6, r4
 800dbc6:	d109      	bne.n	800dbdc <__libc_init_array+0x24>
 800dbc8:	4d0b      	ldr	r5, [pc, #44]	@ (800dbf8 <__libc_init_array+0x40>)
 800dbca:	4c0c      	ldr	r4, [pc, #48]	@ (800dbfc <__libc_init_array+0x44>)
 800dbcc:	f000 ffb6 	bl	800eb3c <_init>
 800dbd0:	1b64      	subs	r4, r4, r5
 800dbd2:	10a4      	asrs	r4, r4, #2
 800dbd4:	2600      	movs	r6, #0
 800dbd6:	42a6      	cmp	r6, r4
 800dbd8:	d105      	bne.n	800dbe6 <__libc_init_array+0x2e>
 800dbda:	bd70      	pop	{r4, r5, r6, pc}
 800dbdc:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbe0:	4798      	blx	r3
 800dbe2:	3601      	adds	r6, #1
 800dbe4:	e7ee      	b.n	800dbc4 <__libc_init_array+0xc>
 800dbe6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbea:	4798      	blx	r3
 800dbec:	3601      	adds	r6, #1
 800dbee:	e7f2      	b.n	800dbd6 <__libc_init_array+0x1e>
 800dbf0:	0800efe4 	.word	0x0800efe4
 800dbf4:	0800efe4 	.word	0x0800efe4
 800dbf8:	0800efe4 	.word	0x0800efe4
 800dbfc:	0800efe8 	.word	0x0800efe8

0800dc00 <__retarget_lock_init_recursive>:
 800dc00:	4770      	bx	lr

0800dc02 <__retarget_lock_acquire_recursive>:
 800dc02:	4770      	bx	lr

0800dc04 <__retarget_lock_release_recursive>:
 800dc04:	4770      	bx	lr

0800dc06 <memcpy>:
 800dc06:	440a      	add	r2, r1
 800dc08:	4291      	cmp	r1, r2
 800dc0a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dc0e:	d100      	bne.n	800dc12 <memcpy+0xc>
 800dc10:	4770      	bx	lr
 800dc12:	b510      	push	{r4, lr}
 800dc14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc1c:	4291      	cmp	r1, r2
 800dc1e:	d1f9      	bne.n	800dc14 <memcpy+0xe>
 800dc20:	bd10      	pop	{r4, pc}
	...

0800dc24 <__assert_func>:
 800dc24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc26:	4614      	mov	r4, r2
 800dc28:	461a      	mov	r2, r3
 800dc2a:	4b09      	ldr	r3, [pc, #36]	@ (800dc50 <__assert_func+0x2c>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	4605      	mov	r5, r0
 800dc30:	68d8      	ldr	r0, [r3, #12]
 800dc32:	b954      	cbnz	r4, 800dc4a <__assert_func+0x26>
 800dc34:	4b07      	ldr	r3, [pc, #28]	@ (800dc54 <__assert_func+0x30>)
 800dc36:	461c      	mov	r4, r3
 800dc38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc3c:	9100      	str	r1, [sp, #0]
 800dc3e:	462b      	mov	r3, r5
 800dc40:	4905      	ldr	r1, [pc, #20]	@ (800dc58 <__assert_func+0x34>)
 800dc42:	f000 fd6f 	bl	800e724 <fiprintf>
 800dc46:	f000 ff25 	bl	800ea94 <abort>
 800dc4a:	4b04      	ldr	r3, [pc, #16]	@ (800dc5c <__assert_func+0x38>)
 800dc4c:	e7f4      	b.n	800dc38 <__assert_func+0x14>
 800dc4e:	bf00      	nop
 800dc50:	20000024 	.word	0x20000024
 800dc54:	0800efa8 	.word	0x0800efa8
 800dc58:	0800ef7a 	.word	0x0800ef7a
 800dc5c:	0800ef6d 	.word	0x0800ef6d

0800dc60 <_free_r>:
 800dc60:	b538      	push	{r3, r4, r5, lr}
 800dc62:	4605      	mov	r5, r0
 800dc64:	2900      	cmp	r1, #0
 800dc66:	d041      	beq.n	800dcec <_free_r+0x8c>
 800dc68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc6c:	1f0c      	subs	r4, r1, #4
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	bfb8      	it	lt
 800dc72:	18e4      	addlt	r4, r4, r3
 800dc74:	f7ff fd64 	bl	800d740 <__malloc_lock>
 800dc78:	4a1d      	ldr	r2, [pc, #116]	@ (800dcf0 <_free_r+0x90>)
 800dc7a:	6813      	ldr	r3, [r2, #0]
 800dc7c:	b933      	cbnz	r3, 800dc8c <_free_r+0x2c>
 800dc7e:	6063      	str	r3, [r4, #4]
 800dc80:	6014      	str	r4, [r2, #0]
 800dc82:	4628      	mov	r0, r5
 800dc84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc88:	f7ff bd60 	b.w	800d74c <__malloc_unlock>
 800dc8c:	42a3      	cmp	r3, r4
 800dc8e:	d908      	bls.n	800dca2 <_free_r+0x42>
 800dc90:	6820      	ldr	r0, [r4, #0]
 800dc92:	1821      	adds	r1, r4, r0
 800dc94:	428b      	cmp	r3, r1
 800dc96:	bf01      	itttt	eq
 800dc98:	6819      	ldreq	r1, [r3, #0]
 800dc9a:	685b      	ldreq	r3, [r3, #4]
 800dc9c:	1809      	addeq	r1, r1, r0
 800dc9e:	6021      	streq	r1, [r4, #0]
 800dca0:	e7ed      	b.n	800dc7e <_free_r+0x1e>
 800dca2:	461a      	mov	r2, r3
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	b10b      	cbz	r3, 800dcac <_free_r+0x4c>
 800dca8:	42a3      	cmp	r3, r4
 800dcaa:	d9fa      	bls.n	800dca2 <_free_r+0x42>
 800dcac:	6811      	ldr	r1, [r2, #0]
 800dcae:	1850      	adds	r0, r2, r1
 800dcb0:	42a0      	cmp	r0, r4
 800dcb2:	d10b      	bne.n	800dccc <_free_r+0x6c>
 800dcb4:	6820      	ldr	r0, [r4, #0]
 800dcb6:	4401      	add	r1, r0
 800dcb8:	1850      	adds	r0, r2, r1
 800dcba:	4283      	cmp	r3, r0
 800dcbc:	6011      	str	r1, [r2, #0]
 800dcbe:	d1e0      	bne.n	800dc82 <_free_r+0x22>
 800dcc0:	6818      	ldr	r0, [r3, #0]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	6053      	str	r3, [r2, #4]
 800dcc6:	4408      	add	r0, r1
 800dcc8:	6010      	str	r0, [r2, #0]
 800dcca:	e7da      	b.n	800dc82 <_free_r+0x22>
 800dccc:	d902      	bls.n	800dcd4 <_free_r+0x74>
 800dcce:	230c      	movs	r3, #12
 800dcd0:	602b      	str	r3, [r5, #0]
 800dcd2:	e7d6      	b.n	800dc82 <_free_r+0x22>
 800dcd4:	6820      	ldr	r0, [r4, #0]
 800dcd6:	1821      	adds	r1, r4, r0
 800dcd8:	428b      	cmp	r3, r1
 800dcda:	bf04      	itt	eq
 800dcdc:	6819      	ldreq	r1, [r3, #0]
 800dcde:	685b      	ldreq	r3, [r3, #4]
 800dce0:	6063      	str	r3, [r4, #4]
 800dce2:	bf04      	itt	eq
 800dce4:	1809      	addeq	r1, r1, r0
 800dce6:	6021      	streq	r1, [r4, #0]
 800dce8:	6054      	str	r4, [r2, #4]
 800dcea:	e7ca      	b.n	800dc82 <_free_r+0x22>
 800dcec:	bd38      	pop	{r3, r4, r5, pc}
 800dcee:	bf00      	nop
 800dcf0:	20004238 	.word	0x20004238

0800dcf4 <__ssputs_r>:
 800dcf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcf8:	688e      	ldr	r6, [r1, #8]
 800dcfa:	461f      	mov	r7, r3
 800dcfc:	42be      	cmp	r6, r7
 800dcfe:	680b      	ldr	r3, [r1, #0]
 800dd00:	4682      	mov	sl, r0
 800dd02:	460c      	mov	r4, r1
 800dd04:	4690      	mov	r8, r2
 800dd06:	d82d      	bhi.n	800dd64 <__ssputs_r+0x70>
 800dd08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dd10:	d026      	beq.n	800dd60 <__ssputs_r+0x6c>
 800dd12:	6965      	ldr	r5, [r4, #20]
 800dd14:	6909      	ldr	r1, [r1, #16]
 800dd16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd1a:	eba3 0901 	sub.w	r9, r3, r1
 800dd1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd22:	1c7b      	adds	r3, r7, #1
 800dd24:	444b      	add	r3, r9
 800dd26:	106d      	asrs	r5, r5, #1
 800dd28:	429d      	cmp	r5, r3
 800dd2a:	bf38      	it	cc
 800dd2c:	461d      	movcc	r5, r3
 800dd2e:	0553      	lsls	r3, r2, #21
 800dd30:	d527      	bpl.n	800dd82 <__ssputs_r+0x8e>
 800dd32:	4629      	mov	r1, r5
 800dd34:	f7ff fc50 	bl	800d5d8 <_malloc_r>
 800dd38:	4606      	mov	r6, r0
 800dd3a:	b360      	cbz	r0, 800dd96 <__ssputs_r+0xa2>
 800dd3c:	6921      	ldr	r1, [r4, #16]
 800dd3e:	464a      	mov	r2, r9
 800dd40:	f7ff ff61 	bl	800dc06 <memcpy>
 800dd44:	89a3      	ldrh	r3, [r4, #12]
 800dd46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dd4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd4e:	81a3      	strh	r3, [r4, #12]
 800dd50:	6126      	str	r6, [r4, #16]
 800dd52:	6165      	str	r5, [r4, #20]
 800dd54:	444e      	add	r6, r9
 800dd56:	eba5 0509 	sub.w	r5, r5, r9
 800dd5a:	6026      	str	r6, [r4, #0]
 800dd5c:	60a5      	str	r5, [r4, #8]
 800dd5e:	463e      	mov	r6, r7
 800dd60:	42be      	cmp	r6, r7
 800dd62:	d900      	bls.n	800dd66 <__ssputs_r+0x72>
 800dd64:	463e      	mov	r6, r7
 800dd66:	6820      	ldr	r0, [r4, #0]
 800dd68:	4632      	mov	r2, r6
 800dd6a:	4641      	mov	r1, r8
 800dd6c:	f000 fe10 	bl	800e990 <memmove>
 800dd70:	68a3      	ldr	r3, [r4, #8]
 800dd72:	1b9b      	subs	r3, r3, r6
 800dd74:	60a3      	str	r3, [r4, #8]
 800dd76:	6823      	ldr	r3, [r4, #0]
 800dd78:	4433      	add	r3, r6
 800dd7a:	6023      	str	r3, [r4, #0]
 800dd7c:	2000      	movs	r0, #0
 800dd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd82:	462a      	mov	r2, r5
 800dd84:	f000 fce0 	bl	800e748 <_realloc_r>
 800dd88:	4606      	mov	r6, r0
 800dd8a:	2800      	cmp	r0, #0
 800dd8c:	d1e0      	bne.n	800dd50 <__ssputs_r+0x5c>
 800dd8e:	6921      	ldr	r1, [r4, #16]
 800dd90:	4650      	mov	r0, sl
 800dd92:	f7ff ff65 	bl	800dc60 <_free_r>
 800dd96:	230c      	movs	r3, #12
 800dd98:	f8ca 3000 	str.w	r3, [sl]
 800dd9c:	89a3      	ldrh	r3, [r4, #12]
 800dd9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dda2:	81a3      	strh	r3, [r4, #12]
 800dda4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dda8:	e7e9      	b.n	800dd7e <__ssputs_r+0x8a>
	...

0800ddac <_svfiprintf_r>:
 800ddac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb0:	4698      	mov	r8, r3
 800ddb2:	898b      	ldrh	r3, [r1, #12]
 800ddb4:	061b      	lsls	r3, r3, #24
 800ddb6:	b09d      	sub	sp, #116	@ 0x74
 800ddb8:	4607      	mov	r7, r0
 800ddba:	460d      	mov	r5, r1
 800ddbc:	4614      	mov	r4, r2
 800ddbe:	d510      	bpl.n	800dde2 <_svfiprintf_r+0x36>
 800ddc0:	690b      	ldr	r3, [r1, #16]
 800ddc2:	b973      	cbnz	r3, 800dde2 <_svfiprintf_r+0x36>
 800ddc4:	2140      	movs	r1, #64	@ 0x40
 800ddc6:	f7ff fc07 	bl	800d5d8 <_malloc_r>
 800ddca:	6028      	str	r0, [r5, #0]
 800ddcc:	6128      	str	r0, [r5, #16]
 800ddce:	b930      	cbnz	r0, 800ddde <_svfiprintf_r+0x32>
 800ddd0:	230c      	movs	r3, #12
 800ddd2:	603b      	str	r3, [r7, #0]
 800ddd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ddd8:	b01d      	add	sp, #116	@ 0x74
 800ddda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddde:	2340      	movs	r3, #64	@ 0x40
 800dde0:	616b      	str	r3, [r5, #20]
 800dde2:	2300      	movs	r3, #0
 800dde4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dde6:	2320      	movs	r3, #32
 800dde8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ddec:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddf0:	2330      	movs	r3, #48	@ 0x30
 800ddf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800df90 <_svfiprintf_r+0x1e4>
 800ddf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ddfa:	f04f 0901 	mov.w	r9, #1
 800ddfe:	4623      	mov	r3, r4
 800de00:	469a      	mov	sl, r3
 800de02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de06:	b10a      	cbz	r2, 800de0c <_svfiprintf_r+0x60>
 800de08:	2a25      	cmp	r2, #37	@ 0x25
 800de0a:	d1f9      	bne.n	800de00 <_svfiprintf_r+0x54>
 800de0c:	ebba 0b04 	subs.w	fp, sl, r4
 800de10:	d00b      	beq.n	800de2a <_svfiprintf_r+0x7e>
 800de12:	465b      	mov	r3, fp
 800de14:	4622      	mov	r2, r4
 800de16:	4629      	mov	r1, r5
 800de18:	4638      	mov	r0, r7
 800de1a:	f7ff ff6b 	bl	800dcf4 <__ssputs_r>
 800de1e:	3001      	adds	r0, #1
 800de20:	f000 80a7 	beq.w	800df72 <_svfiprintf_r+0x1c6>
 800de24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de26:	445a      	add	r2, fp
 800de28:	9209      	str	r2, [sp, #36]	@ 0x24
 800de2a:	f89a 3000 	ldrb.w	r3, [sl]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	f000 809f 	beq.w	800df72 <_svfiprintf_r+0x1c6>
 800de34:	2300      	movs	r3, #0
 800de36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800de3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de3e:	f10a 0a01 	add.w	sl, sl, #1
 800de42:	9304      	str	r3, [sp, #16]
 800de44:	9307      	str	r3, [sp, #28]
 800de46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800de4a:	931a      	str	r3, [sp, #104]	@ 0x68
 800de4c:	4654      	mov	r4, sl
 800de4e:	2205      	movs	r2, #5
 800de50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de54:	484e      	ldr	r0, [pc, #312]	@ (800df90 <_svfiprintf_r+0x1e4>)
 800de56:	f7f2 f9fb 	bl	8000250 <memchr>
 800de5a:	9a04      	ldr	r2, [sp, #16]
 800de5c:	b9d8      	cbnz	r0, 800de96 <_svfiprintf_r+0xea>
 800de5e:	06d0      	lsls	r0, r2, #27
 800de60:	bf44      	itt	mi
 800de62:	2320      	movmi	r3, #32
 800de64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de68:	0711      	lsls	r1, r2, #28
 800de6a:	bf44      	itt	mi
 800de6c:	232b      	movmi	r3, #43	@ 0x2b
 800de6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de72:	f89a 3000 	ldrb.w	r3, [sl]
 800de76:	2b2a      	cmp	r3, #42	@ 0x2a
 800de78:	d015      	beq.n	800dea6 <_svfiprintf_r+0xfa>
 800de7a:	9a07      	ldr	r2, [sp, #28]
 800de7c:	4654      	mov	r4, sl
 800de7e:	2000      	movs	r0, #0
 800de80:	f04f 0c0a 	mov.w	ip, #10
 800de84:	4621      	mov	r1, r4
 800de86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de8a:	3b30      	subs	r3, #48	@ 0x30
 800de8c:	2b09      	cmp	r3, #9
 800de8e:	d94b      	bls.n	800df28 <_svfiprintf_r+0x17c>
 800de90:	b1b0      	cbz	r0, 800dec0 <_svfiprintf_r+0x114>
 800de92:	9207      	str	r2, [sp, #28]
 800de94:	e014      	b.n	800dec0 <_svfiprintf_r+0x114>
 800de96:	eba0 0308 	sub.w	r3, r0, r8
 800de9a:	fa09 f303 	lsl.w	r3, r9, r3
 800de9e:	4313      	orrs	r3, r2
 800dea0:	9304      	str	r3, [sp, #16]
 800dea2:	46a2      	mov	sl, r4
 800dea4:	e7d2      	b.n	800de4c <_svfiprintf_r+0xa0>
 800dea6:	9b03      	ldr	r3, [sp, #12]
 800dea8:	1d19      	adds	r1, r3, #4
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	9103      	str	r1, [sp, #12]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	bfbb      	ittet	lt
 800deb2:	425b      	neglt	r3, r3
 800deb4:	f042 0202 	orrlt.w	r2, r2, #2
 800deb8:	9307      	strge	r3, [sp, #28]
 800deba:	9307      	strlt	r3, [sp, #28]
 800debc:	bfb8      	it	lt
 800debe:	9204      	strlt	r2, [sp, #16]
 800dec0:	7823      	ldrb	r3, [r4, #0]
 800dec2:	2b2e      	cmp	r3, #46	@ 0x2e
 800dec4:	d10a      	bne.n	800dedc <_svfiprintf_r+0x130>
 800dec6:	7863      	ldrb	r3, [r4, #1]
 800dec8:	2b2a      	cmp	r3, #42	@ 0x2a
 800deca:	d132      	bne.n	800df32 <_svfiprintf_r+0x186>
 800decc:	9b03      	ldr	r3, [sp, #12]
 800dece:	1d1a      	adds	r2, r3, #4
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	9203      	str	r2, [sp, #12]
 800ded4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ded8:	3402      	adds	r4, #2
 800deda:	9305      	str	r3, [sp, #20]
 800dedc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dfa0 <_svfiprintf_r+0x1f4>
 800dee0:	7821      	ldrb	r1, [r4, #0]
 800dee2:	2203      	movs	r2, #3
 800dee4:	4650      	mov	r0, sl
 800dee6:	f7f2 f9b3 	bl	8000250 <memchr>
 800deea:	b138      	cbz	r0, 800defc <_svfiprintf_r+0x150>
 800deec:	9b04      	ldr	r3, [sp, #16]
 800deee:	eba0 000a 	sub.w	r0, r0, sl
 800def2:	2240      	movs	r2, #64	@ 0x40
 800def4:	4082      	lsls	r2, r0
 800def6:	4313      	orrs	r3, r2
 800def8:	3401      	adds	r4, #1
 800defa:	9304      	str	r3, [sp, #16]
 800defc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df00:	4824      	ldr	r0, [pc, #144]	@ (800df94 <_svfiprintf_r+0x1e8>)
 800df02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df06:	2206      	movs	r2, #6
 800df08:	f7f2 f9a2 	bl	8000250 <memchr>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	d036      	beq.n	800df7e <_svfiprintf_r+0x1d2>
 800df10:	4b21      	ldr	r3, [pc, #132]	@ (800df98 <_svfiprintf_r+0x1ec>)
 800df12:	bb1b      	cbnz	r3, 800df5c <_svfiprintf_r+0x1b0>
 800df14:	9b03      	ldr	r3, [sp, #12]
 800df16:	3307      	adds	r3, #7
 800df18:	f023 0307 	bic.w	r3, r3, #7
 800df1c:	3308      	adds	r3, #8
 800df1e:	9303      	str	r3, [sp, #12]
 800df20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df22:	4433      	add	r3, r6
 800df24:	9309      	str	r3, [sp, #36]	@ 0x24
 800df26:	e76a      	b.n	800ddfe <_svfiprintf_r+0x52>
 800df28:	fb0c 3202 	mla	r2, ip, r2, r3
 800df2c:	460c      	mov	r4, r1
 800df2e:	2001      	movs	r0, #1
 800df30:	e7a8      	b.n	800de84 <_svfiprintf_r+0xd8>
 800df32:	2300      	movs	r3, #0
 800df34:	3401      	adds	r4, #1
 800df36:	9305      	str	r3, [sp, #20]
 800df38:	4619      	mov	r1, r3
 800df3a:	f04f 0c0a 	mov.w	ip, #10
 800df3e:	4620      	mov	r0, r4
 800df40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df44:	3a30      	subs	r2, #48	@ 0x30
 800df46:	2a09      	cmp	r2, #9
 800df48:	d903      	bls.n	800df52 <_svfiprintf_r+0x1a6>
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d0c6      	beq.n	800dedc <_svfiprintf_r+0x130>
 800df4e:	9105      	str	r1, [sp, #20]
 800df50:	e7c4      	b.n	800dedc <_svfiprintf_r+0x130>
 800df52:	fb0c 2101 	mla	r1, ip, r1, r2
 800df56:	4604      	mov	r4, r0
 800df58:	2301      	movs	r3, #1
 800df5a:	e7f0      	b.n	800df3e <_svfiprintf_r+0x192>
 800df5c:	ab03      	add	r3, sp, #12
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	462a      	mov	r2, r5
 800df62:	4b0e      	ldr	r3, [pc, #56]	@ (800df9c <_svfiprintf_r+0x1f0>)
 800df64:	a904      	add	r1, sp, #16
 800df66:	4638      	mov	r0, r7
 800df68:	f3af 8000 	nop.w
 800df6c:	1c42      	adds	r2, r0, #1
 800df6e:	4606      	mov	r6, r0
 800df70:	d1d6      	bne.n	800df20 <_svfiprintf_r+0x174>
 800df72:	89ab      	ldrh	r3, [r5, #12]
 800df74:	065b      	lsls	r3, r3, #25
 800df76:	f53f af2d 	bmi.w	800ddd4 <_svfiprintf_r+0x28>
 800df7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df7c:	e72c      	b.n	800ddd8 <_svfiprintf_r+0x2c>
 800df7e:	ab03      	add	r3, sp, #12
 800df80:	9300      	str	r3, [sp, #0]
 800df82:	462a      	mov	r2, r5
 800df84:	4b05      	ldr	r3, [pc, #20]	@ (800df9c <_svfiprintf_r+0x1f0>)
 800df86:	a904      	add	r1, sp, #16
 800df88:	4638      	mov	r0, r7
 800df8a:	f000 f9bb 	bl	800e304 <_printf_i>
 800df8e:	e7ed      	b.n	800df6c <_svfiprintf_r+0x1c0>
 800df90:	0800efa9 	.word	0x0800efa9
 800df94:	0800efb3 	.word	0x0800efb3
 800df98:	00000000 	.word	0x00000000
 800df9c:	0800dcf5 	.word	0x0800dcf5
 800dfa0:	0800efaf 	.word	0x0800efaf

0800dfa4 <__sfputc_r>:
 800dfa4:	6893      	ldr	r3, [r2, #8]
 800dfa6:	3b01      	subs	r3, #1
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	b410      	push	{r4}
 800dfac:	6093      	str	r3, [r2, #8]
 800dfae:	da08      	bge.n	800dfc2 <__sfputc_r+0x1e>
 800dfb0:	6994      	ldr	r4, [r2, #24]
 800dfb2:	42a3      	cmp	r3, r4
 800dfb4:	db01      	blt.n	800dfba <__sfputc_r+0x16>
 800dfb6:	290a      	cmp	r1, #10
 800dfb8:	d103      	bne.n	800dfc2 <__sfputc_r+0x1e>
 800dfba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfbe:	f000 bbf1 	b.w	800e7a4 <__swbuf_r>
 800dfc2:	6813      	ldr	r3, [r2, #0]
 800dfc4:	1c58      	adds	r0, r3, #1
 800dfc6:	6010      	str	r0, [r2, #0]
 800dfc8:	7019      	strb	r1, [r3, #0]
 800dfca:	4608      	mov	r0, r1
 800dfcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfd0:	4770      	bx	lr

0800dfd2 <__sfputs_r>:
 800dfd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfd4:	4606      	mov	r6, r0
 800dfd6:	460f      	mov	r7, r1
 800dfd8:	4614      	mov	r4, r2
 800dfda:	18d5      	adds	r5, r2, r3
 800dfdc:	42ac      	cmp	r4, r5
 800dfde:	d101      	bne.n	800dfe4 <__sfputs_r+0x12>
 800dfe0:	2000      	movs	r0, #0
 800dfe2:	e007      	b.n	800dff4 <__sfputs_r+0x22>
 800dfe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfe8:	463a      	mov	r2, r7
 800dfea:	4630      	mov	r0, r6
 800dfec:	f7ff ffda 	bl	800dfa4 <__sfputc_r>
 800dff0:	1c43      	adds	r3, r0, #1
 800dff2:	d1f3      	bne.n	800dfdc <__sfputs_r+0xa>
 800dff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dff8 <_vfiprintf_r>:
 800dff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dffc:	460d      	mov	r5, r1
 800dffe:	b09d      	sub	sp, #116	@ 0x74
 800e000:	4614      	mov	r4, r2
 800e002:	4698      	mov	r8, r3
 800e004:	4606      	mov	r6, r0
 800e006:	b118      	cbz	r0, 800e010 <_vfiprintf_r+0x18>
 800e008:	6a03      	ldr	r3, [r0, #32]
 800e00a:	b90b      	cbnz	r3, 800e010 <_vfiprintf_r+0x18>
 800e00c:	f7ff fc30 	bl	800d870 <__sinit>
 800e010:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e012:	07d9      	lsls	r1, r3, #31
 800e014:	d405      	bmi.n	800e022 <_vfiprintf_r+0x2a>
 800e016:	89ab      	ldrh	r3, [r5, #12]
 800e018:	059a      	lsls	r2, r3, #22
 800e01a:	d402      	bmi.n	800e022 <_vfiprintf_r+0x2a>
 800e01c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e01e:	f7ff fdf0 	bl	800dc02 <__retarget_lock_acquire_recursive>
 800e022:	89ab      	ldrh	r3, [r5, #12]
 800e024:	071b      	lsls	r3, r3, #28
 800e026:	d501      	bpl.n	800e02c <_vfiprintf_r+0x34>
 800e028:	692b      	ldr	r3, [r5, #16]
 800e02a:	b99b      	cbnz	r3, 800e054 <_vfiprintf_r+0x5c>
 800e02c:	4629      	mov	r1, r5
 800e02e:	4630      	mov	r0, r6
 800e030:	f000 fbf6 	bl	800e820 <__swsetup_r>
 800e034:	b170      	cbz	r0, 800e054 <_vfiprintf_r+0x5c>
 800e036:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e038:	07dc      	lsls	r4, r3, #31
 800e03a:	d504      	bpl.n	800e046 <_vfiprintf_r+0x4e>
 800e03c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e040:	b01d      	add	sp, #116	@ 0x74
 800e042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e046:	89ab      	ldrh	r3, [r5, #12]
 800e048:	0598      	lsls	r0, r3, #22
 800e04a:	d4f7      	bmi.n	800e03c <_vfiprintf_r+0x44>
 800e04c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e04e:	f7ff fdd9 	bl	800dc04 <__retarget_lock_release_recursive>
 800e052:	e7f3      	b.n	800e03c <_vfiprintf_r+0x44>
 800e054:	2300      	movs	r3, #0
 800e056:	9309      	str	r3, [sp, #36]	@ 0x24
 800e058:	2320      	movs	r3, #32
 800e05a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e05e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e062:	2330      	movs	r3, #48	@ 0x30
 800e064:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e214 <_vfiprintf_r+0x21c>
 800e068:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e06c:	f04f 0901 	mov.w	r9, #1
 800e070:	4623      	mov	r3, r4
 800e072:	469a      	mov	sl, r3
 800e074:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e078:	b10a      	cbz	r2, 800e07e <_vfiprintf_r+0x86>
 800e07a:	2a25      	cmp	r2, #37	@ 0x25
 800e07c:	d1f9      	bne.n	800e072 <_vfiprintf_r+0x7a>
 800e07e:	ebba 0b04 	subs.w	fp, sl, r4
 800e082:	d00b      	beq.n	800e09c <_vfiprintf_r+0xa4>
 800e084:	465b      	mov	r3, fp
 800e086:	4622      	mov	r2, r4
 800e088:	4629      	mov	r1, r5
 800e08a:	4630      	mov	r0, r6
 800e08c:	f7ff ffa1 	bl	800dfd2 <__sfputs_r>
 800e090:	3001      	adds	r0, #1
 800e092:	f000 80a7 	beq.w	800e1e4 <_vfiprintf_r+0x1ec>
 800e096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e098:	445a      	add	r2, fp
 800e09a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e09c:	f89a 3000 	ldrb.w	r3, [sl]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	f000 809f 	beq.w	800e1e4 <_vfiprintf_r+0x1ec>
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e0ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0b0:	f10a 0a01 	add.w	sl, sl, #1
 800e0b4:	9304      	str	r3, [sp, #16]
 800e0b6:	9307      	str	r3, [sp, #28]
 800e0b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e0bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800e0be:	4654      	mov	r4, sl
 800e0c0:	2205      	movs	r2, #5
 800e0c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0c6:	4853      	ldr	r0, [pc, #332]	@ (800e214 <_vfiprintf_r+0x21c>)
 800e0c8:	f7f2 f8c2 	bl	8000250 <memchr>
 800e0cc:	9a04      	ldr	r2, [sp, #16]
 800e0ce:	b9d8      	cbnz	r0, 800e108 <_vfiprintf_r+0x110>
 800e0d0:	06d1      	lsls	r1, r2, #27
 800e0d2:	bf44      	itt	mi
 800e0d4:	2320      	movmi	r3, #32
 800e0d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0da:	0713      	lsls	r3, r2, #28
 800e0dc:	bf44      	itt	mi
 800e0de:	232b      	movmi	r3, #43	@ 0x2b
 800e0e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0e4:	f89a 3000 	ldrb.w	r3, [sl]
 800e0e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0ea:	d015      	beq.n	800e118 <_vfiprintf_r+0x120>
 800e0ec:	9a07      	ldr	r2, [sp, #28]
 800e0ee:	4654      	mov	r4, sl
 800e0f0:	2000      	movs	r0, #0
 800e0f2:	f04f 0c0a 	mov.w	ip, #10
 800e0f6:	4621      	mov	r1, r4
 800e0f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0fc:	3b30      	subs	r3, #48	@ 0x30
 800e0fe:	2b09      	cmp	r3, #9
 800e100:	d94b      	bls.n	800e19a <_vfiprintf_r+0x1a2>
 800e102:	b1b0      	cbz	r0, 800e132 <_vfiprintf_r+0x13a>
 800e104:	9207      	str	r2, [sp, #28]
 800e106:	e014      	b.n	800e132 <_vfiprintf_r+0x13a>
 800e108:	eba0 0308 	sub.w	r3, r0, r8
 800e10c:	fa09 f303 	lsl.w	r3, r9, r3
 800e110:	4313      	orrs	r3, r2
 800e112:	9304      	str	r3, [sp, #16]
 800e114:	46a2      	mov	sl, r4
 800e116:	e7d2      	b.n	800e0be <_vfiprintf_r+0xc6>
 800e118:	9b03      	ldr	r3, [sp, #12]
 800e11a:	1d19      	adds	r1, r3, #4
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	9103      	str	r1, [sp, #12]
 800e120:	2b00      	cmp	r3, #0
 800e122:	bfbb      	ittet	lt
 800e124:	425b      	neglt	r3, r3
 800e126:	f042 0202 	orrlt.w	r2, r2, #2
 800e12a:	9307      	strge	r3, [sp, #28]
 800e12c:	9307      	strlt	r3, [sp, #28]
 800e12e:	bfb8      	it	lt
 800e130:	9204      	strlt	r2, [sp, #16]
 800e132:	7823      	ldrb	r3, [r4, #0]
 800e134:	2b2e      	cmp	r3, #46	@ 0x2e
 800e136:	d10a      	bne.n	800e14e <_vfiprintf_r+0x156>
 800e138:	7863      	ldrb	r3, [r4, #1]
 800e13a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e13c:	d132      	bne.n	800e1a4 <_vfiprintf_r+0x1ac>
 800e13e:	9b03      	ldr	r3, [sp, #12]
 800e140:	1d1a      	adds	r2, r3, #4
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	9203      	str	r2, [sp, #12]
 800e146:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e14a:	3402      	adds	r4, #2
 800e14c:	9305      	str	r3, [sp, #20]
 800e14e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e224 <_vfiprintf_r+0x22c>
 800e152:	7821      	ldrb	r1, [r4, #0]
 800e154:	2203      	movs	r2, #3
 800e156:	4650      	mov	r0, sl
 800e158:	f7f2 f87a 	bl	8000250 <memchr>
 800e15c:	b138      	cbz	r0, 800e16e <_vfiprintf_r+0x176>
 800e15e:	9b04      	ldr	r3, [sp, #16]
 800e160:	eba0 000a 	sub.w	r0, r0, sl
 800e164:	2240      	movs	r2, #64	@ 0x40
 800e166:	4082      	lsls	r2, r0
 800e168:	4313      	orrs	r3, r2
 800e16a:	3401      	adds	r4, #1
 800e16c:	9304      	str	r3, [sp, #16]
 800e16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e172:	4829      	ldr	r0, [pc, #164]	@ (800e218 <_vfiprintf_r+0x220>)
 800e174:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e178:	2206      	movs	r2, #6
 800e17a:	f7f2 f869 	bl	8000250 <memchr>
 800e17e:	2800      	cmp	r0, #0
 800e180:	d03f      	beq.n	800e202 <_vfiprintf_r+0x20a>
 800e182:	4b26      	ldr	r3, [pc, #152]	@ (800e21c <_vfiprintf_r+0x224>)
 800e184:	bb1b      	cbnz	r3, 800e1ce <_vfiprintf_r+0x1d6>
 800e186:	9b03      	ldr	r3, [sp, #12]
 800e188:	3307      	adds	r3, #7
 800e18a:	f023 0307 	bic.w	r3, r3, #7
 800e18e:	3308      	adds	r3, #8
 800e190:	9303      	str	r3, [sp, #12]
 800e192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e194:	443b      	add	r3, r7
 800e196:	9309      	str	r3, [sp, #36]	@ 0x24
 800e198:	e76a      	b.n	800e070 <_vfiprintf_r+0x78>
 800e19a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e19e:	460c      	mov	r4, r1
 800e1a0:	2001      	movs	r0, #1
 800e1a2:	e7a8      	b.n	800e0f6 <_vfiprintf_r+0xfe>
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	3401      	adds	r4, #1
 800e1a8:	9305      	str	r3, [sp, #20]
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	f04f 0c0a 	mov.w	ip, #10
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1b6:	3a30      	subs	r2, #48	@ 0x30
 800e1b8:	2a09      	cmp	r2, #9
 800e1ba:	d903      	bls.n	800e1c4 <_vfiprintf_r+0x1cc>
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d0c6      	beq.n	800e14e <_vfiprintf_r+0x156>
 800e1c0:	9105      	str	r1, [sp, #20]
 800e1c2:	e7c4      	b.n	800e14e <_vfiprintf_r+0x156>
 800e1c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1c8:	4604      	mov	r4, r0
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	e7f0      	b.n	800e1b0 <_vfiprintf_r+0x1b8>
 800e1ce:	ab03      	add	r3, sp, #12
 800e1d0:	9300      	str	r3, [sp, #0]
 800e1d2:	462a      	mov	r2, r5
 800e1d4:	4b12      	ldr	r3, [pc, #72]	@ (800e220 <_vfiprintf_r+0x228>)
 800e1d6:	a904      	add	r1, sp, #16
 800e1d8:	4630      	mov	r0, r6
 800e1da:	f3af 8000 	nop.w
 800e1de:	4607      	mov	r7, r0
 800e1e0:	1c78      	adds	r0, r7, #1
 800e1e2:	d1d6      	bne.n	800e192 <_vfiprintf_r+0x19a>
 800e1e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1e6:	07d9      	lsls	r1, r3, #31
 800e1e8:	d405      	bmi.n	800e1f6 <_vfiprintf_r+0x1fe>
 800e1ea:	89ab      	ldrh	r3, [r5, #12]
 800e1ec:	059a      	lsls	r2, r3, #22
 800e1ee:	d402      	bmi.n	800e1f6 <_vfiprintf_r+0x1fe>
 800e1f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1f2:	f7ff fd07 	bl	800dc04 <__retarget_lock_release_recursive>
 800e1f6:	89ab      	ldrh	r3, [r5, #12]
 800e1f8:	065b      	lsls	r3, r3, #25
 800e1fa:	f53f af1f 	bmi.w	800e03c <_vfiprintf_r+0x44>
 800e1fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e200:	e71e      	b.n	800e040 <_vfiprintf_r+0x48>
 800e202:	ab03      	add	r3, sp, #12
 800e204:	9300      	str	r3, [sp, #0]
 800e206:	462a      	mov	r2, r5
 800e208:	4b05      	ldr	r3, [pc, #20]	@ (800e220 <_vfiprintf_r+0x228>)
 800e20a:	a904      	add	r1, sp, #16
 800e20c:	4630      	mov	r0, r6
 800e20e:	f000 f879 	bl	800e304 <_printf_i>
 800e212:	e7e4      	b.n	800e1de <_vfiprintf_r+0x1e6>
 800e214:	0800efa9 	.word	0x0800efa9
 800e218:	0800efb3 	.word	0x0800efb3
 800e21c:	00000000 	.word	0x00000000
 800e220:	0800dfd3 	.word	0x0800dfd3
 800e224:	0800efaf 	.word	0x0800efaf

0800e228 <_printf_common>:
 800e228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e22c:	4616      	mov	r6, r2
 800e22e:	4698      	mov	r8, r3
 800e230:	688a      	ldr	r2, [r1, #8]
 800e232:	690b      	ldr	r3, [r1, #16]
 800e234:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e238:	4293      	cmp	r3, r2
 800e23a:	bfb8      	it	lt
 800e23c:	4613      	movlt	r3, r2
 800e23e:	6033      	str	r3, [r6, #0]
 800e240:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e244:	4607      	mov	r7, r0
 800e246:	460c      	mov	r4, r1
 800e248:	b10a      	cbz	r2, 800e24e <_printf_common+0x26>
 800e24a:	3301      	adds	r3, #1
 800e24c:	6033      	str	r3, [r6, #0]
 800e24e:	6823      	ldr	r3, [r4, #0]
 800e250:	0699      	lsls	r1, r3, #26
 800e252:	bf42      	ittt	mi
 800e254:	6833      	ldrmi	r3, [r6, #0]
 800e256:	3302      	addmi	r3, #2
 800e258:	6033      	strmi	r3, [r6, #0]
 800e25a:	6825      	ldr	r5, [r4, #0]
 800e25c:	f015 0506 	ands.w	r5, r5, #6
 800e260:	d106      	bne.n	800e270 <_printf_common+0x48>
 800e262:	f104 0a19 	add.w	sl, r4, #25
 800e266:	68e3      	ldr	r3, [r4, #12]
 800e268:	6832      	ldr	r2, [r6, #0]
 800e26a:	1a9b      	subs	r3, r3, r2
 800e26c:	42ab      	cmp	r3, r5
 800e26e:	dc26      	bgt.n	800e2be <_printf_common+0x96>
 800e270:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e274:	6822      	ldr	r2, [r4, #0]
 800e276:	3b00      	subs	r3, #0
 800e278:	bf18      	it	ne
 800e27a:	2301      	movne	r3, #1
 800e27c:	0692      	lsls	r2, r2, #26
 800e27e:	d42b      	bmi.n	800e2d8 <_printf_common+0xb0>
 800e280:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e284:	4641      	mov	r1, r8
 800e286:	4638      	mov	r0, r7
 800e288:	47c8      	blx	r9
 800e28a:	3001      	adds	r0, #1
 800e28c:	d01e      	beq.n	800e2cc <_printf_common+0xa4>
 800e28e:	6823      	ldr	r3, [r4, #0]
 800e290:	6922      	ldr	r2, [r4, #16]
 800e292:	f003 0306 	and.w	r3, r3, #6
 800e296:	2b04      	cmp	r3, #4
 800e298:	bf02      	ittt	eq
 800e29a:	68e5      	ldreq	r5, [r4, #12]
 800e29c:	6833      	ldreq	r3, [r6, #0]
 800e29e:	1aed      	subeq	r5, r5, r3
 800e2a0:	68a3      	ldr	r3, [r4, #8]
 800e2a2:	bf0c      	ite	eq
 800e2a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e2a8:	2500      	movne	r5, #0
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	bfc4      	itt	gt
 800e2ae:	1a9b      	subgt	r3, r3, r2
 800e2b0:	18ed      	addgt	r5, r5, r3
 800e2b2:	2600      	movs	r6, #0
 800e2b4:	341a      	adds	r4, #26
 800e2b6:	42b5      	cmp	r5, r6
 800e2b8:	d11a      	bne.n	800e2f0 <_printf_common+0xc8>
 800e2ba:	2000      	movs	r0, #0
 800e2bc:	e008      	b.n	800e2d0 <_printf_common+0xa8>
 800e2be:	2301      	movs	r3, #1
 800e2c0:	4652      	mov	r2, sl
 800e2c2:	4641      	mov	r1, r8
 800e2c4:	4638      	mov	r0, r7
 800e2c6:	47c8      	blx	r9
 800e2c8:	3001      	adds	r0, #1
 800e2ca:	d103      	bne.n	800e2d4 <_printf_common+0xac>
 800e2cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2d4:	3501      	adds	r5, #1
 800e2d6:	e7c6      	b.n	800e266 <_printf_common+0x3e>
 800e2d8:	18e1      	adds	r1, r4, r3
 800e2da:	1c5a      	adds	r2, r3, #1
 800e2dc:	2030      	movs	r0, #48	@ 0x30
 800e2de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e2e2:	4422      	add	r2, r4
 800e2e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e2e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e2ec:	3302      	adds	r3, #2
 800e2ee:	e7c7      	b.n	800e280 <_printf_common+0x58>
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	4622      	mov	r2, r4
 800e2f4:	4641      	mov	r1, r8
 800e2f6:	4638      	mov	r0, r7
 800e2f8:	47c8      	blx	r9
 800e2fa:	3001      	adds	r0, #1
 800e2fc:	d0e6      	beq.n	800e2cc <_printf_common+0xa4>
 800e2fe:	3601      	adds	r6, #1
 800e300:	e7d9      	b.n	800e2b6 <_printf_common+0x8e>
	...

0800e304 <_printf_i>:
 800e304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e308:	7e0f      	ldrb	r7, [r1, #24]
 800e30a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e30c:	2f78      	cmp	r7, #120	@ 0x78
 800e30e:	4691      	mov	r9, r2
 800e310:	4680      	mov	r8, r0
 800e312:	460c      	mov	r4, r1
 800e314:	469a      	mov	sl, r3
 800e316:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e31a:	d807      	bhi.n	800e32c <_printf_i+0x28>
 800e31c:	2f62      	cmp	r7, #98	@ 0x62
 800e31e:	d80a      	bhi.n	800e336 <_printf_i+0x32>
 800e320:	2f00      	cmp	r7, #0
 800e322:	f000 80d2 	beq.w	800e4ca <_printf_i+0x1c6>
 800e326:	2f58      	cmp	r7, #88	@ 0x58
 800e328:	f000 80b9 	beq.w	800e49e <_printf_i+0x19a>
 800e32c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e330:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e334:	e03a      	b.n	800e3ac <_printf_i+0xa8>
 800e336:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e33a:	2b15      	cmp	r3, #21
 800e33c:	d8f6      	bhi.n	800e32c <_printf_i+0x28>
 800e33e:	a101      	add	r1, pc, #4	@ (adr r1, 800e344 <_printf_i+0x40>)
 800e340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e344:	0800e39d 	.word	0x0800e39d
 800e348:	0800e3b1 	.word	0x0800e3b1
 800e34c:	0800e32d 	.word	0x0800e32d
 800e350:	0800e32d 	.word	0x0800e32d
 800e354:	0800e32d 	.word	0x0800e32d
 800e358:	0800e32d 	.word	0x0800e32d
 800e35c:	0800e3b1 	.word	0x0800e3b1
 800e360:	0800e32d 	.word	0x0800e32d
 800e364:	0800e32d 	.word	0x0800e32d
 800e368:	0800e32d 	.word	0x0800e32d
 800e36c:	0800e32d 	.word	0x0800e32d
 800e370:	0800e4b1 	.word	0x0800e4b1
 800e374:	0800e3db 	.word	0x0800e3db
 800e378:	0800e46b 	.word	0x0800e46b
 800e37c:	0800e32d 	.word	0x0800e32d
 800e380:	0800e32d 	.word	0x0800e32d
 800e384:	0800e4d3 	.word	0x0800e4d3
 800e388:	0800e32d 	.word	0x0800e32d
 800e38c:	0800e3db 	.word	0x0800e3db
 800e390:	0800e32d 	.word	0x0800e32d
 800e394:	0800e32d 	.word	0x0800e32d
 800e398:	0800e473 	.word	0x0800e473
 800e39c:	6833      	ldr	r3, [r6, #0]
 800e39e:	1d1a      	adds	r2, r3, #4
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	6032      	str	r2, [r6, #0]
 800e3a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e3a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	e09d      	b.n	800e4ec <_printf_i+0x1e8>
 800e3b0:	6833      	ldr	r3, [r6, #0]
 800e3b2:	6820      	ldr	r0, [r4, #0]
 800e3b4:	1d19      	adds	r1, r3, #4
 800e3b6:	6031      	str	r1, [r6, #0]
 800e3b8:	0606      	lsls	r6, r0, #24
 800e3ba:	d501      	bpl.n	800e3c0 <_printf_i+0xbc>
 800e3bc:	681d      	ldr	r5, [r3, #0]
 800e3be:	e003      	b.n	800e3c8 <_printf_i+0xc4>
 800e3c0:	0645      	lsls	r5, r0, #25
 800e3c2:	d5fb      	bpl.n	800e3bc <_printf_i+0xb8>
 800e3c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e3c8:	2d00      	cmp	r5, #0
 800e3ca:	da03      	bge.n	800e3d4 <_printf_i+0xd0>
 800e3cc:	232d      	movs	r3, #45	@ 0x2d
 800e3ce:	426d      	negs	r5, r5
 800e3d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e3d4:	4859      	ldr	r0, [pc, #356]	@ (800e53c <_printf_i+0x238>)
 800e3d6:	230a      	movs	r3, #10
 800e3d8:	e011      	b.n	800e3fe <_printf_i+0xfa>
 800e3da:	6821      	ldr	r1, [r4, #0]
 800e3dc:	6833      	ldr	r3, [r6, #0]
 800e3de:	0608      	lsls	r0, r1, #24
 800e3e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e3e4:	d402      	bmi.n	800e3ec <_printf_i+0xe8>
 800e3e6:	0649      	lsls	r1, r1, #25
 800e3e8:	bf48      	it	mi
 800e3ea:	b2ad      	uxthmi	r5, r5
 800e3ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800e3ee:	4853      	ldr	r0, [pc, #332]	@ (800e53c <_printf_i+0x238>)
 800e3f0:	6033      	str	r3, [r6, #0]
 800e3f2:	bf14      	ite	ne
 800e3f4:	230a      	movne	r3, #10
 800e3f6:	2308      	moveq	r3, #8
 800e3f8:	2100      	movs	r1, #0
 800e3fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e3fe:	6866      	ldr	r6, [r4, #4]
 800e400:	60a6      	str	r6, [r4, #8]
 800e402:	2e00      	cmp	r6, #0
 800e404:	bfa2      	ittt	ge
 800e406:	6821      	ldrge	r1, [r4, #0]
 800e408:	f021 0104 	bicge.w	r1, r1, #4
 800e40c:	6021      	strge	r1, [r4, #0]
 800e40e:	b90d      	cbnz	r5, 800e414 <_printf_i+0x110>
 800e410:	2e00      	cmp	r6, #0
 800e412:	d04b      	beq.n	800e4ac <_printf_i+0x1a8>
 800e414:	4616      	mov	r6, r2
 800e416:	fbb5 f1f3 	udiv	r1, r5, r3
 800e41a:	fb03 5711 	mls	r7, r3, r1, r5
 800e41e:	5dc7      	ldrb	r7, [r0, r7]
 800e420:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e424:	462f      	mov	r7, r5
 800e426:	42bb      	cmp	r3, r7
 800e428:	460d      	mov	r5, r1
 800e42a:	d9f4      	bls.n	800e416 <_printf_i+0x112>
 800e42c:	2b08      	cmp	r3, #8
 800e42e:	d10b      	bne.n	800e448 <_printf_i+0x144>
 800e430:	6823      	ldr	r3, [r4, #0]
 800e432:	07df      	lsls	r7, r3, #31
 800e434:	d508      	bpl.n	800e448 <_printf_i+0x144>
 800e436:	6923      	ldr	r3, [r4, #16]
 800e438:	6861      	ldr	r1, [r4, #4]
 800e43a:	4299      	cmp	r1, r3
 800e43c:	bfde      	ittt	le
 800e43e:	2330      	movle	r3, #48	@ 0x30
 800e440:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e444:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e448:	1b92      	subs	r2, r2, r6
 800e44a:	6122      	str	r2, [r4, #16]
 800e44c:	f8cd a000 	str.w	sl, [sp]
 800e450:	464b      	mov	r3, r9
 800e452:	aa03      	add	r2, sp, #12
 800e454:	4621      	mov	r1, r4
 800e456:	4640      	mov	r0, r8
 800e458:	f7ff fee6 	bl	800e228 <_printf_common>
 800e45c:	3001      	adds	r0, #1
 800e45e:	d14a      	bne.n	800e4f6 <_printf_i+0x1f2>
 800e460:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e464:	b004      	add	sp, #16
 800e466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e46a:	6823      	ldr	r3, [r4, #0]
 800e46c:	f043 0320 	orr.w	r3, r3, #32
 800e470:	6023      	str	r3, [r4, #0]
 800e472:	4833      	ldr	r0, [pc, #204]	@ (800e540 <_printf_i+0x23c>)
 800e474:	2778      	movs	r7, #120	@ 0x78
 800e476:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e47a:	6823      	ldr	r3, [r4, #0]
 800e47c:	6831      	ldr	r1, [r6, #0]
 800e47e:	061f      	lsls	r7, r3, #24
 800e480:	f851 5b04 	ldr.w	r5, [r1], #4
 800e484:	d402      	bmi.n	800e48c <_printf_i+0x188>
 800e486:	065f      	lsls	r7, r3, #25
 800e488:	bf48      	it	mi
 800e48a:	b2ad      	uxthmi	r5, r5
 800e48c:	6031      	str	r1, [r6, #0]
 800e48e:	07d9      	lsls	r1, r3, #31
 800e490:	bf44      	itt	mi
 800e492:	f043 0320 	orrmi.w	r3, r3, #32
 800e496:	6023      	strmi	r3, [r4, #0]
 800e498:	b11d      	cbz	r5, 800e4a2 <_printf_i+0x19e>
 800e49a:	2310      	movs	r3, #16
 800e49c:	e7ac      	b.n	800e3f8 <_printf_i+0xf4>
 800e49e:	4827      	ldr	r0, [pc, #156]	@ (800e53c <_printf_i+0x238>)
 800e4a0:	e7e9      	b.n	800e476 <_printf_i+0x172>
 800e4a2:	6823      	ldr	r3, [r4, #0]
 800e4a4:	f023 0320 	bic.w	r3, r3, #32
 800e4a8:	6023      	str	r3, [r4, #0]
 800e4aa:	e7f6      	b.n	800e49a <_printf_i+0x196>
 800e4ac:	4616      	mov	r6, r2
 800e4ae:	e7bd      	b.n	800e42c <_printf_i+0x128>
 800e4b0:	6833      	ldr	r3, [r6, #0]
 800e4b2:	6825      	ldr	r5, [r4, #0]
 800e4b4:	6961      	ldr	r1, [r4, #20]
 800e4b6:	1d18      	adds	r0, r3, #4
 800e4b8:	6030      	str	r0, [r6, #0]
 800e4ba:	062e      	lsls	r6, r5, #24
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	d501      	bpl.n	800e4c4 <_printf_i+0x1c0>
 800e4c0:	6019      	str	r1, [r3, #0]
 800e4c2:	e002      	b.n	800e4ca <_printf_i+0x1c6>
 800e4c4:	0668      	lsls	r0, r5, #25
 800e4c6:	d5fb      	bpl.n	800e4c0 <_printf_i+0x1bc>
 800e4c8:	8019      	strh	r1, [r3, #0]
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	6123      	str	r3, [r4, #16]
 800e4ce:	4616      	mov	r6, r2
 800e4d0:	e7bc      	b.n	800e44c <_printf_i+0x148>
 800e4d2:	6833      	ldr	r3, [r6, #0]
 800e4d4:	1d1a      	adds	r2, r3, #4
 800e4d6:	6032      	str	r2, [r6, #0]
 800e4d8:	681e      	ldr	r6, [r3, #0]
 800e4da:	6862      	ldr	r2, [r4, #4]
 800e4dc:	2100      	movs	r1, #0
 800e4de:	4630      	mov	r0, r6
 800e4e0:	f7f1 feb6 	bl	8000250 <memchr>
 800e4e4:	b108      	cbz	r0, 800e4ea <_printf_i+0x1e6>
 800e4e6:	1b80      	subs	r0, r0, r6
 800e4e8:	6060      	str	r0, [r4, #4]
 800e4ea:	6863      	ldr	r3, [r4, #4]
 800e4ec:	6123      	str	r3, [r4, #16]
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4f4:	e7aa      	b.n	800e44c <_printf_i+0x148>
 800e4f6:	6923      	ldr	r3, [r4, #16]
 800e4f8:	4632      	mov	r2, r6
 800e4fa:	4649      	mov	r1, r9
 800e4fc:	4640      	mov	r0, r8
 800e4fe:	47d0      	blx	sl
 800e500:	3001      	adds	r0, #1
 800e502:	d0ad      	beq.n	800e460 <_printf_i+0x15c>
 800e504:	6823      	ldr	r3, [r4, #0]
 800e506:	079b      	lsls	r3, r3, #30
 800e508:	d413      	bmi.n	800e532 <_printf_i+0x22e>
 800e50a:	68e0      	ldr	r0, [r4, #12]
 800e50c:	9b03      	ldr	r3, [sp, #12]
 800e50e:	4298      	cmp	r0, r3
 800e510:	bfb8      	it	lt
 800e512:	4618      	movlt	r0, r3
 800e514:	e7a6      	b.n	800e464 <_printf_i+0x160>
 800e516:	2301      	movs	r3, #1
 800e518:	4632      	mov	r2, r6
 800e51a:	4649      	mov	r1, r9
 800e51c:	4640      	mov	r0, r8
 800e51e:	47d0      	blx	sl
 800e520:	3001      	adds	r0, #1
 800e522:	d09d      	beq.n	800e460 <_printf_i+0x15c>
 800e524:	3501      	adds	r5, #1
 800e526:	68e3      	ldr	r3, [r4, #12]
 800e528:	9903      	ldr	r1, [sp, #12]
 800e52a:	1a5b      	subs	r3, r3, r1
 800e52c:	42ab      	cmp	r3, r5
 800e52e:	dcf2      	bgt.n	800e516 <_printf_i+0x212>
 800e530:	e7eb      	b.n	800e50a <_printf_i+0x206>
 800e532:	2500      	movs	r5, #0
 800e534:	f104 0619 	add.w	r6, r4, #25
 800e538:	e7f5      	b.n	800e526 <_printf_i+0x222>
 800e53a:	bf00      	nop
 800e53c:	0800efba 	.word	0x0800efba
 800e540:	0800efcb 	.word	0x0800efcb

0800e544 <__sflush_r>:
 800e544:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e54c:	0716      	lsls	r6, r2, #28
 800e54e:	4605      	mov	r5, r0
 800e550:	460c      	mov	r4, r1
 800e552:	d454      	bmi.n	800e5fe <__sflush_r+0xba>
 800e554:	684b      	ldr	r3, [r1, #4]
 800e556:	2b00      	cmp	r3, #0
 800e558:	dc02      	bgt.n	800e560 <__sflush_r+0x1c>
 800e55a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	dd48      	ble.n	800e5f2 <__sflush_r+0xae>
 800e560:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e562:	2e00      	cmp	r6, #0
 800e564:	d045      	beq.n	800e5f2 <__sflush_r+0xae>
 800e566:	2300      	movs	r3, #0
 800e568:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e56c:	682f      	ldr	r7, [r5, #0]
 800e56e:	6a21      	ldr	r1, [r4, #32]
 800e570:	602b      	str	r3, [r5, #0]
 800e572:	d030      	beq.n	800e5d6 <__sflush_r+0x92>
 800e574:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e576:	89a3      	ldrh	r3, [r4, #12]
 800e578:	0759      	lsls	r1, r3, #29
 800e57a:	d505      	bpl.n	800e588 <__sflush_r+0x44>
 800e57c:	6863      	ldr	r3, [r4, #4]
 800e57e:	1ad2      	subs	r2, r2, r3
 800e580:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e582:	b10b      	cbz	r3, 800e588 <__sflush_r+0x44>
 800e584:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e586:	1ad2      	subs	r2, r2, r3
 800e588:	2300      	movs	r3, #0
 800e58a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e58c:	6a21      	ldr	r1, [r4, #32]
 800e58e:	4628      	mov	r0, r5
 800e590:	47b0      	blx	r6
 800e592:	1c43      	adds	r3, r0, #1
 800e594:	89a3      	ldrh	r3, [r4, #12]
 800e596:	d106      	bne.n	800e5a6 <__sflush_r+0x62>
 800e598:	6829      	ldr	r1, [r5, #0]
 800e59a:	291d      	cmp	r1, #29
 800e59c:	d82b      	bhi.n	800e5f6 <__sflush_r+0xb2>
 800e59e:	4a2a      	ldr	r2, [pc, #168]	@ (800e648 <__sflush_r+0x104>)
 800e5a0:	410a      	asrs	r2, r1
 800e5a2:	07d6      	lsls	r6, r2, #31
 800e5a4:	d427      	bmi.n	800e5f6 <__sflush_r+0xb2>
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	6062      	str	r2, [r4, #4]
 800e5aa:	04d9      	lsls	r1, r3, #19
 800e5ac:	6922      	ldr	r2, [r4, #16]
 800e5ae:	6022      	str	r2, [r4, #0]
 800e5b0:	d504      	bpl.n	800e5bc <__sflush_r+0x78>
 800e5b2:	1c42      	adds	r2, r0, #1
 800e5b4:	d101      	bne.n	800e5ba <__sflush_r+0x76>
 800e5b6:	682b      	ldr	r3, [r5, #0]
 800e5b8:	b903      	cbnz	r3, 800e5bc <__sflush_r+0x78>
 800e5ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800e5bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e5be:	602f      	str	r7, [r5, #0]
 800e5c0:	b1b9      	cbz	r1, 800e5f2 <__sflush_r+0xae>
 800e5c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e5c6:	4299      	cmp	r1, r3
 800e5c8:	d002      	beq.n	800e5d0 <__sflush_r+0x8c>
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	f7ff fb48 	bl	800dc60 <_free_r>
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800e5d4:	e00d      	b.n	800e5f2 <__sflush_r+0xae>
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	4628      	mov	r0, r5
 800e5da:	47b0      	blx	r6
 800e5dc:	4602      	mov	r2, r0
 800e5de:	1c50      	adds	r0, r2, #1
 800e5e0:	d1c9      	bne.n	800e576 <__sflush_r+0x32>
 800e5e2:	682b      	ldr	r3, [r5, #0]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d0c6      	beq.n	800e576 <__sflush_r+0x32>
 800e5e8:	2b1d      	cmp	r3, #29
 800e5ea:	d001      	beq.n	800e5f0 <__sflush_r+0xac>
 800e5ec:	2b16      	cmp	r3, #22
 800e5ee:	d11e      	bne.n	800e62e <__sflush_r+0xea>
 800e5f0:	602f      	str	r7, [r5, #0]
 800e5f2:	2000      	movs	r0, #0
 800e5f4:	e022      	b.n	800e63c <__sflush_r+0xf8>
 800e5f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5fa:	b21b      	sxth	r3, r3
 800e5fc:	e01b      	b.n	800e636 <__sflush_r+0xf2>
 800e5fe:	690f      	ldr	r7, [r1, #16]
 800e600:	2f00      	cmp	r7, #0
 800e602:	d0f6      	beq.n	800e5f2 <__sflush_r+0xae>
 800e604:	0793      	lsls	r3, r2, #30
 800e606:	680e      	ldr	r6, [r1, #0]
 800e608:	bf08      	it	eq
 800e60a:	694b      	ldreq	r3, [r1, #20]
 800e60c:	600f      	str	r7, [r1, #0]
 800e60e:	bf18      	it	ne
 800e610:	2300      	movne	r3, #0
 800e612:	eba6 0807 	sub.w	r8, r6, r7
 800e616:	608b      	str	r3, [r1, #8]
 800e618:	f1b8 0f00 	cmp.w	r8, #0
 800e61c:	dde9      	ble.n	800e5f2 <__sflush_r+0xae>
 800e61e:	6a21      	ldr	r1, [r4, #32]
 800e620:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e622:	4643      	mov	r3, r8
 800e624:	463a      	mov	r2, r7
 800e626:	4628      	mov	r0, r5
 800e628:	47b0      	blx	r6
 800e62a:	2800      	cmp	r0, #0
 800e62c:	dc08      	bgt.n	800e640 <__sflush_r+0xfc>
 800e62e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e636:	81a3      	strh	r3, [r4, #12]
 800e638:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e640:	4407      	add	r7, r0
 800e642:	eba8 0800 	sub.w	r8, r8, r0
 800e646:	e7e7      	b.n	800e618 <__sflush_r+0xd4>
 800e648:	dfbffffe 	.word	0xdfbffffe

0800e64c <_fflush_r>:
 800e64c:	b538      	push	{r3, r4, r5, lr}
 800e64e:	690b      	ldr	r3, [r1, #16]
 800e650:	4605      	mov	r5, r0
 800e652:	460c      	mov	r4, r1
 800e654:	b913      	cbnz	r3, 800e65c <_fflush_r+0x10>
 800e656:	2500      	movs	r5, #0
 800e658:	4628      	mov	r0, r5
 800e65a:	bd38      	pop	{r3, r4, r5, pc}
 800e65c:	b118      	cbz	r0, 800e666 <_fflush_r+0x1a>
 800e65e:	6a03      	ldr	r3, [r0, #32]
 800e660:	b90b      	cbnz	r3, 800e666 <_fflush_r+0x1a>
 800e662:	f7ff f905 	bl	800d870 <__sinit>
 800e666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d0f3      	beq.n	800e656 <_fflush_r+0xa>
 800e66e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e670:	07d0      	lsls	r0, r2, #31
 800e672:	d404      	bmi.n	800e67e <_fflush_r+0x32>
 800e674:	0599      	lsls	r1, r3, #22
 800e676:	d402      	bmi.n	800e67e <_fflush_r+0x32>
 800e678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e67a:	f7ff fac2 	bl	800dc02 <__retarget_lock_acquire_recursive>
 800e67e:	4628      	mov	r0, r5
 800e680:	4621      	mov	r1, r4
 800e682:	f7ff ff5f 	bl	800e544 <__sflush_r>
 800e686:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e688:	07da      	lsls	r2, r3, #31
 800e68a:	4605      	mov	r5, r0
 800e68c:	d4e4      	bmi.n	800e658 <_fflush_r+0xc>
 800e68e:	89a3      	ldrh	r3, [r4, #12]
 800e690:	059b      	lsls	r3, r3, #22
 800e692:	d4e1      	bmi.n	800e658 <_fflush_r+0xc>
 800e694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e696:	f7ff fab5 	bl	800dc04 <__retarget_lock_release_recursive>
 800e69a:	e7dd      	b.n	800e658 <_fflush_r+0xc>

0800e69c <__sread>:
 800e69c:	b510      	push	{r4, lr}
 800e69e:	460c      	mov	r4, r1
 800e6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6a4:	f000 f9d2 	bl	800ea4c <_read_r>
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	bfab      	itete	ge
 800e6ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e6ae:	89a3      	ldrhlt	r3, [r4, #12]
 800e6b0:	181b      	addge	r3, r3, r0
 800e6b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e6b6:	bfac      	ite	ge
 800e6b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e6ba:	81a3      	strhlt	r3, [r4, #12]
 800e6bc:	bd10      	pop	{r4, pc}

0800e6be <__swrite>:
 800e6be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6c2:	461f      	mov	r7, r3
 800e6c4:	898b      	ldrh	r3, [r1, #12]
 800e6c6:	05db      	lsls	r3, r3, #23
 800e6c8:	4605      	mov	r5, r0
 800e6ca:	460c      	mov	r4, r1
 800e6cc:	4616      	mov	r6, r2
 800e6ce:	d505      	bpl.n	800e6dc <__swrite+0x1e>
 800e6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6d4:	2302      	movs	r3, #2
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f000 f9a6 	bl	800ea28 <_lseek_r>
 800e6dc:	89a3      	ldrh	r3, [r4, #12]
 800e6de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e6e6:	81a3      	strh	r3, [r4, #12]
 800e6e8:	4632      	mov	r2, r6
 800e6ea:	463b      	mov	r3, r7
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f2:	f000 b9bd 	b.w	800ea70 <_write_r>

0800e6f6 <__sseek>:
 800e6f6:	b510      	push	{r4, lr}
 800e6f8:	460c      	mov	r4, r1
 800e6fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6fe:	f000 f993 	bl	800ea28 <_lseek_r>
 800e702:	1c43      	adds	r3, r0, #1
 800e704:	89a3      	ldrh	r3, [r4, #12]
 800e706:	bf15      	itete	ne
 800e708:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e70a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e70e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e712:	81a3      	strheq	r3, [r4, #12]
 800e714:	bf18      	it	ne
 800e716:	81a3      	strhne	r3, [r4, #12]
 800e718:	bd10      	pop	{r4, pc}

0800e71a <__sclose>:
 800e71a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e71e:	f000 b951 	b.w	800e9c4 <_close_r>
	...

0800e724 <fiprintf>:
 800e724:	b40e      	push	{r1, r2, r3}
 800e726:	b503      	push	{r0, r1, lr}
 800e728:	4601      	mov	r1, r0
 800e72a:	ab03      	add	r3, sp, #12
 800e72c:	4805      	ldr	r0, [pc, #20]	@ (800e744 <fiprintf+0x20>)
 800e72e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e732:	6800      	ldr	r0, [r0, #0]
 800e734:	9301      	str	r3, [sp, #4]
 800e736:	f7ff fc5f 	bl	800dff8 <_vfiprintf_r>
 800e73a:	b002      	add	sp, #8
 800e73c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e740:	b003      	add	sp, #12
 800e742:	4770      	bx	lr
 800e744:	20000024 	.word	0x20000024

0800e748 <_realloc_r>:
 800e748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e74c:	4680      	mov	r8, r0
 800e74e:	4615      	mov	r5, r2
 800e750:	460c      	mov	r4, r1
 800e752:	b921      	cbnz	r1, 800e75e <_realloc_r+0x16>
 800e754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e758:	4611      	mov	r1, r2
 800e75a:	f7fe bf3d 	b.w	800d5d8 <_malloc_r>
 800e75e:	b92a      	cbnz	r2, 800e76c <_realloc_r+0x24>
 800e760:	f7ff fa7e 	bl	800dc60 <_free_r>
 800e764:	2400      	movs	r4, #0
 800e766:	4620      	mov	r0, r4
 800e768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e76c:	f000 f999 	bl	800eaa2 <_malloc_usable_size_r>
 800e770:	4285      	cmp	r5, r0
 800e772:	4606      	mov	r6, r0
 800e774:	d802      	bhi.n	800e77c <_realloc_r+0x34>
 800e776:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e77a:	d8f4      	bhi.n	800e766 <_realloc_r+0x1e>
 800e77c:	4629      	mov	r1, r5
 800e77e:	4640      	mov	r0, r8
 800e780:	f7fe ff2a 	bl	800d5d8 <_malloc_r>
 800e784:	4607      	mov	r7, r0
 800e786:	2800      	cmp	r0, #0
 800e788:	d0ec      	beq.n	800e764 <_realloc_r+0x1c>
 800e78a:	42b5      	cmp	r5, r6
 800e78c:	462a      	mov	r2, r5
 800e78e:	4621      	mov	r1, r4
 800e790:	bf28      	it	cs
 800e792:	4632      	movcs	r2, r6
 800e794:	f7ff fa37 	bl	800dc06 <memcpy>
 800e798:	4621      	mov	r1, r4
 800e79a:	4640      	mov	r0, r8
 800e79c:	f7ff fa60 	bl	800dc60 <_free_r>
 800e7a0:	463c      	mov	r4, r7
 800e7a2:	e7e0      	b.n	800e766 <_realloc_r+0x1e>

0800e7a4 <__swbuf_r>:
 800e7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7a6:	460e      	mov	r6, r1
 800e7a8:	4614      	mov	r4, r2
 800e7aa:	4605      	mov	r5, r0
 800e7ac:	b118      	cbz	r0, 800e7b6 <__swbuf_r+0x12>
 800e7ae:	6a03      	ldr	r3, [r0, #32]
 800e7b0:	b90b      	cbnz	r3, 800e7b6 <__swbuf_r+0x12>
 800e7b2:	f7ff f85d 	bl	800d870 <__sinit>
 800e7b6:	69a3      	ldr	r3, [r4, #24]
 800e7b8:	60a3      	str	r3, [r4, #8]
 800e7ba:	89a3      	ldrh	r3, [r4, #12]
 800e7bc:	071a      	lsls	r2, r3, #28
 800e7be:	d501      	bpl.n	800e7c4 <__swbuf_r+0x20>
 800e7c0:	6923      	ldr	r3, [r4, #16]
 800e7c2:	b943      	cbnz	r3, 800e7d6 <__swbuf_r+0x32>
 800e7c4:	4621      	mov	r1, r4
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	f000 f82a 	bl	800e820 <__swsetup_r>
 800e7cc:	b118      	cbz	r0, 800e7d6 <__swbuf_r+0x32>
 800e7ce:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e7d2:	4638      	mov	r0, r7
 800e7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7d6:	6823      	ldr	r3, [r4, #0]
 800e7d8:	6922      	ldr	r2, [r4, #16]
 800e7da:	1a98      	subs	r0, r3, r2
 800e7dc:	6963      	ldr	r3, [r4, #20]
 800e7de:	b2f6      	uxtb	r6, r6
 800e7e0:	4283      	cmp	r3, r0
 800e7e2:	4637      	mov	r7, r6
 800e7e4:	dc05      	bgt.n	800e7f2 <__swbuf_r+0x4e>
 800e7e6:	4621      	mov	r1, r4
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	f7ff ff2f 	bl	800e64c <_fflush_r>
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	d1ed      	bne.n	800e7ce <__swbuf_r+0x2a>
 800e7f2:	68a3      	ldr	r3, [r4, #8]
 800e7f4:	3b01      	subs	r3, #1
 800e7f6:	60a3      	str	r3, [r4, #8]
 800e7f8:	6823      	ldr	r3, [r4, #0]
 800e7fa:	1c5a      	adds	r2, r3, #1
 800e7fc:	6022      	str	r2, [r4, #0]
 800e7fe:	701e      	strb	r6, [r3, #0]
 800e800:	6962      	ldr	r2, [r4, #20]
 800e802:	1c43      	adds	r3, r0, #1
 800e804:	429a      	cmp	r2, r3
 800e806:	d004      	beq.n	800e812 <__swbuf_r+0x6e>
 800e808:	89a3      	ldrh	r3, [r4, #12]
 800e80a:	07db      	lsls	r3, r3, #31
 800e80c:	d5e1      	bpl.n	800e7d2 <__swbuf_r+0x2e>
 800e80e:	2e0a      	cmp	r6, #10
 800e810:	d1df      	bne.n	800e7d2 <__swbuf_r+0x2e>
 800e812:	4621      	mov	r1, r4
 800e814:	4628      	mov	r0, r5
 800e816:	f7ff ff19 	bl	800e64c <_fflush_r>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	d0d9      	beq.n	800e7d2 <__swbuf_r+0x2e>
 800e81e:	e7d6      	b.n	800e7ce <__swbuf_r+0x2a>

0800e820 <__swsetup_r>:
 800e820:	b538      	push	{r3, r4, r5, lr}
 800e822:	4b29      	ldr	r3, [pc, #164]	@ (800e8c8 <__swsetup_r+0xa8>)
 800e824:	4605      	mov	r5, r0
 800e826:	6818      	ldr	r0, [r3, #0]
 800e828:	460c      	mov	r4, r1
 800e82a:	b118      	cbz	r0, 800e834 <__swsetup_r+0x14>
 800e82c:	6a03      	ldr	r3, [r0, #32]
 800e82e:	b90b      	cbnz	r3, 800e834 <__swsetup_r+0x14>
 800e830:	f7ff f81e 	bl	800d870 <__sinit>
 800e834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e838:	0719      	lsls	r1, r3, #28
 800e83a:	d422      	bmi.n	800e882 <__swsetup_r+0x62>
 800e83c:	06da      	lsls	r2, r3, #27
 800e83e:	d407      	bmi.n	800e850 <__swsetup_r+0x30>
 800e840:	2209      	movs	r2, #9
 800e842:	602a      	str	r2, [r5, #0]
 800e844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e848:	81a3      	strh	r3, [r4, #12]
 800e84a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e84e:	e033      	b.n	800e8b8 <__swsetup_r+0x98>
 800e850:	0758      	lsls	r0, r3, #29
 800e852:	d512      	bpl.n	800e87a <__swsetup_r+0x5a>
 800e854:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e856:	b141      	cbz	r1, 800e86a <__swsetup_r+0x4a>
 800e858:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e85c:	4299      	cmp	r1, r3
 800e85e:	d002      	beq.n	800e866 <__swsetup_r+0x46>
 800e860:	4628      	mov	r0, r5
 800e862:	f7ff f9fd 	bl	800dc60 <_free_r>
 800e866:	2300      	movs	r3, #0
 800e868:	6363      	str	r3, [r4, #52]	@ 0x34
 800e86a:	89a3      	ldrh	r3, [r4, #12]
 800e86c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e870:	81a3      	strh	r3, [r4, #12]
 800e872:	2300      	movs	r3, #0
 800e874:	6063      	str	r3, [r4, #4]
 800e876:	6923      	ldr	r3, [r4, #16]
 800e878:	6023      	str	r3, [r4, #0]
 800e87a:	89a3      	ldrh	r3, [r4, #12]
 800e87c:	f043 0308 	orr.w	r3, r3, #8
 800e880:	81a3      	strh	r3, [r4, #12]
 800e882:	6923      	ldr	r3, [r4, #16]
 800e884:	b94b      	cbnz	r3, 800e89a <__swsetup_r+0x7a>
 800e886:	89a3      	ldrh	r3, [r4, #12]
 800e888:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e88c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e890:	d003      	beq.n	800e89a <__swsetup_r+0x7a>
 800e892:	4621      	mov	r1, r4
 800e894:	4628      	mov	r0, r5
 800e896:	f000 f83f 	bl	800e918 <__smakebuf_r>
 800e89a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e89e:	f013 0201 	ands.w	r2, r3, #1
 800e8a2:	d00a      	beq.n	800e8ba <__swsetup_r+0x9a>
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	60a2      	str	r2, [r4, #8]
 800e8a8:	6962      	ldr	r2, [r4, #20]
 800e8aa:	4252      	negs	r2, r2
 800e8ac:	61a2      	str	r2, [r4, #24]
 800e8ae:	6922      	ldr	r2, [r4, #16]
 800e8b0:	b942      	cbnz	r2, 800e8c4 <__swsetup_r+0xa4>
 800e8b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e8b6:	d1c5      	bne.n	800e844 <__swsetup_r+0x24>
 800e8b8:	bd38      	pop	{r3, r4, r5, pc}
 800e8ba:	0799      	lsls	r1, r3, #30
 800e8bc:	bf58      	it	pl
 800e8be:	6962      	ldrpl	r2, [r4, #20]
 800e8c0:	60a2      	str	r2, [r4, #8]
 800e8c2:	e7f4      	b.n	800e8ae <__swsetup_r+0x8e>
 800e8c4:	2000      	movs	r0, #0
 800e8c6:	e7f7      	b.n	800e8b8 <__swsetup_r+0x98>
 800e8c8:	20000024 	.word	0x20000024

0800e8cc <__swhatbuf_r>:
 800e8cc:	b570      	push	{r4, r5, r6, lr}
 800e8ce:	460c      	mov	r4, r1
 800e8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8d4:	2900      	cmp	r1, #0
 800e8d6:	b096      	sub	sp, #88	@ 0x58
 800e8d8:	4615      	mov	r5, r2
 800e8da:	461e      	mov	r6, r3
 800e8dc:	da0d      	bge.n	800e8fa <__swhatbuf_r+0x2e>
 800e8de:	89a3      	ldrh	r3, [r4, #12]
 800e8e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e8e4:	f04f 0100 	mov.w	r1, #0
 800e8e8:	bf14      	ite	ne
 800e8ea:	2340      	movne	r3, #64	@ 0x40
 800e8ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	6031      	str	r1, [r6, #0]
 800e8f4:	602b      	str	r3, [r5, #0]
 800e8f6:	b016      	add	sp, #88	@ 0x58
 800e8f8:	bd70      	pop	{r4, r5, r6, pc}
 800e8fa:	466a      	mov	r2, sp
 800e8fc:	f000 f872 	bl	800e9e4 <_fstat_r>
 800e900:	2800      	cmp	r0, #0
 800e902:	dbec      	blt.n	800e8de <__swhatbuf_r+0x12>
 800e904:	9901      	ldr	r1, [sp, #4]
 800e906:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e90a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e90e:	4259      	negs	r1, r3
 800e910:	4159      	adcs	r1, r3
 800e912:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e916:	e7eb      	b.n	800e8f0 <__swhatbuf_r+0x24>

0800e918 <__smakebuf_r>:
 800e918:	898b      	ldrh	r3, [r1, #12]
 800e91a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e91c:	079d      	lsls	r5, r3, #30
 800e91e:	4606      	mov	r6, r0
 800e920:	460c      	mov	r4, r1
 800e922:	d507      	bpl.n	800e934 <__smakebuf_r+0x1c>
 800e924:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e928:	6023      	str	r3, [r4, #0]
 800e92a:	6123      	str	r3, [r4, #16]
 800e92c:	2301      	movs	r3, #1
 800e92e:	6163      	str	r3, [r4, #20]
 800e930:	b003      	add	sp, #12
 800e932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e934:	ab01      	add	r3, sp, #4
 800e936:	466a      	mov	r2, sp
 800e938:	f7ff ffc8 	bl	800e8cc <__swhatbuf_r>
 800e93c:	9f00      	ldr	r7, [sp, #0]
 800e93e:	4605      	mov	r5, r0
 800e940:	4639      	mov	r1, r7
 800e942:	4630      	mov	r0, r6
 800e944:	f7fe fe48 	bl	800d5d8 <_malloc_r>
 800e948:	b948      	cbnz	r0, 800e95e <__smakebuf_r+0x46>
 800e94a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e94e:	059a      	lsls	r2, r3, #22
 800e950:	d4ee      	bmi.n	800e930 <__smakebuf_r+0x18>
 800e952:	f023 0303 	bic.w	r3, r3, #3
 800e956:	f043 0302 	orr.w	r3, r3, #2
 800e95a:	81a3      	strh	r3, [r4, #12]
 800e95c:	e7e2      	b.n	800e924 <__smakebuf_r+0xc>
 800e95e:	89a3      	ldrh	r3, [r4, #12]
 800e960:	6020      	str	r0, [r4, #0]
 800e962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e966:	81a3      	strh	r3, [r4, #12]
 800e968:	9b01      	ldr	r3, [sp, #4]
 800e96a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e96e:	b15b      	cbz	r3, 800e988 <__smakebuf_r+0x70>
 800e970:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e974:	4630      	mov	r0, r6
 800e976:	f000 f847 	bl	800ea08 <_isatty_r>
 800e97a:	b128      	cbz	r0, 800e988 <__smakebuf_r+0x70>
 800e97c:	89a3      	ldrh	r3, [r4, #12]
 800e97e:	f023 0303 	bic.w	r3, r3, #3
 800e982:	f043 0301 	orr.w	r3, r3, #1
 800e986:	81a3      	strh	r3, [r4, #12]
 800e988:	89a3      	ldrh	r3, [r4, #12]
 800e98a:	431d      	orrs	r5, r3
 800e98c:	81a5      	strh	r5, [r4, #12]
 800e98e:	e7cf      	b.n	800e930 <__smakebuf_r+0x18>

0800e990 <memmove>:
 800e990:	4288      	cmp	r0, r1
 800e992:	b510      	push	{r4, lr}
 800e994:	eb01 0402 	add.w	r4, r1, r2
 800e998:	d902      	bls.n	800e9a0 <memmove+0x10>
 800e99a:	4284      	cmp	r4, r0
 800e99c:	4623      	mov	r3, r4
 800e99e:	d807      	bhi.n	800e9b0 <memmove+0x20>
 800e9a0:	1e43      	subs	r3, r0, #1
 800e9a2:	42a1      	cmp	r1, r4
 800e9a4:	d008      	beq.n	800e9b8 <memmove+0x28>
 800e9a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e9ae:	e7f8      	b.n	800e9a2 <memmove+0x12>
 800e9b0:	4402      	add	r2, r0
 800e9b2:	4601      	mov	r1, r0
 800e9b4:	428a      	cmp	r2, r1
 800e9b6:	d100      	bne.n	800e9ba <memmove+0x2a>
 800e9b8:	bd10      	pop	{r4, pc}
 800e9ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e9be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e9c2:	e7f7      	b.n	800e9b4 <memmove+0x24>

0800e9c4 <_close_r>:
 800e9c4:	b538      	push	{r3, r4, r5, lr}
 800e9c6:	4d06      	ldr	r5, [pc, #24]	@ (800e9e0 <_close_r+0x1c>)
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	4604      	mov	r4, r0
 800e9cc:	4608      	mov	r0, r1
 800e9ce:	602b      	str	r3, [r5, #0]
 800e9d0:	f7f3 f8d4 	bl	8001b7c <_close>
 800e9d4:	1c43      	adds	r3, r0, #1
 800e9d6:	d102      	bne.n	800e9de <_close_r+0x1a>
 800e9d8:	682b      	ldr	r3, [r5, #0]
 800e9da:	b103      	cbz	r3, 800e9de <_close_r+0x1a>
 800e9dc:	6023      	str	r3, [r4, #0]
 800e9de:	bd38      	pop	{r3, r4, r5, pc}
 800e9e0:	20004378 	.word	0x20004378

0800e9e4 <_fstat_r>:
 800e9e4:	b538      	push	{r3, r4, r5, lr}
 800e9e6:	4d07      	ldr	r5, [pc, #28]	@ (800ea04 <_fstat_r+0x20>)
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	4604      	mov	r4, r0
 800e9ec:	4608      	mov	r0, r1
 800e9ee:	4611      	mov	r1, r2
 800e9f0:	602b      	str	r3, [r5, #0]
 800e9f2:	f7f3 f8cf 	bl	8001b94 <_fstat>
 800e9f6:	1c43      	adds	r3, r0, #1
 800e9f8:	d102      	bne.n	800ea00 <_fstat_r+0x1c>
 800e9fa:	682b      	ldr	r3, [r5, #0]
 800e9fc:	b103      	cbz	r3, 800ea00 <_fstat_r+0x1c>
 800e9fe:	6023      	str	r3, [r4, #0]
 800ea00:	bd38      	pop	{r3, r4, r5, pc}
 800ea02:	bf00      	nop
 800ea04:	20004378 	.word	0x20004378

0800ea08 <_isatty_r>:
 800ea08:	b538      	push	{r3, r4, r5, lr}
 800ea0a:	4d06      	ldr	r5, [pc, #24]	@ (800ea24 <_isatty_r+0x1c>)
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	4604      	mov	r4, r0
 800ea10:	4608      	mov	r0, r1
 800ea12:	602b      	str	r3, [r5, #0]
 800ea14:	f7f3 f8ce 	bl	8001bb4 <_isatty>
 800ea18:	1c43      	adds	r3, r0, #1
 800ea1a:	d102      	bne.n	800ea22 <_isatty_r+0x1a>
 800ea1c:	682b      	ldr	r3, [r5, #0]
 800ea1e:	b103      	cbz	r3, 800ea22 <_isatty_r+0x1a>
 800ea20:	6023      	str	r3, [r4, #0]
 800ea22:	bd38      	pop	{r3, r4, r5, pc}
 800ea24:	20004378 	.word	0x20004378

0800ea28 <_lseek_r>:
 800ea28:	b538      	push	{r3, r4, r5, lr}
 800ea2a:	4d07      	ldr	r5, [pc, #28]	@ (800ea48 <_lseek_r+0x20>)
 800ea2c:	4604      	mov	r4, r0
 800ea2e:	4608      	mov	r0, r1
 800ea30:	4611      	mov	r1, r2
 800ea32:	2200      	movs	r2, #0
 800ea34:	602a      	str	r2, [r5, #0]
 800ea36:	461a      	mov	r2, r3
 800ea38:	f7f3 f8c7 	bl	8001bca <_lseek>
 800ea3c:	1c43      	adds	r3, r0, #1
 800ea3e:	d102      	bne.n	800ea46 <_lseek_r+0x1e>
 800ea40:	682b      	ldr	r3, [r5, #0]
 800ea42:	b103      	cbz	r3, 800ea46 <_lseek_r+0x1e>
 800ea44:	6023      	str	r3, [r4, #0]
 800ea46:	bd38      	pop	{r3, r4, r5, pc}
 800ea48:	20004378 	.word	0x20004378

0800ea4c <_read_r>:
 800ea4c:	b538      	push	{r3, r4, r5, lr}
 800ea4e:	4d07      	ldr	r5, [pc, #28]	@ (800ea6c <_read_r+0x20>)
 800ea50:	4604      	mov	r4, r0
 800ea52:	4608      	mov	r0, r1
 800ea54:	4611      	mov	r1, r2
 800ea56:	2200      	movs	r2, #0
 800ea58:	602a      	str	r2, [r5, #0]
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	f7f3 f855 	bl	8001b0a <_read>
 800ea60:	1c43      	adds	r3, r0, #1
 800ea62:	d102      	bne.n	800ea6a <_read_r+0x1e>
 800ea64:	682b      	ldr	r3, [r5, #0]
 800ea66:	b103      	cbz	r3, 800ea6a <_read_r+0x1e>
 800ea68:	6023      	str	r3, [r4, #0]
 800ea6a:	bd38      	pop	{r3, r4, r5, pc}
 800ea6c:	20004378 	.word	0x20004378

0800ea70 <_write_r>:
 800ea70:	b538      	push	{r3, r4, r5, lr}
 800ea72:	4d07      	ldr	r5, [pc, #28]	@ (800ea90 <_write_r+0x20>)
 800ea74:	4604      	mov	r4, r0
 800ea76:	4608      	mov	r0, r1
 800ea78:	4611      	mov	r1, r2
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	602a      	str	r2, [r5, #0]
 800ea7e:	461a      	mov	r2, r3
 800ea80:	f7f3 f860 	bl	8001b44 <_write>
 800ea84:	1c43      	adds	r3, r0, #1
 800ea86:	d102      	bne.n	800ea8e <_write_r+0x1e>
 800ea88:	682b      	ldr	r3, [r5, #0]
 800ea8a:	b103      	cbz	r3, 800ea8e <_write_r+0x1e>
 800ea8c:	6023      	str	r3, [r4, #0]
 800ea8e:	bd38      	pop	{r3, r4, r5, pc}
 800ea90:	20004378 	.word	0x20004378

0800ea94 <abort>:
 800ea94:	b508      	push	{r3, lr}
 800ea96:	2006      	movs	r0, #6
 800ea98:	f000 f834 	bl	800eb04 <raise>
 800ea9c:	2001      	movs	r0, #1
 800ea9e:	f7f3 f829 	bl	8001af4 <_exit>

0800eaa2 <_malloc_usable_size_r>:
 800eaa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eaa6:	1f18      	subs	r0, r3, #4
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	bfbc      	itt	lt
 800eaac:	580b      	ldrlt	r3, [r1, r0]
 800eaae:	18c0      	addlt	r0, r0, r3
 800eab0:	4770      	bx	lr

0800eab2 <_raise_r>:
 800eab2:	291f      	cmp	r1, #31
 800eab4:	b538      	push	{r3, r4, r5, lr}
 800eab6:	4605      	mov	r5, r0
 800eab8:	460c      	mov	r4, r1
 800eaba:	d904      	bls.n	800eac6 <_raise_r+0x14>
 800eabc:	2316      	movs	r3, #22
 800eabe:	6003      	str	r3, [r0, #0]
 800eac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eac4:	bd38      	pop	{r3, r4, r5, pc}
 800eac6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eac8:	b112      	cbz	r2, 800ead0 <_raise_r+0x1e>
 800eaca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eace:	b94b      	cbnz	r3, 800eae4 <_raise_r+0x32>
 800ead0:	4628      	mov	r0, r5
 800ead2:	f000 f831 	bl	800eb38 <_getpid_r>
 800ead6:	4622      	mov	r2, r4
 800ead8:	4601      	mov	r1, r0
 800eada:	4628      	mov	r0, r5
 800eadc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eae0:	f000 b818 	b.w	800eb14 <_kill_r>
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d00a      	beq.n	800eafe <_raise_r+0x4c>
 800eae8:	1c59      	adds	r1, r3, #1
 800eaea:	d103      	bne.n	800eaf4 <_raise_r+0x42>
 800eaec:	2316      	movs	r3, #22
 800eaee:	6003      	str	r3, [r0, #0]
 800eaf0:	2001      	movs	r0, #1
 800eaf2:	e7e7      	b.n	800eac4 <_raise_r+0x12>
 800eaf4:	2100      	movs	r1, #0
 800eaf6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eafa:	4620      	mov	r0, r4
 800eafc:	4798      	blx	r3
 800eafe:	2000      	movs	r0, #0
 800eb00:	e7e0      	b.n	800eac4 <_raise_r+0x12>
	...

0800eb04 <raise>:
 800eb04:	4b02      	ldr	r3, [pc, #8]	@ (800eb10 <raise+0xc>)
 800eb06:	4601      	mov	r1, r0
 800eb08:	6818      	ldr	r0, [r3, #0]
 800eb0a:	f7ff bfd2 	b.w	800eab2 <_raise_r>
 800eb0e:	bf00      	nop
 800eb10:	20000024 	.word	0x20000024

0800eb14 <_kill_r>:
 800eb14:	b538      	push	{r3, r4, r5, lr}
 800eb16:	4d07      	ldr	r5, [pc, #28]	@ (800eb34 <_kill_r+0x20>)
 800eb18:	2300      	movs	r3, #0
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	4608      	mov	r0, r1
 800eb1e:	4611      	mov	r1, r2
 800eb20:	602b      	str	r3, [r5, #0]
 800eb22:	f7f2 ffd7 	bl	8001ad4 <_kill>
 800eb26:	1c43      	adds	r3, r0, #1
 800eb28:	d102      	bne.n	800eb30 <_kill_r+0x1c>
 800eb2a:	682b      	ldr	r3, [r5, #0]
 800eb2c:	b103      	cbz	r3, 800eb30 <_kill_r+0x1c>
 800eb2e:	6023      	str	r3, [r4, #0]
 800eb30:	bd38      	pop	{r3, r4, r5, pc}
 800eb32:	bf00      	nop
 800eb34:	20004378 	.word	0x20004378

0800eb38 <_getpid_r>:
 800eb38:	f7f2 bfc4 	b.w	8001ac4 <_getpid>

0800eb3c <_init>:
 800eb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb3e:	bf00      	nop
 800eb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb42:	bc08      	pop	{r3}
 800eb44:	469e      	mov	lr, r3
 800eb46:	4770      	bx	lr

0800eb48 <_fini>:
 800eb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb4a:	bf00      	nop
 800eb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb4e:	bc08      	pop	{r3}
 800eb50:	469e      	mov	lr, r3
 800eb52:	4770      	bx	lr
