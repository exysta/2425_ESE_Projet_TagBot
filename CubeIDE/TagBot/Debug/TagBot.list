
TagBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d58  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08008f38  08008f38  00009f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090c4  080090c4  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  080090c4  080090c4  0000a0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090cc  080090cc  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090cc  080090cc  0000a0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090d0  080090d0  0000a0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080090d4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  20000068  0800913c  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  0800913c  0000b6d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fff4  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042eb  00000000  00000000  0002b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc0  00000000  00000000  0002f378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001590  00000000  00000000  00030f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a7f  00000000  00000000  000324c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c78  00000000  00000000  00055f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e32fb  00000000  00000000  00078bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0015beba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d9c  00000000  00000000  0015bf40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00163cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008f20 	.word	0x08008f20

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08008f20 	.word	0x08008f20

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ADXL343_ReadRegister>:
	printf("Configuration done\r\n");

}

// Function to read from a register
void ADXL343_ReadRegister(uint8_t reg, int8_t* rx_data, size_t length) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
 80005bc:	73fb      	strb	r3, [r7, #15]

    uint8_t tx_data = reg | 0x80; // MSB = 1 pour la lecture
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	75fb      	strb	r3, [r7, #23]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Activer NSS
 80005c8:	2200      	movs	r2, #0
 80005ca:	2110      	movs	r1, #16
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d0:	f003 fafc 	bl	8003bcc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx_data, 1, HAL_MAX_DELAY); // Envoyer l'adresse
 80005d4:	f107 0117 	add.w	r1, r7, #23
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005dc:	2201      	movs	r2, #1
 80005de:	480a      	ldr	r0, [pc, #40]	@ (8000608 <ADXL343_ReadRegister+0x58>)
 80005e0:	f004 fce9 	bl	8004fb6 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t*)rx_data, 1, HAL_MAX_DELAY);  // Lire la donnée
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005e8:	2201      	movs	r2, #1
 80005ea:	68b9      	ldr	r1, [r7, #8]
 80005ec:	4806      	ldr	r0, [pc, #24]	@ (8000608 <ADXL343_ReadRegister+0x58>)
 80005ee:	f004 fe58 	bl	80052a2 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // Désactiver NSS
 80005f2:	2201      	movs	r2, #1
 80005f4:	2110      	movs	r1, #16
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005fa:	f003 fae7 	bl	8003bcc <HAL_GPIO_WritePin>


    //HAL_SPI_TransmitReceive(hspi, pTxData, pRxData, Size, Timeout); // a utiliser quand NSS hardware ioc enable
}
 80005fe:	bf00      	nop
 8000600:	3718      	adds	r7, #24
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000228 	.word	0x20000228

0800060c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08c      	sub	sp, #48	@ 0x30
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2220      	movs	r2, #32
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f007 fecd 	bl	80083c4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800062a:	4b32      	ldr	r3, [pc, #200]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 800062c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000630:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000632:	4b30      	ldr	r3, [pc, #192]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 8000634:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000638:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063a:	4b2e      	ldr	r3, [pc, #184]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000640:	4b2c      	ldr	r3, [pc, #176]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000646:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064c:	4b29      	ldr	r3, [pc, #164]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000652:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 8000654:	2204      	movs	r2, #4
 8000656:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000658:	4b26      	ldr	r3, [pc, #152]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800065e:	4b25      	ldr	r3, [pc, #148]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000664:	4b23      	ldr	r3, [pc, #140]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 8000666:	2201      	movs	r2, #1
 8000668:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066a:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000672:	4b20      	ldr	r3, [pc, #128]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 8000674:	2200      	movs	r2, #0
 8000676:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000678:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 800067a:	2200      	movs	r2, #0
 800067c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800067e:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000686:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 8000688:	2200      	movs	r2, #0
 800068a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800068c:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 800068e:	2200      	movs	r2, #0
 8000690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000694:	4817      	ldr	r0, [pc, #92]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 8000696:	f001 fd75 	bl	8002184 <HAL_ADC_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006a0:	f000 fc54 	bl	8000f4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ac:	4619      	mov	r1, r3
 80006ae:	4811      	ldr	r0, [pc, #68]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 80006b0:	f002 fce4 	bl	800307c <HAL_ADCEx_MultiModeConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006ba:	f000 fc47 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <MX_ADC1_Init+0xec>)
 80006c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c2:	2306      	movs	r3, #6
 80006c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ca:	237f      	movs	r3, #127	@ 0x7f
 80006cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ce:	2304      	movs	r3, #4
 80006d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	@ (80006f4 <MX_ADC1_Init+0xe8>)
 80006dc:	f001 ff9e 	bl	800261c <HAL_ADC_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006e6:	f000 fc31 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	3730      	adds	r7, #48	@ 0x30
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000084 	.word	0x20000084
 80006f8:	2e300800 	.word	0x2e300800

080006fc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2220      	movs	r2, #32
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f007 fe5b 	bl	80083c4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800070e:	4b33      	ldr	r3, [pc, #204]	@ (80007dc <MX_ADC2_Init+0xe0>)
 8000710:	4a33      	ldr	r2, [pc, #204]	@ (80007e0 <MX_ADC2_Init+0xe4>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000714:	4b31      	ldr	r3, [pc, #196]	@ (80007dc <MX_ADC2_Init+0xe0>)
 8000716:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800071a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800071c:	4b2f      	ldr	r3, [pc, #188]	@ (80007dc <MX_ADC2_Init+0xe0>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000722:	4b2e      	ldr	r3, [pc, #184]	@ (80007dc <MX_ADC2_Init+0xe0>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000728:	4b2c      	ldr	r3, [pc, #176]	@ (80007dc <MX_ADC2_Init+0xe0>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800072e:	4b2b      	ldr	r3, [pc, #172]	@ (80007dc <MX_ADC2_Init+0xe0>)
 8000730:	2201      	movs	r2, #1
 8000732:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000734:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <MX_ADC2_Init+0xe0>)
 8000736:	2204      	movs	r2, #4
 8000738:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800073a:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <MX_ADC2_Init+0xe0>)
 800073c:	2200      	movs	r2, #0
 800073e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000740:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <MX_ADC2_Init+0xe0>)
 8000742:	2200      	movs	r2, #0
 8000744:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000746:	4b25      	ldr	r3, [pc, #148]	@ (80007dc <MX_ADC2_Init+0xe0>)
 8000748:	2202      	movs	r2, #2
 800074a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800074c:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <MX_ADC2_Init+0xe0>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000754:	4b21      	ldr	r3, [pc, #132]	@ (80007dc <MX_ADC2_Init+0xe0>)
 8000756:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800075a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <MX_ADC2_Init+0xe0>)
 800075e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000762:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000764:	4b1d      	ldr	r3, [pc, #116]	@ (80007dc <MX_ADC2_Init+0xe0>)
 8000766:	2201      	movs	r2, #1
 8000768:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076c:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <MX_ADC2_Init+0xe0>)
 800076e:	2200      	movs	r2, #0
 8000770:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000772:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <MX_ADC2_Init+0xe0>)
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800077a:	4818      	ldr	r0, [pc, #96]	@ (80007dc <MX_ADC2_Init+0xe0>)
 800077c:	f001 fd02 	bl	8002184 <HAL_ADC_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000786:	f000 fbe1 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800078a:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <MX_ADC2_Init+0xe8>)
 800078c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078e:	2306      	movs	r3, #6
 8000790:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000792:	2304      	movs	r3, #4
 8000794:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000796:	237f      	movs	r3, #127	@ 0x7f
 8000798:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800079a:	2304      	movs	r3, #4
 800079c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007a2:	463b      	mov	r3, r7
 80007a4:	4619      	mov	r1, r3
 80007a6:	480d      	ldr	r0, [pc, #52]	@ (80007dc <MX_ADC2_Init+0xe0>)
 80007a8:	f001 ff38 	bl	800261c <HAL_ADC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80007b2:	f000 fbcb 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_ADC2_Init+0xec>)
 80007b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007ba:	230c      	movs	r3, #12
 80007bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	@ (80007dc <MX_ADC2_Init+0xe0>)
 80007c4:	f001 ff2a 	bl	800261c <HAL_ADC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80007ce:	f000 fbbd 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3720      	adds	r7, #32
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000f0 	.word	0x200000f0
 80007e0:	50000100 	.word	0x50000100
 80007e4:	32601000 	.word	0x32601000
 80007e8:	3ef08000 	.word	0x3ef08000

080007ec <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b09c      	sub	sp, #112	@ 0x70
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000804:	f107 0318 	add.w	r3, r7, #24
 8000808:	2244      	movs	r2, #68	@ 0x44
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f007 fdd9 	bl	80083c4 <memset>
  if(adcHandle->Instance==ADC1)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800081a:	d13e      	bne.n	800089a <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800081c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000820:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000822:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000826:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000828:	f107 0318 	add.w	r3, r7, #24
 800082c:	4618      	mov	r0, r3
 800082e:	f004 f927 	bl	8004a80 <HAL_RCCEx_PeriphCLKConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000838:	f000 fb88 	bl	8000f4c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800083c:	4b50      	ldr	r3, [pc, #320]	@ (8000980 <HAL_ADC_MspInit+0x194>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	4a4f      	ldr	r2, [pc, #316]	@ (8000980 <HAL_ADC_MspInit+0x194>)
 8000844:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000846:	4b4e      	ldr	r3, [pc, #312]	@ (8000980 <HAL_ADC_MspInit+0x194>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d10b      	bne.n	8000866 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800084e:	4b4d      	ldr	r3, [pc, #308]	@ (8000984 <HAL_ADC_MspInit+0x198>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a4c      	ldr	r2, [pc, #304]	@ (8000984 <HAL_ADC_MspInit+0x198>)
 8000854:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b4a      	ldr	r3, [pc, #296]	@ (8000984 <HAL_ADC_MspInit+0x198>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b47      	ldr	r3, [pc, #284]	@ (8000984 <HAL_ADC_MspInit+0x198>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	4a46      	ldr	r2, [pc, #280]	@ (8000984 <HAL_ADC_MspInit+0x198>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000872:	4b44      	ldr	r3, [pc, #272]	@ (8000984 <HAL_ADC_MspInit+0x198>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CAPTEUR_DIST_N_Pin|CAPTEUR_DIST_W_Pin;
 800087e:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000882:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000884:	2303      	movs	r3, #3
 8000886:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000890:	4619      	mov	r1, r3
 8000892:	483d      	ldr	r0, [pc, #244]	@ (8000988 <HAL_ADC_MspInit+0x19c>)
 8000894:	f003 f818 	bl	80038c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000898:	e06e      	b.n	8000978 <HAL_ADC_MspInit+0x18c>
  else if(adcHandle->Instance==ADC2)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a3b      	ldr	r2, [pc, #236]	@ (800098c <HAL_ADC_MspInit+0x1a0>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d169      	bne.n	8000978 <HAL_ADC_MspInit+0x18c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008ae:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b0:	f107 0318 	add.w	r3, r7, #24
 80008b4:	4618      	mov	r0, r3
 80008b6:	f004 f8e3 	bl	8004a80 <HAL_RCCEx_PeriphCLKConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 80008c0:	f000 fb44 	bl	8000f4c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000980 <HAL_ADC_MspInit+0x194>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	3301      	adds	r3, #1
 80008ca:	4a2d      	ldr	r2, [pc, #180]	@ (8000980 <HAL_ADC_MspInit+0x194>)
 80008cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000980 <HAL_ADC_MspInit+0x194>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d10b      	bne.n	80008ee <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000984 <HAL_ADC_MspInit+0x198>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	4a2a      	ldr	r2, [pc, #168]	@ (8000984 <HAL_ADC_MspInit+0x198>)
 80008dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e2:	4b28      	ldr	r3, [pc, #160]	@ (8000984 <HAL_ADC_MspInit+0x198>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b25      	ldr	r3, [pc, #148]	@ (8000984 <HAL_ADC_MspInit+0x198>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	4a24      	ldr	r2, [pc, #144]	@ (8000984 <HAL_ADC_MspInit+0x198>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fa:	4b22      	ldr	r3, [pc, #136]	@ (8000984 <HAL_ADC_MspInit+0x198>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CAPTEUR_DIST_S_Pin|CAPTEUR_DIST_E_Pin;
 8000906:	f248 0304 	movw	r3, #32772	@ 0x8004
 800090a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090c:	2303      	movs	r3, #3
 800090e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000914:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000918:	4619      	mov	r1, r3
 800091a:	481b      	ldr	r0, [pc, #108]	@ (8000988 <HAL_ADC_MspInit+0x19c>)
 800091c:	f002 ffd4 	bl	80038c8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel1;
 8000920:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <HAL_ADC_MspInit+0x1a4>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	@ (8000994 <HAL_ADC_MspInit+0x1a8>)
 8000924:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000926:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <HAL_ADC_MspInit+0x1a4>)
 8000928:	2224      	movs	r2, #36	@ 0x24
 800092a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800092c:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <HAL_ADC_MspInit+0x1a4>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000932:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <HAL_ADC_MspInit+0x1a4>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <HAL_ADC_MspInit+0x1a4>)
 800093a:	2280      	movs	r2, #128	@ 0x80
 800093c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800093e:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <HAL_ADC_MspInit+0x1a4>)
 8000940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000944:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000946:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <HAL_ADC_MspInit+0x1a4>)
 8000948:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800094c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <HAL_ADC_MspInit+0x1a4>)
 8000950:	2220      	movs	r2, #32
 8000952:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8000954:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <HAL_ADC_MspInit+0x1a4>)
 8000956:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800095a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800095c:	480c      	ldr	r0, [pc, #48]	@ (8000990 <HAL_ADC_MspInit+0x1a4>)
 800095e:	f002 fd41 	bl	80033e4 <HAL_DMA_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <HAL_ADC_MspInit+0x180>
      Error_Handler();
 8000968:	f000 faf0 	bl	8000f4c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <HAL_ADC_MspInit+0x1a4>)
 8000970:	655a      	str	r2, [r3, #84]	@ 0x54
 8000972:	4a07      	ldr	r2, [pc, #28]	@ (8000990 <HAL_ADC_MspInit+0x1a4>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000978:	bf00      	nop
 800097a:	3770      	adds	r7, #112	@ 0x70
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200001bc 	.word	0x200001bc
 8000984:	40021000 	.word	0x40021000
 8000988:	48000400 	.word	0x48000400
 800098c:	50000100 	.word	0x50000100
 8000990:	2000015c 	.word	0x2000015c
 8000994:	40020008 	.word	0x40020008

08000998 <distSensor_initADC_DMA>:
uint32_t value_pb12; 				// Valeur de PB12 (ADC2 Channel 12)



void distSensor_initADC_DMA(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0


	//HAL_ADC_Start_DMA(&hadc2, &adc_value, 1);
    //HAL_ADC_Start_DMA(&hadc1, adc1_dma_buffer, ADC1_CHANNEL_COUNT);
    HAL_ADC_Start_DMA(&hadc2, adc2_dma_buffer, ADC2_CHANNEL_COUNT);
 800099c:	2202      	movs	r2, #2
 800099e:	4904      	ldr	r1, [pc, #16]	@ (80009b0 <distSensor_initADC_DMA+0x18>)
 80009a0:	4804      	ldr	r0, [pc, #16]	@ (80009b4 <distSensor_initADC_DMA+0x1c>)
 80009a2:	f001 fd73 	bl	800248c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim6);
 80009a6:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <distSensor_initADC_DMA+0x20>)
 80009a8:	f005 f9e6 	bl	8005d78 <HAL_TIM_Base_Start>



}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200001c4 	.word	0x200001c4
 80009b4:	200000f0 	.word	0x200000f0
 80009b8:	20000374 	.word	0x20000374

080009bc <distSensor_ReadADC_DMA>:

	return adc_value;   // Return the ADC value
}

uint32_t distSensor_ReadADC_DMA(uint32_t* buffer)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	//value_pb5 = adc1_dma_buffer[0];    // Valeur de PB5 (ADC1 Channel 5)
	//value_pb11 = adc1_dma_buffer[1];   // Valeur de PB11 (ADC1 Channel 11)
	value_pb15 = adc2_dma_buffer[0];   // Valeur de PB15 (ADC2 Channel 15)
 80009c4:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <distSensor_ReadADC_DMA+0x5c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a14      	ldr	r2, [pc, #80]	@ (8000a1c <distSensor_ReadADC_DMA+0x60>)
 80009ca:	6013      	str	r3, [r2, #0]
	value_pb12 = adc2_dma_buffer[1];   // Valeur de PB12 (ADC2 Channel 12)
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <distSensor_ReadADC_DMA+0x5c>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	4a13      	ldr	r2, [pc, #76]	@ (8000a20 <distSensor_ReadADC_DMA+0x64>)
 80009d2:	6013      	str	r3, [r2, #0]
//        adc_ready_adc1 = 0;            // Réinitialise le flag
//
//        return value_pb5, value_pb11;
//    }

    if (adc_ready_adc2 == 1) // Vérifie si une nouvelle valeur est prête
 80009d4:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <distSensor_ReadADC_DMA+0x68>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d10c      	bne.n	80009f8 <distSensor_ReadADC_DMA+0x3c>
    {
        //distance = falling_dist; // Donne la dernière valeur valide

        adc_ready_adc2 = 0;            // Réinitialise le flag
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <distSensor_ReadADC_DMA+0x68>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]

        buffer[0] = adc2_dma_buffer[0];
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <distSensor_ReadADC_DMA+0x5c>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	601a      	str	r2, [r3, #0]
        buffer[1] = adc2_dma_buffer[1];
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3304      	adds	r3, #4
 80009f0:	4a09      	ldr	r2, [pc, #36]	@ (8000a18 <distSensor_ReadADC_DMA+0x5c>)
 80009f2:	6852      	ldr	r2, [r2, #4]
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	e008      	b.n	8000a0a <distSensor_ReadADC_DMA+0x4e>
    }

    else {
        buffer[0] = 777; // Valeur par défaut si les données ne sont pas prêtes
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f240 3209 	movw	r2, #777	@ 0x309
 80009fe:	601a      	str	r2, [r3, #0]
        buffer[1] = 777;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3304      	adds	r3, #4
 8000a04:	f240 3209 	movw	r2, #777	@ 0x309
 8000a08:	601a      	str	r2, [r3, #0]
    }




}
 8000a0a:	bf00      	nop
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	200001c4 	.word	0x200001c4
 8000a1c:	200001cc 	.word	0x200001cc
 8000a20:	200001d0 	.word	0x200001d0
 8000a24:	200001c0 	.word	0x200001c0

08000a28 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
//
//		adc_ready_adc1 =1;
//
//    }

	if (hadc->Instance == ADC2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <HAL_ADC_ConvCpltCallback+0x24>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d102      	bne.n	8000a40 <HAL_ADC_ConvCpltCallback+0x18>
//		if ((value_pb15 < 1000)&& (value_pb12<1000))    // ne garde que les valeurs < 1000
//		{
//			adc_ready_adc2 = 1;        // Active le flag pour indiquer que la valeur est prête
//		}

		adc_ready_adc2 =1;
 8000a3a:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <HAL_ADC_ConvCpltCallback+0x28>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]

	}
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	50000100 	.word	0x50000100
 8000a50:	200001c0 	.word	0x200001c0

08000a54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a5a:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <MX_DMA_Init+0x50>)
 8000a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a5e:	4a11      	ldr	r2, [pc, #68]	@ (8000aa4 <MX_DMA_Init+0x50>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a66:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <MX_DMA_Init+0x50>)
 8000a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a72:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <MX_DMA_Init+0x50>)
 8000a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a76:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa4 <MX_DMA_Init+0x50>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_DMA_Init+0x50>)
 8000a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	200b      	movs	r0, #11
 8000a90:	f002 fc73 	bl	800337a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a94:	200b      	movs	r0, #11
 8000a96:	f002 fc8a 	bl	80033ae <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	4b52      	ldr	r3, [pc, #328]	@ (8000c08 <MX_GPIO_Init+0x160>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac2:	4a51      	ldr	r2, [pc, #324]	@ (8000c08 <MX_GPIO_Init+0x160>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aca:	4b4f      	ldr	r3, [pc, #316]	@ (8000c08 <MX_GPIO_Init+0x160>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad6:	4b4c      	ldr	r3, [pc, #304]	@ (8000c08 <MX_GPIO_Init+0x160>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ada:	4a4b      	ldr	r2, [pc, #300]	@ (8000c08 <MX_GPIO_Init+0x160>)
 8000adc:	f043 0320 	orr.w	r3, r3, #32
 8000ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae2:	4b49      	ldr	r3, [pc, #292]	@ (8000c08 <MX_GPIO_Init+0x160>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b46      	ldr	r3, [pc, #280]	@ (8000c08 <MX_GPIO_Init+0x160>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	4a45      	ldr	r2, [pc, #276]	@ (8000c08 <MX_GPIO_Init+0x160>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afa:	4b43      	ldr	r3, [pc, #268]	@ (8000c08 <MX_GPIO_Init+0x160>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b40      	ldr	r3, [pc, #256]	@ (8000c08 <MX_GPIO_Init+0x160>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	4a3f      	ldr	r2, [pc, #252]	@ (8000c08 <MX_GPIO_Init+0x160>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b12:	4b3d      	ldr	r3, [pc, #244]	@ (8000c08 <MX_GPIO_Init+0x160>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CHAT_Pin|LED_SOURIS_Pin|LIDAR_M_EN_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f246 0110 	movw	r1, #24592	@ 0x6010
 8000b24:	4839      	ldr	r0, [pc, #228]	@ (8000c0c <MX_GPIO_Init+0x164>)
 8000b26:	f003 f851 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_1_Pin|USER_LED_2_Pin|Accelerometer_NSS_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2113      	movs	r1, #19
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b32:	f003 f84b 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIDAR_DEV_EN_GPIO_Port, LIDAR_DEV_EN_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4835      	ldr	r0, [pc, #212]	@ (8000c10 <MX_GPIO_Init+0x168>)
 8000b3c:	f003 f846 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_CHAT_Pin LED_SOURIS_Pin LIDAR_M_EN_Pin */
  GPIO_InitStruct.Pin = LED_CHAT_Pin|LED_SOURIS_Pin|LIDAR_M_EN_Pin;
 8000b40:	f246 0310 	movw	r3, #24592	@ 0x6010
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	482c      	ldr	r0, [pc, #176]	@ (8000c0c <MX_GPIO_Init+0x164>)
 8000b5a:	f002 feb5 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BNT_CAT_MOUSE_Pin */
  GPIO_InitStruct.Pin = BNT_CAT_MOUSE_Pin;
 8000b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b64:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BNT_CAT_MOUSE_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4825      	ldr	r0, [pc, #148]	@ (8000c0c <MX_GPIO_Init+0x164>)
 8000b76:	f002 fea7 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_1_Pin USER_LED_2_Pin Accelerometer_NSS_Pin */
  GPIO_InitStruct.Pin = USER_LED_1_Pin|USER_LED_2_Pin|Accelerometer_NSS_Pin;
 8000b7a:	2313      	movs	r3, #19
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b94:	f002 fe98 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Accelerometer_INT1_Pin Accelerometer_INT2_Pin */
  GPIO_InitStruct.Pin = Accelerometer_INT1_Pin|Accelerometer_INT2_Pin;
 8000b98:	230c      	movs	r3, #12
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b9c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb0:	f002 fe8a 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIDAR_DEV_EN_Pin */
  GPIO_InitStruct.Pin = LIDAR_DEV_EN_Pin;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LIDAR_DEV_EN_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4811      	ldr	r0, [pc, #68]	@ (8000c10 <MX_GPIO_Init+0x168>)
 8000bcc:	f002 fe7c 	bl	80038c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2008      	movs	r0, #8
 8000bd6:	f002 fbd0 	bl	800337a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000bda:	2008      	movs	r0, #8
 8000bdc:	f002 fbe7 	bl	80033ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2009      	movs	r0, #9
 8000be6:	f002 fbc8 	bl	800337a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000bea:	2009      	movs	r0, #9
 8000bec:	f002 fbdf 	bl	80033ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2028      	movs	r0, #40	@ 0x28
 8000bf6:	f002 fbc0 	bl	800337a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bfa:	2028      	movs	r0, #40	@ 0x28
 8000bfc:	f002 fbd7 	bl	80033ae <HAL_NVIC_EnableIRQ>

}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	@ 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	48000800 	.word	0x48000800
 8000c10:	48000400 	.word	0x48000400

08000c14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c8c <MX_I2C1_Init+0x78>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c20:	4a1b      	ldr	r2, [pc, #108]	@ (8000c90 <MX_I2C1_Init+0x7c>)
 8000c22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c24:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c30:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c4e:	480e      	ldr	r0, [pc, #56]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c50:	f003 f806 	bl	8003c60 <HAL_I2C_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c5a:	f000 f977 	bl	8000f4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4809      	ldr	r0, [pc, #36]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c62:	f003 f898 	bl	8003d96 <HAL_I2CEx_ConfigAnalogFilter>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c6c:	f000 f96e 	bl	8000f4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c70:	2100      	movs	r1, #0
 8000c72:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c74:	f003 f8da 	bl	8003e2c <HAL_I2CEx_ConfigDigitalFilter>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c7e:	f000 f965 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200001d4 	.word	0x200001d4
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	40621236 	.word	0x40621236

08000c94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b09c      	sub	sp, #112	@ 0x70
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cac:	f107 0318 	add.w	r3, r7, #24
 8000cb0:	2244      	movs	r2, #68	@ 0x44
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f007 fb85 	bl	80083c4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a2e      	ldr	r2, [pc, #184]	@ (8000d78 <HAL_I2C_MspInit+0xe4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d154      	bne.n	8000d6e <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cc4:	2340      	movs	r3, #64	@ 0x40
 8000cc6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ccc:	f107 0318 	add.w	r3, r7, #24
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f003 fed5 	bl	8004a80 <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000cdc:	f000 f936 	bl	8000f4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	4b26      	ldr	r3, [pc, #152]	@ (8000d7c <HAL_I2C_MspInit+0xe8>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce4:	4a25      	ldr	r2, [pc, #148]	@ (8000d7c <HAL_I2C_MspInit+0xe8>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cec:	4b23      	ldr	r3, [pc, #140]	@ (8000d7c <HAL_I2C_MspInit+0xe8>)
 8000cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	4b20      	ldr	r3, [pc, #128]	@ (8000d7c <HAL_I2C_MspInit+0xe8>)
 8000cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8000d7c <HAL_I2C_MspInit+0xe8>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d04:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <HAL_I2C_MspInit+0xe8>)
 8000d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d14:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d16:	2312      	movs	r3, #18
 8000d18:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d22:	2304      	movs	r3, #4
 8000d24:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d30:	f002 fdca 	bl	80038c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d38:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3a:	2312      	movs	r3, #18
 8000d3c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d46:	2304      	movs	r3, #4
 8000d48:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480b      	ldr	r0, [pc, #44]	@ (8000d80 <HAL_I2C_MspInit+0xec>)
 8000d52:	f002 fdb9 	bl	80038c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <HAL_I2C_MspInit+0xe8>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5a:	4a08      	ldr	r2, [pc, #32]	@ (8000d7c <HAL_I2C_MspInit+0xe8>)
 8000d5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_I2C_MspInit+0xe8>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3770      	adds	r7, #112	@ 0x70
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	48000400 	.word	0x48000400

08000d84 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000d8c:	1d39      	adds	r1, r7, #4
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d92:	2201      	movs	r2, #1
 8000d94:	4803      	ldr	r0, [pc, #12]	@ (8000da4 <__io_putchar+0x20>)
 8000d96:	f006 fab9 	bl	800730c <HAL_UART_Transmit>
	return chr;
 8000d9a:	687b      	ldr	r3, [r7, #4]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000458 	.word	0x20000458

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dae:	f000 ff38 	bl	8001c22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db2:	f000 f84f 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db6:	f7ff fe77 	bl	8000aa8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dba:	f7ff fe4b 	bl	8000a54 <MX_DMA_Init>
  MX_UART4_Init();
 8000dbe:	f000 fdd1 	bl	8001964 <MX_UART4_Init>
  MX_SPI1_Init();
 8000dc2:	f000 f8c9 	bl	8000f58 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000dc6:	f000 fbc3 	bl	8001550 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000dca:	f7ff fc1f 	bl	800060c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000dce:	f7ff fc95 	bl	80006fc <MX_ADC2_Init>
  MX_TIM1_Init();
 8000dd2:	f000 fa93 	bl	80012fc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000dd6:	f000 fb65 	bl	80014a4 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000dda:	f000 fe13 	bl	8001a04 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000dde:	f7ff ff19 	bl	8000c14 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000de2:	f000 fc0b 	bl	80015fc <MX_TIM6_Init>
  MX_TIM7_Init();
 8000de6:	f000 fc3f 	bl	8001668 <MX_TIM7_Init>
  MX_TIM16_Init();
 8000dea:	f000 fc73 	bl	80016d4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	printf(" _____________________________\r\n");
 8000dee:	4813      	ldr	r0, [pc, #76]	@ (8000e3c <main+0x94>)
 8000df0:	f007 fae0 	bl	80083b4 <puts>
	printf("|                             |\r\n");
 8000df4:	4812      	ldr	r0, [pc, #72]	@ (8000e40 <main+0x98>)
 8000df6:	f007 fadd 	bl	80083b4 <puts>
	printf("|                             |\r\n");
 8000dfa:	4811      	ldr	r0, [pc, #68]	@ (8000e40 <main+0x98>)
 8000dfc:	f007 fada 	bl	80083b4 <puts>
	printf("|  WELCOME ON TAGBOT PROJECT  |\r\n");
 8000e00:	4810      	ldr	r0, [pc, #64]	@ (8000e44 <main+0x9c>)
 8000e02:	f007 fad7 	bl	80083b4 <puts>
	printf("|                             |\r\n");
 8000e06:	480e      	ldr	r0, [pc, #56]	@ (8000e40 <main+0x98>)
 8000e08:	f007 fad4 	bl	80083b4 <puts>
	printf("|_____________________________|\r\n");
 8000e0c:	480e      	ldr	r0, [pc, #56]	@ (8000e48 <main+0xa0>)
 8000e0e:	f007 fad1 	bl	80083b4 <puts>

	/* Ce code initialise l'adc en dma*/
	distSensor_initADC_DMA();
 8000e12:	f7ff fdc1 	bl	8000998 <distSensor_initADC_DMA>
	printf("Démarrage du test des capteurs de distance...\r\n");
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <main+0xa4>)
 8000e18:	f007 facc 	bl	80083b4 <puts>
		/* Ce code n'affiche que les valeurs inférieures à 1000 (la distance est trop élevée) */



	    // Lecture des valeurs des capteurs
	    distSensor_ReadADC_DMA(buffer);
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fdcc 	bl	80009bc <distSensor_ReadADC_DMA>

	    printf("Capteur 1: %lu, Capteur 2: %lu\r\n", buffer[0], buffer[1]);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4809      	ldr	r0, [pc, #36]	@ (8000e50 <main+0xa8>)
 8000e2c:	f007 fa5a 	bl	80082e4 <iprintf>

	    HAL_Delay(100);
 8000e30:	2064      	movs	r0, #100	@ 0x64
 8000e32:	f000 ff67 	bl	8001d04 <HAL_Delay>
	    distSensor_ReadADC_DMA(buffer);
 8000e36:	bf00      	nop
 8000e38:	e7f0      	b.n	8000e1c <main+0x74>
 8000e3a:	bf00      	nop
 8000e3c:	08008f38 	.word	0x08008f38
 8000e40:	08008f58 	.word	0x08008f58
 8000e44:	08008f7c 	.word	0x08008f7c
 8000e48:	08008fa0 	.word	0x08008fa0
 8000e4c:	08008fc4 	.word	0x08008fc4
 8000e50:	08008ff4 	.word	0x08008ff4

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b094      	sub	sp, #80	@ 0x50
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 0318 	add.w	r3, r7, #24
 8000e5e:	2238      	movs	r2, #56	@ 0x38
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f007 faae 	bl	80083c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f003 f824 	bl	8003ec4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e84:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e86:	2302      	movs	r3, #2
 8000e88:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e92:	2355      	movs	r3, #85	@ 0x55
 8000e94:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e96:	2302      	movs	r3, #2
 8000e98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea2:	f107 0318 	add.w	r3, r7, #24
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f003 f8c0 	bl	800402c <HAL_RCC_OscConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000eb2:	f000 f84b 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb6:	230f      	movs	r3, #15
 8000eb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2104      	movs	r1, #4
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 fbbe 	bl	8004650 <HAL_RCC_ClockConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000eda:	f000 f837 	bl	8000f4c <Error_Handler>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3750      	adds	r7, #80	@ 0x50
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]
//	ADXL343_DetectTap();
	if(GPIO_Pin == BNT_CAT_MOUSE_Pin){
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000ef8:	d103      	bne.n	8000f02 <HAL_GPIO_EXTI_Callback+0x1a>
		printf("Button pushed\r\n");
 8000efa:	4811      	ldr	r0, [pc, #68]	@ (8000f40 <HAL_GPIO_EXTI_Callback+0x58>)
 8000efc:	f007 fa5a 	bl	80083b4 <puts>
	} else if(GPIO_Pin == Accelerometer_INT2_Pin){
		printf("Acc Int2\r\n");
		uint8_t tap_status;
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); //Renvoie la valeur du registre int_source
	}
}
 8000f00:	e01a      	b.n	8000f38 <HAL_GPIO_EXTI_Callback+0x50>
	} else if(GPIO_Pin == Accelerometer_INT1_Pin){
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d10a      	bne.n	8000f1e <HAL_GPIO_EXTI_Callback+0x36>
		printf("Acc Int1\r\n");
 8000f08:	480e      	ldr	r0, [pc, #56]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000f0a:	f007 fa53 	bl	80083b4 <puts>
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); //Renvoie la valeur du registre int_source
 8000f0e:	f107 030f 	add.w	r3, r7, #15
 8000f12:	2201      	movs	r2, #1
 8000f14:	4619      	mov	r1, r3
 8000f16:	2030      	movs	r0, #48	@ 0x30
 8000f18:	f7ff fb4a 	bl	80005b0 <ADXL343_ReadRegister>
}
 8000f1c:	e00c      	b.n	8000f38 <HAL_GPIO_EXTI_Callback+0x50>
	} else if(GPIO_Pin == Accelerometer_INT2_Pin){
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d109      	bne.n	8000f38 <HAL_GPIO_EXTI_Callback+0x50>
		printf("Acc Int2\r\n");
 8000f24:	4808      	ldr	r0, [pc, #32]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x60>)
 8000f26:	f007 fa45 	bl	80083b4 <puts>
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); //Renvoie la valeur du registre int_source
 8000f2a:	f107 030e 	add.w	r3, r7, #14
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4619      	mov	r1, r3
 8000f32:	2030      	movs	r0, #48	@ 0x30
 8000f34:	f7ff fb3c 	bl	80005b0 <ADXL343_ReadRegister>
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	08009018 	.word	0x08009018
 8000f44:	08009028 	.word	0x08009028
 8000f48:	08009034 	.word	0x08009034

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <Error_Handler+0x8>

08000f58 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd0 <MX_SPI1_Init+0x78>)
 8000f60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f70:	4b16      	ldr	r3, [pc, #88]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f72:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f76:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f78:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f84:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f8a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f8e:	2230      	movs	r2, #48	@ 0x30
 8000f90:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000fa6:	2207      	movs	r2, #7
 8000fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_SPI1_Init+0x74>)
 8000fb8:	f003 ff52 	bl	8004e60 <HAL_SPI_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fc2:	f7ff ffc3 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000228 	.word	0x20000228
 8000fd0:	40013000 	.word	0x40013000

08000fd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	@ 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a17      	ldr	r2, [pc, #92]	@ (8001050 <HAL_SPI_MspInit+0x7c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d128      	bne.n	8001048 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ff6:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <HAL_SPI_MspInit+0x80>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ffa:	4a16      	ldr	r2, [pc, #88]	@ (8001054 <HAL_SPI_MspInit+0x80>)
 8000ffc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001000:	6613      	str	r3, [r2, #96]	@ 0x60
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <HAL_SPI_MspInit+0x80>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001006:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <HAL_SPI_MspInit+0x80>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001012:	4a10      	ldr	r2, [pc, #64]	@ (8001054 <HAL_SPI_MspInit+0x80>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <HAL_SPI_MspInit+0x80>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Accelerometer_SCK_Pin|Accelerometer_MISO_Pin|Accelerometer_MOSI_Pin;
 8001026:	23e0      	movs	r3, #224	@ 0xe0
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001036:	2305      	movs	r3, #5
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001044:	f002 fc40 	bl	80038c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001048:	bf00      	nop
 800104a:	3728      	adds	r7, #40	@ 0x28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40013000 	.word	0x40013000
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <HAL_MspInit+0x44>)
 8001060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001062:	4a0e      	ldr	r2, [pc, #56]	@ (800109c <HAL_MspInit+0x44>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6613      	str	r3, [r2, #96]	@ 0x60
 800106a:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <HAL_MspInit+0x44>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <HAL_MspInit+0x44>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107a:	4a08      	ldr	r2, [pc, #32]	@ (800109c <HAL_MspInit+0x44>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001080:	6593      	str	r3, [r2, #88]	@ 0x58
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_MspInit+0x44>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800108e:	f002 ffbd 	bl	800400c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <NMI_Handler+0x4>

080010a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <HardFault_Handler+0x4>

080010b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <MemManage_Handler+0x4>

080010b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <BusFault_Handler+0x4>

080010c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <UsageFault_Handler+0x4>

080010c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f6:	f000 fde7 	bl	8001cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
    // Read the INT_SOURCE register to clear the interrupt
    int8_t tap_status;
    ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1);
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	2201      	movs	r2, #1
 800110a:	4619      	mov	r1, r3
 800110c:	2030      	movs	r0, #48	@ 0x30
 800110e:	f7ff fa4f 	bl	80005b0 <ADXL343_ReadRegister>

	if (tap_status & (1<<6)) {  // Tap for single tap
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00a      	beq.n	8001136 <EXTI2_IRQHandler+0x36>
		printf("Tap detected!\r\n");
 8001120:	4808      	ldr	r0, [pc, #32]	@ (8001144 <EXTI2_IRQHandler+0x44>)
 8001122:	f007 f947 	bl	80083b4 <puts>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001126:	2101      	movs	r1, #1
 8001128:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112c:	f002 fd66 	bl	8003bfc <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001130:	2064      	movs	r0, #100	@ 0x64
 8001132:	f000 fde7 	bl	8001d04 <HAL_Delay>
	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Accelerometer_INT1_Pin);
 8001136:	2004      	movs	r0, #4
 8001138:	f002 fd7a 	bl	8003c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	08009040 	.word	0x08009040

08001148 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
//		printf("Tap detected!\r\n");
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
//		HAL_Delay(100);
//	}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Accelerometer_INT2_Pin);
 800114c:	2008      	movs	r0, #8
 800114e:	f002 fd6f 	bl	8003c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <DMA1_Channel1_IRQHandler+0x10>)
 800115e:	f002 fa64 	bl	800362a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000015c 	.word	0x2000015c

0800116c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BNT_CAT_MOUSE_Pin);
 8001170:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001174:	f002 fd5c 	bl	8003c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001180:	4802      	ldr	r0, [pc, #8]	@ (800118c <TIM6_DAC_IRQHandler+0x10>)
 8001182:	f004 ff62 	bl	800604a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000374 	.word	0x20000374

08001190 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	e00a      	b.n	80011b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011a2:	f3af 8000 	nop.w
 80011a6:	4601      	mov	r1, r0
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	60ba      	str	r2, [r7, #8]
 80011ae:	b2ca      	uxtb	r2, r1
 80011b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3301      	adds	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	429a      	cmp	r2, r3
 80011be:	dbf0      	blt.n	80011a2 <_read+0x12>
  }

  return len;
 80011c0:	687b      	ldr	r3, [r7, #4]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	e009      	b.n	80011f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	60ba      	str	r2, [r7, #8]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fdcd 	bl	8000d84 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3301      	adds	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	dbf1      	blt.n	80011dc <_write+0x12>
  }
  return len;
 80011f8:	687b      	ldr	r3, [r7, #4]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <_close>:

int _close(int file)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800122a:	605a      	str	r2, [r3, #4]
  return 0;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <_isatty>:

int _isatty(int file)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001274:	4a14      	ldr	r2, [pc, #80]	@ (80012c8 <_sbrk+0x5c>)
 8001276:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <_sbrk+0x60>)
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001280:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001288:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <_sbrk+0x64>)
 800128a:	4a12      	ldr	r2, [pc, #72]	@ (80012d4 <_sbrk+0x68>)
 800128c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	429a      	cmp	r2, r3
 800129a:	d207      	bcs.n	80012ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800129c:	f007 f8aa 	bl	80083f4 <__errno>
 80012a0:	4603      	mov	r3, r0
 80012a2:	220c      	movs	r2, #12
 80012a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012aa:	e009      	b.n	80012c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ac:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b2:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	4a05      	ldr	r2, [pc, #20]	@ (80012d0 <_sbrk+0x64>)
 80012bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20008000 	.word	0x20008000
 80012cc:	00000400 	.word	0x00000400
 80012d0:	2000028c 	.word	0x2000028c
 80012d4:	200006d0 	.word	0x200006d0

080012d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <SystemInit+0x20>)
 80012de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012e2:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <SystemInit+0x20>)
 80012e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b09c      	sub	sp, #112	@ 0x70
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001302:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001310:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	615a      	str	r2, [r3, #20]
 800132e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2234      	movs	r2, #52	@ 0x34
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f007 f844 	bl	80083c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800133c:	4b57      	ldr	r3, [pc, #348]	@ (800149c <MX_TIM1_Init+0x1a0>)
 800133e:	4a58      	ldr	r2, [pc, #352]	@ (80014a0 <MX_TIM1_Init+0x1a4>)
 8001340:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001342:	4b56      	ldr	r3, [pc, #344]	@ (800149c <MX_TIM1_Init+0x1a0>)
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b54      	ldr	r3, [pc, #336]	@ (800149c <MX_TIM1_Init+0x1a0>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6799;
 800134e:	4b53      	ldr	r3, [pc, #332]	@ (800149c <MX_TIM1_Init+0x1a0>)
 8001350:	f641 228f 	movw	r2, #6799	@ 0x1a8f
 8001354:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b51      	ldr	r3, [pc, #324]	@ (800149c <MX_TIM1_Init+0x1a0>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800135c:	4b4f      	ldr	r3, [pc, #316]	@ (800149c <MX_TIM1_Init+0x1a0>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001362:	4b4e      	ldr	r3, [pc, #312]	@ (800149c <MX_TIM1_Init+0x1a0>)
 8001364:	2280      	movs	r2, #128	@ 0x80
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001368:	484c      	ldr	r0, [pc, #304]	@ (800149c <MX_TIM1_Init+0x1a0>)
 800136a:	f004 fcad 	bl	8005cc8 <HAL_TIM_Base_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001374:	f7ff fdea 	bl	8000f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001378:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800137e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001382:	4619      	mov	r1, r3
 8001384:	4845      	ldr	r0, [pc, #276]	@ (800149c <MX_TIM1_Init+0x1a0>)
 8001386:	f005 f8c3 	bl	8006510 <HAL_TIM_ConfigClockSource>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001390:	f7ff fddc 	bl	8000f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001394:	4841      	ldr	r0, [pc, #260]	@ (800149c <MX_TIM1_Init+0x1a0>)
 8001396:	f004 fd51 	bl	8005e3c <HAL_TIM_PWM_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013a0:	f7ff fdd4 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013b4:	4619      	mov	r1, r3
 80013b6:	4839      	ldr	r0, [pc, #228]	@ (800149c <MX_TIM1_Init+0x1a0>)
 80013b8:	f005 fe04 	bl	8006fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80013c2:	f7ff fdc3 	bl	8000f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c6:	2360      	movs	r3, #96	@ 0x60
 80013c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ce:	2300      	movs	r3, #0
 80013d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013d2:	2300      	movs	r3, #0
 80013d4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013e6:	2200      	movs	r2, #0
 80013e8:	4619      	mov	r1, r3
 80013ea:	482c      	ldr	r0, [pc, #176]	@ (800149c <MX_TIM1_Init+0x1a0>)
 80013ec:	f004 ff7c 	bl	80062e8 <HAL_TIM_PWM_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80013f6:	f7ff fda9 	bl	8000f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013fe:	2204      	movs	r2, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4826      	ldr	r0, [pc, #152]	@ (800149c <MX_TIM1_Init+0x1a0>)
 8001404:	f004 ff70 	bl	80062e8 <HAL_TIM_PWM_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800140e:	f7ff fd9d 	bl	8000f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001412:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001416:	2208      	movs	r2, #8
 8001418:	4619      	mov	r1, r3
 800141a:	4820      	ldr	r0, [pc, #128]	@ (800149c <MX_TIM1_Init+0x1a0>)
 800141c:	f004 ff64 	bl	80062e8 <HAL_TIM_PWM_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001426:	f7ff fd91 	bl	8000f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800142a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800142e:	220c      	movs	r2, #12
 8001430:	4619      	mov	r1, r3
 8001432:	481a      	ldr	r0, [pc, #104]	@ (800149c <MX_TIM1_Init+0x1a0>)
 8001434:	f004 ff58 	bl	80062e8 <HAL_TIM_PWM_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800143e:	f7ff fd85 	bl	8000f4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001456:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800145a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001468:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800146c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001472:	2300      	movs	r3, #0
 8001474:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4619      	mov	r1, r3
 800147e:	4807      	ldr	r0, [pc, #28]	@ (800149c <MX_TIM1_Init+0x1a0>)
 8001480:	f005 fe22 	bl	80070c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 800148a:	f7ff fd5f 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800148e:	4803      	ldr	r0, [pc, #12]	@ (800149c <MX_TIM1_Init+0x1a0>)
 8001490:	f000 fa1e 	bl	80018d0 <HAL_TIM_MspPostInit>

}
 8001494:	bf00      	nop
 8001496:	3770      	adds	r7, #112	@ 0x70
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000290 	.word	0x20000290
 80014a0:	40012c00 	.word	0x40012c00

080014a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	@ 0x30
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	2224      	movs	r2, #36	@ 0x24
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f006 ff86 	bl	80083c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b8:	463b      	mov	r3, r7
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014c2:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <MX_TIM3_Init+0xa4>)
 80014c4:	4a21      	ldr	r2, [pc, #132]	@ (800154c <MX_TIM3_Init+0xa8>)
 80014c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001548 <MX_TIM3_Init+0xa4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <MX_TIM3_Init+0xa4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <MX_TIM3_Init+0xa4>)
 80014d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <MX_TIM3_Init+0xa4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014e2:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <MX_TIM3_Init+0xa4>)
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014e8:	2301      	movs	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014ec:	2300      	movs	r3, #0
 80014ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014f0:	2301      	movs	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001500:	2301      	movs	r3, #1
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	4619      	mov	r1, r3
 8001512:	480d      	ldr	r0, [pc, #52]	@ (8001548 <MX_TIM3_Init+0xa4>)
 8001514:	f004 fcf3 	bl	8005efe <HAL_TIM_Encoder_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800151e:	f7ff fd15 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800152a:	463b      	mov	r3, r7
 800152c:	4619      	mov	r1, r3
 800152e:	4806      	ldr	r0, [pc, #24]	@ (8001548 <MX_TIM3_Init+0xa4>)
 8001530:	f005 fd48 	bl	8006fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800153a:	f7ff fd07 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	3730      	adds	r7, #48	@ 0x30
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200002dc 	.word	0x200002dc
 800154c:	40000400 	.word	0x40000400

08001550 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08c      	sub	sp, #48	@ 0x30
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	2224      	movs	r2, #36	@ 0x24
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f006 ff30 	bl	80083c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800156e:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <MX_TIM4_Init+0xa4>)
 8001570:	4a21      	ldr	r2, [pc, #132]	@ (80015f8 <MX_TIM4_Init+0xa8>)
 8001572:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001574:	4b1f      	ldr	r3, [pc, #124]	@ (80015f4 <MX_TIM4_Init+0xa4>)
 8001576:	2200      	movs	r2, #0
 8001578:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157a:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <MX_TIM4_Init+0xa4>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001580:	4b1c      	ldr	r3, [pc, #112]	@ (80015f4 <MX_TIM4_Init+0xa4>)
 8001582:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001586:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001588:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <MX_TIM4_Init+0xa4>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800158e:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <MX_TIM4_Init+0xa4>)
 8001590:	2280      	movs	r2, #128	@ 0x80
 8001592:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001594:	2301      	movs	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800159c:	2301      	movs	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015ac:	2301      	movs	r3, #1
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4619      	mov	r1, r3
 80015be:	480d      	ldr	r0, [pc, #52]	@ (80015f4 <MX_TIM4_Init+0xa4>)
 80015c0:	f004 fc9d 	bl	8005efe <HAL_TIM_Encoder_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80015ca:	f7ff fcbf 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015d6:	463b      	mov	r3, r7
 80015d8:	4619      	mov	r1, r3
 80015da:	4806      	ldr	r0, [pc, #24]	@ (80015f4 <MX_TIM4_Init+0xa4>)
 80015dc:	f005 fcf2 	bl	8006fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80015e6:	f7ff fcb1 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3730      	adds	r7, #48	@ 0x30
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000328 	.word	0x20000328
 80015f8:	40000800 	.word	0x40000800

080015fc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800160c:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <MX_TIM6_Init+0x64>)
 800160e:	4a15      	ldr	r2, [pc, #84]	@ (8001664 <MX_TIM6_Init+0x68>)
 8001610:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 8001612:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <MX_TIM6_Init+0x64>)
 8001614:	22a9      	movs	r2, #169	@ 0xa9
 8001616:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001618:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <MX_TIM6_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <MX_TIM6_Init+0x64>)
 8001620:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001624:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <MX_TIM6_Init+0x64>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800162c:	480c      	ldr	r0, [pc, #48]	@ (8001660 <MX_TIM6_Init+0x64>)
 800162e:	f004 fb4b 	bl	8005cc8 <HAL_TIM_Base_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001638:	f7ff fc88 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800163c:	2320      	movs	r3, #32
 800163e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	@ (8001660 <MX_TIM6_Init+0x64>)
 800164a:	f005 fcbb 	bl	8006fc4 <HAL_TIMEx_MasterConfigSynchronization>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001654:	f7ff fc7a 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000374 	.word	0x20000374
 8001664:	40001000 	.word	0x40001000

08001668 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001678:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <MX_TIM7_Init+0x64>)
 800167a:	4a15      	ldr	r2, [pc, #84]	@ (80016d0 <MX_TIM7_Init+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 800167e:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <MX_TIM7_Init+0x64>)
 8001680:	22a9      	movs	r2, #169	@ 0xa9
 8001682:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <MX_TIM7_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <MX_TIM7_Init+0x64>)
 800168c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001690:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <MX_TIM7_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001698:	480c      	ldr	r0, [pc, #48]	@ (80016cc <MX_TIM7_Init+0x64>)
 800169a:	f004 fb15 	bl	8005cc8 <HAL_TIM_Base_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80016a4:	f7ff fc52 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	@ (80016cc <MX_TIM7_Init+0x64>)
 80016b6:	f005 fc85 	bl	8006fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80016c0:	f7ff fc44 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200003c0 	.word	0x200003c0
 80016d0:	40001400 	.word	0x40001400

080016d4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80016d8:	4b10      	ldr	r3, [pc, #64]	@ (800171c <MX_TIM16_Init+0x48>)
 80016da:	4a11      	ldr	r2, [pc, #68]	@ (8001720 <MX_TIM16_Init+0x4c>)
 80016dc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1699;
 80016de:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <MX_TIM16_Init+0x48>)
 80016e0:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80016e4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e6:	4b0d      	ldr	r3, [pc, #52]	@ (800171c <MX_TIM16_Init+0x48>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 80016ec:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <MX_TIM16_Init+0x48>)
 80016ee:	f242 720f 	movw	r2, #9999	@ 0x270f
 80016f2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f4:	4b09      	ldr	r3, [pc, #36]	@ (800171c <MX_TIM16_Init+0x48>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80016fa:	4b08      	ldr	r3, [pc, #32]	@ (800171c <MX_TIM16_Init+0x48>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <MX_TIM16_Init+0x48>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	@ (800171c <MX_TIM16_Init+0x48>)
 8001708:	f004 fade 	bl	8005cc8 <HAL_TIM_Base_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001712:	f7ff fc1b 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000040c 	.word	0x2000040c
 8001720:	40014400 	.word	0x40014400

08001724 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a28      	ldr	r2, [pc, #160]	@ (80017d4 <HAL_TIM_Base_MspInit+0xb0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d10c      	bne.n	8001750 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001736:	4b28      	ldr	r3, [pc, #160]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb4>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173a:	4a27      	ldr	r2, [pc, #156]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb4>)
 800173c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001740:	6613      	str	r3, [r2, #96]	@ 0x60
 8001742:	4b25      	ldr	r3, [pc, #148]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb4>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001746:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800174e:	e03c      	b.n	80017ca <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM6)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a21      	ldr	r2, [pc, #132]	@ (80017dc <HAL_TIM_Base_MspInit+0xb8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d114      	bne.n	8001784 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800175a:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb4>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175e:	4a1e      	ldr	r2, [pc, #120]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb4>)
 8001760:	f043 0310 	orr.w	r3, r3, #16
 8001764:	6593      	str	r3, [r2, #88]	@ 0x58
 8001766:	4b1c      	ldr	r3, [pc, #112]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb4>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	f003 0310 	and.w	r3, r3, #16
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	2036      	movs	r0, #54	@ 0x36
 8001778:	f001 fdff 	bl	800337a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800177c:	2036      	movs	r0, #54	@ 0x36
 800177e:	f001 fe16 	bl	80033ae <HAL_NVIC_EnableIRQ>
}
 8001782:	e022      	b.n	80017ca <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM7)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a15      	ldr	r2, [pc, #84]	@ (80017e0 <HAL_TIM_Base_MspInit+0xbc>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10c      	bne.n	80017a8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800178e:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb4>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001792:	4a11      	ldr	r2, [pc, #68]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb4>)
 8001794:	f043 0320 	orr.w	r3, r3, #32
 8001798:	6593      	str	r3, [r2, #88]	@ 0x58
 800179a:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb4>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179e:	f003 0320 	and.w	r3, r3, #32
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
}
 80017a6:	e010      	b.n	80017ca <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM16)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0d      	ldr	r2, [pc, #52]	@ (80017e4 <HAL_TIM_Base_MspInit+0xc0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d10b      	bne.n	80017ca <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb4>)
 80017b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b6:	4a08      	ldr	r2, [pc, #32]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb4>)
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb4>)
 80017c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40012c00 	.word	0x40012c00
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40001000 	.word	0x40001000
 80017e0:	40001400 	.word	0x40001400
 80017e4:	40014400 	.word	0x40014400

080017e8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08c      	sub	sp, #48	@ 0x30
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a2e      	ldr	r2, [pc, #184]	@ (80018c0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d128      	bne.n	800185c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800180a:	4b2e      	ldr	r3, [pc, #184]	@ (80018c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180e:	4a2d      	ldr	r2, [pc, #180]	@ (80018c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6593      	str	r3, [r2, #88]	@ 0x58
 8001816:	4b2b      	ldr	r3, [pc, #172]	@ (80018c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	61bb      	str	r3, [r7, #24]
 8001820:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	4b28      	ldr	r3, [pc, #160]	@ (80018c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001826:	4a27      	ldr	r2, [pc, #156]	@ (80018c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182e:	4b25      	ldr	r3, [pc, #148]	@ (80018c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LIDAR_M_SCTR_Pin|ENCODER_RIGHT_A_Pin|ENCODER_RIGHT_B_Pin;
 800183a:	2332      	movs	r3, #50	@ 0x32
 800183c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800184a:	2302      	movs	r3, #2
 800184c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	4619      	mov	r1, r3
 8001854:	481c      	ldr	r0, [pc, #112]	@ (80018c8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001856:	f002 f837 	bl	80038c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800185a:	e02c      	b.n	80018b6 <HAL_TIM_Encoder_MspInit+0xce>
  else if(tim_encoderHandle->Instance==TIM4)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a1a      	ldr	r2, [pc, #104]	@ (80018cc <HAL_TIM_Encoder_MspInit+0xe4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d127      	bne.n	80018b6 <HAL_TIM_Encoder_MspInit+0xce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001866:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186a:	4a16      	ldr	r2, [pc, #88]	@ (80018c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6593      	str	r3, [r2, #88]	@ 0x58
 8001872:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001882:	4a10      	ldr	r2, [pc, #64]	@ (80018c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800188a:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <HAL_TIM_Encoder_MspInit+0xdc>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_LEFT_A_Pin|ENCODER_LEFT_B_Pin;
 8001896:	23c0      	movs	r3, #192	@ 0xc0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018a6:	2302      	movs	r3, #2
 80018a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	@ (80018c8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80018b2:	f002 f809 	bl	80038c8 <HAL_GPIO_Init>
}
 80018b6:	bf00      	nop
 80018b8:	3730      	adds	r7, #48	@ 0x30
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40000400 	.word	0x40000400
 80018c4:	40021000 	.word	0x40021000
 80018c8:	48000400 	.word	0x48000400
 80018cc:	40000800 	.word	0x40000800

080018d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1b      	ldr	r2, [pc, #108]	@ (800195c <HAL_TIM_MspPostInit+0x8c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d12f      	bne.n	8001952 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <HAL_TIM_MspPostInit+0x90>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001960 <HAL_TIM_MspPostInit+0x90>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018fe:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <HAL_TIM_MspPostInit+0x90>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = RIGHT_MOTOR_FWD_Pin|RIGHT_MOTOR_REV_Pin|LEFT_MOTOR_FWD_Pin;
 800190a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800190e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800191c:	2306      	movs	r3, #6
 800191e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4619      	mov	r1, r3
 8001926:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192a:	f001 ffcd 	bl	80038c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEFT_MOTOR_REV_Pin;
 800192e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001932:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8001940:	230b      	movs	r3, #11
 8001942:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LEFT_MOTOR_REV_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	4619      	mov	r1, r3
 800194a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800194e:	f001 ffbb 	bl	80038c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001952:	bf00      	nop
 8001954:	3720      	adds	r7, #32
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40012c00 	.word	0x40012c00
 8001960:	40021000 	.word	0x40021000

08001964 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001968:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <MX_UART4_Init+0x98>)
 800196a:	4a25      	ldr	r2, [pc, #148]	@ (8001a00 <MX_UART4_Init+0x9c>)
 800196c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800196e:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <MX_UART4_Init+0x98>)
 8001970:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001974:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <MX_UART4_Init+0x98>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b1f      	ldr	r3, [pc, #124]	@ (80019fc <MX_UART4_Init+0x98>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001982:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <MX_UART4_Init+0x98>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b1c      	ldr	r3, [pc, #112]	@ (80019fc <MX_UART4_Init+0x98>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b1b      	ldr	r3, [pc, #108]	@ (80019fc <MX_UART4_Init+0x98>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b19      	ldr	r3, [pc, #100]	@ (80019fc <MX_UART4_Init+0x98>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800199a:	4b18      	ldr	r3, [pc, #96]	@ (80019fc <MX_UART4_Init+0x98>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019a0:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <MX_UART4_Init+0x98>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80019a6:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <MX_UART4_Init+0x98>)
 80019a8:	2208      	movs	r2, #8
 80019aa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80019ac:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <MX_UART4_Init+0x98>)
 80019ae:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019b2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019b4:	4811      	ldr	r0, [pc, #68]	@ (80019fc <MX_UART4_Init+0x98>)
 80019b6:	f005 fc59 	bl	800726c <HAL_UART_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_UART4_Init+0x60>
  {
    Error_Handler();
 80019c0:	f7ff fac4 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c4:	2100      	movs	r1, #0
 80019c6:	480d      	ldr	r0, [pc, #52]	@ (80019fc <MX_UART4_Init+0x98>)
 80019c8:	f006 fa52 	bl	8007e70 <HAL_UARTEx_SetTxFifoThreshold>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_UART4_Init+0x72>
  {
    Error_Handler();
 80019d2:	f7ff fabb 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d6:	2100      	movs	r1, #0
 80019d8:	4808      	ldr	r0, [pc, #32]	@ (80019fc <MX_UART4_Init+0x98>)
 80019da:	f006 fa87 	bl	8007eec <HAL_UARTEx_SetRxFifoThreshold>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_UART4_Init+0x84>
  {
    Error_Handler();
 80019e4:	f7ff fab2 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80019e8:	4804      	ldr	r0, [pc, #16]	@ (80019fc <MX_UART4_Init+0x98>)
 80019ea:	f006 fa08 	bl	8007dfe <HAL_UARTEx_DisableFifoMode>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_UART4_Init+0x94>
  {
    Error_Handler();
 80019f4:	f7ff faaa 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000458 	.word	0x20000458
 8001a00:	40004c00 	.word	0x40004c00

08001a04 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a08:	4b22      	ldr	r3, [pc, #136]	@ (8001a94 <MX_USART3_UART_Init+0x90>)
 8001a0a:	4a23      	ldr	r2, [pc, #140]	@ (8001a98 <MX_USART3_UART_Init+0x94>)
 8001a0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 128000;
 8001a0e:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <MX_USART3_UART_Init+0x90>)
 8001a10:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8001a14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a16:	4b1f      	ldr	r3, [pc, #124]	@ (8001a94 <MX_USART3_UART_Init+0x90>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a94 <MX_USART3_UART_Init+0x90>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a22:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <MX_USART3_UART_Init+0x90>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a28:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <MX_USART3_UART_Init+0x90>)
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2e:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <MX_USART3_UART_Init+0x90>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a34:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <MX_USART3_UART_Init+0x90>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3a:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <MX_USART3_UART_Init+0x90>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a40:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <MX_USART3_UART_Init+0x90>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a46:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <MX_USART3_UART_Init+0x90>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a4c:	4811      	ldr	r0, [pc, #68]	@ (8001a94 <MX_USART3_UART_Init+0x90>)
 8001a4e:	f005 fc0d 	bl	800726c <HAL_UART_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a58:	f7ff fa78 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	480d      	ldr	r0, [pc, #52]	@ (8001a94 <MX_USART3_UART_Init+0x90>)
 8001a60:	f006 fa06 	bl	8007e70 <HAL_UARTEx_SetTxFifoThreshold>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a6a:	f7ff fa6f 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4808      	ldr	r0, [pc, #32]	@ (8001a94 <MX_USART3_UART_Init+0x90>)
 8001a72:	f006 fa3b 	bl	8007eec <HAL_UARTEx_SetRxFifoThreshold>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a7c:	f7ff fa66 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a80:	4804      	ldr	r0, [pc, #16]	@ (8001a94 <MX_USART3_UART_Init+0x90>)
 8001a82:	f006 f9bc 	bl	8007dfe <HAL_UARTEx_DisableFifoMode>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a8c:	f7ff fa5e 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200004ec 	.word	0x200004ec
 8001a98:	40004800 	.word	0x40004800

08001a9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b09c      	sub	sp, #112	@ 0x70
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ab4:	f107 0318 	add.w	r3, r7, #24
 8001ab8:	2244      	movs	r2, #68	@ 0x44
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f006 fc81 	bl	80083c4 <memset>
  if(uartHandle->Instance==UART4)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a3d      	ldr	r2, [pc, #244]	@ (8001bbc <HAL_UART_MspInit+0x120>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d137      	bne.n	8001b3c <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001acc:	2308      	movs	r3, #8
 8001ace:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f002 ffd1 	bl	8004a80 <HAL_RCCEx_PeriphCLKConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ae4:	f7ff fa32 	bl	8000f4c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ae8:	4b35      	ldr	r3, [pc, #212]	@ (8001bc0 <HAL_UART_MspInit+0x124>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aec:	4a34      	ldr	r2, [pc, #208]	@ (8001bc0 <HAL_UART_MspInit+0x124>)
 8001aee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001af4:	4b32      	ldr	r3, [pc, #200]	@ (8001bc0 <HAL_UART_MspInit+0x124>)
 8001af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b00:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc0 <HAL_UART_MspInit+0x124>)
 8001b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b04:	4a2e      	ldr	r2, [pc, #184]	@ (8001bc0 <HAL_UART_MspInit+0x124>)
 8001b06:	f043 0304 	orr.w	r3, r3, #4
 8001b0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc0 <HAL_UART_MspInit+0x124>)
 8001b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001b18:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001b2a:	2305      	movs	r3, #5
 8001b2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b32:	4619      	mov	r1, r3
 8001b34:	4823      	ldr	r0, [pc, #140]	@ (8001bc4 <HAL_UART_MspInit+0x128>)
 8001b36:	f001 fec7 	bl	80038c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b3a:	e03b      	b.n	8001bb4 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a21      	ldr	r2, [pc, #132]	@ (8001bc8 <HAL_UART_MspInit+0x12c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d136      	bne.n	8001bb4 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b46:	2304      	movs	r3, #4
 8001b48:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b4e:	f107 0318 	add.w	r3, r7, #24
 8001b52:	4618      	mov	r0, r3
 8001b54:	f002 ff94 	bl	8004a80 <HAL_RCCEx_PeriphCLKConfig>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001b5e:	f7ff f9f5 	bl	8000f4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b62:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <HAL_UART_MspInit+0x124>)
 8001b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b66:	4a16      	ldr	r2, [pc, #88]	@ (8001bc0 <HAL_UART_MspInit+0x124>)
 8001b68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b6e:	4b14      	ldr	r3, [pc, #80]	@ (8001bc0 <HAL_UART_MspInit+0x124>)
 8001b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <HAL_UART_MspInit+0x124>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7e:	4a10      	ldr	r2, [pc, #64]	@ (8001bc0 <HAL_UART_MspInit+0x124>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b86:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <HAL_UART_MspInit+0x124>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_INPUT_Pin|LIDAR_OUTPUT_Pin;
 8001b92:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ba4:	2307      	movs	r3, #7
 8001ba6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001bac:	4619      	mov	r1, r3
 8001bae:	4807      	ldr	r0, [pc, #28]	@ (8001bcc <HAL_UART_MspInit+0x130>)
 8001bb0:	f001 fe8a 	bl	80038c8 <HAL_GPIO_Init>
}
 8001bb4:	bf00      	nop
 8001bb6:	3770      	adds	r7, #112	@ 0x70
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40004c00 	.word	0x40004c00
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	48000800 	.word	0x48000800
 8001bc8:	40004800 	.word	0x40004800
 8001bcc:	48000400 	.word	0x48000400

08001bd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bd0:	480d      	ldr	r0, [pc, #52]	@ (8001c08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bd2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bd4:	f7ff fb80 	bl	80012d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd8:	480c      	ldr	r0, [pc, #48]	@ (8001c0c <LoopForever+0x6>)
  ldr r1, =_edata
 8001bda:	490d      	ldr	r1, [pc, #52]	@ (8001c10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c14 <LoopForever+0xe>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001be0:	e002      	b.n	8001be8 <LoopCopyDataInit>

08001be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be6:	3304      	adds	r3, #4

08001be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bec:	d3f9      	bcc.n	8001be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bee:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bf0:	4c0a      	ldr	r4, [pc, #40]	@ (8001c1c <LoopForever+0x16>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf4:	e001      	b.n	8001bfa <LoopFillZerobss>

08001bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf8:	3204      	adds	r2, #4

08001bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bfc:	d3fb      	bcc.n	8001bf6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001bfe:	f006 fbff 	bl	8008400 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c02:	f7ff f8d1 	bl	8000da8 <main>

08001c06 <LoopForever>:

LoopForever:
    b LoopForever
 8001c06:	e7fe      	b.n	8001c06 <LoopForever>
  ldr   r0, =_estack
 8001c08:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c10:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001c14:	080090d4 	.word	0x080090d4
  ldr r2, =_sbss
 8001c18:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c1c:	200006d0 	.word	0x200006d0

08001c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c20:	e7fe      	b.n	8001c20 <ADC1_2_IRQHandler>

08001c22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f001 fb99 	bl	8003364 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c32:	200f      	movs	r0, #15
 8001c34:	f000 f80e 	bl	8001c54 <HAL_InitTick>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	71fb      	strb	r3, [r7, #7]
 8001c42:	e001      	b.n	8001c48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c44:	f7ff fa08 	bl	8001058 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c48:	79fb      	ldrb	r3, [r7, #7]

}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c60:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <HAL_InitTick+0x68>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d022      	beq.n	8001cae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c68:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <HAL_InitTick+0x6c>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <HAL_InitTick+0x68>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 fba4 	bl	80033ca <HAL_SYSTICK_Config>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10f      	bne.n	8001ca8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b0f      	cmp	r3, #15
 8001c8c:	d809      	bhi.n	8001ca2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c96:	f001 fb70 	bl	800337a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_InitTick+0x70>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	e007      	b.n	8001cb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	73fb      	strb	r3, [r7, #15]
 8001ca6:	e004      	b.n	8001cb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e001      	b.n	8001cb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <HAL_IncTick+0x1c>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <HAL_IncTick+0x20>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4a03      	ldr	r2, [pc, #12]	@ (8001ce4 <HAL_IncTick+0x1c>)
 8001cd8:	6013      	str	r3, [r2, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	20000580 	.word	0x20000580
 8001ce8:	20000008 	.word	0x20000008

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000580 	.word	0x20000580

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d1c:	d004      	beq.n	8001d28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <HAL_Delay+0x40>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4413      	add	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d28:	bf00      	nop
 8001d2a:	f7ff ffdf 	bl	8001cec <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d8f7      	bhi.n	8001d2a <HAL_Delay+0x26>
  {
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000008 	.word	0x20000008

08001d48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	609a      	str	r2, [r3, #8]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	609a      	str	r2, [r3, #8]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3360      	adds	r3, #96	@ 0x60
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <LL_ADC_SetOffset+0x44>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	4313      	orrs	r3, r2
 8001de0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001de8:	bf00      	nop
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	03fff000 	.word	0x03fff000

08001df8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3360      	adds	r3, #96	@ 0x60
 8001e06:	461a      	mov	r2, r3
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3360      	adds	r3, #96	@ 0x60
 8001e34:	461a      	mov	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e4e:	bf00      	nop
 8001e50:	371c      	adds	r7, #28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b087      	sub	sp, #28
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3360      	adds	r3, #96	@ 0x60
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e84:	bf00      	nop
 8001e86:	371c      	adds	r7, #28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3360      	adds	r3, #96	@ 0x60
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001eba:	bf00      	nop
 8001ebc:	371c      	adds	r7, #28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	615a      	str	r2, [r3, #20]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b087      	sub	sp, #28
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3330      	adds	r3, #48	@ 0x30
 8001f22:	461a      	mov	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	4413      	add	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	211f      	movs	r1, #31
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	401a      	ands	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	0e9b      	lsrs	r3, r3, #26
 8001f4a:	f003 011f 	and.w	r1, r3, #31
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f5e:	bf00      	nop
 8001f60:	371c      	adds	r7, #28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b087      	sub	sp, #28
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3314      	adds	r3, #20
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	0e5b      	lsrs	r3, r3, #25
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	4413      	add	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	0d1b      	lsrs	r3, r3, #20
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	2107      	movs	r1, #7
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	0d1b      	lsrs	r3, r3, #20
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fb4:	bf00      	nop
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	401a      	ands	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0318 	and.w	r3, r3, #24
 8001fe2:	4908      	ldr	r1, [pc, #32]	@ (8002004 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fe4:	40d9      	lsrs	r1, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	400b      	ands	r3, r1
 8001fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	0007ffff 	.word	0x0007ffff

08002008 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 031f 	and.w	r3, r3, #31
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002034:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6093      	str	r3, [r2, #8]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800205c:	d101      	bne.n	8002062 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002080:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002084:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80020ac:	d101      	bne.n	80020b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <LL_ADC_IsEnabled+0x18>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <LL_ADC_IsEnabled+0x1a>
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800211e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002122:	f043 0204 	orr.w	r2, r3, #4
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b04      	cmp	r3, #4
 8002148:	d101      	bne.n	800214e <LL_ADC_REG_IsConversionOngoing+0x18>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b08      	cmp	r3, #8
 800216e:	d101      	bne.n	8002174 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002170:	2301      	movs	r3, #1
 8002172:	e000      	b.n	8002176 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b089      	sub	sp, #36	@ 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e167      	b.n	800246e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d109      	bne.n	80021c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7fe fb1d 	bl	80007ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff3f 	bl	8002048 <LL_ADC_IsDeepPowerDownEnabled>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff25 	bl	8002024 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff5a 	bl	8002098 <LL_ADC_IsInternalRegulatorEnabled>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d115      	bne.n	8002216 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ff3e 	bl	8002070 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021f4:	4ba0      	ldr	r3, [pc, #640]	@ (8002478 <HAL_ADC_Init+0x2f4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	099b      	lsrs	r3, r3, #6
 80021fa:	4aa0      	ldr	r2, [pc, #640]	@ (800247c <HAL_ADC_Init+0x2f8>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	099b      	lsrs	r3, r3, #6
 8002202:	3301      	adds	r3, #1
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002208:	e002      	b.n	8002210 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3b01      	subs	r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f9      	bne.n	800220a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff3c 	bl	8002098 <LL_ADC_IsInternalRegulatorEnabled>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10d      	bne.n	8002242 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222a:	f043 0210 	orr.w	r2, r3, #16
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002236:	f043 0201 	orr.w	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ff75 	bl	8002136 <LL_ADC_REG_IsConversionOngoing>
 800224c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b00      	cmp	r3, #0
 8002258:	f040 8100 	bne.w	800245c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2b00      	cmp	r3, #0
 8002260:	f040 80fc 	bne.w	800245c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002268:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800226c:	f043 0202 	orr.w	r2, r3, #2
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff35 	bl	80020e8 <LL_ADC_IsEnabled>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d111      	bne.n	80022a8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002284:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002288:	f7ff ff2e 	bl	80020e8 <LL_ADC_IsEnabled>
 800228c:	4604      	mov	r4, r0
 800228e:	487c      	ldr	r0, [pc, #496]	@ (8002480 <HAL_ADC_Init+0x2fc>)
 8002290:	f7ff ff2a 	bl	80020e8 <LL_ADC_IsEnabled>
 8002294:	4603      	mov	r3, r0
 8002296:	4323      	orrs	r3, r4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d105      	bne.n	80022a8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4619      	mov	r1, r3
 80022a2:	4878      	ldr	r0, [pc, #480]	@ (8002484 <HAL_ADC_Init+0x300>)
 80022a4:	f7ff fd50 	bl	8001d48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7f5b      	ldrb	r3, [r3, #29]
 80022ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80022b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80022be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d106      	bne.n	80022e4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022da:	3b01      	subs	r3, #1
 80022dc:	045b      	lsls	r3, r3, #17
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d009      	beq.n	8002300 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	4b60      	ldr	r3, [pc, #384]	@ (8002488 <HAL_ADC_Init+0x304>)
 8002308:	4013      	ands	r3, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	69b9      	ldr	r1, [r7, #24]
 8002310:	430b      	orrs	r3, r1
 8002312:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff14 	bl	800215c <LL_ADC_INJ_IsConversionOngoing>
 8002334:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d16d      	bne.n	8002418 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d16a      	bne.n	8002418 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002346:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800234e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800235e:	f023 0302 	bic.w	r3, r3, #2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	69b9      	ldr	r1, [r7, #24]
 8002368:	430b      	orrs	r3, r1
 800236a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d017      	beq.n	80023a4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002382:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800238c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002390:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6911      	ldr	r1, [r2, #16]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	430b      	orrs	r3, r1
 800239e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80023a2:	e013      	b.n	80023cc <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80023b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80023c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023c8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d118      	bne.n	8002408 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80023e0:	f023 0304 	bic.w	r3, r3, #4
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023ec:	4311      	orrs	r1, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80023f2:	4311      	orrs	r1, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023f8:	430a      	orrs	r2, r1
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0201 	orr.w	r2, r2, #1
 8002404:	611a      	str	r2, [r3, #16]
 8002406:	e007      	b.n	8002418 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0201 	bic.w	r2, r2, #1
 8002416:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d10c      	bne.n	800243a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	f023 010f 	bic.w	r1, r3, #15
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	1e5a      	subs	r2, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	631a      	str	r2, [r3, #48]	@ 0x30
 8002438:	e007      	b.n	800244a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 020f 	bic.w	r2, r2, #15
 8002448:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244e:	f023 0303 	bic.w	r3, r3, #3
 8002452:	f043 0201 	orr.w	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	65da      	str	r2, [r3, #92]	@ 0x5c
 800245a:	e007      	b.n	800246c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002460:	f043 0210 	orr.w	r2, r3, #16
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800246c:	7ffb      	ldrb	r3, [r7, #31]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3724      	adds	r7, #36	@ 0x24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd90      	pop	{r4, r7, pc}
 8002476:	bf00      	nop
 8002478:	20000000 	.word	0x20000000
 800247c:	053e2d63 	.word	0x053e2d63
 8002480:	50000100 	.word	0x50000100
 8002484:	50000300 	.word	0x50000300
 8002488:	fff04007 	.word	0xfff04007

0800248c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002498:	4851      	ldr	r0, [pc, #324]	@ (80025e0 <HAL_ADC_Start_DMA+0x154>)
 800249a:	f7ff fdb5 	bl	8002008 <LL_ADC_GetMultimode>
 800249e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fe46 	bl	8002136 <LL_ADC_REG_IsConversionOngoing>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f040 808f 	bne.w	80025d0 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_ADC_Start_DMA+0x34>
 80024bc:	2302      	movs	r3, #2
 80024be:	e08a      	b.n	80025d6 <HAL_ADC_Start_DMA+0x14a>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d005      	beq.n	80024da <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d002      	beq.n	80024da <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	2b09      	cmp	r3, #9
 80024d8:	d173      	bne.n	80025c2 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fc8e 	bl	8002dfc <ADC_Enable>
 80024e0:	4603      	mov	r3, r0
 80024e2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80024e4:	7dfb      	ldrb	r3, [r7, #23]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d166      	bne.n	80025b8 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a38      	ldr	r2, [pc, #224]	@ (80025e4 <HAL_ADC_Start_DMA+0x158>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d002      	beq.n	800250e <HAL_ADC_Start_DMA+0x82>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	e001      	b.n	8002512 <HAL_ADC_Start_DMA+0x86>
 800250e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	4293      	cmp	r3, r2
 8002518:	d002      	beq.n	8002520 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d105      	bne.n	800252c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002524:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002530:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d006      	beq.n	8002546 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800253c:	f023 0206 	bic.w	r2, r3, #6
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	661a      	str	r2, [r3, #96]	@ 0x60
 8002544:	e002      	b.n	800254c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002550:	4a25      	ldr	r2, [pc, #148]	@ (80025e8 <HAL_ADC_Start_DMA+0x15c>)
 8002552:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002558:	4a24      	ldr	r2, [pc, #144]	@ (80025ec <HAL_ADC_Start_DMA+0x160>)
 800255a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002560:	4a23      	ldr	r2, [pc, #140]	@ (80025f0 <HAL_ADC_Start_DMA+0x164>)
 8002562:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	221c      	movs	r2, #28
 800256a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0210 	orr.w	r2, r2, #16
 8002582:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	3340      	adds	r3, #64	@ 0x40
 800259e:	4619      	mov	r1, r3
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f000 ffc6 	bl	8003534 <HAL_DMA_Start_IT>
 80025a8:	4603      	mov	r3, r0
 80025aa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fdac 	bl	800210e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80025b6:	e00d      	b.n	80025d4 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80025c0:	e008      	b.n	80025d4 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80025ce:	e001      	b.n	80025d4 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025d0:	2302      	movs	r3, #2
 80025d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	50000300 	.word	0x50000300
 80025e4:	50000100 	.word	0x50000100
 80025e8:	08002f09 	.word	0x08002f09
 80025ec:	08002fe1 	.word	0x08002fe1
 80025f0:	08002ffd 	.word	0x08002ffd

080025f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b0b6      	sub	sp, #216	@ 0xd8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_ADC_ConfigChannel+0x22>
 800263a:	2302      	movs	r3, #2
 800263c:	e3c8      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x7b4>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fd73 	bl	8002136 <LL_ADC_REG_IsConversionOngoing>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 83ad 	bne.w	8002db2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	f7ff fc54 	bl	8001f12 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fd61 	bl	8002136 <LL_ADC_REG_IsConversionOngoing>
 8002674:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fd6d 	bl	800215c <LL_ADC_INJ_IsConversionOngoing>
 8002682:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002686:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800268a:	2b00      	cmp	r3, #0
 800268c:	f040 81d9 	bne.w	8002a42 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002690:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002694:	2b00      	cmp	r3, #0
 8002696:	f040 81d4 	bne.w	8002a42 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026a2:	d10f      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2200      	movs	r2, #0
 80026ae:	4619      	mov	r1, r3
 80026b0:	f7ff fc5b 	bl	8001f6a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fc02 	bl	8001ec6 <LL_ADC_SetSamplingTimeCommonConfig>
 80026c2:	e00e      	b.n	80026e2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6819      	ldr	r1, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	461a      	mov	r2, r3
 80026d2:	f7ff fc4a 	bl	8001f6a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2100      	movs	r1, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fbf2 	bl	8001ec6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	08db      	lsrs	r3, r3, #3
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	2b04      	cmp	r3, #4
 8002702:	d022      	beq.n	800274a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	6919      	ldr	r1, [r3, #16]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002714:	f7ff fb4c 	bl	8001db0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	6919      	ldr	r1, [r3, #16]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	461a      	mov	r2, r3
 8002726:	f7ff fb98 	bl	8001e5a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002736:	2b01      	cmp	r3, #1
 8002738:	d102      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x124>
 800273a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800273e:	e000      	b.n	8002742 <HAL_ADC_ConfigChannel+0x126>
 8002740:	2300      	movs	r3, #0
 8002742:	461a      	mov	r2, r3
 8002744:	f7ff fba4 	bl	8001e90 <LL_ADC_SetOffsetSaturation>
 8002748:	e17b      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2100      	movs	r1, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fb51 	bl	8001df8 <LL_ADC_GetOffsetChannel>
 8002756:	4603      	mov	r3, r0
 8002758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x15a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fb46 	bl	8001df8 <LL_ADC_GetOffsetChannel>
 800276c:	4603      	mov	r3, r0
 800276e:	0e9b      	lsrs	r3, r3, #26
 8002770:	f003 021f 	and.w	r2, r3, #31
 8002774:	e01e      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x198>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fb3b 	bl	8001df8 <LL_ADC_GetOffsetChannel>
 8002782:	4603      	mov	r3, r0
 8002784:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002794:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002798:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800279c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80027a4:	2320      	movs	r3, #32
 80027a6:	e004      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80027a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d105      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x1b0>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0e9b      	lsrs	r3, r3, #26
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	e018      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1e2>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80027e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80027e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80027f0:	2320      	movs	r3, #32
 80027f2:	e004      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80027f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027f8:	fab3 f383 	clz	r3, r3
 80027fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027fe:	429a      	cmp	r2, r3
 8002800:	d106      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2200      	movs	r2, #0
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fb0a 	bl	8001e24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff faee 	bl	8001df8 <LL_ADC_GetOffsetChannel>
 800281c:	4603      	mov	r3, r0
 800281e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10a      	bne.n	800283c <HAL_ADC_ConfigChannel+0x220>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2101      	movs	r1, #1
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fae3 	bl	8001df8 <LL_ADC_GetOffsetChannel>
 8002832:	4603      	mov	r3, r0
 8002834:	0e9b      	lsrs	r3, r3, #26
 8002836:	f003 021f 	and.w	r2, r3, #31
 800283a:	e01e      	b.n	800287a <HAL_ADC_ConfigChannel+0x25e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fad8 	bl	8001df8 <LL_ADC_GetOffsetChannel>
 8002848:	4603      	mov	r3, r0
 800284a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800285a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800285e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002862:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800286a:	2320      	movs	r3, #32
 800286c:	e004      	b.n	8002878 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800286e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x276>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	e018      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x2a8>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80028a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80028ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80028b6:	2320      	movs	r3, #32
 80028b8:	e004      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80028ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d106      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2101      	movs	r1, #1
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff faa7 	bl	8001e24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2102      	movs	r1, #2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fa8b 	bl	8001df8 <LL_ADC_GetOffsetChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10a      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x2e6>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2102      	movs	r1, #2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fa80 	bl	8001df8 <LL_ADC_GetOffsetChannel>
 80028f8:	4603      	mov	r3, r0
 80028fa:	0e9b      	lsrs	r3, r3, #26
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	e01e      	b.n	8002940 <HAL_ADC_ConfigChannel+0x324>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2102      	movs	r1, #2
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fa75 	bl	8001df8 <LL_ADC_GetOffsetChannel>
 800290e:	4603      	mov	r3, r0
 8002910:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002920:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002924:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002928:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002930:	2320      	movs	r3, #32
 8002932:	e004      	b.n	800293e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002934:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002948:	2b00      	cmp	r3, #0
 800294a:	d105      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x33c>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	0e9b      	lsrs	r3, r3, #26
 8002952:	f003 031f 	and.w	r3, r3, #31
 8002956:	e016      	b.n	8002986 <HAL_ADC_ConfigChannel+0x36a>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800296a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800296c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002970:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002978:	2320      	movs	r3, #32
 800297a:	e004      	b.n	8002986 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800297c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002986:	429a      	cmp	r2, r3
 8002988:	d106      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2200      	movs	r2, #0
 8002990:	2102      	movs	r1, #2
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fa46 	bl	8001e24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2103      	movs	r1, #3
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fa2a 	bl	8001df8 <LL_ADC_GetOffsetChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10a      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x3a8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2103      	movs	r1, #3
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fa1f 	bl	8001df8 <LL_ADC_GetOffsetChannel>
 80029ba:	4603      	mov	r3, r0
 80029bc:	0e9b      	lsrs	r3, r3, #26
 80029be:	f003 021f 	and.w	r2, r3, #31
 80029c2:	e017      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x3d8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2103      	movs	r1, #3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fa14 	bl	8001df8 <LL_ADC_GetOffsetChannel>
 80029d0:	4603      	mov	r3, r0
 80029d2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80029dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029de:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80029e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80029e6:	2320      	movs	r3, #32
 80029e8:	e003      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80029ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d105      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x3f0>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0e9b      	lsrs	r3, r3, #26
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	e011      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x414>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002a24:	2320      	movs	r3, #32
 8002a26:	e003      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002a28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d106      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2103      	movs	r1, #3
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff f9f1 	bl	8001e24 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fb4e 	bl	80020e8 <LL_ADC_IsEnabled>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f040 8140 	bne.w	8002cd4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	6819      	ldr	r1, [r3, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	461a      	mov	r2, r3
 8002a62:	f7ff faad 	bl	8001fc0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	4a8f      	ldr	r2, [pc, #572]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x68c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	f040 8131 	bne.w	8002cd4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10b      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x47e>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	0e9b      	lsrs	r3, r3, #26
 8002a88:	3301      	adds	r3, #1
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	2b09      	cmp	r3, #9
 8002a90:	bf94      	ite	ls
 8002a92:	2301      	movls	r3, #1
 8002a94:	2300      	movhi	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	e019      	b.n	8002ace <HAL_ADC_ConfigChannel+0x4b2>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002aa8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002aaa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002aac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	e003      	b.n	8002abe <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002ab6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	2b09      	cmp	r3, #9
 8002ac6:	bf94      	ite	ls
 8002ac8:	2301      	movls	r3, #1
 8002aca:	2300      	movhi	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d079      	beq.n	8002bc6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d107      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x4d2>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	0e9b      	lsrs	r3, r3, #26
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	069b      	lsls	r3, r3, #26
 8002ae8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002aec:	e015      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x4fe>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002afe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002b06:	2320      	movs	r3, #32
 8002b08:	e003      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	3301      	adds	r3, #1
 8002b14:	069b      	lsls	r3, r3, #26
 8002b16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x51e>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	0e9b      	lsrs	r3, r3, #26
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	2101      	movs	r1, #1
 8002b34:	fa01 f303 	lsl.w	r3, r1, r3
 8002b38:	e017      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x54e>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002b4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002b52:	2320      	movs	r3, #32
 8002b54:	e003      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	2101      	movs	r1, #1
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	ea42 0103 	orr.w	r1, r2, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10a      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x574>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	0e9b      	lsrs	r3, r3, #26
 8002b80:	3301      	adds	r3, #1
 8002b82:	f003 021f 	and.w	r2, r3, #31
 8002b86:	4613      	mov	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	051b      	lsls	r3, r3, #20
 8002b8e:	e018      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x5a6>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002ba8:	2320      	movs	r3, #32
 8002baa:	e003      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	f003 021f 	and.w	r2, r3, #31
 8002bba:	4613      	mov	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	e081      	b.n	8002cca <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d107      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x5c6>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0e9b      	lsrs	r3, r3, #26
 8002bd8:	3301      	adds	r3, #1
 8002bda:	069b      	lsls	r3, r3, #26
 8002bdc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002be0:	e015      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x5f2>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	e003      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c00:	fab3 f383 	clz	r3, r3
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	3301      	adds	r3, #1
 8002c08:	069b      	lsls	r3, r3, #26
 8002c0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x612>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	0e9b      	lsrs	r3, r3, #26
 8002c20:	3301      	adds	r3, #1
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	2101      	movs	r1, #1
 8002c28:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2c:	e017      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x642>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	61fb      	str	r3, [r7, #28]
  return result;
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002c46:	2320      	movs	r3, #32
 8002c48:	e003      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	3301      	adds	r3, #1
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	2101      	movs	r1, #1
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	ea42 0103 	orr.w	r1, r2, r3
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10d      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x66e>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	3301      	adds	r3, #1
 8002c76:	f003 021f 	and.w	r2, r3, #31
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	4413      	add	r3, r2
 8002c80:	3b1e      	subs	r3, #30
 8002c82:	051b      	lsls	r3, r3, #20
 8002c84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c88:	e01e      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x6ac>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	613b      	str	r3, [r7, #16]
  return result;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d104      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e006      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x698>
 8002ca6:	bf00      	nop
 8002ca8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f003 021f 	and.w	r2, r3, #31
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3b1e      	subs	r3, #30
 8002cc2:	051b      	lsls	r3, r3, #20
 8002cc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f7ff f94b 	bl	8001f6a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b3f      	ldr	r3, [pc, #252]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d071      	beq.n	8002dc4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ce0:	483e      	ldr	r0, [pc, #248]	@ (8002ddc <HAL_ADC_ConfigChannel+0x7c0>)
 8002ce2:	f7ff f857 	bl	8001d94 <LL_ADC_GetCommonPathInternalCh>
 8002ce6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a3c      	ldr	r2, [pc, #240]	@ (8002de0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d004      	beq.n	8002cfe <HAL_ADC_ConfigChannel+0x6e2>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a3a      	ldr	r2, [pc, #232]	@ (8002de4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d127      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d121      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d12:	d157      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	482f      	ldr	r0, [pc, #188]	@ (8002ddc <HAL_ADC_ConfigChannel+0x7c0>)
 8002d20:	f7ff f825 	bl	8001d6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d24:	4b30      	ldr	r3, [pc, #192]	@ (8002de8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	099b      	lsrs	r3, r3, #6
 8002d2a:	4a30      	ldr	r2, [pc, #192]	@ (8002dec <HAL_ADC_ConfigChannel+0x7d0>)
 8002d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d30:	099b      	lsrs	r3, r3, #6
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d3e:	e002      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f9      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d4c:	e03a      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a27      	ldr	r2, [pc, #156]	@ (8002df0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d113      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10d      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a22      	ldr	r2, [pc, #136]	@ (8002df4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d02a      	beq.n	8002dc4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d76:	4619      	mov	r1, r3
 8002d78:	4818      	ldr	r0, [pc, #96]	@ (8002ddc <HAL_ADC_ConfigChannel+0x7c0>)
 8002d7a:	f7fe fff8 	bl	8001d6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d7e:	e021      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1c      	ldr	r2, [pc, #112]	@ (8002df8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d11c      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d116      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a16      	ldr	r2, [pc, #88]	@ (8002df4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d011      	beq.n	8002dc4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002da4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002da8:	4619      	mov	r1, r3
 8002daa:	480c      	ldr	r0, [pc, #48]	@ (8002ddc <HAL_ADC_ConfigChannel+0x7c0>)
 8002dac:	f7fe ffdf 	bl	8001d6e <LL_ADC_SetCommonPathInternalCh>
 8002db0:	e008      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002dcc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	37d8      	adds	r7, #216	@ 0xd8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	80080000 	.word	0x80080000
 8002ddc:	50000300 	.word	0x50000300
 8002de0:	c3210000 	.word	0xc3210000
 8002de4:	90c00010 	.word	0x90c00010
 8002de8:	20000000 	.word	0x20000000
 8002dec:	053e2d63 	.word	0x053e2d63
 8002df0:	c7520000 	.word	0xc7520000
 8002df4:	50000100 	.word	0x50000100
 8002df8:	cb840000 	.word	0xcb840000

08002dfc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff f96b 	bl	80020e8 <LL_ADC_IsEnabled>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d169      	bne.n	8002eec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	4b36      	ldr	r3, [pc, #216]	@ (8002ef8 <ADC_Enable+0xfc>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00d      	beq.n	8002e42 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2a:	f043 0210 	orr.w	r2, r3, #16
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e36:	f043 0201 	orr.w	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e055      	b.n	8002eee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff f93a 	bl	80020c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e4c:	482b      	ldr	r0, [pc, #172]	@ (8002efc <ADC_Enable+0x100>)
 8002e4e:	f7fe ffa1 	bl	8001d94 <LL_ADC_GetCommonPathInternalCh>
 8002e52:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d013      	beq.n	8002e84 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e5c:	4b28      	ldr	r3, [pc, #160]	@ (8002f00 <ADC_Enable+0x104>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	099b      	lsrs	r3, r3, #6
 8002e62:	4a28      	ldr	r2, [pc, #160]	@ (8002f04 <ADC_Enable+0x108>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e76:	e002      	b.n	8002e7e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f9      	bne.n	8002e78 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e84:	f7fe ff32 	bl	8001cec <HAL_GetTick>
 8002e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e8a:	e028      	b.n	8002ede <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff f929 	bl	80020e8 <LL_ADC_IsEnabled>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d104      	bne.n	8002ea6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff f90d 	bl	80020c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ea6:	f7fe ff21 	bl	8001cec <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d914      	bls.n	8002ede <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d00d      	beq.n	8002ede <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec6:	f043 0210 	orr.w	r2, r3, #16
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed2:	f043 0201 	orr.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e007      	b.n	8002eee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d1cf      	bne.n	8002e8c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	8000003f 	.word	0x8000003f
 8002efc:	50000300 	.word	0x50000300
 8002f00:	20000000 	.word	0x20000000
 8002f04:	053e2d63 	.word	0x053e2d63

08002f08 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d14b      	bne.n	8002fba <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f26:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d021      	beq.n	8002f80 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe ffd3 	bl	8001eec <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d032      	beq.n	8002fb2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d12b      	bne.n	8002fb2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d11f      	bne.n	8002fb2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f7e:	e018      	b.n	8002fb2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d111      	bne.n	8002fb2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d105      	bne.n	8002fb2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002faa:	f043 0201 	orr.w	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f7fd fd38 	bl	8000a28 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fb8:	e00e      	b.n	8002fd8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f7ff fb1e 	bl	8002608 <HAL_ADC_ErrorCallback>
}
 8002fcc:	e004      	b.n	8002fd8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
}
 8002fd8:	bf00      	nop
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f7ff fb00 	bl	80025f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003008:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800301a:	f043 0204 	orr.w	r2, r3, #4
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f7ff faf0 	bl	8002608 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <LL_ADC_IsEnabled>:
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <LL_ADC_IsEnabled+0x18>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <LL_ADC_IsEnabled+0x1a>
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <LL_ADC_REG_IsConversionOngoing>:
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b04      	cmp	r3, #4
 8003068:	d101      	bne.n	800306e <LL_ADC_REG_IsConversionOngoing+0x18>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800307c:	b590      	push	{r4, r7, lr}
 800307e:	b0a1      	sub	sp, #132	@ 0x84
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003096:	2302      	movs	r3, #2
 8003098:	e08b      	b.n	80031b2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80030a2:	2300      	movs	r3, #0
 80030a4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80030a6:	2300      	movs	r3, #0
 80030a8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030b2:	d102      	bne.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030b4:	4b41      	ldr	r3, [pc, #260]	@ (80031bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	e001      	b.n	80030be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10b      	bne.n	80030dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c8:	f043 0220 	orr.w	r2, r3, #32
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e06a      	b.n	80031b2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff ffb9 	bl	8003056 <LL_ADC_REG_IsConversionOngoing>
 80030e4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff ffb3 	bl	8003056 <LL_ADC_REG_IsConversionOngoing>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d14c      	bne.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80030f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d149      	bne.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030fc:	4b30      	ldr	r3, [pc, #192]	@ (80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80030fe:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d028      	beq.n	800315a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003108:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800311a:	035b      	lsls	r3, r3, #13
 800311c:	430b      	orrs	r3, r1
 800311e:	431a      	orrs	r2, r3
 8003120:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003122:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003124:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003128:	f7ff ff82 	bl	8003030 <LL_ADC_IsEnabled>
 800312c:	4604      	mov	r4, r0
 800312e:	4823      	ldr	r0, [pc, #140]	@ (80031bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003130:	f7ff ff7e 	bl	8003030 <LL_ADC_IsEnabled>
 8003134:	4603      	mov	r3, r0
 8003136:	4323      	orrs	r3, r4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d133      	bne.n	80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800313c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003144:	f023 030f 	bic.w	r3, r3, #15
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	6811      	ldr	r1, [r2, #0]
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	6892      	ldr	r2, [r2, #8]
 8003150:	430a      	orrs	r2, r1
 8003152:	431a      	orrs	r2, r3
 8003154:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003156:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003158:	e024      	b.n	80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800315a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003162:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003164:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003166:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800316a:	f7ff ff61 	bl	8003030 <LL_ADC_IsEnabled>
 800316e:	4604      	mov	r4, r0
 8003170:	4812      	ldr	r0, [pc, #72]	@ (80031bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003172:	f7ff ff5d 	bl	8003030 <LL_ADC_IsEnabled>
 8003176:	4603      	mov	r3, r0
 8003178:	4323      	orrs	r3, r4
 800317a:	2b00      	cmp	r3, #0
 800317c:	d112      	bne.n	80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800317e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003186:	f023 030f 	bic.w	r3, r3, #15
 800318a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800318c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800318e:	e009      	b.n	80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003194:	f043 0220 	orr.w	r2, r3, #32
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80031a2:	e000      	b.n	80031a6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80031ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3784      	adds	r7, #132	@ 0x84
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd90      	pop	{r4, r7, pc}
 80031ba:	bf00      	nop
 80031bc:	50000100 	.word	0x50000100
 80031c0:	50000300 	.word	0x50000300

080031c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031e0:	4013      	ands	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031f6:	4a04      	ldr	r2, [pc, #16]	@ (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	60d3      	str	r3, [r2, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003210:	4b04      	ldr	r3, [pc, #16]	@ (8003224 <__NVIC_GetPriorityGrouping+0x18>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	f003 0307 	and.w	r3, r3, #7
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	2b00      	cmp	r3, #0
 8003238:	db0b      	blt.n	8003252 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	f003 021f 	and.w	r2, r3, #31
 8003240:	4907      	ldr	r1, [pc, #28]	@ (8003260 <__NVIC_EnableIRQ+0x38>)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	2001      	movs	r0, #1
 800324a:	fa00 f202 	lsl.w	r2, r0, r2
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000e100 	.word	0xe000e100

08003264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003274:	2b00      	cmp	r3, #0
 8003276:	db0a      	blt.n	800328e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	490c      	ldr	r1, [pc, #48]	@ (80032b0 <__NVIC_SetPriority+0x4c>)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	0112      	lsls	r2, r2, #4
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	440b      	add	r3, r1
 8003288:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800328c:	e00a      	b.n	80032a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4908      	ldr	r1, [pc, #32]	@ (80032b4 <__NVIC_SetPriority+0x50>)
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	3b04      	subs	r3, #4
 800329c:	0112      	lsls	r2, r2, #4
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	440b      	add	r3, r1
 80032a2:	761a      	strb	r2, [r3, #24]
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000e100 	.word	0xe000e100
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b089      	sub	sp, #36	@ 0x24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f1c3 0307 	rsb	r3, r3, #7
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	bf28      	it	cs
 80032d6:	2304      	movcs	r3, #4
 80032d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	3304      	adds	r3, #4
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d902      	bls.n	80032e8 <NVIC_EncodePriority+0x30>
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3b03      	subs	r3, #3
 80032e6:	e000      	b.n	80032ea <NVIC_EncodePriority+0x32>
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43da      	mvns	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	401a      	ands	r2, r3
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003300:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	fa01 f303 	lsl.w	r3, r1, r3
 800330a:	43d9      	mvns	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003310:	4313      	orrs	r3, r2
         );
}
 8003312:	4618      	mov	r0, r3
 8003314:	3724      	adds	r7, #36	@ 0x24
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3b01      	subs	r3, #1
 800332c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003330:	d301      	bcc.n	8003336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003332:	2301      	movs	r3, #1
 8003334:	e00f      	b.n	8003356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003336:	4a0a      	ldr	r2, [pc, #40]	@ (8003360 <SysTick_Config+0x40>)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800333e:	210f      	movs	r1, #15
 8003340:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003344:	f7ff ff8e 	bl	8003264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003348:	4b05      	ldr	r3, [pc, #20]	@ (8003360 <SysTick_Config+0x40>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800334e:	4b04      	ldr	r3, [pc, #16]	@ (8003360 <SysTick_Config+0x40>)
 8003350:	2207      	movs	r2, #7
 8003352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	e000e010 	.word	0xe000e010

08003364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ff29 	bl	80031c4 <__NVIC_SetPriorityGrouping>
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b086      	sub	sp, #24
 800337e:	af00      	add	r7, sp, #0
 8003380:	4603      	mov	r3, r0
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003388:	f7ff ff40 	bl	800320c <__NVIC_GetPriorityGrouping>
 800338c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	6978      	ldr	r0, [r7, #20]
 8003394:	f7ff ff90 	bl	80032b8 <NVIC_EncodePriority>
 8003398:	4602      	mov	r2, r0
 800339a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339e:	4611      	mov	r1, r2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ff5f 	bl	8003264 <__NVIC_SetPriority>
}
 80033a6:	bf00      	nop
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	4603      	mov	r3, r0
 80033b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ff33 	bl	8003228 <__NVIC_EnableIRQ>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff ffa4 	bl	8003320 <SysTick_Config>
 80033d8:	4603      	mov	r3, r0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e08d      	b.n	8003512 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	4b47      	ldr	r3, [pc, #284]	@ (800351c <HAL_DMA_Init+0x138>)
 80033fe:	429a      	cmp	r2, r3
 8003400:	d80f      	bhi.n	8003422 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	4b45      	ldr	r3, [pc, #276]	@ (8003520 <HAL_DMA_Init+0x13c>)
 800340a:	4413      	add	r3, r2
 800340c:	4a45      	ldr	r2, [pc, #276]	@ (8003524 <HAL_DMA_Init+0x140>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	009a      	lsls	r2, r3, #2
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a42      	ldr	r2, [pc, #264]	@ (8003528 <HAL_DMA_Init+0x144>)
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003420:	e00e      	b.n	8003440 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	4b40      	ldr	r3, [pc, #256]	@ (800352c <HAL_DMA_Init+0x148>)
 800342a:	4413      	add	r3, r2
 800342c:	4a3d      	ldr	r2, [pc, #244]	@ (8003524 <HAL_DMA_Init+0x140>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	009a      	lsls	r2, r3, #2
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a3c      	ldr	r2, [pc, #240]	@ (8003530 <HAL_DMA_Init+0x14c>)
 800343e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800345a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800347c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f9b6 	bl	8003804 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034a0:	d102      	bne.n	80034a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034bc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d010      	beq.n	80034e8 <HAL_DMA_Init+0x104>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d80c      	bhi.n	80034e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f9d6 	bl	8003880 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	e008      	b.n	80034fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40020407 	.word	0x40020407
 8003520:	bffdfff8 	.word	0xbffdfff8
 8003524:	cccccccd 	.word	0xcccccccd
 8003528:	40020000 	.word	0x40020000
 800352c:	bffdfbf8 	.word	0xbffdfbf8
 8003530:	40020400 	.word	0x40020400

08003534 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_DMA_Start_IT+0x20>
 8003550:	2302      	movs	r3, #2
 8003552:	e066      	b.n	8003622 <HAL_DMA_Start_IT+0xee>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d155      	bne.n	8003614 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0201 	bic.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f8fb 	bl	8003788 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 020e 	orr.w	r2, r2, #14
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	e00f      	b.n	80035cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0204 	bic.w	r2, r2, #4
 80035ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 020a 	orr.w	r2, r2, #10
 80035ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003600:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0201 	orr.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	e005      	b.n	8003620 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800361c:	2302      	movs	r3, #2
 800361e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003620:	7dfb      	ldrb	r3, [r7, #23]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	2204      	movs	r2, #4
 800364c:	409a      	lsls	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4013      	ands	r3, r2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d026      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x7a>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d021      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d107      	bne.n	800367e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0204 	bic.w	r2, r2, #4
 800367c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003682:	f003 021f 	and.w	r2, r3, #31
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	2104      	movs	r1, #4
 800368c:	fa01 f202 	lsl.w	r2, r1, r2
 8003690:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003696:	2b00      	cmp	r3, #0
 8003698:	d071      	beq.n	800377e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80036a2:	e06c      	b.n	800377e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	2202      	movs	r2, #2
 80036ae:	409a      	lsls	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d02e      	beq.n	8003716 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d029      	beq.n	8003716 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10b      	bne.n	80036e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 020a 	bic.w	r2, r2, #10
 80036de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ec:	f003 021f 	and.w	r2, r3, #31
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	2102      	movs	r1, #2
 80036f6:	fa01 f202 	lsl.w	r2, r1, r2
 80036fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003708:	2b00      	cmp	r3, #0
 800370a:	d038      	beq.n	800377e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003714:	e033      	b.n	800377e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	2208      	movs	r2, #8
 8003720:	409a      	lsls	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d02a      	beq.n	8003780 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	d025      	beq.n	8003780 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 020e 	bic.w	r2, r2, #14
 8003742:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003748:	f003 021f 	and.w	r2, r3, #31
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	2101      	movs	r1, #1
 8003752:	fa01 f202 	lsl.w	r2, r1, r2
 8003756:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003772:	2b00      	cmp	r3, #0
 8003774:	d004      	beq.n	8003780 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800377e:	bf00      	nop
 8003780:	bf00      	nop
}
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800379e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d004      	beq.n	80037b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b6:	f003 021f 	and.w	r2, r3, #31
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	2101      	movs	r1, #1
 80037c0:	fa01 f202 	lsl.w	r2, r1, r2
 80037c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d108      	bne.n	80037e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037e6:	e007      	b.n	80037f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	60da      	str	r2, [r3, #12]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	4b16      	ldr	r3, [pc, #88]	@ (800386c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003814:	429a      	cmp	r2, r3
 8003816:	d802      	bhi.n	800381e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003818:	4b15      	ldr	r3, [pc, #84]	@ (8003870 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	e001      	b.n	8003822 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800381e:	4b15      	ldr	r3, [pc, #84]	@ (8003874 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003820:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	3b08      	subs	r3, #8
 800382e:	4a12      	ldr	r2, [pc, #72]	@ (8003878 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383c:	089b      	lsrs	r3, r3, #2
 800383e:	009a      	lsls	r2, r3, #2
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4413      	add	r3, r2
 8003844:	461a      	mov	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a0b      	ldr	r2, [pc, #44]	@ (800387c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800384e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	2201      	movs	r2, #1
 8003858:	409a      	lsls	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40020407 	.word	0x40020407
 8003870:	40020800 	.word	0x40020800
 8003874:	40020820 	.word	0x40020820
 8003878:	cccccccd 	.word	0xcccccccd
 800387c:	40020880 	.word	0x40020880

08003880 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4b0b      	ldr	r3, [pc, #44]	@ (80038c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	461a      	mov	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a08      	ldr	r2, [pc, #32]	@ (80038c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80038a2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2201      	movs	r2, #1
 80038ae:	409a      	lsls	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80038b4:	bf00      	nop
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	1000823f 	.word	0x1000823f
 80038c4:	40020940 	.word	0x40020940

080038c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038d6:	e15a      	b.n	8003b8e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	2101      	movs	r1, #1
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	fa01 f303 	lsl.w	r3, r1, r3
 80038e4:	4013      	ands	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 814c 	beq.w	8003b88 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d005      	beq.n	8003908 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003904:	2b02      	cmp	r3, #2
 8003906:	d130      	bne.n	800396a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	2203      	movs	r2, #3
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4013      	ands	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800393e:	2201      	movs	r2, #1
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4013      	ands	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	f003 0201 	and.w	r2, r3, #1
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	2b03      	cmp	r3, #3
 8003974:	d017      	beq.n	80039a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	2203      	movs	r2, #3
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4013      	ands	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d123      	bne.n	80039fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	08da      	lsrs	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3208      	adds	r2, #8
 80039ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	220f      	movs	r2, #15
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43db      	mvns	r3, r3
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4013      	ands	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	691a      	ldr	r2, [r3, #16]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	08da      	lsrs	r2, r3, #3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3208      	adds	r2, #8
 80039f4:	6939      	ldr	r1, [r7, #16]
 80039f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	2203      	movs	r2, #3
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f003 0203 	and.w	r2, r3, #3
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 80a6 	beq.w	8003b88 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a3c:	4b5b      	ldr	r3, [pc, #364]	@ (8003bac <HAL_GPIO_Init+0x2e4>)
 8003a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a40:	4a5a      	ldr	r2, [pc, #360]	@ (8003bac <HAL_GPIO_Init+0x2e4>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a48:	4b58      	ldr	r3, [pc, #352]	@ (8003bac <HAL_GPIO_Init+0x2e4>)
 8003a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a54:	4a56      	ldr	r2, [pc, #344]	@ (8003bb0 <HAL_GPIO_Init+0x2e8>)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	220f      	movs	r2, #15
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a7e:	d01f      	beq.n	8003ac0 <HAL_GPIO_Init+0x1f8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a4c      	ldr	r2, [pc, #304]	@ (8003bb4 <HAL_GPIO_Init+0x2ec>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d019      	beq.n	8003abc <HAL_GPIO_Init+0x1f4>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a4b      	ldr	r2, [pc, #300]	@ (8003bb8 <HAL_GPIO_Init+0x2f0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d013      	beq.n	8003ab8 <HAL_GPIO_Init+0x1f0>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a4a      	ldr	r2, [pc, #296]	@ (8003bbc <HAL_GPIO_Init+0x2f4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00d      	beq.n	8003ab4 <HAL_GPIO_Init+0x1ec>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a49      	ldr	r2, [pc, #292]	@ (8003bc0 <HAL_GPIO_Init+0x2f8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d007      	beq.n	8003ab0 <HAL_GPIO_Init+0x1e8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a48      	ldr	r2, [pc, #288]	@ (8003bc4 <HAL_GPIO_Init+0x2fc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d101      	bne.n	8003aac <HAL_GPIO_Init+0x1e4>
 8003aa8:	2305      	movs	r3, #5
 8003aaa:	e00a      	b.n	8003ac2 <HAL_GPIO_Init+0x1fa>
 8003aac:	2306      	movs	r3, #6
 8003aae:	e008      	b.n	8003ac2 <HAL_GPIO_Init+0x1fa>
 8003ab0:	2304      	movs	r3, #4
 8003ab2:	e006      	b.n	8003ac2 <HAL_GPIO_Init+0x1fa>
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e004      	b.n	8003ac2 <HAL_GPIO_Init+0x1fa>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e002      	b.n	8003ac2 <HAL_GPIO_Init+0x1fa>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <HAL_GPIO_Init+0x1fa>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	f002 0203 	and.w	r2, r2, #3
 8003ac8:	0092      	lsls	r2, r2, #2
 8003aca:	4093      	lsls	r3, r2
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ad2:	4937      	ldr	r1, [pc, #220]	@ (8003bb0 <HAL_GPIO_Init+0x2e8>)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	3302      	adds	r3, #2
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ae0:	4b39      	ldr	r3, [pc, #228]	@ (8003bc8 <HAL_GPIO_Init+0x300>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4013      	ands	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b04:	4a30      	ldr	r2, [pc, #192]	@ (8003bc8 <HAL_GPIO_Init+0x300>)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8003bc8 <HAL_GPIO_Init+0x300>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b2e:	4a26      	ldr	r2, [pc, #152]	@ (8003bc8 <HAL_GPIO_Init+0x300>)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b34:	4b24      	ldr	r3, [pc, #144]	@ (8003bc8 <HAL_GPIO_Init+0x300>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4013      	ands	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b58:	4a1b      	ldr	r2, [pc, #108]	@ (8003bc8 <HAL_GPIO_Init+0x300>)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc8 <HAL_GPIO_Init+0x300>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	43db      	mvns	r3, r3
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b82:	4a11      	ldr	r2, [pc, #68]	@ (8003bc8 <HAL_GPIO_Init+0x300>)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f47f ae9d 	bne.w	80038d8 <HAL_GPIO_Init+0x10>
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40010000 	.word	0x40010000
 8003bb4:	48000400 	.word	0x48000400
 8003bb8:	48000800 	.word	0x48000800
 8003bbc:	48000c00 	.word	0x48000c00
 8003bc0:	48001000 	.word	0x48001000
 8003bc4:	48001400 	.word	0x48001400
 8003bc8:	40010400 	.word	0x40010400

08003bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	807b      	strh	r3, [r7, #2]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bdc:	787b      	ldrb	r3, [r7, #1]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003be2:	887a      	ldrh	r2, [r7, #2]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003be8:	e002      	b.n	8003bf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bea:	887a      	ldrh	r2, [r7, #2]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c0e:	887a      	ldrh	r2, [r7, #2]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4013      	ands	r3, r2
 8003c14:	041a      	lsls	r2, r3, #16
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	43d9      	mvns	r1, r3
 8003c1a:	887b      	ldrh	r3, [r7, #2]
 8003c1c:	400b      	ands	r3, r1
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	619a      	str	r2, [r3, #24]
}
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c3a:	4b08      	ldr	r3, [pc, #32]	@ (8003c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d006      	beq.n	8003c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c46:	4a05      	ldr	r2, [pc, #20]	@ (8003c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fd f94a 	bl	8000ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40010400 	.word	0x40010400

08003c60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e08d      	b.n	8003d8e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fd f804 	bl	8000c94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2224      	movs	r2, #36	@ 0x24
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003cb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d107      	bne.n	8003cda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	e006      	b.n	8003ce8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003ce6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d108      	bne.n	8003d02 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cfe:	605a      	str	r2, [r3, #4]
 8003d00:	e007      	b.n	8003d12 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69d9      	ldr	r1, [r3, #28]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1a      	ldr	r2, [r3, #32]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d138      	bne.n	8003e1e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e032      	b.n	8003e20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2224      	movs	r2, #36	@ 0x24
 8003dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003de8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6819      	ldr	r1, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0201 	orr.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e000      	b.n	8003e20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e1e:	2302      	movs	r3, #2
  }
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	d139      	bne.n	8003eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e033      	b.n	8003eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2224      	movs	r2, #36	@ 0x24
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0201 	bic.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f042 0201 	orr.w	r2, r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e000      	b.n	8003eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
  }
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d141      	bne.n	8003f56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ed2:	4b4b      	ldr	r3, [pc, #300]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ede:	d131      	bne.n	8003f44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ee0:	4b47      	ldr	r3, [pc, #284]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ee6:	4a46      	ldr	r2, [pc, #280]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ef0:	4b43      	ldr	r3, [pc, #268]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ef8:	4a41      	ldr	r2, [pc, #260]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003efe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f00:	4b40      	ldr	r3, [pc, #256]	@ (8004004 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2232      	movs	r2, #50	@ 0x32
 8003f06:	fb02 f303 	mul.w	r3, r2, r3
 8003f0a:	4a3f      	ldr	r2, [pc, #252]	@ (8004008 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	0c9b      	lsrs	r3, r3, #18
 8003f12:	3301      	adds	r3, #1
 8003f14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f16:	e002      	b.n	8003f1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f1e:	4b38      	ldr	r3, [pc, #224]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f2a:	d102      	bne.n	8003f32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f2      	bne.n	8003f18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f32:	4b33      	ldr	r3, [pc, #204]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f3e:	d158      	bne.n	8003ff2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e057      	b.n	8003ff4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f44:	4b2e      	ldr	r3, [pc, #184]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f4a:	4a2d      	ldr	r2, [pc, #180]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003f54:	e04d      	b.n	8003ff2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f5c:	d141      	bne.n	8003fe2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f5e:	4b28      	ldr	r3, [pc, #160]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f6a:	d131      	bne.n	8003fd0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f6c:	4b24      	ldr	r3, [pc, #144]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f72:	4a23      	ldr	r2, [pc, #140]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f7c:	4b20      	ldr	r3, [pc, #128]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f84:	4a1e      	ldr	r2, [pc, #120]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004004 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2232      	movs	r2, #50	@ 0x32
 8003f92:	fb02 f303 	mul.w	r3, r2, r3
 8003f96:	4a1c      	ldr	r2, [pc, #112]	@ (8004008 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	0c9b      	lsrs	r3, r3, #18
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fa2:	e002      	b.n	8003faa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003faa:	4b15      	ldr	r3, [pc, #84]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb6:	d102      	bne.n	8003fbe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f2      	bne.n	8003fa4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fbe:	4b10      	ldr	r3, [pc, #64]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fca:	d112      	bne.n	8003ff2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e011      	b.n	8003ff4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003fe0:	e007      	b.n	8003ff2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fe2:	4b07      	ldr	r3, [pc, #28]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fea:	4a05      	ldr	r2, [pc, #20]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ff0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	40007000 	.word	0x40007000
 8004004:	20000000 	.word	0x20000000
 8004008:	431bde83 	.word	0x431bde83

0800400c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004010:	4b05      	ldr	r3, [pc, #20]	@ (8004028 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4a04      	ldr	r2, [pc, #16]	@ (8004028 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004016:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800401a:	6093      	str	r3, [r2, #8]
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40007000 	.word	0x40007000

0800402c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e2fe      	b.n	800463c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d075      	beq.n	8004136 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800404a:	4b97      	ldr	r3, [pc, #604]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004054:	4b94      	ldr	r3, [pc, #592]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b0c      	cmp	r3, #12
 8004062:	d102      	bne.n	800406a <HAL_RCC_OscConfig+0x3e>
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b03      	cmp	r3, #3
 8004068:	d002      	beq.n	8004070 <HAL_RCC_OscConfig+0x44>
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2b08      	cmp	r3, #8
 800406e:	d10b      	bne.n	8004088 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004070:	4b8d      	ldr	r3, [pc, #564]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d05b      	beq.n	8004134 <HAL_RCC_OscConfig+0x108>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d157      	bne.n	8004134 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e2d9      	b.n	800463c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004090:	d106      	bne.n	80040a0 <HAL_RCC_OscConfig+0x74>
 8004092:	4b85      	ldr	r3, [pc, #532]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a84      	ldr	r2, [pc, #528]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 8004098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	e01d      	b.n	80040dc <HAL_RCC_OscConfig+0xb0>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x98>
 80040aa:	4b7f      	ldr	r3, [pc, #508]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a7e      	ldr	r2, [pc, #504]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 80040b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4b7c      	ldr	r3, [pc, #496]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a7b      	ldr	r2, [pc, #492]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e00b      	b.n	80040dc <HAL_RCC_OscConfig+0xb0>
 80040c4:	4b78      	ldr	r3, [pc, #480]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a77      	ldr	r2, [pc, #476]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 80040ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	4b75      	ldr	r3, [pc, #468]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a74      	ldr	r2, [pc, #464]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 80040d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d013      	beq.n	800410c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fd fe02 	bl	8001cec <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ec:	f7fd fdfe 	bl	8001cec <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b64      	cmp	r3, #100	@ 0x64
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e29e      	b.n	800463c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040fe:	4b6a      	ldr	r3, [pc, #424]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0xc0>
 800410a:	e014      	b.n	8004136 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7fd fdee 	bl	8001cec <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004114:	f7fd fdea 	bl	8001cec <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b64      	cmp	r3, #100	@ 0x64
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e28a      	b.n	800463c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004126:	4b60      	ldr	r3, [pc, #384]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0xe8>
 8004132:	e000      	b.n	8004136 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d075      	beq.n	800422e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004142:	4b59      	ldr	r3, [pc, #356]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800414c:	4b56      	ldr	r3, [pc, #344]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b0c      	cmp	r3, #12
 800415a:	d102      	bne.n	8004162 <HAL_RCC_OscConfig+0x136>
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d002      	beq.n	8004168 <HAL_RCC_OscConfig+0x13c>
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b04      	cmp	r3, #4
 8004166:	d11f      	bne.n	80041a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004168:	4b4f      	ldr	r3, [pc, #316]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_OscConfig+0x154>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e25d      	b.n	800463c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004180:	4b49      	ldr	r3, [pc, #292]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	061b      	lsls	r3, r3, #24
 800418e:	4946      	ldr	r1, [pc, #280]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 8004190:	4313      	orrs	r3, r2
 8004192:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004194:	4b45      	ldr	r3, [pc, #276]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f7fd fd5b 	bl	8001c54 <HAL_InitTick>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d043      	beq.n	800422c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e249      	b.n	800463c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d023      	beq.n	80041f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b0:	4b3d      	ldr	r3, [pc, #244]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a3c      	ldr	r2, [pc, #240]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 80041b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fd fd96 	bl	8001cec <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c4:	f7fd fd92 	bl	8001cec <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e232      	b.n	800463c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041d6:	4b34      	ldr	r3, [pc, #208]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e2:	4b31      	ldr	r3, [pc, #196]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	061b      	lsls	r3, r3, #24
 80041f0:	492d      	ldr	r1, [pc, #180]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	604b      	str	r3, [r1, #4]
 80041f6:	e01a      	b.n	800422e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041f8:	4b2b      	ldr	r3, [pc, #172]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a2a      	ldr	r2, [pc, #168]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 80041fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fd fd72 	bl	8001cec <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800420c:	f7fd fd6e 	bl	8001cec <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e20e      	b.n	800463c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800421e:	4b22      	ldr	r3, [pc, #136]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x1e0>
 800422a:	e000      	b.n	800422e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800422c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d041      	beq.n	80042be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01c      	beq.n	800427c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004242:	4b19      	ldr	r3, [pc, #100]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 8004244:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004248:	4a17      	ldr	r2, [pc, #92]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004252:	f7fd fd4b 	bl	8001cec <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425a:	f7fd fd47 	bl	8001cec <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e1e7      	b.n	800463c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800426c:	4b0e      	ldr	r3, [pc, #56]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 800426e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0ef      	beq.n	800425a <HAL_RCC_OscConfig+0x22e>
 800427a:	e020      	b.n	80042be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800427c:	4b0a      	ldr	r3, [pc, #40]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 800427e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004282:	4a09      	ldr	r2, [pc, #36]	@ (80042a8 <HAL_RCC_OscConfig+0x27c>)
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fd fd2e 	bl	8001cec <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004292:	e00d      	b.n	80042b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004294:	f7fd fd2a 	bl	8001cec <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d906      	bls.n	80042b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e1ca      	b.n	800463c <HAL_RCC_OscConfig+0x610>
 80042a6:	bf00      	nop
 80042a8:	40021000 	.word	0x40021000
 80042ac:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b0:	4b8c      	ldr	r3, [pc, #560]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 80042b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1ea      	bne.n	8004294 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 80a6 	beq.w	8004418 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042cc:	2300      	movs	r3, #0
 80042ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042d0:	4b84      	ldr	r3, [pc, #528]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 80042d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCC_OscConfig+0x2b4>
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x2b6>
 80042e0:	2300      	movs	r3, #0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00d      	beq.n	8004302 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	4b7f      	ldr	r3, [pc, #508]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 80042e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ea:	4a7e      	ldr	r2, [pc, #504]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 80042ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80042f2:	4b7c      	ldr	r3, [pc, #496]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 80042f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80042fe:	2301      	movs	r3, #1
 8004300:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004302:	4b79      	ldr	r3, [pc, #484]	@ (80044e8 <HAL_RCC_OscConfig+0x4bc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d118      	bne.n	8004340 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800430e:	4b76      	ldr	r3, [pc, #472]	@ (80044e8 <HAL_RCC_OscConfig+0x4bc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a75      	ldr	r2, [pc, #468]	@ (80044e8 <HAL_RCC_OscConfig+0x4bc>)
 8004314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800431a:	f7fd fce7 	bl	8001cec <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004322:	f7fd fce3 	bl	8001cec <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e183      	b.n	800463c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004334:	4b6c      	ldr	r3, [pc, #432]	@ (80044e8 <HAL_RCC_OscConfig+0x4bc>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d108      	bne.n	800435a <HAL_RCC_OscConfig+0x32e>
 8004348:	4b66      	ldr	r3, [pc, #408]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434e:	4a65      	ldr	r2, [pc, #404]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004358:	e024      	b.n	80043a4 <HAL_RCC_OscConfig+0x378>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	2b05      	cmp	r3, #5
 8004360:	d110      	bne.n	8004384 <HAL_RCC_OscConfig+0x358>
 8004362:	4b60      	ldr	r3, [pc, #384]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004368:	4a5e      	ldr	r2, [pc, #376]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 800436a:	f043 0304 	orr.w	r3, r3, #4
 800436e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004372:	4b5c      	ldr	r3, [pc, #368]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004378:	4a5a      	ldr	r2, [pc, #360]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 800437a:	f043 0301 	orr.w	r3, r3, #1
 800437e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004382:	e00f      	b.n	80043a4 <HAL_RCC_OscConfig+0x378>
 8004384:	4b57      	ldr	r3, [pc, #348]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438a:	4a56      	ldr	r2, [pc, #344]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004394:	4b53      	ldr	r3, [pc, #332]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439a:	4a52      	ldr	r2, [pc, #328]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 800439c:	f023 0304 	bic.w	r3, r3, #4
 80043a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d016      	beq.n	80043da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ac:	f7fd fc9e 	bl	8001cec <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043b2:	e00a      	b.n	80043ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b4:	f7fd fc9a 	bl	8001cec <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e138      	b.n	800463c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ca:	4b46      	ldr	r3, [pc, #280]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 80043cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ed      	beq.n	80043b4 <HAL_RCC_OscConfig+0x388>
 80043d8:	e015      	b.n	8004406 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043da:	f7fd fc87 	bl	8001cec <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fd fc83 	bl	8001cec <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e121      	b.n	800463c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043f8:	4b3a      	ldr	r3, [pc, #232]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1ed      	bne.n	80043e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004406:	7ffb      	ldrb	r3, [r7, #31]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d105      	bne.n	8004418 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440c:	4b35      	ldr	r3, [pc, #212]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 800440e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004410:	4a34      	ldr	r2, [pc, #208]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 8004412:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004416:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d03c      	beq.n	800449e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01c      	beq.n	8004466 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800442c:	4b2d      	ldr	r3, [pc, #180]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 800442e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004432:	4a2c      	ldr	r2, [pc, #176]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443c:	f7fd fc56 	bl	8001cec <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004444:	f7fd fc52 	bl	8001cec <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e0f2      	b.n	800463c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004456:	4b23      	ldr	r3, [pc, #140]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 8004458:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0ef      	beq.n	8004444 <HAL_RCC_OscConfig+0x418>
 8004464:	e01b      	b.n	800449e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004466:	4b1f      	ldr	r3, [pc, #124]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 8004468:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800446c:	4a1d      	ldr	r2, [pc, #116]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004476:	f7fd fc39 	bl	8001cec <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800447e:	f7fd fc35 	bl	8001cec <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e0d5      	b.n	800463c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004490:	4b14      	ldr	r3, [pc, #80]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 8004492:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1ef      	bne.n	800447e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 80c9 	beq.w	800463a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044a8:	4b0e      	ldr	r3, [pc, #56]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 030c 	and.w	r3, r3, #12
 80044b0:	2b0c      	cmp	r3, #12
 80044b2:	f000 8083 	beq.w	80045bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d15e      	bne.n	800457c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044be:	4b09      	ldr	r3, [pc, #36]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a08      	ldr	r2, [pc, #32]	@ (80044e4 <HAL_RCC_OscConfig+0x4b8>)
 80044c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ca:	f7fd fc0f 	bl	8001cec <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d0:	e00c      	b.n	80044ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d2:	f7fd fc0b 	bl	8001cec <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d905      	bls.n	80044ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e0ab      	b.n	800463c <HAL_RCC_OscConfig+0x610>
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ec:	4b55      	ldr	r3, [pc, #340]	@ (8004644 <HAL_RCC_OscConfig+0x618>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1ec      	bne.n	80044d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044f8:	4b52      	ldr	r3, [pc, #328]	@ (8004644 <HAL_RCC_OscConfig+0x618>)
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	4b52      	ldr	r3, [pc, #328]	@ (8004648 <HAL_RCC_OscConfig+0x61c>)
 80044fe:	4013      	ands	r3, r2
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6a11      	ldr	r1, [r2, #32]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004508:	3a01      	subs	r2, #1
 800450a:	0112      	lsls	r2, r2, #4
 800450c:	4311      	orrs	r1, r2
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004512:	0212      	lsls	r2, r2, #8
 8004514:	4311      	orrs	r1, r2
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800451a:	0852      	lsrs	r2, r2, #1
 800451c:	3a01      	subs	r2, #1
 800451e:	0552      	lsls	r2, r2, #21
 8004520:	4311      	orrs	r1, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004526:	0852      	lsrs	r2, r2, #1
 8004528:	3a01      	subs	r2, #1
 800452a:	0652      	lsls	r2, r2, #25
 800452c:	4311      	orrs	r1, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004532:	06d2      	lsls	r2, r2, #27
 8004534:	430a      	orrs	r2, r1
 8004536:	4943      	ldr	r1, [pc, #268]	@ (8004644 <HAL_RCC_OscConfig+0x618>)
 8004538:	4313      	orrs	r3, r2
 800453a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800453c:	4b41      	ldr	r3, [pc, #260]	@ (8004644 <HAL_RCC_OscConfig+0x618>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a40      	ldr	r2, [pc, #256]	@ (8004644 <HAL_RCC_OscConfig+0x618>)
 8004542:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004546:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004548:	4b3e      	ldr	r3, [pc, #248]	@ (8004644 <HAL_RCC_OscConfig+0x618>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4a3d      	ldr	r2, [pc, #244]	@ (8004644 <HAL_RCC_OscConfig+0x618>)
 800454e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004552:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fd fbca 	bl	8001cec <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800455c:	f7fd fbc6 	bl	8001cec <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e066      	b.n	800463c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800456e:	4b35      	ldr	r3, [pc, #212]	@ (8004644 <HAL_RCC_OscConfig+0x618>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x530>
 800457a:	e05e      	b.n	800463a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457c:	4b31      	ldr	r3, [pc, #196]	@ (8004644 <HAL_RCC_OscConfig+0x618>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a30      	ldr	r2, [pc, #192]	@ (8004644 <HAL_RCC_OscConfig+0x618>)
 8004582:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fd fbb0 	bl	8001cec <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004590:	f7fd fbac 	bl	8001cec <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e04c      	b.n	800463c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a2:	4b28      	ldr	r3, [pc, #160]	@ (8004644 <HAL_RCC_OscConfig+0x618>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80045ae:	4b25      	ldr	r3, [pc, #148]	@ (8004644 <HAL_RCC_OscConfig+0x618>)
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	4924      	ldr	r1, [pc, #144]	@ (8004644 <HAL_RCC_OscConfig+0x618>)
 80045b4:	4b25      	ldr	r3, [pc, #148]	@ (800464c <HAL_RCC_OscConfig+0x620>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	60cb      	str	r3, [r1, #12]
 80045ba:	e03e      	b.n	800463a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e039      	b.n	800463c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80045c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004644 <HAL_RCC_OscConfig+0x618>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f003 0203 	and.w	r2, r3, #3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d12c      	bne.n	8004636 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e6:	3b01      	subs	r3, #1
 80045e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d123      	bne.n	8004636 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d11b      	bne.n	8004636 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004608:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800460a:	429a      	cmp	r2, r3
 800460c:	d113      	bne.n	8004636 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	3b01      	subs	r3, #1
 800461c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800461e:	429a      	cmp	r2, r3
 8004620:	d109      	bne.n	8004636 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	3b01      	subs	r3, #1
 8004630:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004632:	429a      	cmp	r2, r3
 8004634:	d001      	beq.n	800463a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3720      	adds	r7, #32
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40021000 	.word	0x40021000
 8004648:	019f800c 	.word	0x019f800c
 800464c:	feeefffc 	.word	0xfeeefffc

08004650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e11e      	b.n	80048a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004668:	4b91      	ldr	r3, [pc, #580]	@ (80048b0 <HAL_RCC_ClockConfig+0x260>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d910      	bls.n	8004698 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004676:	4b8e      	ldr	r3, [pc, #568]	@ (80048b0 <HAL_RCC_ClockConfig+0x260>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f023 020f 	bic.w	r2, r3, #15
 800467e:	498c      	ldr	r1, [pc, #560]	@ (80048b0 <HAL_RCC_ClockConfig+0x260>)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	4313      	orrs	r3, r2
 8004684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004686:	4b8a      	ldr	r3, [pc, #552]	@ (80048b0 <HAL_RCC_ClockConfig+0x260>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	429a      	cmp	r2, r3
 8004692:	d001      	beq.n	8004698 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e106      	b.n	80048a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d073      	beq.n	800478c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d129      	bne.n	8004700 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ac:	4b81      	ldr	r3, [pc, #516]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e0f4      	b.n	80048a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80046bc:	f000 f99c 	bl	80049f8 <RCC_GetSysClockFreqFromPLLSource>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4a7c      	ldr	r2, [pc, #496]	@ (80048b8 <HAL_RCC_ClockConfig+0x268>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d93f      	bls.n	800474a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046ca:	4b7a      	ldr	r3, [pc, #488]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d009      	beq.n	80046ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d033      	beq.n	800474a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d12f      	bne.n	800474a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046ea:	4b72      	ldr	r3, [pc, #456]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046f2:	4a70      	ldr	r2, [pc, #448]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 80046f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80046fa:	2380      	movs	r3, #128	@ 0x80
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	e024      	b.n	800474a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d107      	bne.n	8004718 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004708:	4b6a      	ldr	r3, [pc, #424]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d109      	bne.n	8004728 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0c6      	b.n	80048a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004718:	4b66      	ldr	r3, [pc, #408]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0be      	b.n	80048a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004728:	f000 f8ce 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 800472c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4a61      	ldr	r2, [pc, #388]	@ (80048b8 <HAL_RCC_ClockConfig+0x268>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d909      	bls.n	800474a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004736:	4b5f      	ldr	r3, [pc, #380]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800473e:	4a5d      	ldr	r2, [pc, #372]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 8004740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004744:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004746:	2380      	movs	r3, #128	@ 0x80
 8004748:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800474a:	4b5a      	ldr	r3, [pc, #360]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f023 0203 	bic.w	r2, r3, #3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	4957      	ldr	r1, [pc, #348]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 8004758:	4313      	orrs	r3, r2
 800475a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800475c:	f7fd fac6 	bl	8001cec <HAL_GetTick>
 8004760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004762:	e00a      	b.n	800477a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004764:	f7fd fac2 	bl	8001cec <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004772:	4293      	cmp	r3, r2
 8004774:	d901      	bls.n	800477a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e095      	b.n	80048a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477a:	4b4e      	ldr	r3, [pc, #312]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 020c 	and.w	r2, r3, #12
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	429a      	cmp	r2, r3
 800478a:	d1eb      	bne.n	8004764 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d023      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047a4:	4b43      	ldr	r3, [pc, #268]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	4a42      	ldr	r2, [pc, #264]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 80047aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80047bc:	4b3d      	ldr	r3, [pc, #244]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80047c4:	4a3b      	ldr	r2, [pc, #236]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 80047c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047cc:	4b39      	ldr	r3, [pc, #228]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	4936      	ldr	r1, [pc, #216]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	608b      	str	r3, [r1, #8]
 80047de:	e008      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2b80      	cmp	r3, #128	@ 0x80
 80047e4:	d105      	bne.n	80047f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80047e6:	4b33      	ldr	r3, [pc, #204]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	4a32      	ldr	r2, [pc, #200]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 80047ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047f2:	4b2f      	ldr	r3, [pc, #188]	@ (80048b0 <HAL_RCC_ClockConfig+0x260>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d21d      	bcs.n	800483c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004800:	4b2b      	ldr	r3, [pc, #172]	@ (80048b0 <HAL_RCC_ClockConfig+0x260>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f023 020f 	bic.w	r2, r3, #15
 8004808:	4929      	ldr	r1, [pc, #164]	@ (80048b0 <HAL_RCC_ClockConfig+0x260>)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	4313      	orrs	r3, r2
 800480e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004810:	f7fd fa6c 	bl	8001cec <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004816:	e00a      	b.n	800482e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004818:	f7fd fa68 	bl	8001cec <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e03b      	b.n	80048a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800482e:	4b20      	ldr	r3, [pc, #128]	@ (80048b0 <HAL_RCC_ClockConfig+0x260>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d1ed      	bne.n	8004818 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004848:	4b1a      	ldr	r3, [pc, #104]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4917      	ldr	r1, [pc, #92]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0308 	and.w	r3, r3, #8
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004866:	4b13      	ldr	r3, [pc, #76]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	490f      	ldr	r1, [pc, #60]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 8004876:	4313      	orrs	r3, r2
 8004878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800487a:	f000 f825 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 800487e:	4602      	mov	r2, r0
 8004880:	4b0c      	ldr	r3, [pc, #48]	@ (80048b4 <HAL_RCC_ClockConfig+0x264>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	091b      	lsrs	r3, r3, #4
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	490c      	ldr	r1, [pc, #48]	@ (80048bc <HAL_RCC_ClockConfig+0x26c>)
 800488c:	5ccb      	ldrb	r3, [r1, r3]
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	fa22 f303 	lsr.w	r3, r2, r3
 8004896:	4a0a      	ldr	r2, [pc, #40]	@ (80048c0 <HAL_RCC_ClockConfig+0x270>)
 8004898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800489a:	4b0a      	ldr	r3, [pc, #40]	@ (80048c4 <HAL_RCC_ClockConfig+0x274>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fd f9d8 	bl	8001c54 <HAL_InitTick>
 80048a4:	4603      	mov	r3, r0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40022000 	.word	0x40022000
 80048b4:	40021000 	.word	0x40021000
 80048b8:	04c4b400 	.word	0x04c4b400
 80048bc:	08009050 	.word	0x08009050
 80048c0:	20000000 	.word	0x20000000
 80048c4:	20000004 	.word	0x20000004

080048c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80048ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004980 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d102      	bne.n	80048e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048da:	4b2a      	ldr	r3, [pc, #168]	@ (8004984 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	e047      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80048e0:	4b27      	ldr	r3, [pc, #156]	@ (8004980 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 030c 	and.w	r3, r3, #12
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d102      	bne.n	80048f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048ec:	4b25      	ldr	r3, [pc, #148]	@ (8004984 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	e03e      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80048f2:	4b23      	ldr	r3, [pc, #140]	@ (8004980 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b0c      	cmp	r3, #12
 80048fc:	d136      	bne.n	800496c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048fe:	4b20      	ldr	r3, [pc, #128]	@ (8004980 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004908:	4b1d      	ldr	r3, [pc, #116]	@ (8004980 <HAL_RCC_GetSysClockFreq+0xb8>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	3301      	adds	r3, #1
 8004914:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b03      	cmp	r3, #3
 800491a:	d10c      	bne.n	8004936 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800491c:	4a19      	ldr	r2, [pc, #100]	@ (8004984 <HAL_RCC_GetSysClockFreq+0xbc>)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	4a16      	ldr	r2, [pc, #88]	@ (8004980 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004926:	68d2      	ldr	r2, [r2, #12]
 8004928:	0a12      	lsrs	r2, r2, #8
 800492a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	617b      	str	r3, [r7, #20]
      break;
 8004934:	e00c      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004936:	4a13      	ldr	r2, [pc, #76]	@ (8004984 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	fbb2 f3f3 	udiv	r3, r2, r3
 800493e:	4a10      	ldr	r2, [pc, #64]	@ (8004980 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004940:	68d2      	ldr	r2, [r2, #12]
 8004942:	0a12      	lsrs	r2, r2, #8
 8004944:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004948:	fb02 f303 	mul.w	r3, r2, r3
 800494c:	617b      	str	r3, [r7, #20]
      break;
 800494e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004950:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	0e5b      	lsrs	r3, r3, #25
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	3301      	adds	r3, #1
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	e001      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004970:	693b      	ldr	r3, [r7, #16]
}
 8004972:	4618      	mov	r0, r3
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40021000 	.word	0x40021000
 8004984:	00f42400 	.word	0x00f42400

08004988 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800498c:	4b03      	ldr	r3, [pc, #12]	@ (800499c <HAL_RCC_GetHCLKFreq+0x14>)
 800498e:	681b      	ldr	r3, [r3, #0]
}
 8004990:	4618      	mov	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	20000000 	.word	0x20000000

080049a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049a4:	f7ff fff0 	bl	8004988 <HAL_RCC_GetHCLKFreq>
 80049a8:	4602      	mov	r2, r0
 80049aa:	4b06      	ldr	r3, [pc, #24]	@ (80049c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	0a1b      	lsrs	r3, r3, #8
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	4904      	ldr	r1, [pc, #16]	@ (80049c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049b6:	5ccb      	ldrb	r3, [r1, r3]
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40021000 	.word	0x40021000
 80049c8:	08009060 	.word	0x08009060

080049cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049d0:	f7ff ffda 	bl	8004988 <HAL_RCC_GetHCLKFreq>
 80049d4:	4602      	mov	r2, r0
 80049d6:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	0adb      	lsrs	r3, r3, #11
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	4904      	ldr	r1, [pc, #16]	@ (80049f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049e2:	5ccb      	ldrb	r3, [r1, r3]
 80049e4:	f003 031f 	and.w	r3, r3, #31
 80049e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40021000 	.word	0x40021000
 80049f4:	08009060 	.word	0x08009060

080049f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004a78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a08:	4b1b      	ldr	r3, [pc, #108]	@ (8004a78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	3301      	adds	r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d10c      	bne.n	8004a36 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a1c:	4a17      	ldr	r2, [pc, #92]	@ (8004a7c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a24:	4a14      	ldr	r2, [pc, #80]	@ (8004a78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a26:	68d2      	ldr	r2, [r2, #12]
 8004a28:	0a12      	lsrs	r2, r2, #8
 8004a2a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a2e:	fb02 f303 	mul.w	r3, r2, r3
 8004a32:	617b      	str	r3, [r7, #20]
    break;
 8004a34:	e00c      	b.n	8004a50 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a36:	4a11      	ldr	r2, [pc, #68]	@ (8004a7c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8004a78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a40:	68d2      	ldr	r2, [r2, #12]
 8004a42:	0a12      	lsrs	r2, r2, #8
 8004a44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	617b      	str	r3, [r7, #20]
    break;
 8004a4e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a50:	4b09      	ldr	r3, [pc, #36]	@ (8004a78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	0e5b      	lsrs	r3, r3, #25
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a68:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004a6a:	687b      	ldr	r3, [r7, #4]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	00f42400 	.word	0x00f42400

08004a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a88:	2300      	movs	r3, #0
 8004a8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8098 	beq.w	8004bce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aa2:	4b43      	ldr	r3, [pc, #268]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10d      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aae:	4b40      	ldr	r3, [pc, #256]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab2:	4a3f      	ldr	r2, [pc, #252]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ab8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aba:	4b3d      	ldr	r3, [pc, #244]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ac2:	60bb      	str	r3, [r7, #8]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aca:	4b3a      	ldr	r3, [pc, #232]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a39      	ldr	r2, [pc, #228]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ad4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ad6:	f7fd f909 	bl	8001cec <HAL_GetTick>
 8004ada:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004adc:	e009      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ade:	f7fd f905 	bl	8001cec <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d902      	bls.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	74fb      	strb	r3, [r7, #19]
        break;
 8004af0:	e005      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004af2:	4b30      	ldr	r3, [pc, #192]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0ef      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004afe:	7cfb      	ldrb	r3, [r7, #19]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d159      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b04:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d01e      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d019      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b20:	4b23      	ldr	r3, [pc, #140]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b2c:	4b20      	ldr	r3, [pc, #128]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b32:	4a1f      	ldr	r2, [pc, #124]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b42:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b4c:	4a18      	ldr	r2, [pc, #96]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d016      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7fd f8c5 	bl	8001cec <HAL_GetTick>
 8004b62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b64:	e00b      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b66:	f7fd f8c1 	bl	8001cec <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d902      	bls.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	74fb      	strb	r3, [r7, #19]
            break;
 8004b7c:	e006      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0ec      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004b8c:	7cfb      	ldrb	r3, [r7, #19]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10b      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b92:	4b07      	ldr	r3, [pc, #28]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba0:	4903      	ldr	r1, [pc, #12]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ba8:	e008      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004baa:	7cfb      	ldrb	r3, [r7, #19]
 8004bac:	74bb      	strb	r3, [r7, #18]
 8004bae:	e005      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	7cfb      	ldrb	r3, [r7, #19]
 8004bba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bbc:	7c7b      	ldrb	r3, [r7, #17]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d105      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc2:	4ba6      	ldr	r3, [pc, #664]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc6:	4aa5      	ldr	r2, [pc, #660]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bcc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bda:	4ba0      	ldr	r3, [pc, #640]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be0:	f023 0203 	bic.w	r2, r3, #3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	499c      	ldr	r1, [pc, #624]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bfc:	4b97      	ldr	r3, [pc, #604]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c02:	f023 020c 	bic.w	r2, r3, #12
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	4994      	ldr	r1, [pc, #592]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c1e:	4b8f      	ldr	r3, [pc, #572]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	498b      	ldr	r1, [pc, #556]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c40:	4b86      	ldr	r3, [pc, #536]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	4983      	ldr	r1, [pc, #524]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c62:	4b7e      	ldr	r3, [pc, #504]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	497a      	ldr	r1, [pc, #488]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c84:	4b75      	ldr	r3, [pc, #468]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	4972      	ldr	r1, [pc, #456]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ca6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	4969      	ldr	r1, [pc, #420]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cc8:	4b64      	ldr	r3, [pc, #400]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cce:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	4961      	ldr	r1, [pc, #388]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cea:	4b5c      	ldr	r3, [pc, #368]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf8:	4958      	ldr	r1, [pc, #352]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d015      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d0c:	4b53      	ldr	r3, [pc, #332]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1a:	4950      	ldr	r1, [pc, #320]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d2a:	d105      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4a4a      	ldr	r2, [pc, #296]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d36:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d015      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d44:	4b45      	ldr	r3, [pc, #276]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d52:	4942      	ldr	r1, [pc, #264]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d62:	d105      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d64:	4b3d      	ldr	r3, [pc, #244]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4a3c      	ldr	r2, [pc, #240]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d6e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d015      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d7c:	4b37      	ldr	r3, [pc, #220]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d82:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8a:	4934      	ldr	r1, [pc, #208]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d9a:	d105      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	4a2e      	ldr	r2, [pc, #184]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004da6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d015      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004db4:	4b29      	ldr	r3, [pc, #164]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc2:	4926      	ldr	r1, [pc, #152]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dd2:	d105      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd4:	4b21      	ldr	r3, [pc, #132]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4a20      	ldr	r2, [pc, #128]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dde:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d015      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dec:	4b1b      	ldr	r3, [pc, #108]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfa:	4918      	ldr	r1, [pc, #96]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e0a:	d105      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e0c:	4b13      	ldr	r3, [pc, #76]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4a12      	ldr	r2, [pc, #72]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d015      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e24:	4b0d      	ldr	r3, [pc, #52]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e32:	490a      	ldr	r1, [pc, #40]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e42:	d105      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e44:	4b05      	ldr	r3, [pc, #20]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	4a04      	ldr	r2, [pc, #16]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004e50:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40021000 	.word	0x40021000

08004e60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e09d      	b.n	8004fae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d108      	bne.n	8004e8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e82:	d009      	beq.n	8004e98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	61da      	str	r2, [r3, #28]
 8004e8a:	e005      	b.n	8004e98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fc f88e 	bl	8000fd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ece:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ed8:	d902      	bls.n	8004ee0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	e002      	b.n	8004ee6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ee0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ee4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004eee:	d007      	beq.n	8004f00 <HAL_SPI_Init+0xa0>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ef8:	d002      	beq.n	8004f00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f42:	ea42 0103 	orr.w	r1, r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	0c1b      	lsrs	r3, r3, #16
 8004f5c:	f003 0204 	and.w	r2, r3, #4
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f64:	f003 0310 	and.w	r3, r3, #16
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004f7c:	ea42 0103 	orr.w	r1, r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b088      	sub	sp, #32
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	603b      	str	r3, [r7, #0]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fc6:	f7fc fe91 	bl	8001cec <HAL_GetTick>
 8004fca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004fcc:	88fb      	ldrh	r3, [r7, #6]
 8004fce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d001      	beq.n	8004fe0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e15c      	b.n	800529a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <HAL_SPI_Transmit+0x36>
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e154      	b.n	800529a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_SPI_Transmit+0x48>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e14d      	b.n	800529a <HAL_SPI_Transmit+0x2e4>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2203      	movs	r2, #3
 800500a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	88fa      	ldrh	r2, [r7, #6]
 800501e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005050:	d10f      	bne.n	8005072 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005060:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005070:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800507c:	2b40      	cmp	r3, #64	@ 0x40
 800507e:	d007      	beq.n	8005090 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800508e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005098:	d952      	bls.n	8005140 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_SPI_Transmit+0xf2>
 80050a2:	8b7b      	ldrh	r3, [r7, #26]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d145      	bne.n	8005134 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ac:	881a      	ldrh	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b8:	1c9a      	adds	r2, r3, #2
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050cc:	e032      	b.n	8005134 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d112      	bne.n	8005102 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e0:	881a      	ldrh	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ec:	1c9a      	adds	r2, r3, #2
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005100:	e018      	b.n	8005134 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005102:	f7fc fdf3 	bl	8001cec <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d803      	bhi.n	800511a <HAL_SPI_Transmit+0x164>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005118:	d102      	bne.n	8005120 <HAL_SPI_Transmit+0x16a>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d109      	bne.n	8005134 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e0b2      	b.n	800529a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1c7      	bne.n	80050ce <HAL_SPI_Transmit+0x118>
 800513e:	e083      	b.n	8005248 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_SPI_Transmit+0x198>
 8005148:	8b7b      	ldrh	r3, [r7, #26]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d177      	bne.n	800523e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	d912      	bls.n	800517e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515c:	881a      	ldrh	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005168:	1c9a      	adds	r2, r3, #2
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b02      	subs	r3, #2
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800517c:	e05f      	b.n	800523e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	330c      	adds	r3, #12
 8005188:	7812      	ldrb	r2, [r2, #0]
 800518a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80051a4:	e04b      	b.n	800523e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d12b      	bne.n	800520c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d912      	bls.n	80051e4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c2:	881a      	ldrh	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ce:	1c9a      	adds	r2, r3, #2
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b02      	subs	r3, #2
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051e2:	e02c      	b.n	800523e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	7812      	ldrb	r2, [r2, #0]
 80051f0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005200:	b29b      	uxth	r3, r3
 8005202:	3b01      	subs	r3, #1
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800520a:	e018      	b.n	800523e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800520c:	f7fc fd6e 	bl	8001cec <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d803      	bhi.n	8005224 <HAL_SPI_Transmit+0x26e>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005222:	d102      	bne.n	800522a <HAL_SPI_Transmit+0x274>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e02d      	b.n	800529a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1ae      	bne.n	80051a6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005248:	69fa      	ldr	r2, [r7, #28]
 800524a:	6839      	ldr	r1, [r7, #0]
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 fcf5 	bl	8005c3c <SPI_EndRxTxTransaction>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10a      	bne.n	800527c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005298:	2300      	movs	r3, #0
  }
}
 800529a:	4618      	mov	r0, r3
 800529c:	3720      	adds	r7, #32
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b088      	sub	sp, #32
 80052a6:	af02      	add	r7, sp, #8
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	603b      	str	r3, [r7, #0]
 80052ae:	4613      	mov	r3, r2
 80052b0:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d001      	beq.n	80052c2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80052be:	2302      	movs	r3, #2
 80052c0:	e123      	b.n	800550a <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <HAL_SPI_Receive+0x2c>
 80052c8:	88fb      	ldrh	r3, [r7, #6]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e11b      	b.n	800550a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052da:	d112      	bne.n	8005302 <HAL_SPI_Receive+0x60>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10e      	bne.n	8005302 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2204      	movs	r2, #4
 80052e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052ec:	88fa      	ldrh	r2, [r7, #6]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	4613      	mov	r3, r2
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	68b9      	ldr	r1, [r7, #8]
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 f90a 	bl	8005512 <HAL_SPI_TransmitReceive>
 80052fe:	4603      	mov	r3, r0
 8005300:	e103      	b.n	800550a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005302:	f7fc fcf3 	bl	8001cec <HAL_GetTick>
 8005306:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_SPI_Receive+0x74>
 8005312:	2302      	movs	r3, #2
 8005314:	e0f9      	b.n	800550a <HAL_SPI_Receive+0x268>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2204      	movs	r2, #4
 8005322:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	88fa      	ldrh	r2, [r7, #6]
 8005336:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	88fa      	ldrh	r2, [r7, #6]
 800533e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005368:	d908      	bls.n	800537c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	e007      	b.n	800538c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800538a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005394:	d10f      	bne.n	80053b6 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80053b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c0:	2b40      	cmp	r3, #64	@ 0x40
 80053c2:	d007      	beq.n	80053d4 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053dc:	d875      	bhi.n	80054ca <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053de:	e037      	b.n	8005450 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d117      	bne.n	800541e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f103 020c 	add.w	r2, r3, #12
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fa:	7812      	ldrb	r2, [r2, #0]
 80053fc:	b2d2      	uxtb	r2, r2
 80053fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b01      	subs	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800541c:	e018      	b.n	8005450 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800541e:	f7fc fc65 	bl	8001cec <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d803      	bhi.n	8005436 <HAL_SPI_Receive+0x194>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005434:	d102      	bne.n	800543c <HAL_SPI_Receive+0x19a>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d109      	bne.n	8005450 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e05c      	b.n	800550a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1c1      	bne.n	80053e0 <HAL_SPI_Receive+0x13e>
 800545c:	e03b      	b.n	80054d6 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b01      	cmp	r3, #1
 800546a:	d115      	bne.n	8005498 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005476:	b292      	uxth	r2, r2
 8005478:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547e:	1c9a      	adds	r2, r3, #2
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005496:	e018      	b.n	80054ca <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005498:	f7fc fc28 	bl	8001cec <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d803      	bhi.n	80054b0 <HAL_SPI_Receive+0x20e>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054ae:	d102      	bne.n	80054b6 <HAL_SPI_Receive+0x214>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d109      	bne.n	80054ca <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e01f      	b.n	800550a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1c3      	bne.n	800545e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fb56 	bl	8005b8c <SPI_EndRxTransaction>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2220      	movs	r2, #32
 80054ea:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8005508:	2300      	movs	r3, #0
  }
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b08a      	sub	sp, #40	@ 0x28
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	607a      	str	r2, [r7, #4]
 800551e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005520:	2301      	movs	r3, #1
 8005522:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005524:	f7fc fbe2 	bl	8001cec <HAL_GetTick>
 8005528:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005530:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005538:	887b      	ldrh	r3, [r7, #2]
 800553a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800553c:	887b      	ldrh	r3, [r7, #2]
 800553e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005540:	7ffb      	ldrb	r3, [r7, #31]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d00c      	beq.n	8005560 <HAL_SPI_TransmitReceive+0x4e>
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800554c:	d106      	bne.n	800555c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d102      	bne.n	800555c <HAL_SPI_TransmitReceive+0x4a>
 8005556:	7ffb      	ldrb	r3, [r7, #31]
 8005558:	2b04      	cmp	r3, #4
 800555a:	d001      	beq.n	8005560 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800555c:	2302      	movs	r3, #2
 800555e:	e1f3      	b.n	8005948 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d005      	beq.n	8005572 <HAL_SPI_TransmitReceive+0x60>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <HAL_SPI_TransmitReceive+0x60>
 800556c:	887b      	ldrh	r3, [r7, #2]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e1e8      	b.n	8005948 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_SPI_TransmitReceive+0x72>
 8005580:	2302      	movs	r3, #2
 8005582:	e1e1      	b.n	8005948 <HAL_SPI_TransmitReceive+0x436>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b04      	cmp	r3, #4
 8005596:	d003      	beq.n	80055a0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2205      	movs	r2, #5
 800559c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	887a      	ldrh	r2, [r7, #2]
 80055b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	887a      	ldrh	r2, [r7, #2]
 80055b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	887a      	ldrh	r2, [r7, #2]
 80055c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	887a      	ldrh	r2, [r7, #2]
 80055cc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055e2:	d802      	bhi.n	80055ea <HAL_SPI_TransmitReceive+0xd8>
 80055e4:	8abb      	ldrh	r3, [r7, #20]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d908      	bls.n	80055fc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055f8:	605a      	str	r2, [r3, #4]
 80055fa:	e007      	b.n	800560c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800560a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005616:	2b40      	cmp	r3, #64	@ 0x40
 8005618:	d007      	beq.n	800562a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005628:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005632:	f240 8083 	bls.w	800573c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_SPI_TransmitReceive+0x132>
 800563e:	8afb      	ldrh	r3, [r7, #22]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d16f      	bne.n	8005724 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005648:	881a      	ldrh	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005654:	1c9a      	adds	r2, r3, #2
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800565e:	b29b      	uxth	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005668:	e05c      	b.n	8005724 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b02      	cmp	r3, #2
 8005676:	d11b      	bne.n	80056b0 <HAL_SPI_TransmitReceive+0x19e>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d016      	beq.n	80056b0 <HAL_SPI_TransmitReceive+0x19e>
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	2b01      	cmp	r3, #1
 8005686:	d113      	bne.n	80056b0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568c:	881a      	ldrh	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005698:	1c9a      	adds	r2, r3, #2
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d11c      	bne.n	80056f8 <HAL_SPI_TransmitReceive+0x1e6>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d016      	beq.n	80056f8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d4:	b292      	uxth	r2, r2
 80056d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056dc:	1c9a      	adds	r2, r3, #2
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056f4:	2301      	movs	r3, #1
 80056f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056f8:	f7fc faf8 	bl	8001cec <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005704:	429a      	cmp	r2, r3
 8005706:	d80d      	bhi.n	8005724 <HAL_SPI_TransmitReceive+0x212>
 8005708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800570e:	d009      	beq.n	8005724 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e111      	b.n	8005948 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d19d      	bne.n	800566a <HAL_SPI_TransmitReceive+0x158>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d197      	bne.n	800566a <HAL_SPI_TransmitReceive+0x158>
 800573a:	e0e5      	b.n	8005908 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_SPI_TransmitReceive+0x23a>
 8005744:	8afb      	ldrh	r3, [r7, #22]
 8005746:	2b01      	cmp	r3, #1
 8005748:	f040 80d1 	bne.w	80058ee <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b01      	cmp	r3, #1
 8005754:	d912      	bls.n	800577c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575a:	881a      	ldrh	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005766:	1c9a      	adds	r2, r3, #2
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005770:	b29b      	uxth	r3, r3
 8005772:	3b02      	subs	r3, #2
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800577a:	e0b8      	b.n	80058ee <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	330c      	adds	r3, #12
 8005786:	7812      	ldrb	r2, [r2, #0]
 8005788:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057a2:	e0a4      	b.n	80058ee <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d134      	bne.n	800581c <HAL_SPI_TransmitReceive+0x30a>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d02f      	beq.n	800581c <HAL_SPI_TransmitReceive+0x30a>
 80057bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d12c      	bne.n	800581c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d912      	bls.n	80057f2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d0:	881a      	ldrh	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057dc:	1c9a      	adds	r2, r3, #2
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	3b02      	subs	r3, #2
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057f0:	e012      	b.n	8005818 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	330c      	adds	r3, #12
 80057fc:	7812      	ldrb	r2, [r2, #0]
 80057fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800580e:	b29b      	uxth	r3, r3
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b01      	cmp	r3, #1
 8005828:	d148      	bne.n	80058bc <HAL_SPI_TransmitReceive+0x3aa>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d042      	beq.n	80058bc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b01      	cmp	r3, #1
 8005840:	d923      	bls.n	800588a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584c:	b292      	uxth	r2, r2
 800584e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005854:	1c9a      	adds	r2, r3, #2
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005860:	b29b      	uxth	r3, r3
 8005862:	3b02      	subs	r3, #2
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b01      	cmp	r3, #1
 8005876:	d81f      	bhi.n	80058b8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005886:	605a      	str	r2, [r3, #4]
 8005888:	e016      	b.n	80058b8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f103 020c 	add.w	r2, r3, #12
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005896:	7812      	ldrb	r2, [r2, #0]
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058b8:	2301      	movs	r3, #1
 80058ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058bc:	f7fc fa16 	bl	8001cec <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d803      	bhi.n	80058d4 <HAL_SPI_TransmitReceive+0x3c2>
 80058cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058d2:	d102      	bne.n	80058da <HAL_SPI_TransmitReceive+0x3c8>
 80058d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e02c      	b.n	8005948 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f47f af55 	bne.w	80057a4 <HAL_SPI_TransmitReceive+0x292>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	f47f af4e 	bne.w	80057a4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005908:	6a3a      	ldr	r2, [r7, #32]
 800590a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f995 	bl	8005c3c <SPI_EndRxTxTransaction>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d008      	beq.n	800592a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2220      	movs	r2, #32
 800591c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e00e      	b.n	8005948 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005946:	2300      	movs	r3, #0
  }
}
 8005948:	4618      	mov	r0, r3
 800594a:	3728      	adds	r7, #40	@ 0x28
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	4613      	mov	r3, r2
 800595e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005960:	f7fc f9c4 	bl	8001cec <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005968:	1a9b      	subs	r3, r3, r2
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	4413      	add	r3, r2
 800596e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005970:	f7fc f9bc 	bl	8001cec <HAL_GetTick>
 8005974:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005976:	4b39      	ldr	r3, [pc, #228]	@ (8005a5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	015b      	lsls	r3, r3, #5
 800597c:	0d1b      	lsrs	r3, r3, #20
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	fb02 f303 	mul.w	r3, r2, r3
 8005984:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005986:	e054      	b.n	8005a32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800598e:	d050      	beq.n	8005a32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005990:	f7fc f9ac 	bl	8001cec <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	69fa      	ldr	r2, [r7, #28]
 800599c:	429a      	cmp	r2, r3
 800599e:	d902      	bls.n	80059a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d13d      	bne.n	8005a22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80059b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059be:	d111      	bne.n	80059e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059c8:	d004      	beq.n	80059d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059d2:	d107      	bne.n	80059e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059ec:	d10f      	bne.n	8005a0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e017      	b.n	8005a52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	bf0c      	ite	eq
 8005a42:	2301      	moveq	r3, #1
 8005a44:	2300      	movne	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	79fb      	ldrb	r3, [r7, #7]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d19b      	bne.n	8005988 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3720      	adds	r7, #32
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000000 	.word	0x20000000

08005a60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	@ 0x28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a72:	f7fc f93b 	bl	8001cec <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7a:	1a9b      	subs	r3, r3, r2
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	4413      	add	r3, r2
 8005a80:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005a82:	f7fc f933 	bl	8001cec <HAL_GetTick>
 8005a86:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	330c      	adds	r3, #12
 8005a8e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a90:	4b3d      	ldr	r3, [pc, #244]	@ (8005b88 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	4613      	mov	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	00da      	lsls	r2, r3, #3
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	0d1b      	lsrs	r3, r3, #20
 8005aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aa2:	fb02 f303 	mul.w	r3, r2, r3
 8005aa6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005aa8:	e060      	b.n	8005b6c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ab0:	d107      	bne.n	8005ac2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d104      	bne.n	8005ac2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ac8:	d050      	beq.n	8005b6c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005aca:	f7fc f90f 	bl	8001cec <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d902      	bls.n	8005ae0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d13d      	bne.n	8005b5c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005aee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005af8:	d111      	bne.n	8005b1e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b02:	d004      	beq.n	8005b0e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b0c:	d107      	bne.n	8005b1e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b26:	d10f      	bne.n	8005b48 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e010      	b.n	8005b7e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	4013      	ands	r3, r2
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d196      	bne.n	8005aaa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3728      	adds	r7, #40	@ 0x28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000000 	.word	0x20000000

08005b8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af02      	add	r7, sp, #8
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ba0:	d111      	bne.n	8005bc6 <SPI_EndRxTransaction+0x3a>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005baa:	d004      	beq.n	8005bb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb4:	d107      	bne.n	8005bc6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bc4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2180      	movs	r1, #128	@ 0x80
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f7ff febd 	bl	8005950 <SPI_WaitFlagStateUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005be0:	f043 0220 	orr.w	r2, r3, #32
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e023      	b.n	8005c34 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bf4:	d11d      	bne.n	8005c32 <SPI_EndRxTransaction+0xa6>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bfe:	d004      	beq.n	8005c0a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c08:	d113      	bne.n	8005c32 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7ff ff22 	bl	8005a60 <SPI_WaitFifoStateUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d007      	beq.n	8005c32 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c26:	f043 0220 	orr.w	r2, r3, #32
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e000      	b.n	8005c34 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f7ff ff03 	bl	8005a60 <SPI_WaitFifoStateUntilTimeout>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d007      	beq.n	8005c70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c64:	f043 0220 	orr.w	r2, r3, #32
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e027      	b.n	8005cc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2200      	movs	r2, #0
 8005c78:	2180      	movs	r1, #128	@ 0x80
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f7ff fe68 	bl	8005950 <SPI_WaitFlagStateUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d007      	beq.n	8005c96 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c8a:	f043 0220 	orr.w	r2, r3, #32
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e014      	b.n	8005cc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f7ff fedc 	bl	8005a60 <SPI_WaitFifoStateUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d007      	beq.n	8005cbe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cb2:	f043 0220 	orr.w	r2, r3, #32
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e000      	b.n	8005cc0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e049      	b.n	8005d6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fb fd18 	bl	8001724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3304      	adds	r3, #4
 8005d04:	4619      	mov	r1, r3
 8005d06:	4610      	mov	r0, r2
 8005d08:	f000 fd2e 	bl	8006768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d001      	beq.n	8005d90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e042      	b.n	8005e16 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a21      	ldr	r2, [pc, #132]	@ (8005e24 <HAL_TIM_Base_Start+0xac>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d018      	beq.n	8005dd4 <HAL_TIM_Base_Start+0x5c>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005daa:	d013      	beq.n	8005dd4 <HAL_TIM_Base_Start+0x5c>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e28 <HAL_TIM_Base_Start+0xb0>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00e      	beq.n	8005dd4 <HAL_TIM_Base_Start+0x5c>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a1c      	ldr	r2, [pc, #112]	@ (8005e2c <HAL_TIM_Base_Start+0xb4>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d009      	beq.n	8005dd4 <HAL_TIM_Base_Start+0x5c>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1a      	ldr	r2, [pc, #104]	@ (8005e30 <HAL_TIM_Base_Start+0xb8>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d004      	beq.n	8005dd4 <HAL_TIM_Base_Start+0x5c>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a19      	ldr	r2, [pc, #100]	@ (8005e34 <HAL_TIM_Base_Start+0xbc>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d115      	bne.n	8005e00 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	4b17      	ldr	r3, [pc, #92]	@ (8005e38 <HAL_TIM_Base_Start+0xc0>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b06      	cmp	r3, #6
 8005de4:	d015      	beq.n	8005e12 <HAL_TIM_Base_Start+0x9a>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dec:	d011      	beq.n	8005e12 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0201 	orr.w	r2, r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfe:	e008      	b.n	8005e12 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	e000      	b.n	8005e14 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40012c00 	.word	0x40012c00
 8005e28:	40000400 	.word	0x40000400
 8005e2c:	40000800 	.word	0x40000800
 8005e30:	40013400 	.word	0x40013400
 8005e34:	40014000 	.word	0x40014000
 8005e38:	00010007 	.word	0x00010007

08005e3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e049      	b.n	8005ee2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f841 	bl	8005eea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3304      	adds	r3, #4
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	f000 fc74 	bl	8006768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b086      	sub	sp, #24
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e097      	b.n	8006042 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fb fc5e 	bl	80017e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6812      	ldr	r2, [r2, #0]
 8005f3e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005f42:	f023 0307 	bic.w	r3, r3, #7
 8005f46:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4619      	mov	r1, r3
 8005f52:	4610      	mov	r0, r2
 8005f54:	f000 fc08 	bl	8006768 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f80:	f023 0303 	bic.w	r3, r3, #3
 8005f84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	021b      	lsls	r3, r3, #8
 8005f90:	4313      	orrs	r3, r2
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005f9e:	f023 030c 	bic.w	r3, r3, #12
 8005fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005faa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	011a      	lsls	r2, r3, #4
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	031b      	lsls	r3, r3, #12
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005fdc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005fe4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b084      	sub	sp, #16
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b00      	cmp	r3, #0
 800606a:	d020      	beq.n	80060ae <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d01b      	beq.n	80060ae <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f06f 0202 	mvn.w	r2, #2
 800607e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fb49 	bl	800672c <HAL_TIM_IC_CaptureCallback>
 800609a:	e005      	b.n	80060a8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fb3b 	bl	8006718 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fb4c 	bl	8006740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d020      	beq.n	80060fa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f003 0304 	and.w	r3, r3, #4
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d01b      	beq.n	80060fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f06f 0204 	mvn.w	r2, #4
 80060ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fb23 	bl	800672c <HAL_TIM_IC_CaptureCallback>
 80060e6:	e005      	b.n	80060f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fb15 	bl	8006718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fb26 	bl	8006740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b00      	cmp	r3, #0
 8006102:	d020      	beq.n	8006146 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d01b      	beq.n	8006146 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f06f 0208 	mvn.w	r2, #8
 8006116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2204      	movs	r2, #4
 800611c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	f003 0303 	and.w	r3, r3, #3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fafd 	bl	800672c <HAL_TIM_IC_CaptureCallback>
 8006132:	e005      	b.n	8006140 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 faef 	bl	8006718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fb00 	bl	8006740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	2b00      	cmp	r3, #0
 800614e:	d020      	beq.n	8006192 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f003 0310 	and.w	r3, r3, #16
 8006156:	2b00      	cmp	r3, #0
 8006158:	d01b      	beq.n	8006192 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f06f 0210 	mvn.w	r2, #16
 8006162:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2208      	movs	r2, #8
 8006168:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fad7 	bl	800672c <HAL_TIM_IC_CaptureCallback>
 800617e:	e005      	b.n	800618c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fac9 	bl	8006718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fada 	bl	8006740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00c      	beq.n	80061b6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d007      	beq.n	80061b6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f06f 0201 	mvn.w	r2, #1
 80061ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 faa7 	bl	8006704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00c      	beq.n	80061e4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d007      	beq.n	80061e4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80061dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 f808 	bl	80071f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00c      	beq.n	8006208 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d007      	beq.n	8006208 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f001 f800 	bl	8007208 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00c      	beq.n	800622c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006218:	2b00      	cmp	r3, #0
 800621a:	d007      	beq.n	800622c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fa94 	bl	8006754 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00c      	beq.n	8006250 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f003 0320 	and.w	r3, r3, #32
 800623c:	2b00      	cmp	r3, #0
 800623e:	d007      	beq.n	8006250 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f06f 0220 	mvn.w	r2, #32
 8006248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 ffc8 	bl	80071e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00c      	beq.n	8006274 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d007      	beq.n	8006274 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800626c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 ffd4 	bl	800721c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00c      	beq.n	8006298 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d007      	beq.n	8006298 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 ffcc 	bl	8007230 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00c      	beq.n	80062bc <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80062b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 ffc4 	bl	8007244 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00c      	beq.n	80062e0 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80062d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 ffbc 	bl	8007258 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062e0:	bf00      	nop
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006302:	2302      	movs	r3, #2
 8006304:	e0ff      	b.n	8006506 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b14      	cmp	r3, #20
 8006312:	f200 80f0 	bhi.w	80064f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006316:	a201      	add	r2, pc, #4	@ (adr r2, 800631c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631c:	08006371 	.word	0x08006371
 8006320:	080064f7 	.word	0x080064f7
 8006324:	080064f7 	.word	0x080064f7
 8006328:	080064f7 	.word	0x080064f7
 800632c:	080063b1 	.word	0x080063b1
 8006330:	080064f7 	.word	0x080064f7
 8006334:	080064f7 	.word	0x080064f7
 8006338:	080064f7 	.word	0x080064f7
 800633c:	080063f3 	.word	0x080063f3
 8006340:	080064f7 	.word	0x080064f7
 8006344:	080064f7 	.word	0x080064f7
 8006348:	080064f7 	.word	0x080064f7
 800634c:	08006433 	.word	0x08006433
 8006350:	080064f7 	.word	0x080064f7
 8006354:	080064f7 	.word	0x080064f7
 8006358:	080064f7 	.word	0x080064f7
 800635c:	08006475 	.word	0x08006475
 8006360:	080064f7 	.word	0x080064f7
 8006364:	080064f7 	.word	0x080064f7
 8006368:	080064f7 	.word	0x080064f7
 800636c:	080064b5 	.word	0x080064b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68b9      	ldr	r1, [r7, #8]
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fa92 	bl	80068a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0208 	orr.w	r2, r2, #8
 800638a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699a      	ldr	r2, [r3, #24]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0204 	bic.w	r2, r2, #4
 800639a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6999      	ldr	r1, [r3, #24]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	691a      	ldr	r2, [r3, #16]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	619a      	str	r2, [r3, #24]
      break;
 80063ae:	e0a5      	b.n	80064fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 fb02 	bl	80069c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699a      	ldr	r2, [r3, #24]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6999      	ldr	r1, [r3, #24]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	021a      	lsls	r2, r3, #8
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	619a      	str	r2, [r3, #24]
      break;
 80063f0:	e084      	b.n	80064fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68b9      	ldr	r1, [r7, #8]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 fb6b 	bl	8006ad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69da      	ldr	r2, [r3, #28]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0208 	orr.w	r2, r2, #8
 800640c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69da      	ldr	r2, [r3, #28]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0204 	bic.w	r2, r2, #4
 800641c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69d9      	ldr	r1, [r3, #28]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	691a      	ldr	r2, [r3, #16]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	61da      	str	r2, [r3, #28]
      break;
 8006430:	e064      	b.n	80064fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68b9      	ldr	r1, [r7, #8]
 8006438:	4618      	mov	r0, r3
 800643a:	f000 fbd3 	bl	8006be4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69da      	ldr	r2, [r3, #28]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800644c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800645c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69d9      	ldr	r1, [r3, #28]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	021a      	lsls	r2, r3, #8
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	61da      	str	r2, [r3, #28]
      break;
 8006472:	e043      	b.n	80064fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fc3c 	bl	8006cf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0208 	orr.w	r2, r2, #8
 800648e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0204 	bic.w	r2, r2, #4
 800649e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	691a      	ldr	r2, [r3, #16]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80064b2:	e023      	b.n	80064fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fc80 	bl	8006dc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064de:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	021a      	lsls	r2, r3, #8
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80064f4:	e002      	b.n	80064fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	75fb      	strb	r3, [r7, #23]
      break;
 80064fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006504:	7dfb      	ldrb	r3, [r7, #23]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop

08006510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006524:	2b01      	cmp	r3, #1
 8006526:	d101      	bne.n	800652c <HAL_TIM_ConfigClockSource+0x1c>
 8006528:	2302      	movs	r3, #2
 800652a:	e0de      	b.n	80066ea <HAL_TIM_ConfigClockSource+0x1da>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800654a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800654e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006556:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a63      	ldr	r2, [pc, #396]	@ (80066f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	f000 80a9 	beq.w	80066be <HAL_TIM_ConfigClockSource+0x1ae>
 800656c:	4a61      	ldr	r2, [pc, #388]	@ (80066f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800656e:	4293      	cmp	r3, r2
 8006570:	f200 80ae 	bhi.w	80066d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006574:	4a60      	ldr	r2, [pc, #384]	@ (80066f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	f000 80a1 	beq.w	80066be <HAL_TIM_ConfigClockSource+0x1ae>
 800657c:	4a5e      	ldr	r2, [pc, #376]	@ (80066f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	f200 80a6 	bhi.w	80066d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006584:	4a5d      	ldr	r2, [pc, #372]	@ (80066fc <HAL_TIM_ConfigClockSource+0x1ec>)
 8006586:	4293      	cmp	r3, r2
 8006588:	f000 8099 	beq.w	80066be <HAL_TIM_ConfigClockSource+0x1ae>
 800658c:	4a5b      	ldr	r2, [pc, #364]	@ (80066fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800658e:	4293      	cmp	r3, r2
 8006590:	f200 809e 	bhi.w	80066d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006594:	4a5a      	ldr	r2, [pc, #360]	@ (8006700 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	f000 8091 	beq.w	80066be <HAL_TIM_ConfigClockSource+0x1ae>
 800659c:	4a58      	ldr	r2, [pc, #352]	@ (8006700 <HAL_TIM_ConfigClockSource+0x1f0>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	f200 8096 	bhi.w	80066d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80065a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80065a8:	f000 8089 	beq.w	80066be <HAL_TIM_ConfigClockSource+0x1ae>
 80065ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80065b0:	f200 808e 	bhi.w	80066d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80065b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065b8:	d03e      	beq.n	8006638 <HAL_TIM_ConfigClockSource+0x128>
 80065ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065be:	f200 8087 	bhi.w	80066d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80065c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c6:	f000 8086 	beq.w	80066d6 <HAL_TIM_ConfigClockSource+0x1c6>
 80065ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ce:	d87f      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80065d0:	2b70      	cmp	r3, #112	@ 0x70
 80065d2:	d01a      	beq.n	800660a <HAL_TIM_ConfigClockSource+0xfa>
 80065d4:	2b70      	cmp	r3, #112	@ 0x70
 80065d6:	d87b      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80065d8:	2b60      	cmp	r3, #96	@ 0x60
 80065da:	d050      	beq.n	800667e <HAL_TIM_ConfigClockSource+0x16e>
 80065dc:	2b60      	cmp	r3, #96	@ 0x60
 80065de:	d877      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80065e0:	2b50      	cmp	r3, #80	@ 0x50
 80065e2:	d03c      	beq.n	800665e <HAL_TIM_ConfigClockSource+0x14e>
 80065e4:	2b50      	cmp	r3, #80	@ 0x50
 80065e6:	d873      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80065e8:	2b40      	cmp	r3, #64	@ 0x40
 80065ea:	d058      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x18e>
 80065ec:	2b40      	cmp	r3, #64	@ 0x40
 80065ee:	d86f      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80065f0:	2b30      	cmp	r3, #48	@ 0x30
 80065f2:	d064      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x1ae>
 80065f4:	2b30      	cmp	r3, #48	@ 0x30
 80065f6:	d86b      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d060      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x1ae>
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	d867      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d05c      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x1ae>
 8006604:	2b10      	cmp	r3, #16
 8006606:	d05a      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x1ae>
 8006608:	e062      	b.n	80066d0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800661a:	f000 fcb3 	bl	8006f84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800662c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	609a      	str	r2, [r3, #8]
      break;
 8006636:	e04f      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006648:	f000 fc9c 	bl	8006f84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689a      	ldr	r2, [r3, #8]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800665a:	609a      	str	r2, [r3, #8]
      break;
 800665c:	e03c      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800666a:	461a      	mov	r2, r3
 800666c:	f000 fc0e 	bl	8006e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2150      	movs	r1, #80	@ 0x50
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fc67 	bl	8006f4a <TIM_ITRx_SetConfig>
      break;
 800667c:	e02c      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800668a:	461a      	mov	r2, r3
 800668c:	f000 fc2d 	bl	8006eea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2160      	movs	r1, #96	@ 0x60
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fc57 	bl	8006f4a <TIM_ITRx_SetConfig>
      break;
 800669c:	e01c      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066aa:	461a      	mov	r2, r3
 80066ac:	f000 fbee 	bl	8006e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2140      	movs	r1, #64	@ 0x40
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fc47 	bl	8006f4a <TIM_ITRx_SetConfig>
      break;
 80066bc:	e00c      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4619      	mov	r1, r3
 80066c8:	4610      	mov	r0, r2
 80066ca:	f000 fc3e 	bl	8006f4a <TIM_ITRx_SetConfig>
      break;
 80066ce:	e003      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	73fb      	strb	r3, [r7, #15]
      break;
 80066d4:	e000      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80066d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	00100070 	.word	0x00100070
 80066f8:	00100040 	.word	0x00100040
 80066fc:	00100030 	.word	0x00100030
 8006700:	00100020 	.word	0x00100020

08006704 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a42      	ldr	r2, [pc, #264]	@ (8006884 <TIM_Base_SetConfig+0x11c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00f      	beq.n	80067a0 <TIM_Base_SetConfig+0x38>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006786:	d00b      	beq.n	80067a0 <TIM_Base_SetConfig+0x38>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a3f      	ldr	r2, [pc, #252]	@ (8006888 <TIM_Base_SetConfig+0x120>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d007      	beq.n	80067a0 <TIM_Base_SetConfig+0x38>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a3e      	ldr	r2, [pc, #248]	@ (800688c <TIM_Base_SetConfig+0x124>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d003      	beq.n	80067a0 <TIM_Base_SetConfig+0x38>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a3d      	ldr	r2, [pc, #244]	@ (8006890 <TIM_Base_SetConfig+0x128>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d108      	bne.n	80067b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a33      	ldr	r2, [pc, #204]	@ (8006884 <TIM_Base_SetConfig+0x11c>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d01b      	beq.n	80067f2 <TIM_Base_SetConfig+0x8a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c0:	d017      	beq.n	80067f2 <TIM_Base_SetConfig+0x8a>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a30      	ldr	r2, [pc, #192]	@ (8006888 <TIM_Base_SetConfig+0x120>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d013      	beq.n	80067f2 <TIM_Base_SetConfig+0x8a>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a2f      	ldr	r2, [pc, #188]	@ (800688c <TIM_Base_SetConfig+0x124>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00f      	beq.n	80067f2 <TIM_Base_SetConfig+0x8a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006890 <TIM_Base_SetConfig+0x128>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00b      	beq.n	80067f2 <TIM_Base_SetConfig+0x8a>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006894 <TIM_Base_SetConfig+0x12c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d007      	beq.n	80067f2 <TIM_Base_SetConfig+0x8a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006898 <TIM_Base_SetConfig+0x130>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d003      	beq.n	80067f2 <TIM_Base_SetConfig+0x8a>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a2b      	ldr	r2, [pc, #172]	@ (800689c <TIM_Base_SetConfig+0x134>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d108      	bne.n	8006804 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	4313      	orrs	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a16      	ldr	r2, [pc, #88]	@ (8006884 <TIM_Base_SetConfig+0x11c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d00f      	beq.n	8006850 <TIM_Base_SetConfig+0xe8>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a17      	ldr	r2, [pc, #92]	@ (8006890 <TIM_Base_SetConfig+0x128>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00b      	beq.n	8006850 <TIM_Base_SetConfig+0xe8>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a16      	ldr	r2, [pc, #88]	@ (8006894 <TIM_Base_SetConfig+0x12c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d007      	beq.n	8006850 <TIM_Base_SetConfig+0xe8>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a15      	ldr	r2, [pc, #84]	@ (8006898 <TIM_Base_SetConfig+0x130>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d003      	beq.n	8006850 <TIM_Base_SetConfig+0xe8>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a14      	ldr	r2, [pc, #80]	@ (800689c <TIM_Base_SetConfig+0x134>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d103      	bne.n	8006858 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	691a      	ldr	r2, [r3, #16]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b01      	cmp	r3, #1
 8006868:	d105      	bne.n	8006876 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f023 0201 	bic.w	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	611a      	str	r2, [r3, #16]
  }
}
 8006876:	bf00      	nop
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	40012c00 	.word	0x40012c00
 8006888:	40000400 	.word	0x40000400
 800688c:	40000800 	.word	0x40000800
 8006890:	40013400 	.word	0x40013400
 8006894:	40014000 	.word	0x40014000
 8006898:	40014400 	.word	0x40014400
 800689c:	40014800 	.word	0x40014800

080068a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	f023 0201 	bic.w	r2, r3, #1
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0303 	bic.w	r3, r3, #3
 80068da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f023 0302 	bic.w	r3, r3, #2
 80068ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a2c      	ldr	r2, [pc, #176]	@ (80069ac <TIM_OC1_SetConfig+0x10c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00f      	beq.n	8006920 <TIM_OC1_SetConfig+0x80>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a2b      	ldr	r2, [pc, #172]	@ (80069b0 <TIM_OC1_SetConfig+0x110>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00b      	beq.n	8006920 <TIM_OC1_SetConfig+0x80>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a2a      	ldr	r2, [pc, #168]	@ (80069b4 <TIM_OC1_SetConfig+0x114>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d007      	beq.n	8006920 <TIM_OC1_SetConfig+0x80>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a29      	ldr	r2, [pc, #164]	@ (80069b8 <TIM_OC1_SetConfig+0x118>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d003      	beq.n	8006920 <TIM_OC1_SetConfig+0x80>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a28      	ldr	r2, [pc, #160]	@ (80069bc <TIM_OC1_SetConfig+0x11c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d10c      	bne.n	800693a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f023 0308 	bic.w	r3, r3, #8
 8006926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f023 0304 	bic.w	r3, r3, #4
 8006938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a1b      	ldr	r2, [pc, #108]	@ (80069ac <TIM_OC1_SetConfig+0x10c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00f      	beq.n	8006962 <TIM_OC1_SetConfig+0xc2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a1a      	ldr	r2, [pc, #104]	@ (80069b0 <TIM_OC1_SetConfig+0x110>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00b      	beq.n	8006962 <TIM_OC1_SetConfig+0xc2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a19      	ldr	r2, [pc, #100]	@ (80069b4 <TIM_OC1_SetConfig+0x114>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d007      	beq.n	8006962 <TIM_OC1_SetConfig+0xc2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a18      	ldr	r2, [pc, #96]	@ (80069b8 <TIM_OC1_SetConfig+0x118>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d003      	beq.n	8006962 <TIM_OC1_SetConfig+0xc2>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a17      	ldr	r2, [pc, #92]	@ (80069bc <TIM_OC1_SetConfig+0x11c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d111      	bne.n	8006986 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	4313      	orrs	r3, r2
 800697a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	4313      	orrs	r3, r2
 8006984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	621a      	str	r2, [r3, #32]
}
 80069a0:	bf00      	nop
 80069a2:	371c      	adds	r7, #28
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	40012c00 	.word	0x40012c00
 80069b0:	40013400 	.word	0x40013400
 80069b4:	40014000 	.word	0x40014000
 80069b8:	40014400 	.word	0x40014400
 80069bc:	40014800 	.word	0x40014800

080069c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	f023 0210 	bic.w	r2, r3, #16
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f023 0320 	bic.w	r3, r3, #32
 8006a0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	011b      	lsls	r3, r3, #4
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a28      	ldr	r2, [pc, #160]	@ (8006ac0 <TIM_OC2_SetConfig+0x100>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d003      	beq.n	8006a2c <TIM_OC2_SetConfig+0x6c>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a27      	ldr	r2, [pc, #156]	@ (8006ac4 <TIM_OC2_SetConfig+0x104>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d10d      	bne.n	8006a48 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ac0 <TIM_OC2_SetConfig+0x100>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00f      	beq.n	8006a70 <TIM_OC2_SetConfig+0xb0>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a1c      	ldr	r2, [pc, #112]	@ (8006ac4 <TIM_OC2_SetConfig+0x104>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00b      	beq.n	8006a70 <TIM_OC2_SetConfig+0xb0>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ac8 <TIM_OC2_SetConfig+0x108>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d007      	beq.n	8006a70 <TIM_OC2_SetConfig+0xb0>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a1a      	ldr	r2, [pc, #104]	@ (8006acc <TIM_OC2_SetConfig+0x10c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_OC2_SetConfig+0xb0>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a19      	ldr	r2, [pc, #100]	@ (8006ad0 <TIM_OC2_SetConfig+0x110>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d113      	bne.n	8006a98 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	621a      	str	r2, [r3, #32]
}
 8006ab2:	bf00      	nop
 8006ab4:	371c      	adds	r7, #28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40012c00 	.word	0x40012c00
 8006ac4:	40013400 	.word	0x40013400
 8006ac8:	40014000 	.word	0x40014000
 8006acc:	40014400 	.word	0x40014400
 8006ad0:	40014800 	.word	0x40014800

08006ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0303 	bic.w	r3, r3, #3
 8006b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	021b      	lsls	r3, r3, #8
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a27      	ldr	r2, [pc, #156]	@ (8006bd0 <TIM_OC3_SetConfig+0xfc>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d003      	beq.n	8006b3e <TIM_OC3_SetConfig+0x6a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a26      	ldr	r2, [pc, #152]	@ (8006bd4 <TIM_OC3_SetConfig+0x100>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d10d      	bne.n	8006b5a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	021b      	lsls	r3, r3, #8
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd0 <TIM_OC3_SetConfig+0xfc>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00f      	beq.n	8006b82 <TIM_OC3_SetConfig+0xae>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd4 <TIM_OC3_SetConfig+0x100>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00b      	beq.n	8006b82 <TIM_OC3_SetConfig+0xae>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8006bd8 <TIM_OC3_SetConfig+0x104>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d007      	beq.n	8006b82 <TIM_OC3_SetConfig+0xae>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a19      	ldr	r2, [pc, #100]	@ (8006bdc <TIM_OC3_SetConfig+0x108>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d003      	beq.n	8006b82 <TIM_OC3_SetConfig+0xae>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a18      	ldr	r2, [pc, #96]	@ (8006be0 <TIM_OC3_SetConfig+0x10c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d113      	bne.n	8006baa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	011b      	lsls	r3, r3, #4
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	621a      	str	r2, [r3, #32]
}
 8006bc4:	bf00      	nop
 8006bc6:	371c      	adds	r7, #28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	40012c00 	.word	0x40012c00
 8006bd4:	40013400 	.word	0x40013400
 8006bd8:	40014000 	.word	0x40014000
 8006bdc:	40014400 	.word	0x40014400
 8006be0:	40014800 	.word	0x40014800

08006be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	021b      	lsls	r3, r3, #8
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	031b      	lsls	r3, r3, #12
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a28      	ldr	r2, [pc, #160]	@ (8006ce4 <TIM_OC4_SetConfig+0x100>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d003      	beq.n	8006c50 <TIM_OC4_SetConfig+0x6c>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a27      	ldr	r2, [pc, #156]	@ (8006ce8 <TIM_OC4_SetConfig+0x104>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d10d      	bne.n	8006c6c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	031b      	lsls	r3, r3, #12
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ce4 <TIM_OC4_SetConfig+0x100>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d00f      	beq.n	8006c94 <TIM_OC4_SetConfig+0xb0>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a1c      	ldr	r2, [pc, #112]	@ (8006ce8 <TIM_OC4_SetConfig+0x104>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d00b      	beq.n	8006c94 <TIM_OC4_SetConfig+0xb0>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8006cec <TIM_OC4_SetConfig+0x108>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d007      	beq.n	8006c94 <TIM_OC4_SetConfig+0xb0>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a1a      	ldr	r2, [pc, #104]	@ (8006cf0 <TIM_OC4_SetConfig+0x10c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d003      	beq.n	8006c94 <TIM_OC4_SetConfig+0xb0>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a19      	ldr	r2, [pc, #100]	@ (8006cf4 <TIM_OC4_SetConfig+0x110>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d113      	bne.n	8006cbc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c9a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ca2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	019b      	lsls	r3, r3, #6
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	019b      	lsls	r3, r3, #6
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	621a      	str	r2, [r3, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	371c      	adds	r7, #28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	40012c00 	.word	0x40012c00
 8006ce8:	40013400 	.word	0x40013400
 8006cec:	40014000 	.word	0x40014000
 8006cf0:	40014400 	.word	0x40014400
 8006cf4:	40014800 	.word	0x40014800

08006cf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006d3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	041b      	lsls	r3, r3, #16
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a17      	ldr	r2, [pc, #92]	@ (8006dac <TIM_OC5_SetConfig+0xb4>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00f      	beq.n	8006d72 <TIM_OC5_SetConfig+0x7a>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a16      	ldr	r2, [pc, #88]	@ (8006db0 <TIM_OC5_SetConfig+0xb8>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d00b      	beq.n	8006d72 <TIM_OC5_SetConfig+0x7a>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a15      	ldr	r2, [pc, #84]	@ (8006db4 <TIM_OC5_SetConfig+0xbc>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d007      	beq.n	8006d72 <TIM_OC5_SetConfig+0x7a>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a14      	ldr	r2, [pc, #80]	@ (8006db8 <TIM_OC5_SetConfig+0xc0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d003      	beq.n	8006d72 <TIM_OC5_SetConfig+0x7a>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a13      	ldr	r2, [pc, #76]	@ (8006dbc <TIM_OC5_SetConfig+0xc4>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d109      	bne.n	8006d86 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	021b      	lsls	r3, r3, #8
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	621a      	str	r2, [r3, #32]
}
 8006da0:	bf00      	nop
 8006da2:	371c      	adds	r7, #28
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	40012c00 	.word	0x40012c00
 8006db0:	40013400 	.word	0x40013400
 8006db4:	40014000 	.word	0x40014000
 8006db8:	40014400 	.word	0x40014400
 8006dbc:	40014800 	.word	0x40014800

08006dc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	021b      	lsls	r3, r3, #8
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	051b      	lsls	r3, r3, #20
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a18      	ldr	r2, [pc, #96]	@ (8006e78 <TIM_OC6_SetConfig+0xb8>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d00f      	beq.n	8006e3c <TIM_OC6_SetConfig+0x7c>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a17      	ldr	r2, [pc, #92]	@ (8006e7c <TIM_OC6_SetConfig+0xbc>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d00b      	beq.n	8006e3c <TIM_OC6_SetConfig+0x7c>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a16      	ldr	r2, [pc, #88]	@ (8006e80 <TIM_OC6_SetConfig+0xc0>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d007      	beq.n	8006e3c <TIM_OC6_SetConfig+0x7c>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a15      	ldr	r2, [pc, #84]	@ (8006e84 <TIM_OC6_SetConfig+0xc4>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d003      	beq.n	8006e3c <TIM_OC6_SetConfig+0x7c>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a14      	ldr	r2, [pc, #80]	@ (8006e88 <TIM_OC6_SetConfig+0xc8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d109      	bne.n	8006e50 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	029b      	lsls	r3, r3, #10
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	621a      	str	r2, [r3, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	371c      	adds	r7, #28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	40012c00 	.word	0x40012c00
 8006e7c:	40013400 	.word	0x40013400
 8006e80:	40014000 	.word	0x40014000
 8006e84:	40014400 	.word	0x40014400
 8006e88:	40014800 	.word	0x40014800

08006e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	f023 0201 	bic.w	r2, r3, #1
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f023 030a 	bic.w	r3, r3, #10
 8006ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	621a      	str	r2, [r3, #32]
}
 8006ede:	bf00      	nop
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b087      	sub	sp, #28
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	f023 0210 	bic.w	r2, r3, #16
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	031b      	lsls	r3, r3, #12
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	621a      	str	r2, [r3, #32]
}
 8006f3e:	bf00      	nop
 8006f40:	371c      	adds	r7, #28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b085      	sub	sp, #20
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	f043 0307 	orr.w	r3, r3, #7
 8006f70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	609a      	str	r2, [r3, #8]
}
 8006f78:	bf00      	nop
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
 8006f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	021a      	lsls	r2, r3, #8
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	609a      	str	r2, [r3, #8]
}
 8006fb8:	bf00      	nop
 8006fba:	371c      	adds	r7, #28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d101      	bne.n	8006fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e065      	b.n	80070a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a2c      	ldr	r2, [pc, #176]	@ (80070b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d004      	beq.n	8007010 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a2b      	ldr	r2, [pc, #172]	@ (80070b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d108      	bne.n	8007022 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007016:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	4313      	orrs	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800702c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a1b      	ldr	r2, [pc, #108]	@ (80070b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d018      	beq.n	800707c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007052:	d013      	beq.n	800707c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a18      	ldr	r2, [pc, #96]	@ (80070bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d00e      	beq.n	800707c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a17      	ldr	r2, [pc, #92]	@ (80070c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d009      	beq.n	800707c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a12      	ldr	r2, [pc, #72]	@ (80070b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d004      	beq.n	800707c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a13      	ldr	r2, [pc, #76]	@ (80070c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d10c      	bne.n	8007096 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007082:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	4313      	orrs	r3, r2
 800708c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	40012c00 	.word	0x40012c00
 80070b8:	40013400 	.word	0x40013400
 80070bc:	40000400 	.word	0x40000400
 80070c0:	40000800 	.word	0x40000800
 80070c4:	40014000 	.word	0x40014000

080070c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d101      	bne.n	80070e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070e0:	2302      	movs	r3, #2
 80070e2:	e073      	b.n	80071cc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	4313      	orrs	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800714a:	4313      	orrs	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	041b      	lsls	r3, r3, #16
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	4313      	orrs	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a19      	ldr	r2, [pc, #100]	@ (80071d8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d004      	beq.n	8007180 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a18      	ldr	r2, [pc, #96]	@ (80071dc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d11c      	bne.n	80071ba <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800718a:	051b      	lsls	r3, r3, #20
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	40012c00 	.word	0x40012c00
 80071dc:	40013400 	.word	0x40013400

080071e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e042      	b.n	8007304 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007284:	2b00      	cmp	r3, #0
 8007286:	d106      	bne.n	8007296 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7fa fc03 	bl	8001a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2224      	movs	r2, #36	@ 0x24
 800729a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0201 	bic.w	r2, r2, #1
 80072ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d002      	beq.n	80072bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fb82 	bl	80079c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f8b3 	bl	8007428 <UART_SetConfig>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d101      	bne.n	80072cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e01b      	b.n	8007304 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685a      	ldr	r2, [r3, #4]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689a      	ldr	r2, [r3, #8]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0201 	orr.w	r2, r2, #1
 80072fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fc01 	bl	8007b04 <UART_CheckIdleState>
 8007302:	4603      	mov	r3, r0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08a      	sub	sp, #40	@ 0x28
 8007310:	af02      	add	r7, sp, #8
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	603b      	str	r3, [r7, #0]
 8007318:	4613      	mov	r3, r2
 800731a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007322:	2b20      	cmp	r3, #32
 8007324:	d17b      	bne.n	800741e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <HAL_UART_Transmit+0x26>
 800732c:	88fb      	ldrh	r3, [r7, #6]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e074      	b.n	8007420 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2221      	movs	r2, #33	@ 0x21
 8007342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007346:	f7fa fcd1 	bl	8001cec <HAL_GetTick>
 800734a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	88fa      	ldrh	r2, [r7, #6]
 8007350:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	88fa      	ldrh	r2, [r7, #6]
 8007358:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007364:	d108      	bne.n	8007378 <HAL_UART_Transmit+0x6c>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d104      	bne.n	8007378 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800736e:	2300      	movs	r3, #0
 8007370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	61bb      	str	r3, [r7, #24]
 8007376:	e003      	b.n	8007380 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800737c:	2300      	movs	r3, #0
 800737e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007380:	e030      	b.n	80073e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2200      	movs	r2, #0
 800738a:	2180      	movs	r1, #128	@ 0x80
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 fc63 	bl	8007c58 <UART_WaitOnFlagUntilTimeout>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d005      	beq.n	80073a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2220      	movs	r2, #32
 800739c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e03d      	b.n	8007420 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10b      	bne.n	80073c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	3302      	adds	r3, #2
 80073be:	61bb      	str	r3, [r7, #24]
 80073c0:	e007      	b.n	80073d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	781a      	ldrb	r2, [r3, #0]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	3301      	adds	r3, #1
 80073d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80073d8:	b29b      	uxth	r3, r3
 80073da:	3b01      	subs	r3, #1
 80073dc:	b29a      	uxth	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1c8      	bne.n	8007382 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	2200      	movs	r2, #0
 80073f8:	2140      	movs	r1, #64	@ 0x40
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 fc2c 	bl	8007c58 <UART_WaitOnFlagUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d005      	beq.n	8007412 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2220      	movs	r2, #32
 800740a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e006      	b.n	8007420 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2220      	movs	r2, #32
 8007416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	e000      	b.n	8007420 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800741e:	2302      	movs	r3, #2
  }
}
 8007420:	4618      	mov	r0, r3
 8007422:	3720      	adds	r7, #32
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800742c:	b08c      	sub	sp, #48	@ 0x30
 800742e:	af00      	add	r7, sp, #0
 8007430:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	431a      	orrs	r2, r3
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	431a      	orrs	r2, r3
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	69db      	ldr	r3, [r3, #28]
 800744c:	4313      	orrs	r3, r2
 800744e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	4bab      	ldr	r3, [pc, #684]	@ (8007704 <UART_SetConfig+0x2dc>)
 8007458:	4013      	ands	r3, r2
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	6812      	ldr	r2, [r2, #0]
 800745e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007460:	430b      	orrs	r3, r1
 8007462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4aa0      	ldr	r2, [pc, #640]	@ (8007708 <UART_SetConfig+0x2e0>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d004      	beq.n	8007494 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007490:	4313      	orrs	r3, r2
 8007492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800749e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	6812      	ldr	r2, [r2, #0]
 80074a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074a8:	430b      	orrs	r3, r1
 80074aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b2:	f023 010f 	bic.w	r1, r3, #15
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a91      	ldr	r2, [pc, #580]	@ (800770c <UART_SetConfig+0x2e4>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d125      	bne.n	8007518 <UART_SetConfig+0xf0>
 80074cc:	4b90      	ldr	r3, [pc, #576]	@ (8007710 <UART_SetConfig+0x2e8>)
 80074ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d81a      	bhi.n	8007510 <UART_SetConfig+0xe8>
 80074da:	a201      	add	r2, pc, #4	@ (adr r2, 80074e0 <UART_SetConfig+0xb8>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	080074f1 	.word	0x080074f1
 80074e4:	08007501 	.word	0x08007501
 80074e8:	080074f9 	.word	0x080074f9
 80074ec:	08007509 	.word	0x08007509
 80074f0:	2301      	movs	r3, #1
 80074f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074f6:	e0d6      	b.n	80076a6 <UART_SetConfig+0x27e>
 80074f8:	2302      	movs	r3, #2
 80074fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074fe:	e0d2      	b.n	80076a6 <UART_SetConfig+0x27e>
 8007500:	2304      	movs	r3, #4
 8007502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007506:	e0ce      	b.n	80076a6 <UART_SetConfig+0x27e>
 8007508:	2308      	movs	r3, #8
 800750a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800750e:	e0ca      	b.n	80076a6 <UART_SetConfig+0x27e>
 8007510:	2310      	movs	r3, #16
 8007512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007516:	e0c6      	b.n	80076a6 <UART_SetConfig+0x27e>
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a7d      	ldr	r2, [pc, #500]	@ (8007714 <UART_SetConfig+0x2ec>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d138      	bne.n	8007594 <UART_SetConfig+0x16c>
 8007522:	4b7b      	ldr	r3, [pc, #492]	@ (8007710 <UART_SetConfig+0x2e8>)
 8007524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007528:	f003 030c 	and.w	r3, r3, #12
 800752c:	2b0c      	cmp	r3, #12
 800752e:	d82d      	bhi.n	800758c <UART_SetConfig+0x164>
 8007530:	a201      	add	r2, pc, #4	@ (adr r2, 8007538 <UART_SetConfig+0x110>)
 8007532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007536:	bf00      	nop
 8007538:	0800756d 	.word	0x0800756d
 800753c:	0800758d 	.word	0x0800758d
 8007540:	0800758d 	.word	0x0800758d
 8007544:	0800758d 	.word	0x0800758d
 8007548:	0800757d 	.word	0x0800757d
 800754c:	0800758d 	.word	0x0800758d
 8007550:	0800758d 	.word	0x0800758d
 8007554:	0800758d 	.word	0x0800758d
 8007558:	08007575 	.word	0x08007575
 800755c:	0800758d 	.word	0x0800758d
 8007560:	0800758d 	.word	0x0800758d
 8007564:	0800758d 	.word	0x0800758d
 8007568:	08007585 	.word	0x08007585
 800756c:	2300      	movs	r3, #0
 800756e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007572:	e098      	b.n	80076a6 <UART_SetConfig+0x27e>
 8007574:	2302      	movs	r3, #2
 8007576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800757a:	e094      	b.n	80076a6 <UART_SetConfig+0x27e>
 800757c:	2304      	movs	r3, #4
 800757e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007582:	e090      	b.n	80076a6 <UART_SetConfig+0x27e>
 8007584:	2308      	movs	r3, #8
 8007586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800758a:	e08c      	b.n	80076a6 <UART_SetConfig+0x27e>
 800758c:	2310      	movs	r3, #16
 800758e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007592:	e088      	b.n	80076a6 <UART_SetConfig+0x27e>
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a5f      	ldr	r2, [pc, #380]	@ (8007718 <UART_SetConfig+0x2f0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d125      	bne.n	80075ea <UART_SetConfig+0x1c2>
 800759e:	4b5c      	ldr	r3, [pc, #368]	@ (8007710 <UART_SetConfig+0x2e8>)
 80075a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80075a8:	2b30      	cmp	r3, #48	@ 0x30
 80075aa:	d016      	beq.n	80075da <UART_SetConfig+0x1b2>
 80075ac:	2b30      	cmp	r3, #48	@ 0x30
 80075ae:	d818      	bhi.n	80075e2 <UART_SetConfig+0x1ba>
 80075b0:	2b20      	cmp	r3, #32
 80075b2:	d00a      	beq.n	80075ca <UART_SetConfig+0x1a2>
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	d814      	bhi.n	80075e2 <UART_SetConfig+0x1ba>
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <UART_SetConfig+0x19a>
 80075bc:	2b10      	cmp	r3, #16
 80075be:	d008      	beq.n	80075d2 <UART_SetConfig+0x1aa>
 80075c0:	e00f      	b.n	80075e2 <UART_SetConfig+0x1ba>
 80075c2:	2300      	movs	r3, #0
 80075c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075c8:	e06d      	b.n	80076a6 <UART_SetConfig+0x27e>
 80075ca:	2302      	movs	r3, #2
 80075cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075d0:	e069      	b.n	80076a6 <UART_SetConfig+0x27e>
 80075d2:	2304      	movs	r3, #4
 80075d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075d8:	e065      	b.n	80076a6 <UART_SetConfig+0x27e>
 80075da:	2308      	movs	r3, #8
 80075dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075e0:	e061      	b.n	80076a6 <UART_SetConfig+0x27e>
 80075e2:	2310      	movs	r3, #16
 80075e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075e8:	e05d      	b.n	80076a6 <UART_SetConfig+0x27e>
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a4b      	ldr	r2, [pc, #300]	@ (800771c <UART_SetConfig+0x2f4>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d125      	bne.n	8007640 <UART_SetConfig+0x218>
 80075f4:	4b46      	ldr	r3, [pc, #280]	@ (8007710 <UART_SetConfig+0x2e8>)
 80075f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80075fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007600:	d016      	beq.n	8007630 <UART_SetConfig+0x208>
 8007602:	2bc0      	cmp	r3, #192	@ 0xc0
 8007604:	d818      	bhi.n	8007638 <UART_SetConfig+0x210>
 8007606:	2b80      	cmp	r3, #128	@ 0x80
 8007608:	d00a      	beq.n	8007620 <UART_SetConfig+0x1f8>
 800760a:	2b80      	cmp	r3, #128	@ 0x80
 800760c:	d814      	bhi.n	8007638 <UART_SetConfig+0x210>
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <UART_SetConfig+0x1f0>
 8007612:	2b40      	cmp	r3, #64	@ 0x40
 8007614:	d008      	beq.n	8007628 <UART_SetConfig+0x200>
 8007616:	e00f      	b.n	8007638 <UART_SetConfig+0x210>
 8007618:	2300      	movs	r3, #0
 800761a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800761e:	e042      	b.n	80076a6 <UART_SetConfig+0x27e>
 8007620:	2302      	movs	r3, #2
 8007622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007626:	e03e      	b.n	80076a6 <UART_SetConfig+0x27e>
 8007628:	2304      	movs	r3, #4
 800762a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800762e:	e03a      	b.n	80076a6 <UART_SetConfig+0x27e>
 8007630:	2308      	movs	r3, #8
 8007632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007636:	e036      	b.n	80076a6 <UART_SetConfig+0x27e>
 8007638:	2310      	movs	r3, #16
 800763a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800763e:	e032      	b.n	80076a6 <UART_SetConfig+0x27e>
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a30      	ldr	r2, [pc, #192]	@ (8007708 <UART_SetConfig+0x2e0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d12a      	bne.n	80076a0 <UART_SetConfig+0x278>
 800764a:	4b31      	ldr	r3, [pc, #196]	@ (8007710 <UART_SetConfig+0x2e8>)
 800764c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007650:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007654:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007658:	d01a      	beq.n	8007690 <UART_SetConfig+0x268>
 800765a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800765e:	d81b      	bhi.n	8007698 <UART_SetConfig+0x270>
 8007660:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007664:	d00c      	beq.n	8007680 <UART_SetConfig+0x258>
 8007666:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800766a:	d815      	bhi.n	8007698 <UART_SetConfig+0x270>
 800766c:	2b00      	cmp	r3, #0
 800766e:	d003      	beq.n	8007678 <UART_SetConfig+0x250>
 8007670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007674:	d008      	beq.n	8007688 <UART_SetConfig+0x260>
 8007676:	e00f      	b.n	8007698 <UART_SetConfig+0x270>
 8007678:	2300      	movs	r3, #0
 800767a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800767e:	e012      	b.n	80076a6 <UART_SetConfig+0x27e>
 8007680:	2302      	movs	r3, #2
 8007682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007686:	e00e      	b.n	80076a6 <UART_SetConfig+0x27e>
 8007688:	2304      	movs	r3, #4
 800768a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800768e:	e00a      	b.n	80076a6 <UART_SetConfig+0x27e>
 8007690:	2308      	movs	r3, #8
 8007692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007696:	e006      	b.n	80076a6 <UART_SetConfig+0x27e>
 8007698:	2310      	movs	r3, #16
 800769a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800769e:	e002      	b.n	80076a6 <UART_SetConfig+0x27e>
 80076a0:	2310      	movs	r3, #16
 80076a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a17      	ldr	r2, [pc, #92]	@ (8007708 <UART_SetConfig+0x2e0>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	f040 80a8 	bne.w	8007802 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80076b6:	2b08      	cmp	r3, #8
 80076b8:	d834      	bhi.n	8007724 <UART_SetConfig+0x2fc>
 80076ba:	a201      	add	r2, pc, #4	@ (adr r2, 80076c0 <UART_SetConfig+0x298>)
 80076bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c0:	080076e5 	.word	0x080076e5
 80076c4:	08007725 	.word	0x08007725
 80076c8:	080076ed 	.word	0x080076ed
 80076cc:	08007725 	.word	0x08007725
 80076d0:	080076f3 	.word	0x080076f3
 80076d4:	08007725 	.word	0x08007725
 80076d8:	08007725 	.word	0x08007725
 80076dc:	08007725 	.word	0x08007725
 80076e0:	080076fb 	.word	0x080076fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076e4:	f7fd f95c 	bl	80049a0 <HAL_RCC_GetPCLK1Freq>
 80076e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076ea:	e021      	b.n	8007730 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007720 <UART_SetConfig+0x2f8>)
 80076ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076f0:	e01e      	b.n	8007730 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076f2:	f7fd f8e9 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 80076f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076f8:	e01a      	b.n	8007730 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007700:	e016      	b.n	8007730 <UART_SetConfig+0x308>
 8007702:	bf00      	nop
 8007704:	cfff69f3 	.word	0xcfff69f3
 8007708:	40008000 	.word	0x40008000
 800770c:	40013800 	.word	0x40013800
 8007710:	40021000 	.word	0x40021000
 8007714:	40004400 	.word	0x40004400
 8007718:	40004800 	.word	0x40004800
 800771c:	40004c00 	.word	0x40004c00
 8007720:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800772e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007732:	2b00      	cmp	r3, #0
 8007734:	f000 812a 	beq.w	800798c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773c:	4a9e      	ldr	r2, [pc, #632]	@ (80079b8 <UART_SetConfig+0x590>)
 800773e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007742:	461a      	mov	r2, r3
 8007744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007746:	fbb3 f3f2 	udiv	r3, r3, r2
 800774a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	4613      	mov	r3, r2
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	4413      	add	r3, r2
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	429a      	cmp	r2, r3
 800775a:	d305      	bcc.n	8007768 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	429a      	cmp	r2, r3
 8007766:	d903      	bls.n	8007770 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800776e:	e10d      	b.n	800798c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007772:	2200      	movs	r2, #0
 8007774:	60bb      	str	r3, [r7, #8]
 8007776:	60fa      	str	r2, [r7, #12]
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800777c:	4a8e      	ldr	r2, [pc, #568]	@ (80079b8 <UART_SetConfig+0x590>)
 800777e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007782:	b29b      	uxth	r3, r3
 8007784:	2200      	movs	r2, #0
 8007786:	603b      	str	r3, [r7, #0]
 8007788:	607a      	str	r2, [r7, #4]
 800778a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800778e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007792:	f7f8 fd95 	bl	80002c0 <__aeabi_uldivmod>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4610      	mov	r0, r2
 800779c:	4619      	mov	r1, r3
 800779e:	f04f 0200 	mov.w	r2, #0
 80077a2:	f04f 0300 	mov.w	r3, #0
 80077a6:	020b      	lsls	r3, r1, #8
 80077a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077ac:	0202      	lsls	r2, r0, #8
 80077ae:	6979      	ldr	r1, [r7, #20]
 80077b0:	6849      	ldr	r1, [r1, #4]
 80077b2:	0849      	lsrs	r1, r1, #1
 80077b4:	2000      	movs	r0, #0
 80077b6:	460c      	mov	r4, r1
 80077b8:	4605      	mov	r5, r0
 80077ba:	eb12 0804 	adds.w	r8, r2, r4
 80077be:	eb43 0905 	adc.w	r9, r3, r5
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	469a      	mov	sl, r3
 80077ca:	4693      	mov	fp, r2
 80077cc:	4652      	mov	r2, sl
 80077ce:	465b      	mov	r3, fp
 80077d0:	4640      	mov	r0, r8
 80077d2:	4649      	mov	r1, r9
 80077d4:	f7f8 fd74 	bl	80002c0 <__aeabi_uldivmod>
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	4613      	mov	r3, r2
 80077de:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077e6:	d308      	bcc.n	80077fa <UART_SetConfig+0x3d2>
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077ee:	d204      	bcs.n	80077fa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6a3a      	ldr	r2, [r7, #32]
 80077f6:	60da      	str	r2, [r3, #12]
 80077f8:	e0c8      	b.n	800798c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007800:	e0c4      	b.n	800798c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800780a:	d167      	bne.n	80078dc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800780c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007810:	2b08      	cmp	r3, #8
 8007812:	d828      	bhi.n	8007866 <UART_SetConfig+0x43e>
 8007814:	a201      	add	r2, pc, #4	@ (adr r2, 800781c <UART_SetConfig+0x3f4>)
 8007816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781a:	bf00      	nop
 800781c:	08007841 	.word	0x08007841
 8007820:	08007849 	.word	0x08007849
 8007824:	08007851 	.word	0x08007851
 8007828:	08007867 	.word	0x08007867
 800782c:	08007857 	.word	0x08007857
 8007830:	08007867 	.word	0x08007867
 8007834:	08007867 	.word	0x08007867
 8007838:	08007867 	.word	0x08007867
 800783c:	0800785f 	.word	0x0800785f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007840:	f7fd f8ae 	bl	80049a0 <HAL_RCC_GetPCLK1Freq>
 8007844:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007846:	e014      	b.n	8007872 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007848:	f7fd f8c0 	bl	80049cc <HAL_RCC_GetPCLK2Freq>
 800784c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800784e:	e010      	b.n	8007872 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007850:	4b5a      	ldr	r3, [pc, #360]	@ (80079bc <UART_SetConfig+0x594>)
 8007852:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007854:	e00d      	b.n	8007872 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007856:	f7fd f837 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 800785a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800785c:	e009      	b.n	8007872 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800785e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007862:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007864:	e005      	b.n	8007872 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007866:	2300      	movs	r3, #0
 8007868:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007870:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007874:	2b00      	cmp	r3, #0
 8007876:	f000 8089 	beq.w	800798c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787e:	4a4e      	ldr	r2, [pc, #312]	@ (80079b8 <UART_SetConfig+0x590>)
 8007880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007884:	461a      	mov	r2, r3
 8007886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007888:	fbb3 f3f2 	udiv	r3, r3, r2
 800788c:	005a      	lsls	r2, r3, #1
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	085b      	lsrs	r3, r3, #1
 8007894:	441a      	add	r2, r3
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	fbb2 f3f3 	udiv	r3, r2, r3
 800789e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	2b0f      	cmp	r3, #15
 80078a4:	d916      	bls.n	80078d4 <UART_SetConfig+0x4ac>
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078ac:	d212      	bcs.n	80078d4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	f023 030f 	bic.w	r3, r3, #15
 80078b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	085b      	lsrs	r3, r3, #1
 80078bc:	b29b      	uxth	r3, r3
 80078be:	f003 0307 	and.w	r3, r3, #7
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	8bfb      	ldrh	r3, [r7, #30]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	8bfa      	ldrh	r2, [r7, #30]
 80078d0:	60da      	str	r2, [r3, #12]
 80078d2:	e05b      	b.n	800798c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80078da:	e057      	b.n	800798c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80078e0:	2b08      	cmp	r3, #8
 80078e2:	d828      	bhi.n	8007936 <UART_SetConfig+0x50e>
 80078e4:	a201      	add	r2, pc, #4	@ (adr r2, 80078ec <UART_SetConfig+0x4c4>)
 80078e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ea:	bf00      	nop
 80078ec:	08007911 	.word	0x08007911
 80078f0:	08007919 	.word	0x08007919
 80078f4:	08007921 	.word	0x08007921
 80078f8:	08007937 	.word	0x08007937
 80078fc:	08007927 	.word	0x08007927
 8007900:	08007937 	.word	0x08007937
 8007904:	08007937 	.word	0x08007937
 8007908:	08007937 	.word	0x08007937
 800790c:	0800792f 	.word	0x0800792f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007910:	f7fd f846 	bl	80049a0 <HAL_RCC_GetPCLK1Freq>
 8007914:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007916:	e014      	b.n	8007942 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007918:	f7fd f858 	bl	80049cc <HAL_RCC_GetPCLK2Freq>
 800791c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800791e:	e010      	b.n	8007942 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007920:	4b26      	ldr	r3, [pc, #152]	@ (80079bc <UART_SetConfig+0x594>)
 8007922:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007924:	e00d      	b.n	8007942 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007926:	f7fc ffcf 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 800792a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800792c:	e009      	b.n	8007942 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800792e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007932:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007934:	e005      	b.n	8007942 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007940:	bf00      	nop
    }

    if (pclk != 0U)
 8007942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007944:	2b00      	cmp	r3, #0
 8007946:	d021      	beq.n	800798c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794c:	4a1a      	ldr	r2, [pc, #104]	@ (80079b8 <UART_SetConfig+0x590>)
 800794e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007952:	461a      	mov	r2, r3
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	fbb3 f2f2 	udiv	r2, r3, r2
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	085b      	lsrs	r3, r3, #1
 8007960:	441a      	add	r2, r3
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	fbb2 f3f3 	udiv	r3, r2, r3
 800796a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	2b0f      	cmp	r3, #15
 8007970:	d909      	bls.n	8007986 <UART_SetConfig+0x55e>
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007978:	d205      	bcs.n	8007986 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	b29a      	uxth	r2, r3
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	60da      	str	r2, [r3, #12]
 8007984:	e002      	b.n	800798c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	2201      	movs	r2, #1
 8007990:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	2201      	movs	r2, #1
 8007998:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	2200      	movs	r2, #0
 80079a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	2200      	movs	r2, #0
 80079a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80079a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3730      	adds	r7, #48	@ 0x30
 80079b0:	46bd      	mov	sp, r7
 80079b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079b6:	bf00      	nop
 80079b8:	08009068 	.word	0x08009068
 80079bc:	00f42400 	.word	0x00f42400

080079c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079cc:	f003 0308 	and.w	r3, r3, #8
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00a      	beq.n	80079ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00a      	beq.n	8007a0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00a      	beq.n	8007a2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a32:	f003 0304 	and.w	r3, r3, #4
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a54:	f003 0310 	and.w	r3, r3, #16
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00a      	beq.n	8007a72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a76:	f003 0320 	and.w	r3, r3, #32
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	430a      	orrs	r2, r1
 8007a92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d01a      	beq.n	8007ad6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007abe:	d10a      	bne.n	8007ad6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	605a      	str	r2, [r3, #4]
  }
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b098      	sub	sp, #96	@ 0x60
 8007b08:	af02      	add	r7, sp, #8
 8007b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b14:	f7fa f8ea 	bl	8001cec <HAL_GetTick>
 8007b18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0308 	and.w	r3, r3, #8
 8007b24:	2b08      	cmp	r3, #8
 8007b26:	d12f      	bne.n	8007b88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b30:	2200      	movs	r2, #0
 8007b32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f88e 	bl	8007c58 <UART_WaitOnFlagUntilTimeout>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d022      	beq.n	8007b88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4a:	e853 3f00 	ldrex	r3, [r3]
 8007b4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b56:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b60:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b62:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b68:	e841 2300 	strex	r3, r2, [r1]
 8007b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e6      	bne.n	8007b42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e063      	b.n	8007c50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0304 	and.w	r3, r3, #4
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d149      	bne.n	8007c2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b96:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f857 	bl	8007c58 <UART_WaitOnFlagUntilTimeout>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d03c      	beq.n	8007c2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bce:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bd6:	e841 2300 	strex	r3, r2, [r1]
 8007bda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1e6      	bne.n	8007bb0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3308      	adds	r3, #8
 8007be8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	e853 3f00 	ldrex	r3, [r3]
 8007bf0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f023 0301 	bic.w	r3, r3, #1
 8007bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	3308      	adds	r3, #8
 8007c00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c02:	61fa      	str	r2, [r7, #28]
 8007c04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	69b9      	ldr	r1, [r7, #24]
 8007c08:	69fa      	ldr	r2, [r7, #28]
 8007c0a:	e841 2300 	strex	r3, r2, [r1]
 8007c0e:	617b      	str	r3, [r7, #20]
   return(result);
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1e5      	bne.n	8007be2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2220      	movs	r2, #32
 8007c1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e012      	b.n	8007c50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3758      	adds	r7, #88	@ 0x58
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	603b      	str	r3, [r7, #0]
 8007c64:	4613      	mov	r3, r2
 8007c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c68:	e04f      	b.n	8007d0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c70:	d04b      	beq.n	8007d0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c72:	f7fa f83b 	bl	8001cec <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d302      	bcc.n	8007c88 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e04e      	b.n	8007d2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0304 	and.w	r3, r3, #4
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d037      	beq.n	8007d0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2b80      	cmp	r3, #128	@ 0x80
 8007c9e:	d034      	beq.n	8007d0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2b40      	cmp	r3, #64	@ 0x40
 8007ca4:	d031      	beq.n	8007d0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69db      	ldr	r3, [r3, #28]
 8007cac:	f003 0308 	and.w	r3, r3, #8
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d110      	bne.n	8007cd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2208      	movs	r2, #8
 8007cba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 f838 	bl	8007d32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2208      	movs	r2, #8
 8007cc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e029      	b.n	8007d2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69db      	ldr	r3, [r3, #28]
 8007cdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ce0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ce4:	d111      	bne.n	8007d0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007cee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 f81e 	bl	8007d32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e00f      	b.n	8007d2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	69da      	ldr	r2, [r3, #28]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	4013      	ands	r3, r2
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	bf0c      	ite	eq
 8007d1a:	2301      	moveq	r3, #1
 8007d1c:	2300      	movne	r3, #0
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	461a      	mov	r2, r3
 8007d22:	79fb      	ldrb	r3, [r7, #7]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d0a0      	beq.n	8007c6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d32:	b480      	push	{r7}
 8007d34:	b095      	sub	sp, #84	@ 0x54
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d42:	e853 3f00 	ldrex	r3, [r3]
 8007d46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	461a      	mov	r2, r3
 8007d56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d58:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d5a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d60:	e841 2300 	strex	r3, r2, [r1]
 8007d64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e6      	bne.n	8007d3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3308      	adds	r3, #8
 8007d72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	e853 3f00 	ldrex	r3, [r3]
 8007d7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d82:	f023 0301 	bic.w	r3, r3, #1
 8007d86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e3      	bne.n	8007d6c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d118      	bne.n	8007dde <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	e853 3f00 	ldrex	r3, [r3]
 8007db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f023 0310 	bic.w	r3, r3, #16
 8007dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dca:	61bb      	str	r3, [r7, #24]
 8007dcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dce:	6979      	ldr	r1, [r7, #20]
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	e841 2300 	strex	r3, r2, [r1]
 8007dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e6      	bne.n	8007dac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2220      	movs	r2, #32
 8007de2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007df2:	bf00      	nop
 8007df4:	3754      	adds	r7, #84	@ 0x54
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b085      	sub	sp, #20
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d101      	bne.n	8007e14 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e10:	2302      	movs	r3, #2
 8007e12:	e027      	b.n	8007e64 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2224      	movs	r2, #36	@ 0x24
 8007e20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 0201 	bic.w	r2, r2, #1
 8007e3a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007e42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d101      	bne.n	8007e88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e84:	2302      	movs	r3, #2
 8007e86:	e02d      	b.n	8007ee4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2224      	movs	r2, #36	@ 0x24
 8007e94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f022 0201 	bic.w	r2, r2, #1
 8007eae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f84f 	bl	8007f68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d101      	bne.n	8007f04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f00:	2302      	movs	r3, #2
 8007f02:	e02d      	b.n	8007f60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2224      	movs	r2, #36	@ 0x24
 8007f10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f022 0201 	bic.w	r2, r2, #1
 8007f2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f811 	bl	8007f68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d108      	bne.n	8007f8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f88:	e031      	b.n	8007fee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f8a:	2308      	movs	r3, #8
 8007f8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f8e:	2308      	movs	r3, #8
 8007f90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	0e5b      	lsrs	r3, r3, #25
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	f003 0307 	and.w	r3, r3, #7
 8007fa0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	0f5b      	lsrs	r3, r3, #29
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f003 0307 	and.w	r3, r3, #7
 8007fb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	7b3a      	ldrb	r2, [r7, #12]
 8007fb6:	4911      	ldr	r1, [pc, #68]	@ (8007ffc <UARTEx_SetNbDataToProcess+0x94>)
 8007fb8:	5c8a      	ldrb	r2, [r1, r2]
 8007fba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007fbe:	7b3a      	ldrb	r2, [r7, #12]
 8007fc0:	490f      	ldr	r1, [pc, #60]	@ (8008000 <UARTEx_SetNbDataToProcess+0x98>)
 8007fc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	7b7a      	ldrb	r2, [r7, #13]
 8007fd4:	4909      	ldr	r1, [pc, #36]	@ (8007ffc <UARTEx_SetNbDataToProcess+0x94>)
 8007fd6:	5c8a      	ldrb	r2, [r1, r2]
 8007fd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007fdc:	7b7a      	ldrb	r2, [r7, #13]
 8007fde:	4908      	ldr	r1, [pc, #32]	@ (8008000 <UARTEx_SetNbDataToProcess+0x98>)
 8007fe0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fe2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007fee:	bf00      	nop
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	08009080 	.word	0x08009080
 8008000:	08009088 	.word	0x08009088

08008004 <sbrk_aligned>:
 8008004:	b570      	push	{r4, r5, r6, lr}
 8008006:	4e0f      	ldr	r6, [pc, #60]	@ (8008044 <sbrk_aligned+0x40>)
 8008008:	460c      	mov	r4, r1
 800800a:	6831      	ldr	r1, [r6, #0]
 800800c:	4605      	mov	r5, r0
 800800e:	b911      	cbnz	r1, 8008016 <sbrk_aligned+0x12>
 8008010:	f000 f9e0 	bl	80083d4 <_sbrk_r>
 8008014:	6030      	str	r0, [r6, #0]
 8008016:	4621      	mov	r1, r4
 8008018:	4628      	mov	r0, r5
 800801a:	f000 f9db 	bl	80083d4 <_sbrk_r>
 800801e:	1c43      	adds	r3, r0, #1
 8008020:	d103      	bne.n	800802a <sbrk_aligned+0x26>
 8008022:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008026:	4620      	mov	r0, r4
 8008028:	bd70      	pop	{r4, r5, r6, pc}
 800802a:	1cc4      	adds	r4, r0, #3
 800802c:	f024 0403 	bic.w	r4, r4, #3
 8008030:	42a0      	cmp	r0, r4
 8008032:	d0f8      	beq.n	8008026 <sbrk_aligned+0x22>
 8008034:	1a21      	subs	r1, r4, r0
 8008036:	4628      	mov	r0, r5
 8008038:	f000 f9cc 	bl	80083d4 <_sbrk_r>
 800803c:	3001      	adds	r0, #1
 800803e:	d1f2      	bne.n	8008026 <sbrk_aligned+0x22>
 8008040:	e7ef      	b.n	8008022 <sbrk_aligned+0x1e>
 8008042:	bf00      	nop
 8008044:	20000584 	.word	0x20000584

08008048 <_malloc_r>:
 8008048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800804c:	1ccd      	adds	r5, r1, #3
 800804e:	f025 0503 	bic.w	r5, r5, #3
 8008052:	3508      	adds	r5, #8
 8008054:	2d0c      	cmp	r5, #12
 8008056:	bf38      	it	cc
 8008058:	250c      	movcc	r5, #12
 800805a:	2d00      	cmp	r5, #0
 800805c:	4606      	mov	r6, r0
 800805e:	db01      	blt.n	8008064 <_malloc_r+0x1c>
 8008060:	42a9      	cmp	r1, r5
 8008062:	d904      	bls.n	800806e <_malloc_r+0x26>
 8008064:	230c      	movs	r3, #12
 8008066:	6033      	str	r3, [r6, #0]
 8008068:	2000      	movs	r0, #0
 800806a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800806e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008144 <_malloc_r+0xfc>
 8008072:	f000 f869 	bl	8008148 <__malloc_lock>
 8008076:	f8d8 3000 	ldr.w	r3, [r8]
 800807a:	461c      	mov	r4, r3
 800807c:	bb44      	cbnz	r4, 80080d0 <_malloc_r+0x88>
 800807e:	4629      	mov	r1, r5
 8008080:	4630      	mov	r0, r6
 8008082:	f7ff ffbf 	bl	8008004 <sbrk_aligned>
 8008086:	1c43      	adds	r3, r0, #1
 8008088:	4604      	mov	r4, r0
 800808a:	d158      	bne.n	800813e <_malloc_r+0xf6>
 800808c:	f8d8 4000 	ldr.w	r4, [r8]
 8008090:	4627      	mov	r7, r4
 8008092:	2f00      	cmp	r7, #0
 8008094:	d143      	bne.n	800811e <_malloc_r+0xd6>
 8008096:	2c00      	cmp	r4, #0
 8008098:	d04b      	beq.n	8008132 <_malloc_r+0xea>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	4639      	mov	r1, r7
 800809e:	4630      	mov	r0, r6
 80080a0:	eb04 0903 	add.w	r9, r4, r3
 80080a4:	f000 f996 	bl	80083d4 <_sbrk_r>
 80080a8:	4581      	cmp	r9, r0
 80080aa:	d142      	bne.n	8008132 <_malloc_r+0xea>
 80080ac:	6821      	ldr	r1, [r4, #0]
 80080ae:	1a6d      	subs	r5, r5, r1
 80080b0:	4629      	mov	r1, r5
 80080b2:	4630      	mov	r0, r6
 80080b4:	f7ff ffa6 	bl	8008004 <sbrk_aligned>
 80080b8:	3001      	adds	r0, #1
 80080ba:	d03a      	beq.n	8008132 <_malloc_r+0xea>
 80080bc:	6823      	ldr	r3, [r4, #0]
 80080be:	442b      	add	r3, r5
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	f8d8 3000 	ldr.w	r3, [r8]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	bb62      	cbnz	r2, 8008124 <_malloc_r+0xdc>
 80080ca:	f8c8 7000 	str.w	r7, [r8]
 80080ce:	e00f      	b.n	80080f0 <_malloc_r+0xa8>
 80080d0:	6822      	ldr	r2, [r4, #0]
 80080d2:	1b52      	subs	r2, r2, r5
 80080d4:	d420      	bmi.n	8008118 <_malloc_r+0xd0>
 80080d6:	2a0b      	cmp	r2, #11
 80080d8:	d917      	bls.n	800810a <_malloc_r+0xc2>
 80080da:	1961      	adds	r1, r4, r5
 80080dc:	42a3      	cmp	r3, r4
 80080de:	6025      	str	r5, [r4, #0]
 80080e0:	bf18      	it	ne
 80080e2:	6059      	strne	r1, [r3, #4]
 80080e4:	6863      	ldr	r3, [r4, #4]
 80080e6:	bf08      	it	eq
 80080e8:	f8c8 1000 	streq.w	r1, [r8]
 80080ec:	5162      	str	r2, [r4, r5]
 80080ee:	604b      	str	r3, [r1, #4]
 80080f0:	4630      	mov	r0, r6
 80080f2:	f000 f82f 	bl	8008154 <__malloc_unlock>
 80080f6:	f104 000b 	add.w	r0, r4, #11
 80080fa:	1d23      	adds	r3, r4, #4
 80080fc:	f020 0007 	bic.w	r0, r0, #7
 8008100:	1ac2      	subs	r2, r0, r3
 8008102:	bf1c      	itt	ne
 8008104:	1a1b      	subne	r3, r3, r0
 8008106:	50a3      	strne	r3, [r4, r2]
 8008108:	e7af      	b.n	800806a <_malloc_r+0x22>
 800810a:	6862      	ldr	r2, [r4, #4]
 800810c:	42a3      	cmp	r3, r4
 800810e:	bf0c      	ite	eq
 8008110:	f8c8 2000 	streq.w	r2, [r8]
 8008114:	605a      	strne	r2, [r3, #4]
 8008116:	e7eb      	b.n	80080f0 <_malloc_r+0xa8>
 8008118:	4623      	mov	r3, r4
 800811a:	6864      	ldr	r4, [r4, #4]
 800811c:	e7ae      	b.n	800807c <_malloc_r+0x34>
 800811e:	463c      	mov	r4, r7
 8008120:	687f      	ldr	r7, [r7, #4]
 8008122:	e7b6      	b.n	8008092 <_malloc_r+0x4a>
 8008124:	461a      	mov	r2, r3
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	42a3      	cmp	r3, r4
 800812a:	d1fb      	bne.n	8008124 <_malloc_r+0xdc>
 800812c:	2300      	movs	r3, #0
 800812e:	6053      	str	r3, [r2, #4]
 8008130:	e7de      	b.n	80080f0 <_malloc_r+0xa8>
 8008132:	230c      	movs	r3, #12
 8008134:	6033      	str	r3, [r6, #0]
 8008136:	4630      	mov	r0, r6
 8008138:	f000 f80c 	bl	8008154 <__malloc_unlock>
 800813c:	e794      	b.n	8008068 <_malloc_r+0x20>
 800813e:	6005      	str	r5, [r0, #0]
 8008140:	e7d6      	b.n	80080f0 <_malloc_r+0xa8>
 8008142:	bf00      	nop
 8008144:	20000588 	.word	0x20000588

08008148 <__malloc_lock>:
 8008148:	4801      	ldr	r0, [pc, #4]	@ (8008150 <__malloc_lock+0x8>)
 800814a:	f000 b97e 	b.w	800844a <__retarget_lock_acquire_recursive>
 800814e:	bf00      	nop
 8008150:	200006c8 	.word	0x200006c8

08008154 <__malloc_unlock>:
 8008154:	4801      	ldr	r0, [pc, #4]	@ (800815c <__malloc_unlock+0x8>)
 8008156:	f000 b979 	b.w	800844c <__retarget_lock_release_recursive>
 800815a:	bf00      	nop
 800815c:	200006c8 	.word	0x200006c8

08008160 <std>:
 8008160:	2300      	movs	r3, #0
 8008162:	b510      	push	{r4, lr}
 8008164:	4604      	mov	r4, r0
 8008166:	e9c0 3300 	strd	r3, r3, [r0]
 800816a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800816e:	6083      	str	r3, [r0, #8]
 8008170:	8181      	strh	r1, [r0, #12]
 8008172:	6643      	str	r3, [r0, #100]	@ 0x64
 8008174:	81c2      	strh	r2, [r0, #14]
 8008176:	6183      	str	r3, [r0, #24]
 8008178:	4619      	mov	r1, r3
 800817a:	2208      	movs	r2, #8
 800817c:	305c      	adds	r0, #92	@ 0x5c
 800817e:	f000 f921 	bl	80083c4 <memset>
 8008182:	4b0d      	ldr	r3, [pc, #52]	@ (80081b8 <std+0x58>)
 8008184:	6263      	str	r3, [r4, #36]	@ 0x24
 8008186:	4b0d      	ldr	r3, [pc, #52]	@ (80081bc <std+0x5c>)
 8008188:	62a3      	str	r3, [r4, #40]	@ 0x28
 800818a:	4b0d      	ldr	r3, [pc, #52]	@ (80081c0 <std+0x60>)
 800818c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800818e:	4b0d      	ldr	r3, [pc, #52]	@ (80081c4 <std+0x64>)
 8008190:	6323      	str	r3, [r4, #48]	@ 0x30
 8008192:	4b0d      	ldr	r3, [pc, #52]	@ (80081c8 <std+0x68>)
 8008194:	6224      	str	r4, [r4, #32]
 8008196:	429c      	cmp	r4, r3
 8008198:	d006      	beq.n	80081a8 <std+0x48>
 800819a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800819e:	4294      	cmp	r4, r2
 80081a0:	d002      	beq.n	80081a8 <std+0x48>
 80081a2:	33d0      	adds	r3, #208	@ 0xd0
 80081a4:	429c      	cmp	r4, r3
 80081a6:	d105      	bne.n	80081b4 <std+0x54>
 80081a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80081ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b0:	f000 b94a 	b.w	8008448 <__retarget_lock_init_recursive>
 80081b4:	bd10      	pop	{r4, pc}
 80081b6:	bf00      	nop
 80081b8:	08008bdd 	.word	0x08008bdd
 80081bc:	08008bff 	.word	0x08008bff
 80081c0:	08008c37 	.word	0x08008c37
 80081c4:	08008c5b 	.word	0x08008c5b
 80081c8:	2000058c 	.word	0x2000058c

080081cc <stdio_exit_handler>:
 80081cc:	4a02      	ldr	r2, [pc, #8]	@ (80081d8 <stdio_exit_handler+0xc>)
 80081ce:	4903      	ldr	r1, [pc, #12]	@ (80081dc <stdio_exit_handler+0x10>)
 80081d0:	4803      	ldr	r0, [pc, #12]	@ (80081e0 <stdio_exit_handler+0x14>)
 80081d2:	f000 b869 	b.w	80082a8 <_fwalk_sglue>
 80081d6:	bf00      	nop
 80081d8:	2000000c 	.word	0x2000000c
 80081dc:	08008b8d 	.word	0x08008b8d
 80081e0:	2000001c 	.word	0x2000001c

080081e4 <cleanup_stdio>:
 80081e4:	6841      	ldr	r1, [r0, #4]
 80081e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008218 <cleanup_stdio+0x34>)
 80081e8:	4299      	cmp	r1, r3
 80081ea:	b510      	push	{r4, lr}
 80081ec:	4604      	mov	r4, r0
 80081ee:	d001      	beq.n	80081f4 <cleanup_stdio+0x10>
 80081f0:	f000 fccc 	bl	8008b8c <_fflush_r>
 80081f4:	68a1      	ldr	r1, [r4, #8]
 80081f6:	4b09      	ldr	r3, [pc, #36]	@ (800821c <cleanup_stdio+0x38>)
 80081f8:	4299      	cmp	r1, r3
 80081fa:	d002      	beq.n	8008202 <cleanup_stdio+0x1e>
 80081fc:	4620      	mov	r0, r4
 80081fe:	f000 fcc5 	bl	8008b8c <_fflush_r>
 8008202:	68e1      	ldr	r1, [r4, #12]
 8008204:	4b06      	ldr	r3, [pc, #24]	@ (8008220 <cleanup_stdio+0x3c>)
 8008206:	4299      	cmp	r1, r3
 8008208:	d004      	beq.n	8008214 <cleanup_stdio+0x30>
 800820a:	4620      	mov	r0, r4
 800820c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008210:	f000 bcbc 	b.w	8008b8c <_fflush_r>
 8008214:	bd10      	pop	{r4, pc}
 8008216:	bf00      	nop
 8008218:	2000058c 	.word	0x2000058c
 800821c:	200005f4 	.word	0x200005f4
 8008220:	2000065c 	.word	0x2000065c

08008224 <global_stdio_init.part.0>:
 8008224:	b510      	push	{r4, lr}
 8008226:	4b0b      	ldr	r3, [pc, #44]	@ (8008254 <global_stdio_init.part.0+0x30>)
 8008228:	4c0b      	ldr	r4, [pc, #44]	@ (8008258 <global_stdio_init.part.0+0x34>)
 800822a:	4a0c      	ldr	r2, [pc, #48]	@ (800825c <global_stdio_init.part.0+0x38>)
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	4620      	mov	r0, r4
 8008230:	2200      	movs	r2, #0
 8008232:	2104      	movs	r1, #4
 8008234:	f7ff ff94 	bl	8008160 <std>
 8008238:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800823c:	2201      	movs	r2, #1
 800823e:	2109      	movs	r1, #9
 8008240:	f7ff ff8e 	bl	8008160 <std>
 8008244:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008248:	2202      	movs	r2, #2
 800824a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800824e:	2112      	movs	r1, #18
 8008250:	f7ff bf86 	b.w	8008160 <std>
 8008254:	200006c4 	.word	0x200006c4
 8008258:	2000058c 	.word	0x2000058c
 800825c:	080081cd 	.word	0x080081cd

08008260 <__sfp_lock_acquire>:
 8008260:	4801      	ldr	r0, [pc, #4]	@ (8008268 <__sfp_lock_acquire+0x8>)
 8008262:	f000 b8f2 	b.w	800844a <__retarget_lock_acquire_recursive>
 8008266:	bf00      	nop
 8008268:	200006c9 	.word	0x200006c9

0800826c <__sfp_lock_release>:
 800826c:	4801      	ldr	r0, [pc, #4]	@ (8008274 <__sfp_lock_release+0x8>)
 800826e:	f000 b8ed 	b.w	800844c <__retarget_lock_release_recursive>
 8008272:	bf00      	nop
 8008274:	200006c9 	.word	0x200006c9

08008278 <__sinit>:
 8008278:	b510      	push	{r4, lr}
 800827a:	4604      	mov	r4, r0
 800827c:	f7ff fff0 	bl	8008260 <__sfp_lock_acquire>
 8008280:	6a23      	ldr	r3, [r4, #32]
 8008282:	b11b      	cbz	r3, 800828c <__sinit+0x14>
 8008284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008288:	f7ff bff0 	b.w	800826c <__sfp_lock_release>
 800828c:	4b04      	ldr	r3, [pc, #16]	@ (80082a0 <__sinit+0x28>)
 800828e:	6223      	str	r3, [r4, #32]
 8008290:	4b04      	ldr	r3, [pc, #16]	@ (80082a4 <__sinit+0x2c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1f5      	bne.n	8008284 <__sinit+0xc>
 8008298:	f7ff ffc4 	bl	8008224 <global_stdio_init.part.0>
 800829c:	e7f2      	b.n	8008284 <__sinit+0xc>
 800829e:	bf00      	nop
 80082a0:	080081e5 	.word	0x080081e5
 80082a4:	200006c4 	.word	0x200006c4

080082a8 <_fwalk_sglue>:
 80082a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082ac:	4607      	mov	r7, r0
 80082ae:	4688      	mov	r8, r1
 80082b0:	4614      	mov	r4, r2
 80082b2:	2600      	movs	r6, #0
 80082b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082b8:	f1b9 0901 	subs.w	r9, r9, #1
 80082bc:	d505      	bpl.n	80082ca <_fwalk_sglue+0x22>
 80082be:	6824      	ldr	r4, [r4, #0]
 80082c0:	2c00      	cmp	r4, #0
 80082c2:	d1f7      	bne.n	80082b4 <_fwalk_sglue+0xc>
 80082c4:	4630      	mov	r0, r6
 80082c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082ca:	89ab      	ldrh	r3, [r5, #12]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d907      	bls.n	80082e0 <_fwalk_sglue+0x38>
 80082d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082d4:	3301      	adds	r3, #1
 80082d6:	d003      	beq.n	80082e0 <_fwalk_sglue+0x38>
 80082d8:	4629      	mov	r1, r5
 80082da:	4638      	mov	r0, r7
 80082dc:	47c0      	blx	r8
 80082de:	4306      	orrs	r6, r0
 80082e0:	3568      	adds	r5, #104	@ 0x68
 80082e2:	e7e9      	b.n	80082b8 <_fwalk_sglue+0x10>

080082e4 <iprintf>:
 80082e4:	b40f      	push	{r0, r1, r2, r3}
 80082e6:	b507      	push	{r0, r1, r2, lr}
 80082e8:	4906      	ldr	r1, [pc, #24]	@ (8008304 <iprintf+0x20>)
 80082ea:	ab04      	add	r3, sp, #16
 80082ec:	6808      	ldr	r0, [r1, #0]
 80082ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f2:	6881      	ldr	r1, [r0, #8]
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	f000 f91f 	bl	8008538 <_vfiprintf_r>
 80082fa:	b003      	add	sp, #12
 80082fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008300:	b004      	add	sp, #16
 8008302:	4770      	bx	lr
 8008304:	20000018 	.word	0x20000018

08008308 <_puts_r>:
 8008308:	6a03      	ldr	r3, [r0, #32]
 800830a:	b570      	push	{r4, r5, r6, lr}
 800830c:	6884      	ldr	r4, [r0, #8]
 800830e:	4605      	mov	r5, r0
 8008310:	460e      	mov	r6, r1
 8008312:	b90b      	cbnz	r3, 8008318 <_puts_r+0x10>
 8008314:	f7ff ffb0 	bl	8008278 <__sinit>
 8008318:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800831a:	07db      	lsls	r3, r3, #31
 800831c:	d405      	bmi.n	800832a <_puts_r+0x22>
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	0598      	lsls	r0, r3, #22
 8008322:	d402      	bmi.n	800832a <_puts_r+0x22>
 8008324:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008326:	f000 f890 	bl	800844a <__retarget_lock_acquire_recursive>
 800832a:	89a3      	ldrh	r3, [r4, #12]
 800832c:	0719      	lsls	r1, r3, #28
 800832e:	d502      	bpl.n	8008336 <_puts_r+0x2e>
 8008330:	6923      	ldr	r3, [r4, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d135      	bne.n	80083a2 <_puts_r+0x9a>
 8008336:	4621      	mov	r1, r4
 8008338:	4628      	mov	r0, r5
 800833a:	f000 fcd1 	bl	8008ce0 <__swsetup_r>
 800833e:	b380      	cbz	r0, 80083a2 <_puts_r+0x9a>
 8008340:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008344:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008346:	07da      	lsls	r2, r3, #31
 8008348:	d405      	bmi.n	8008356 <_puts_r+0x4e>
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	059b      	lsls	r3, r3, #22
 800834e:	d402      	bmi.n	8008356 <_puts_r+0x4e>
 8008350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008352:	f000 f87b 	bl	800844c <__retarget_lock_release_recursive>
 8008356:	4628      	mov	r0, r5
 8008358:	bd70      	pop	{r4, r5, r6, pc}
 800835a:	2b00      	cmp	r3, #0
 800835c:	da04      	bge.n	8008368 <_puts_r+0x60>
 800835e:	69a2      	ldr	r2, [r4, #24]
 8008360:	429a      	cmp	r2, r3
 8008362:	dc17      	bgt.n	8008394 <_puts_r+0x8c>
 8008364:	290a      	cmp	r1, #10
 8008366:	d015      	beq.n	8008394 <_puts_r+0x8c>
 8008368:	6823      	ldr	r3, [r4, #0]
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	6022      	str	r2, [r4, #0]
 800836e:	7019      	strb	r1, [r3, #0]
 8008370:	68a3      	ldr	r3, [r4, #8]
 8008372:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008376:	3b01      	subs	r3, #1
 8008378:	60a3      	str	r3, [r4, #8]
 800837a:	2900      	cmp	r1, #0
 800837c:	d1ed      	bne.n	800835a <_puts_r+0x52>
 800837e:	2b00      	cmp	r3, #0
 8008380:	da11      	bge.n	80083a6 <_puts_r+0x9e>
 8008382:	4622      	mov	r2, r4
 8008384:	210a      	movs	r1, #10
 8008386:	4628      	mov	r0, r5
 8008388:	f000 fc6b 	bl	8008c62 <__swbuf_r>
 800838c:	3001      	adds	r0, #1
 800838e:	d0d7      	beq.n	8008340 <_puts_r+0x38>
 8008390:	250a      	movs	r5, #10
 8008392:	e7d7      	b.n	8008344 <_puts_r+0x3c>
 8008394:	4622      	mov	r2, r4
 8008396:	4628      	mov	r0, r5
 8008398:	f000 fc63 	bl	8008c62 <__swbuf_r>
 800839c:	3001      	adds	r0, #1
 800839e:	d1e7      	bne.n	8008370 <_puts_r+0x68>
 80083a0:	e7ce      	b.n	8008340 <_puts_r+0x38>
 80083a2:	3e01      	subs	r6, #1
 80083a4:	e7e4      	b.n	8008370 <_puts_r+0x68>
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	6022      	str	r2, [r4, #0]
 80083ac:	220a      	movs	r2, #10
 80083ae:	701a      	strb	r2, [r3, #0]
 80083b0:	e7ee      	b.n	8008390 <_puts_r+0x88>
	...

080083b4 <puts>:
 80083b4:	4b02      	ldr	r3, [pc, #8]	@ (80083c0 <puts+0xc>)
 80083b6:	4601      	mov	r1, r0
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	f7ff bfa5 	b.w	8008308 <_puts_r>
 80083be:	bf00      	nop
 80083c0:	20000018 	.word	0x20000018

080083c4 <memset>:
 80083c4:	4402      	add	r2, r0
 80083c6:	4603      	mov	r3, r0
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d100      	bne.n	80083ce <memset+0xa>
 80083cc:	4770      	bx	lr
 80083ce:	f803 1b01 	strb.w	r1, [r3], #1
 80083d2:	e7f9      	b.n	80083c8 <memset+0x4>

080083d4 <_sbrk_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	4d06      	ldr	r5, [pc, #24]	@ (80083f0 <_sbrk_r+0x1c>)
 80083d8:	2300      	movs	r3, #0
 80083da:	4604      	mov	r4, r0
 80083dc:	4608      	mov	r0, r1
 80083de:	602b      	str	r3, [r5, #0]
 80083e0:	f7f8 ff44 	bl	800126c <_sbrk>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_sbrk_r+0x1a>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_sbrk_r+0x1a>
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	200006cc 	.word	0x200006cc

080083f4 <__errno>:
 80083f4:	4b01      	ldr	r3, [pc, #4]	@ (80083fc <__errno+0x8>)
 80083f6:	6818      	ldr	r0, [r3, #0]
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	20000018 	.word	0x20000018

08008400 <__libc_init_array>:
 8008400:	b570      	push	{r4, r5, r6, lr}
 8008402:	4d0d      	ldr	r5, [pc, #52]	@ (8008438 <__libc_init_array+0x38>)
 8008404:	4c0d      	ldr	r4, [pc, #52]	@ (800843c <__libc_init_array+0x3c>)
 8008406:	1b64      	subs	r4, r4, r5
 8008408:	10a4      	asrs	r4, r4, #2
 800840a:	2600      	movs	r6, #0
 800840c:	42a6      	cmp	r6, r4
 800840e:	d109      	bne.n	8008424 <__libc_init_array+0x24>
 8008410:	4d0b      	ldr	r5, [pc, #44]	@ (8008440 <__libc_init_array+0x40>)
 8008412:	4c0c      	ldr	r4, [pc, #48]	@ (8008444 <__libc_init_array+0x44>)
 8008414:	f000 fd84 	bl	8008f20 <_init>
 8008418:	1b64      	subs	r4, r4, r5
 800841a:	10a4      	asrs	r4, r4, #2
 800841c:	2600      	movs	r6, #0
 800841e:	42a6      	cmp	r6, r4
 8008420:	d105      	bne.n	800842e <__libc_init_array+0x2e>
 8008422:	bd70      	pop	{r4, r5, r6, pc}
 8008424:	f855 3b04 	ldr.w	r3, [r5], #4
 8008428:	4798      	blx	r3
 800842a:	3601      	adds	r6, #1
 800842c:	e7ee      	b.n	800840c <__libc_init_array+0xc>
 800842e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008432:	4798      	blx	r3
 8008434:	3601      	adds	r6, #1
 8008436:	e7f2      	b.n	800841e <__libc_init_array+0x1e>
 8008438:	080090cc 	.word	0x080090cc
 800843c:	080090cc 	.word	0x080090cc
 8008440:	080090cc 	.word	0x080090cc
 8008444:	080090d0 	.word	0x080090d0

08008448 <__retarget_lock_init_recursive>:
 8008448:	4770      	bx	lr

0800844a <__retarget_lock_acquire_recursive>:
 800844a:	4770      	bx	lr

0800844c <__retarget_lock_release_recursive>:
 800844c:	4770      	bx	lr
	...

08008450 <_free_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4605      	mov	r5, r0
 8008454:	2900      	cmp	r1, #0
 8008456:	d041      	beq.n	80084dc <_free_r+0x8c>
 8008458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800845c:	1f0c      	subs	r4, r1, #4
 800845e:	2b00      	cmp	r3, #0
 8008460:	bfb8      	it	lt
 8008462:	18e4      	addlt	r4, r4, r3
 8008464:	f7ff fe70 	bl	8008148 <__malloc_lock>
 8008468:	4a1d      	ldr	r2, [pc, #116]	@ (80084e0 <_free_r+0x90>)
 800846a:	6813      	ldr	r3, [r2, #0]
 800846c:	b933      	cbnz	r3, 800847c <_free_r+0x2c>
 800846e:	6063      	str	r3, [r4, #4]
 8008470:	6014      	str	r4, [r2, #0]
 8008472:	4628      	mov	r0, r5
 8008474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008478:	f7ff be6c 	b.w	8008154 <__malloc_unlock>
 800847c:	42a3      	cmp	r3, r4
 800847e:	d908      	bls.n	8008492 <_free_r+0x42>
 8008480:	6820      	ldr	r0, [r4, #0]
 8008482:	1821      	adds	r1, r4, r0
 8008484:	428b      	cmp	r3, r1
 8008486:	bf01      	itttt	eq
 8008488:	6819      	ldreq	r1, [r3, #0]
 800848a:	685b      	ldreq	r3, [r3, #4]
 800848c:	1809      	addeq	r1, r1, r0
 800848e:	6021      	streq	r1, [r4, #0]
 8008490:	e7ed      	b.n	800846e <_free_r+0x1e>
 8008492:	461a      	mov	r2, r3
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	b10b      	cbz	r3, 800849c <_free_r+0x4c>
 8008498:	42a3      	cmp	r3, r4
 800849a:	d9fa      	bls.n	8008492 <_free_r+0x42>
 800849c:	6811      	ldr	r1, [r2, #0]
 800849e:	1850      	adds	r0, r2, r1
 80084a0:	42a0      	cmp	r0, r4
 80084a2:	d10b      	bne.n	80084bc <_free_r+0x6c>
 80084a4:	6820      	ldr	r0, [r4, #0]
 80084a6:	4401      	add	r1, r0
 80084a8:	1850      	adds	r0, r2, r1
 80084aa:	4283      	cmp	r3, r0
 80084ac:	6011      	str	r1, [r2, #0]
 80084ae:	d1e0      	bne.n	8008472 <_free_r+0x22>
 80084b0:	6818      	ldr	r0, [r3, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	6053      	str	r3, [r2, #4]
 80084b6:	4408      	add	r0, r1
 80084b8:	6010      	str	r0, [r2, #0]
 80084ba:	e7da      	b.n	8008472 <_free_r+0x22>
 80084bc:	d902      	bls.n	80084c4 <_free_r+0x74>
 80084be:	230c      	movs	r3, #12
 80084c0:	602b      	str	r3, [r5, #0]
 80084c2:	e7d6      	b.n	8008472 <_free_r+0x22>
 80084c4:	6820      	ldr	r0, [r4, #0]
 80084c6:	1821      	adds	r1, r4, r0
 80084c8:	428b      	cmp	r3, r1
 80084ca:	bf04      	itt	eq
 80084cc:	6819      	ldreq	r1, [r3, #0]
 80084ce:	685b      	ldreq	r3, [r3, #4]
 80084d0:	6063      	str	r3, [r4, #4]
 80084d2:	bf04      	itt	eq
 80084d4:	1809      	addeq	r1, r1, r0
 80084d6:	6021      	streq	r1, [r4, #0]
 80084d8:	6054      	str	r4, [r2, #4]
 80084da:	e7ca      	b.n	8008472 <_free_r+0x22>
 80084dc:	bd38      	pop	{r3, r4, r5, pc}
 80084de:	bf00      	nop
 80084e0:	20000588 	.word	0x20000588

080084e4 <__sfputc_r>:
 80084e4:	6893      	ldr	r3, [r2, #8]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	b410      	push	{r4}
 80084ec:	6093      	str	r3, [r2, #8]
 80084ee:	da08      	bge.n	8008502 <__sfputc_r+0x1e>
 80084f0:	6994      	ldr	r4, [r2, #24]
 80084f2:	42a3      	cmp	r3, r4
 80084f4:	db01      	blt.n	80084fa <__sfputc_r+0x16>
 80084f6:	290a      	cmp	r1, #10
 80084f8:	d103      	bne.n	8008502 <__sfputc_r+0x1e>
 80084fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084fe:	f000 bbb0 	b.w	8008c62 <__swbuf_r>
 8008502:	6813      	ldr	r3, [r2, #0]
 8008504:	1c58      	adds	r0, r3, #1
 8008506:	6010      	str	r0, [r2, #0]
 8008508:	7019      	strb	r1, [r3, #0]
 800850a:	4608      	mov	r0, r1
 800850c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008510:	4770      	bx	lr

08008512 <__sfputs_r>:
 8008512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008514:	4606      	mov	r6, r0
 8008516:	460f      	mov	r7, r1
 8008518:	4614      	mov	r4, r2
 800851a:	18d5      	adds	r5, r2, r3
 800851c:	42ac      	cmp	r4, r5
 800851e:	d101      	bne.n	8008524 <__sfputs_r+0x12>
 8008520:	2000      	movs	r0, #0
 8008522:	e007      	b.n	8008534 <__sfputs_r+0x22>
 8008524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008528:	463a      	mov	r2, r7
 800852a:	4630      	mov	r0, r6
 800852c:	f7ff ffda 	bl	80084e4 <__sfputc_r>
 8008530:	1c43      	adds	r3, r0, #1
 8008532:	d1f3      	bne.n	800851c <__sfputs_r+0xa>
 8008534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008538 <_vfiprintf_r>:
 8008538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	460d      	mov	r5, r1
 800853e:	b09d      	sub	sp, #116	@ 0x74
 8008540:	4614      	mov	r4, r2
 8008542:	4698      	mov	r8, r3
 8008544:	4606      	mov	r6, r0
 8008546:	b118      	cbz	r0, 8008550 <_vfiprintf_r+0x18>
 8008548:	6a03      	ldr	r3, [r0, #32]
 800854a:	b90b      	cbnz	r3, 8008550 <_vfiprintf_r+0x18>
 800854c:	f7ff fe94 	bl	8008278 <__sinit>
 8008550:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008552:	07d9      	lsls	r1, r3, #31
 8008554:	d405      	bmi.n	8008562 <_vfiprintf_r+0x2a>
 8008556:	89ab      	ldrh	r3, [r5, #12]
 8008558:	059a      	lsls	r2, r3, #22
 800855a:	d402      	bmi.n	8008562 <_vfiprintf_r+0x2a>
 800855c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800855e:	f7ff ff74 	bl	800844a <__retarget_lock_acquire_recursive>
 8008562:	89ab      	ldrh	r3, [r5, #12]
 8008564:	071b      	lsls	r3, r3, #28
 8008566:	d501      	bpl.n	800856c <_vfiprintf_r+0x34>
 8008568:	692b      	ldr	r3, [r5, #16]
 800856a:	b99b      	cbnz	r3, 8008594 <_vfiprintf_r+0x5c>
 800856c:	4629      	mov	r1, r5
 800856e:	4630      	mov	r0, r6
 8008570:	f000 fbb6 	bl	8008ce0 <__swsetup_r>
 8008574:	b170      	cbz	r0, 8008594 <_vfiprintf_r+0x5c>
 8008576:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008578:	07dc      	lsls	r4, r3, #31
 800857a:	d504      	bpl.n	8008586 <_vfiprintf_r+0x4e>
 800857c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008580:	b01d      	add	sp, #116	@ 0x74
 8008582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008586:	89ab      	ldrh	r3, [r5, #12]
 8008588:	0598      	lsls	r0, r3, #22
 800858a:	d4f7      	bmi.n	800857c <_vfiprintf_r+0x44>
 800858c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800858e:	f7ff ff5d 	bl	800844c <__retarget_lock_release_recursive>
 8008592:	e7f3      	b.n	800857c <_vfiprintf_r+0x44>
 8008594:	2300      	movs	r3, #0
 8008596:	9309      	str	r3, [sp, #36]	@ 0x24
 8008598:	2320      	movs	r3, #32
 800859a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800859e:	f8cd 800c 	str.w	r8, [sp, #12]
 80085a2:	2330      	movs	r3, #48	@ 0x30
 80085a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008754 <_vfiprintf_r+0x21c>
 80085a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085ac:	f04f 0901 	mov.w	r9, #1
 80085b0:	4623      	mov	r3, r4
 80085b2:	469a      	mov	sl, r3
 80085b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085b8:	b10a      	cbz	r2, 80085be <_vfiprintf_r+0x86>
 80085ba:	2a25      	cmp	r2, #37	@ 0x25
 80085bc:	d1f9      	bne.n	80085b2 <_vfiprintf_r+0x7a>
 80085be:	ebba 0b04 	subs.w	fp, sl, r4
 80085c2:	d00b      	beq.n	80085dc <_vfiprintf_r+0xa4>
 80085c4:	465b      	mov	r3, fp
 80085c6:	4622      	mov	r2, r4
 80085c8:	4629      	mov	r1, r5
 80085ca:	4630      	mov	r0, r6
 80085cc:	f7ff ffa1 	bl	8008512 <__sfputs_r>
 80085d0:	3001      	adds	r0, #1
 80085d2:	f000 80a7 	beq.w	8008724 <_vfiprintf_r+0x1ec>
 80085d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085d8:	445a      	add	r2, fp
 80085da:	9209      	str	r2, [sp, #36]	@ 0x24
 80085dc:	f89a 3000 	ldrb.w	r3, [sl]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 809f 	beq.w	8008724 <_vfiprintf_r+0x1ec>
 80085e6:	2300      	movs	r3, #0
 80085e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085f0:	f10a 0a01 	add.w	sl, sl, #1
 80085f4:	9304      	str	r3, [sp, #16]
 80085f6:	9307      	str	r3, [sp, #28]
 80085f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80085fe:	4654      	mov	r4, sl
 8008600:	2205      	movs	r2, #5
 8008602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008606:	4853      	ldr	r0, [pc, #332]	@ (8008754 <_vfiprintf_r+0x21c>)
 8008608:	f7f7 fe0a 	bl	8000220 <memchr>
 800860c:	9a04      	ldr	r2, [sp, #16]
 800860e:	b9d8      	cbnz	r0, 8008648 <_vfiprintf_r+0x110>
 8008610:	06d1      	lsls	r1, r2, #27
 8008612:	bf44      	itt	mi
 8008614:	2320      	movmi	r3, #32
 8008616:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800861a:	0713      	lsls	r3, r2, #28
 800861c:	bf44      	itt	mi
 800861e:	232b      	movmi	r3, #43	@ 0x2b
 8008620:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008624:	f89a 3000 	ldrb.w	r3, [sl]
 8008628:	2b2a      	cmp	r3, #42	@ 0x2a
 800862a:	d015      	beq.n	8008658 <_vfiprintf_r+0x120>
 800862c:	9a07      	ldr	r2, [sp, #28]
 800862e:	4654      	mov	r4, sl
 8008630:	2000      	movs	r0, #0
 8008632:	f04f 0c0a 	mov.w	ip, #10
 8008636:	4621      	mov	r1, r4
 8008638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800863c:	3b30      	subs	r3, #48	@ 0x30
 800863e:	2b09      	cmp	r3, #9
 8008640:	d94b      	bls.n	80086da <_vfiprintf_r+0x1a2>
 8008642:	b1b0      	cbz	r0, 8008672 <_vfiprintf_r+0x13a>
 8008644:	9207      	str	r2, [sp, #28]
 8008646:	e014      	b.n	8008672 <_vfiprintf_r+0x13a>
 8008648:	eba0 0308 	sub.w	r3, r0, r8
 800864c:	fa09 f303 	lsl.w	r3, r9, r3
 8008650:	4313      	orrs	r3, r2
 8008652:	9304      	str	r3, [sp, #16]
 8008654:	46a2      	mov	sl, r4
 8008656:	e7d2      	b.n	80085fe <_vfiprintf_r+0xc6>
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	1d19      	adds	r1, r3, #4
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	9103      	str	r1, [sp, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	bfbb      	ittet	lt
 8008664:	425b      	neglt	r3, r3
 8008666:	f042 0202 	orrlt.w	r2, r2, #2
 800866a:	9307      	strge	r3, [sp, #28]
 800866c:	9307      	strlt	r3, [sp, #28]
 800866e:	bfb8      	it	lt
 8008670:	9204      	strlt	r2, [sp, #16]
 8008672:	7823      	ldrb	r3, [r4, #0]
 8008674:	2b2e      	cmp	r3, #46	@ 0x2e
 8008676:	d10a      	bne.n	800868e <_vfiprintf_r+0x156>
 8008678:	7863      	ldrb	r3, [r4, #1]
 800867a:	2b2a      	cmp	r3, #42	@ 0x2a
 800867c:	d132      	bne.n	80086e4 <_vfiprintf_r+0x1ac>
 800867e:	9b03      	ldr	r3, [sp, #12]
 8008680:	1d1a      	adds	r2, r3, #4
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	9203      	str	r2, [sp, #12]
 8008686:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800868a:	3402      	adds	r4, #2
 800868c:	9305      	str	r3, [sp, #20]
 800868e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008764 <_vfiprintf_r+0x22c>
 8008692:	7821      	ldrb	r1, [r4, #0]
 8008694:	2203      	movs	r2, #3
 8008696:	4650      	mov	r0, sl
 8008698:	f7f7 fdc2 	bl	8000220 <memchr>
 800869c:	b138      	cbz	r0, 80086ae <_vfiprintf_r+0x176>
 800869e:	9b04      	ldr	r3, [sp, #16]
 80086a0:	eba0 000a 	sub.w	r0, r0, sl
 80086a4:	2240      	movs	r2, #64	@ 0x40
 80086a6:	4082      	lsls	r2, r0
 80086a8:	4313      	orrs	r3, r2
 80086aa:	3401      	adds	r4, #1
 80086ac:	9304      	str	r3, [sp, #16]
 80086ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086b2:	4829      	ldr	r0, [pc, #164]	@ (8008758 <_vfiprintf_r+0x220>)
 80086b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086b8:	2206      	movs	r2, #6
 80086ba:	f7f7 fdb1 	bl	8000220 <memchr>
 80086be:	2800      	cmp	r0, #0
 80086c0:	d03f      	beq.n	8008742 <_vfiprintf_r+0x20a>
 80086c2:	4b26      	ldr	r3, [pc, #152]	@ (800875c <_vfiprintf_r+0x224>)
 80086c4:	bb1b      	cbnz	r3, 800870e <_vfiprintf_r+0x1d6>
 80086c6:	9b03      	ldr	r3, [sp, #12]
 80086c8:	3307      	adds	r3, #7
 80086ca:	f023 0307 	bic.w	r3, r3, #7
 80086ce:	3308      	adds	r3, #8
 80086d0:	9303      	str	r3, [sp, #12]
 80086d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086d4:	443b      	add	r3, r7
 80086d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80086d8:	e76a      	b.n	80085b0 <_vfiprintf_r+0x78>
 80086da:	fb0c 3202 	mla	r2, ip, r2, r3
 80086de:	460c      	mov	r4, r1
 80086e0:	2001      	movs	r0, #1
 80086e2:	e7a8      	b.n	8008636 <_vfiprintf_r+0xfe>
 80086e4:	2300      	movs	r3, #0
 80086e6:	3401      	adds	r4, #1
 80086e8:	9305      	str	r3, [sp, #20]
 80086ea:	4619      	mov	r1, r3
 80086ec:	f04f 0c0a 	mov.w	ip, #10
 80086f0:	4620      	mov	r0, r4
 80086f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086f6:	3a30      	subs	r2, #48	@ 0x30
 80086f8:	2a09      	cmp	r2, #9
 80086fa:	d903      	bls.n	8008704 <_vfiprintf_r+0x1cc>
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d0c6      	beq.n	800868e <_vfiprintf_r+0x156>
 8008700:	9105      	str	r1, [sp, #20]
 8008702:	e7c4      	b.n	800868e <_vfiprintf_r+0x156>
 8008704:	fb0c 2101 	mla	r1, ip, r1, r2
 8008708:	4604      	mov	r4, r0
 800870a:	2301      	movs	r3, #1
 800870c:	e7f0      	b.n	80086f0 <_vfiprintf_r+0x1b8>
 800870e:	ab03      	add	r3, sp, #12
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	462a      	mov	r2, r5
 8008714:	4b12      	ldr	r3, [pc, #72]	@ (8008760 <_vfiprintf_r+0x228>)
 8008716:	a904      	add	r1, sp, #16
 8008718:	4630      	mov	r0, r6
 800871a:	f3af 8000 	nop.w
 800871e:	4607      	mov	r7, r0
 8008720:	1c78      	adds	r0, r7, #1
 8008722:	d1d6      	bne.n	80086d2 <_vfiprintf_r+0x19a>
 8008724:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008726:	07d9      	lsls	r1, r3, #31
 8008728:	d405      	bmi.n	8008736 <_vfiprintf_r+0x1fe>
 800872a:	89ab      	ldrh	r3, [r5, #12]
 800872c:	059a      	lsls	r2, r3, #22
 800872e:	d402      	bmi.n	8008736 <_vfiprintf_r+0x1fe>
 8008730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008732:	f7ff fe8b 	bl	800844c <__retarget_lock_release_recursive>
 8008736:	89ab      	ldrh	r3, [r5, #12]
 8008738:	065b      	lsls	r3, r3, #25
 800873a:	f53f af1f 	bmi.w	800857c <_vfiprintf_r+0x44>
 800873e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008740:	e71e      	b.n	8008580 <_vfiprintf_r+0x48>
 8008742:	ab03      	add	r3, sp, #12
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	462a      	mov	r2, r5
 8008748:	4b05      	ldr	r3, [pc, #20]	@ (8008760 <_vfiprintf_r+0x228>)
 800874a:	a904      	add	r1, sp, #16
 800874c:	4630      	mov	r0, r6
 800874e:	f000 f879 	bl	8008844 <_printf_i>
 8008752:	e7e4      	b.n	800871e <_vfiprintf_r+0x1e6>
 8008754:	08009090 	.word	0x08009090
 8008758:	0800909a 	.word	0x0800909a
 800875c:	00000000 	.word	0x00000000
 8008760:	08008513 	.word	0x08008513
 8008764:	08009096 	.word	0x08009096

08008768 <_printf_common>:
 8008768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800876c:	4616      	mov	r6, r2
 800876e:	4698      	mov	r8, r3
 8008770:	688a      	ldr	r2, [r1, #8]
 8008772:	690b      	ldr	r3, [r1, #16]
 8008774:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008778:	4293      	cmp	r3, r2
 800877a:	bfb8      	it	lt
 800877c:	4613      	movlt	r3, r2
 800877e:	6033      	str	r3, [r6, #0]
 8008780:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008784:	4607      	mov	r7, r0
 8008786:	460c      	mov	r4, r1
 8008788:	b10a      	cbz	r2, 800878e <_printf_common+0x26>
 800878a:	3301      	adds	r3, #1
 800878c:	6033      	str	r3, [r6, #0]
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	0699      	lsls	r1, r3, #26
 8008792:	bf42      	ittt	mi
 8008794:	6833      	ldrmi	r3, [r6, #0]
 8008796:	3302      	addmi	r3, #2
 8008798:	6033      	strmi	r3, [r6, #0]
 800879a:	6825      	ldr	r5, [r4, #0]
 800879c:	f015 0506 	ands.w	r5, r5, #6
 80087a0:	d106      	bne.n	80087b0 <_printf_common+0x48>
 80087a2:	f104 0a19 	add.w	sl, r4, #25
 80087a6:	68e3      	ldr	r3, [r4, #12]
 80087a8:	6832      	ldr	r2, [r6, #0]
 80087aa:	1a9b      	subs	r3, r3, r2
 80087ac:	42ab      	cmp	r3, r5
 80087ae:	dc26      	bgt.n	80087fe <_printf_common+0x96>
 80087b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087b4:	6822      	ldr	r2, [r4, #0]
 80087b6:	3b00      	subs	r3, #0
 80087b8:	bf18      	it	ne
 80087ba:	2301      	movne	r3, #1
 80087bc:	0692      	lsls	r2, r2, #26
 80087be:	d42b      	bmi.n	8008818 <_printf_common+0xb0>
 80087c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087c4:	4641      	mov	r1, r8
 80087c6:	4638      	mov	r0, r7
 80087c8:	47c8      	blx	r9
 80087ca:	3001      	adds	r0, #1
 80087cc:	d01e      	beq.n	800880c <_printf_common+0xa4>
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	6922      	ldr	r2, [r4, #16]
 80087d2:	f003 0306 	and.w	r3, r3, #6
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	bf02      	ittt	eq
 80087da:	68e5      	ldreq	r5, [r4, #12]
 80087dc:	6833      	ldreq	r3, [r6, #0]
 80087de:	1aed      	subeq	r5, r5, r3
 80087e0:	68a3      	ldr	r3, [r4, #8]
 80087e2:	bf0c      	ite	eq
 80087e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087e8:	2500      	movne	r5, #0
 80087ea:	4293      	cmp	r3, r2
 80087ec:	bfc4      	itt	gt
 80087ee:	1a9b      	subgt	r3, r3, r2
 80087f0:	18ed      	addgt	r5, r5, r3
 80087f2:	2600      	movs	r6, #0
 80087f4:	341a      	adds	r4, #26
 80087f6:	42b5      	cmp	r5, r6
 80087f8:	d11a      	bne.n	8008830 <_printf_common+0xc8>
 80087fa:	2000      	movs	r0, #0
 80087fc:	e008      	b.n	8008810 <_printf_common+0xa8>
 80087fe:	2301      	movs	r3, #1
 8008800:	4652      	mov	r2, sl
 8008802:	4641      	mov	r1, r8
 8008804:	4638      	mov	r0, r7
 8008806:	47c8      	blx	r9
 8008808:	3001      	adds	r0, #1
 800880a:	d103      	bne.n	8008814 <_printf_common+0xac>
 800880c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008814:	3501      	adds	r5, #1
 8008816:	e7c6      	b.n	80087a6 <_printf_common+0x3e>
 8008818:	18e1      	adds	r1, r4, r3
 800881a:	1c5a      	adds	r2, r3, #1
 800881c:	2030      	movs	r0, #48	@ 0x30
 800881e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008822:	4422      	add	r2, r4
 8008824:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008828:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800882c:	3302      	adds	r3, #2
 800882e:	e7c7      	b.n	80087c0 <_printf_common+0x58>
 8008830:	2301      	movs	r3, #1
 8008832:	4622      	mov	r2, r4
 8008834:	4641      	mov	r1, r8
 8008836:	4638      	mov	r0, r7
 8008838:	47c8      	blx	r9
 800883a:	3001      	adds	r0, #1
 800883c:	d0e6      	beq.n	800880c <_printf_common+0xa4>
 800883e:	3601      	adds	r6, #1
 8008840:	e7d9      	b.n	80087f6 <_printf_common+0x8e>
	...

08008844 <_printf_i>:
 8008844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008848:	7e0f      	ldrb	r7, [r1, #24]
 800884a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800884c:	2f78      	cmp	r7, #120	@ 0x78
 800884e:	4691      	mov	r9, r2
 8008850:	4680      	mov	r8, r0
 8008852:	460c      	mov	r4, r1
 8008854:	469a      	mov	sl, r3
 8008856:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800885a:	d807      	bhi.n	800886c <_printf_i+0x28>
 800885c:	2f62      	cmp	r7, #98	@ 0x62
 800885e:	d80a      	bhi.n	8008876 <_printf_i+0x32>
 8008860:	2f00      	cmp	r7, #0
 8008862:	f000 80d2 	beq.w	8008a0a <_printf_i+0x1c6>
 8008866:	2f58      	cmp	r7, #88	@ 0x58
 8008868:	f000 80b9 	beq.w	80089de <_printf_i+0x19a>
 800886c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008870:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008874:	e03a      	b.n	80088ec <_printf_i+0xa8>
 8008876:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800887a:	2b15      	cmp	r3, #21
 800887c:	d8f6      	bhi.n	800886c <_printf_i+0x28>
 800887e:	a101      	add	r1, pc, #4	@ (adr r1, 8008884 <_printf_i+0x40>)
 8008880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008884:	080088dd 	.word	0x080088dd
 8008888:	080088f1 	.word	0x080088f1
 800888c:	0800886d 	.word	0x0800886d
 8008890:	0800886d 	.word	0x0800886d
 8008894:	0800886d 	.word	0x0800886d
 8008898:	0800886d 	.word	0x0800886d
 800889c:	080088f1 	.word	0x080088f1
 80088a0:	0800886d 	.word	0x0800886d
 80088a4:	0800886d 	.word	0x0800886d
 80088a8:	0800886d 	.word	0x0800886d
 80088ac:	0800886d 	.word	0x0800886d
 80088b0:	080089f1 	.word	0x080089f1
 80088b4:	0800891b 	.word	0x0800891b
 80088b8:	080089ab 	.word	0x080089ab
 80088bc:	0800886d 	.word	0x0800886d
 80088c0:	0800886d 	.word	0x0800886d
 80088c4:	08008a13 	.word	0x08008a13
 80088c8:	0800886d 	.word	0x0800886d
 80088cc:	0800891b 	.word	0x0800891b
 80088d0:	0800886d 	.word	0x0800886d
 80088d4:	0800886d 	.word	0x0800886d
 80088d8:	080089b3 	.word	0x080089b3
 80088dc:	6833      	ldr	r3, [r6, #0]
 80088de:	1d1a      	adds	r2, r3, #4
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	6032      	str	r2, [r6, #0]
 80088e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088ec:	2301      	movs	r3, #1
 80088ee:	e09d      	b.n	8008a2c <_printf_i+0x1e8>
 80088f0:	6833      	ldr	r3, [r6, #0]
 80088f2:	6820      	ldr	r0, [r4, #0]
 80088f4:	1d19      	adds	r1, r3, #4
 80088f6:	6031      	str	r1, [r6, #0]
 80088f8:	0606      	lsls	r6, r0, #24
 80088fa:	d501      	bpl.n	8008900 <_printf_i+0xbc>
 80088fc:	681d      	ldr	r5, [r3, #0]
 80088fe:	e003      	b.n	8008908 <_printf_i+0xc4>
 8008900:	0645      	lsls	r5, r0, #25
 8008902:	d5fb      	bpl.n	80088fc <_printf_i+0xb8>
 8008904:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008908:	2d00      	cmp	r5, #0
 800890a:	da03      	bge.n	8008914 <_printf_i+0xd0>
 800890c:	232d      	movs	r3, #45	@ 0x2d
 800890e:	426d      	negs	r5, r5
 8008910:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008914:	4859      	ldr	r0, [pc, #356]	@ (8008a7c <_printf_i+0x238>)
 8008916:	230a      	movs	r3, #10
 8008918:	e011      	b.n	800893e <_printf_i+0xfa>
 800891a:	6821      	ldr	r1, [r4, #0]
 800891c:	6833      	ldr	r3, [r6, #0]
 800891e:	0608      	lsls	r0, r1, #24
 8008920:	f853 5b04 	ldr.w	r5, [r3], #4
 8008924:	d402      	bmi.n	800892c <_printf_i+0xe8>
 8008926:	0649      	lsls	r1, r1, #25
 8008928:	bf48      	it	mi
 800892a:	b2ad      	uxthmi	r5, r5
 800892c:	2f6f      	cmp	r7, #111	@ 0x6f
 800892e:	4853      	ldr	r0, [pc, #332]	@ (8008a7c <_printf_i+0x238>)
 8008930:	6033      	str	r3, [r6, #0]
 8008932:	bf14      	ite	ne
 8008934:	230a      	movne	r3, #10
 8008936:	2308      	moveq	r3, #8
 8008938:	2100      	movs	r1, #0
 800893a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800893e:	6866      	ldr	r6, [r4, #4]
 8008940:	60a6      	str	r6, [r4, #8]
 8008942:	2e00      	cmp	r6, #0
 8008944:	bfa2      	ittt	ge
 8008946:	6821      	ldrge	r1, [r4, #0]
 8008948:	f021 0104 	bicge.w	r1, r1, #4
 800894c:	6021      	strge	r1, [r4, #0]
 800894e:	b90d      	cbnz	r5, 8008954 <_printf_i+0x110>
 8008950:	2e00      	cmp	r6, #0
 8008952:	d04b      	beq.n	80089ec <_printf_i+0x1a8>
 8008954:	4616      	mov	r6, r2
 8008956:	fbb5 f1f3 	udiv	r1, r5, r3
 800895a:	fb03 5711 	mls	r7, r3, r1, r5
 800895e:	5dc7      	ldrb	r7, [r0, r7]
 8008960:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008964:	462f      	mov	r7, r5
 8008966:	42bb      	cmp	r3, r7
 8008968:	460d      	mov	r5, r1
 800896a:	d9f4      	bls.n	8008956 <_printf_i+0x112>
 800896c:	2b08      	cmp	r3, #8
 800896e:	d10b      	bne.n	8008988 <_printf_i+0x144>
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	07df      	lsls	r7, r3, #31
 8008974:	d508      	bpl.n	8008988 <_printf_i+0x144>
 8008976:	6923      	ldr	r3, [r4, #16]
 8008978:	6861      	ldr	r1, [r4, #4]
 800897a:	4299      	cmp	r1, r3
 800897c:	bfde      	ittt	le
 800897e:	2330      	movle	r3, #48	@ 0x30
 8008980:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008984:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008988:	1b92      	subs	r2, r2, r6
 800898a:	6122      	str	r2, [r4, #16]
 800898c:	f8cd a000 	str.w	sl, [sp]
 8008990:	464b      	mov	r3, r9
 8008992:	aa03      	add	r2, sp, #12
 8008994:	4621      	mov	r1, r4
 8008996:	4640      	mov	r0, r8
 8008998:	f7ff fee6 	bl	8008768 <_printf_common>
 800899c:	3001      	adds	r0, #1
 800899e:	d14a      	bne.n	8008a36 <_printf_i+0x1f2>
 80089a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089a4:	b004      	add	sp, #16
 80089a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	f043 0320 	orr.w	r3, r3, #32
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	4833      	ldr	r0, [pc, #204]	@ (8008a80 <_printf_i+0x23c>)
 80089b4:	2778      	movs	r7, #120	@ 0x78
 80089b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	6831      	ldr	r1, [r6, #0]
 80089be:	061f      	lsls	r7, r3, #24
 80089c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80089c4:	d402      	bmi.n	80089cc <_printf_i+0x188>
 80089c6:	065f      	lsls	r7, r3, #25
 80089c8:	bf48      	it	mi
 80089ca:	b2ad      	uxthmi	r5, r5
 80089cc:	6031      	str	r1, [r6, #0]
 80089ce:	07d9      	lsls	r1, r3, #31
 80089d0:	bf44      	itt	mi
 80089d2:	f043 0320 	orrmi.w	r3, r3, #32
 80089d6:	6023      	strmi	r3, [r4, #0]
 80089d8:	b11d      	cbz	r5, 80089e2 <_printf_i+0x19e>
 80089da:	2310      	movs	r3, #16
 80089dc:	e7ac      	b.n	8008938 <_printf_i+0xf4>
 80089de:	4827      	ldr	r0, [pc, #156]	@ (8008a7c <_printf_i+0x238>)
 80089e0:	e7e9      	b.n	80089b6 <_printf_i+0x172>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	f023 0320 	bic.w	r3, r3, #32
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	e7f6      	b.n	80089da <_printf_i+0x196>
 80089ec:	4616      	mov	r6, r2
 80089ee:	e7bd      	b.n	800896c <_printf_i+0x128>
 80089f0:	6833      	ldr	r3, [r6, #0]
 80089f2:	6825      	ldr	r5, [r4, #0]
 80089f4:	6961      	ldr	r1, [r4, #20]
 80089f6:	1d18      	adds	r0, r3, #4
 80089f8:	6030      	str	r0, [r6, #0]
 80089fa:	062e      	lsls	r6, r5, #24
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	d501      	bpl.n	8008a04 <_printf_i+0x1c0>
 8008a00:	6019      	str	r1, [r3, #0]
 8008a02:	e002      	b.n	8008a0a <_printf_i+0x1c6>
 8008a04:	0668      	lsls	r0, r5, #25
 8008a06:	d5fb      	bpl.n	8008a00 <_printf_i+0x1bc>
 8008a08:	8019      	strh	r1, [r3, #0]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	6123      	str	r3, [r4, #16]
 8008a0e:	4616      	mov	r6, r2
 8008a10:	e7bc      	b.n	800898c <_printf_i+0x148>
 8008a12:	6833      	ldr	r3, [r6, #0]
 8008a14:	1d1a      	adds	r2, r3, #4
 8008a16:	6032      	str	r2, [r6, #0]
 8008a18:	681e      	ldr	r6, [r3, #0]
 8008a1a:	6862      	ldr	r2, [r4, #4]
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f7f7 fbfe 	bl	8000220 <memchr>
 8008a24:	b108      	cbz	r0, 8008a2a <_printf_i+0x1e6>
 8008a26:	1b80      	subs	r0, r0, r6
 8008a28:	6060      	str	r0, [r4, #4]
 8008a2a:	6863      	ldr	r3, [r4, #4]
 8008a2c:	6123      	str	r3, [r4, #16]
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a34:	e7aa      	b.n	800898c <_printf_i+0x148>
 8008a36:	6923      	ldr	r3, [r4, #16]
 8008a38:	4632      	mov	r2, r6
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	4640      	mov	r0, r8
 8008a3e:	47d0      	blx	sl
 8008a40:	3001      	adds	r0, #1
 8008a42:	d0ad      	beq.n	80089a0 <_printf_i+0x15c>
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	079b      	lsls	r3, r3, #30
 8008a48:	d413      	bmi.n	8008a72 <_printf_i+0x22e>
 8008a4a:	68e0      	ldr	r0, [r4, #12]
 8008a4c:	9b03      	ldr	r3, [sp, #12]
 8008a4e:	4298      	cmp	r0, r3
 8008a50:	bfb8      	it	lt
 8008a52:	4618      	movlt	r0, r3
 8008a54:	e7a6      	b.n	80089a4 <_printf_i+0x160>
 8008a56:	2301      	movs	r3, #1
 8008a58:	4632      	mov	r2, r6
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	4640      	mov	r0, r8
 8008a5e:	47d0      	blx	sl
 8008a60:	3001      	adds	r0, #1
 8008a62:	d09d      	beq.n	80089a0 <_printf_i+0x15c>
 8008a64:	3501      	adds	r5, #1
 8008a66:	68e3      	ldr	r3, [r4, #12]
 8008a68:	9903      	ldr	r1, [sp, #12]
 8008a6a:	1a5b      	subs	r3, r3, r1
 8008a6c:	42ab      	cmp	r3, r5
 8008a6e:	dcf2      	bgt.n	8008a56 <_printf_i+0x212>
 8008a70:	e7eb      	b.n	8008a4a <_printf_i+0x206>
 8008a72:	2500      	movs	r5, #0
 8008a74:	f104 0619 	add.w	r6, r4, #25
 8008a78:	e7f5      	b.n	8008a66 <_printf_i+0x222>
 8008a7a:	bf00      	nop
 8008a7c:	080090a1 	.word	0x080090a1
 8008a80:	080090b2 	.word	0x080090b2

08008a84 <__sflush_r>:
 8008a84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8c:	0716      	lsls	r6, r2, #28
 8008a8e:	4605      	mov	r5, r0
 8008a90:	460c      	mov	r4, r1
 8008a92:	d454      	bmi.n	8008b3e <__sflush_r+0xba>
 8008a94:	684b      	ldr	r3, [r1, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	dc02      	bgt.n	8008aa0 <__sflush_r+0x1c>
 8008a9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	dd48      	ble.n	8008b32 <__sflush_r+0xae>
 8008aa0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008aa2:	2e00      	cmp	r6, #0
 8008aa4:	d045      	beq.n	8008b32 <__sflush_r+0xae>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008aac:	682f      	ldr	r7, [r5, #0]
 8008aae:	6a21      	ldr	r1, [r4, #32]
 8008ab0:	602b      	str	r3, [r5, #0]
 8008ab2:	d030      	beq.n	8008b16 <__sflush_r+0x92>
 8008ab4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	0759      	lsls	r1, r3, #29
 8008aba:	d505      	bpl.n	8008ac8 <__sflush_r+0x44>
 8008abc:	6863      	ldr	r3, [r4, #4]
 8008abe:	1ad2      	subs	r2, r2, r3
 8008ac0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ac2:	b10b      	cbz	r3, 8008ac8 <__sflush_r+0x44>
 8008ac4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ac6:	1ad2      	subs	r2, r2, r3
 8008ac8:	2300      	movs	r3, #0
 8008aca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008acc:	6a21      	ldr	r1, [r4, #32]
 8008ace:	4628      	mov	r0, r5
 8008ad0:	47b0      	blx	r6
 8008ad2:	1c43      	adds	r3, r0, #1
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	d106      	bne.n	8008ae6 <__sflush_r+0x62>
 8008ad8:	6829      	ldr	r1, [r5, #0]
 8008ada:	291d      	cmp	r1, #29
 8008adc:	d82b      	bhi.n	8008b36 <__sflush_r+0xb2>
 8008ade:	4a2a      	ldr	r2, [pc, #168]	@ (8008b88 <__sflush_r+0x104>)
 8008ae0:	410a      	asrs	r2, r1
 8008ae2:	07d6      	lsls	r6, r2, #31
 8008ae4:	d427      	bmi.n	8008b36 <__sflush_r+0xb2>
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	6062      	str	r2, [r4, #4]
 8008aea:	04d9      	lsls	r1, r3, #19
 8008aec:	6922      	ldr	r2, [r4, #16]
 8008aee:	6022      	str	r2, [r4, #0]
 8008af0:	d504      	bpl.n	8008afc <__sflush_r+0x78>
 8008af2:	1c42      	adds	r2, r0, #1
 8008af4:	d101      	bne.n	8008afa <__sflush_r+0x76>
 8008af6:	682b      	ldr	r3, [r5, #0]
 8008af8:	b903      	cbnz	r3, 8008afc <__sflush_r+0x78>
 8008afa:	6560      	str	r0, [r4, #84]	@ 0x54
 8008afc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008afe:	602f      	str	r7, [r5, #0]
 8008b00:	b1b9      	cbz	r1, 8008b32 <__sflush_r+0xae>
 8008b02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b06:	4299      	cmp	r1, r3
 8008b08:	d002      	beq.n	8008b10 <__sflush_r+0x8c>
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	f7ff fca0 	bl	8008450 <_free_r>
 8008b10:	2300      	movs	r3, #0
 8008b12:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b14:	e00d      	b.n	8008b32 <__sflush_r+0xae>
 8008b16:	2301      	movs	r3, #1
 8008b18:	4628      	mov	r0, r5
 8008b1a:	47b0      	blx	r6
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	1c50      	adds	r0, r2, #1
 8008b20:	d1c9      	bne.n	8008ab6 <__sflush_r+0x32>
 8008b22:	682b      	ldr	r3, [r5, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d0c6      	beq.n	8008ab6 <__sflush_r+0x32>
 8008b28:	2b1d      	cmp	r3, #29
 8008b2a:	d001      	beq.n	8008b30 <__sflush_r+0xac>
 8008b2c:	2b16      	cmp	r3, #22
 8008b2e:	d11e      	bne.n	8008b6e <__sflush_r+0xea>
 8008b30:	602f      	str	r7, [r5, #0]
 8008b32:	2000      	movs	r0, #0
 8008b34:	e022      	b.n	8008b7c <__sflush_r+0xf8>
 8008b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b3a:	b21b      	sxth	r3, r3
 8008b3c:	e01b      	b.n	8008b76 <__sflush_r+0xf2>
 8008b3e:	690f      	ldr	r7, [r1, #16]
 8008b40:	2f00      	cmp	r7, #0
 8008b42:	d0f6      	beq.n	8008b32 <__sflush_r+0xae>
 8008b44:	0793      	lsls	r3, r2, #30
 8008b46:	680e      	ldr	r6, [r1, #0]
 8008b48:	bf08      	it	eq
 8008b4a:	694b      	ldreq	r3, [r1, #20]
 8008b4c:	600f      	str	r7, [r1, #0]
 8008b4e:	bf18      	it	ne
 8008b50:	2300      	movne	r3, #0
 8008b52:	eba6 0807 	sub.w	r8, r6, r7
 8008b56:	608b      	str	r3, [r1, #8]
 8008b58:	f1b8 0f00 	cmp.w	r8, #0
 8008b5c:	dde9      	ble.n	8008b32 <__sflush_r+0xae>
 8008b5e:	6a21      	ldr	r1, [r4, #32]
 8008b60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b62:	4643      	mov	r3, r8
 8008b64:	463a      	mov	r2, r7
 8008b66:	4628      	mov	r0, r5
 8008b68:	47b0      	blx	r6
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	dc08      	bgt.n	8008b80 <__sflush_r+0xfc>
 8008b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b76:	81a3      	strh	r3, [r4, #12]
 8008b78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b80:	4407      	add	r7, r0
 8008b82:	eba8 0800 	sub.w	r8, r8, r0
 8008b86:	e7e7      	b.n	8008b58 <__sflush_r+0xd4>
 8008b88:	dfbffffe 	.word	0xdfbffffe

08008b8c <_fflush_r>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	690b      	ldr	r3, [r1, #16]
 8008b90:	4605      	mov	r5, r0
 8008b92:	460c      	mov	r4, r1
 8008b94:	b913      	cbnz	r3, 8008b9c <_fflush_r+0x10>
 8008b96:	2500      	movs	r5, #0
 8008b98:	4628      	mov	r0, r5
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
 8008b9c:	b118      	cbz	r0, 8008ba6 <_fflush_r+0x1a>
 8008b9e:	6a03      	ldr	r3, [r0, #32]
 8008ba0:	b90b      	cbnz	r3, 8008ba6 <_fflush_r+0x1a>
 8008ba2:	f7ff fb69 	bl	8008278 <__sinit>
 8008ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d0f3      	beq.n	8008b96 <_fflush_r+0xa>
 8008bae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008bb0:	07d0      	lsls	r0, r2, #31
 8008bb2:	d404      	bmi.n	8008bbe <_fflush_r+0x32>
 8008bb4:	0599      	lsls	r1, r3, #22
 8008bb6:	d402      	bmi.n	8008bbe <_fflush_r+0x32>
 8008bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bba:	f7ff fc46 	bl	800844a <__retarget_lock_acquire_recursive>
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	4621      	mov	r1, r4
 8008bc2:	f7ff ff5f 	bl	8008a84 <__sflush_r>
 8008bc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bc8:	07da      	lsls	r2, r3, #31
 8008bca:	4605      	mov	r5, r0
 8008bcc:	d4e4      	bmi.n	8008b98 <_fflush_r+0xc>
 8008bce:	89a3      	ldrh	r3, [r4, #12]
 8008bd0:	059b      	lsls	r3, r3, #22
 8008bd2:	d4e1      	bmi.n	8008b98 <_fflush_r+0xc>
 8008bd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bd6:	f7ff fc39 	bl	800844c <__retarget_lock_release_recursive>
 8008bda:	e7dd      	b.n	8008b98 <_fflush_r+0xc>

08008bdc <__sread>:
 8008bdc:	b510      	push	{r4, lr}
 8008bde:	460c      	mov	r4, r1
 8008be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008be4:	f000 f978 	bl	8008ed8 <_read_r>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	bfab      	itete	ge
 8008bec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008bee:	89a3      	ldrhlt	r3, [r4, #12]
 8008bf0:	181b      	addge	r3, r3, r0
 8008bf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008bf6:	bfac      	ite	ge
 8008bf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008bfa:	81a3      	strhlt	r3, [r4, #12]
 8008bfc:	bd10      	pop	{r4, pc}

08008bfe <__swrite>:
 8008bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c02:	461f      	mov	r7, r3
 8008c04:	898b      	ldrh	r3, [r1, #12]
 8008c06:	05db      	lsls	r3, r3, #23
 8008c08:	4605      	mov	r5, r0
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	4616      	mov	r6, r2
 8008c0e:	d505      	bpl.n	8008c1c <__swrite+0x1e>
 8008c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c14:	2302      	movs	r3, #2
 8008c16:	2200      	movs	r2, #0
 8008c18:	f000 f94c 	bl	8008eb4 <_lseek_r>
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c26:	81a3      	strh	r3, [r4, #12]
 8008c28:	4632      	mov	r2, r6
 8008c2a:	463b      	mov	r3, r7
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c32:	f000 b963 	b.w	8008efc <_write_r>

08008c36 <__sseek>:
 8008c36:	b510      	push	{r4, lr}
 8008c38:	460c      	mov	r4, r1
 8008c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c3e:	f000 f939 	bl	8008eb4 <_lseek_r>
 8008c42:	1c43      	adds	r3, r0, #1
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	bf15      	itete	ne
 8008c48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008c4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008c4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008c52:	81a3      	strheq	r3, [r4, #12]
 8008c54:	bf18      	it	ne
 8008c56:	81a3      	strhne	r3, [r4, #12]
 8008c58:	bd10      	pop	{r4, pc}

08008c5a <__sclose>:
 8008c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c5e:	f000 b8f7 	b.w	8008e50 <_close_r>

08008c62 <__swbuf_r>:
 8008c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c64:	460e      	mov	r6, r1
 8008c66:	4614      	mov	r4, r2
 8008c68:	4605      	mov	r5, r0
 8008c6a:	b118      	cbz	r0, 8008c74 <__swbuf_r+0x12>
 8008c6c:	6a03      	ldr	r3, [r0, #32]
 8008c6e:	b90b      	cbnz	r3, 8008c74 <__swbuf_r+0x12>
 8008c70:	f7ff fb02 	bl	8008278 <__sinit>
 8008c74:	69a3      	ldr	r3, [r4, #24]
 8008c76:	60a3      	str	r3, [r4, #8]
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	071a      	lsls	r2, r3, #28
 8008c7c:	d501      	bpl.n	8008c82 <__swbuf_r+0x20>
 8008c7e:	6923      	ldr	r3, [r4, #16]
 8008c80:	b943      	cbnz	r3, 8008c94 <__swbuf_r+0x32>
 8008c82:	4621      	mov	r1, r4
 8008c84:	4628      	mov	r0, r5
 8008c86:	f000 f82b 	bl	8008ce0 <__swsetup_r>
 8008c8a:	b118      	cbz	r0, 8008c94 <__swbuf_r+0x32>
 8008c8c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008c90:	4638      	mov	r0, r7
 8008c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	6922      	ldr	r2, [r4, #16]
 8008c98:	1a98      	subs	r0, r3, r2
 8008c9a:	6963      	ldr	r3, [r4, #20]
 8008c9c:	b2f6      	uxtb	r6, r6
 8008c9e:	4283      	cmp	r3, r0
 8008ca0:	4637      	mov	r7, r6
 8008ca2:	dc05      	bgt.n	8008cb0 <__swbuf_r+0x4e>
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f7ff ff70 	bl	8008b8c <_fflush_r>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d1ed      	bne.n	8008c8c <__swbuf_r+0x2a>
 8008cb0:	68a3      	ldr	r3, [r4, #8]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	60a3      	str	r3, [r4, #8]
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	1c5a      	adds	r2, r3, #1
 8008cba:	6022      	str	r2, [r4, #0]
 8008cbc:	701e      	strb	r6, [r3, #0]
 8008cbe:	6962      	ldr	r2, [r4, #20]
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d004      	beq.n	8008cd0 <__swbuf_r+0x6e>
 8008cc6:	89a3      	ldrh	r3, [r4, #12]
 8008cc8:	07db      	lsls	r3, r3, #31
 8008cca:	d5e1      	bpl.n	8008c90 <__swbuf_r+0x2e>
 8008ccc:	2e0a      	cmp	r6, #10
 8008cce:	d1df      	bne.n	8008c90 <__swbuf_r+0x2e>
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	f7ff ff5a 	bl	8008b8c <_fflush_r>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d0d9      	beq.n	8008c90 <__swbuf_r+0x2e>
 8008cdc:	e7d6      	b.n	8008c8c <__swbuf_r+0x2a>
	...

08008ce0 <__swsetup_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	4b29      	ldr	r3, [pc, #164]	@ (8008d88 <__swsetup_r+0xa8>)
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	6818      	ldr	r0, [r3, #0]
 8008ce8:	460c      	mov	r4, r1
 8008cea:	b118      	cbz	r0, 8008cf4 <__swsetup_r+0x14>
 8008cec:	6a03      	ldr	r3, [r0, #32]
 8008cee:	b90b      	cbnz	r3, 8008cf4 <__swsetup_r+0x14>
 8008cf0:	f7ff fac2 	bl	8008278 <__sinit>
 8008cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf8:	0719      	lsls	r1, r3, #28
 8008cfa:	d422      	bmi.n	8008d42 <__swsetup_r+0x62>
 8008cfc:	06da      	lsls	r2, r3, #27
 8008cfe:	d407      	bmi.n	8008d10 <__swsetup_r+0x30>
 8008d00:	2209      	movs	r2, #9
 8008d02:	602a      	str	r2, [r5, #0]
 8008d04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d08:	81a3      	strh	r3, [r4, #12]
 8008d0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d0e:	e033      	b.n	8008d78 <__swsetup_r+0x98>
 8008d10:	0758      	lsls	r0, r3, #29
 8008d12:	d512      	bpl.n	8008d3a <__swsetup_r+0x5a>
 8008d14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d16:	b141      	cbz	r1, 8008d2a <__swsetup_r+0x4a>
 8008d18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d1c:	4299      	cmp	r1, r3
 8008d1e:	d002      	beq.n	8008d26 <__swsetup_r+0x46>
 8008d20:	4628      	mov	r0, r5
 8008d22:	f7ff fb95 	bl	8008450 <_free_r>
 8008d26:	2300      	movs	r3, #0
 8008d28:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008d30:	81a3      	strh	r3, [r4, #12]
 8008d32:	2300      	movs	r3, #0
 8008d34:	6063      	str	r3, [r4, #4]
 8008d36:	6923      	ldr	r3, [r4, #16]
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	89a3      	ldrh	r3, [r4, #12]
 8008d3c:	f043 0308 	orr.w	r3, r3, #8
 8008d40:	81a3      	strh	r3, [r4, #12]
 8008d42:	6923      	ldr	r3, [r4, #16]
 8008d44:	b94b      	cbnz	r3, 8008d5a <__swsetup_r+0x7a>
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d50:	d003      	beq.n	8008d5a <__swsetup_r+0x7a>
 8008d52:	4621      	mov	r1, r4
 8008d54:	4628      	mov	r0, r5
 8008d56:	f000 f83f 	bl	8008dd8 <__smakebuf_r>
 8008d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d5e:	f013 0201 	ands.w	r2, r3, #1
 8008d62:	d00a      	beq.n	8008d7a <__swsetup_r+0x9a>
 8008d64:	2200      	movs	r2, #0
 8008d66:	60a2      	str	r2, [r4, #8]
 8008d68:	6962      	ldr	r2, [r4, #20]
 8008d6a:	4252      	negs	r2, r2
 8008d6c:	61a2      	str	r2, [r4, #24]
 8008d6e:	6922      	ldr	r2, [r4, #16]
 8008d70:	b942      	cbnz	r2, 8008d84 <__swsetup_r+0xa4>
 8008d72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d76:	d1c5      	bne.n	8008d04 <__swsetup_r+0x24>
 8008d78:	bd38      	pop	{r3, r4, r5, pc}
 8008d7a:	0799      	lsls	r1, r3, #30
 8008d7c:	bf58      	it	pl
 8008d7e:	6962      	ldrpl	r2, [r4, #20]
 8008d80:	60a2      	str	r2, [r4, #8]
 8008d82:	e7f4      	b.n	8008d6e <__swsetup_r+0x8e>
 8008d84:	2000      	movs	r0, #0
 8008d86:	e7f7      	b.n	8008d78 <__swsetup_r+0x98>
 8008d88:	20000018 	.word	0x20000018

08008d8c <__swhatbuf_r>:
 8008d8c:	b570      	push	{r4, r5, r6, lr}
 8008d8e:	460c      	mov	r4, r1
 8008d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d94:	2900      	cmp	r1, #0
 8008d96:	b096      	sub	sp, #88	@ 0x58
 8008d98:	4615      	mov	r5, r2
 8008d9a:	461e      	mov	r6, r3
 8008d9c:	da0d      	bge.n	8008dba <__swhatbuf_r+0x2e>
 8008d9e:	89a3      	ldrh	r3, [r4, #12]
 8008da0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008da4:	f04f 0100 	mov.w	r1, #0
 8008da8:	bf14      	ite	ne
 8008daa:	2340      	movne	r3, #64	@ 0x40
 8008dac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008db0:	2000      	movs	r0, #0
 8008db2:	6031      	str	r1, [r6, #0]
 8008db4:	602b      	str	r3, [r5, #0]
 8008db6:	b016      	add	sp, #88	@ 0x58
 8008db8:	bd70      	pop	{r4, r5, r6, pc}
 8008dba:	466a      	mov	r2, sp
 8008dbc:	f000 f858 	bl	8008e70 <_fstat_r>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	dbec      	blt.n	8008d9e <__swhatbuf_r+0x12>
 8008dc4:	9901      	ldr	r1, [sp, #4]
 8008dc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008dca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008dce:	4259      	negs	r1, r3
 8008dd0:	4159      	adcs	r1, r3
 8008dd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008dd6:	e7eb      	b.n	8008db0 <__swhatbuf_r+0x24>

08008dd8 <__smakebuf_r>:
 8008dd8:	898b      	ldrh	r3, [r1, #12]
 8008dda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ddc:	079d      	lsls	r5, r3, #30
 8008dde:	4606      	mov	r6, r0
 8008de0:	460c      	mov	r4, r1
 8008de2:	d507      	bpl.n	8008df4 <__smakebuf_r+0x1c>
 8008de4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	6123      	str	r3, [r4, #16]
 8008dec:	2301      	movs	r3, #1
 8008dee:	6163      	str	r3, [r4, #20]
 8008df0:	b003      	add	sp, #12
 8008df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008df4:	ab01      	add	r3, sp, #4
 8008df6:	466a      	mov	r2, sp
 8008df8:	f7ff ffc8 	bl	8008d8c <__swhatbuf_r>
 8008dfc:	9f00      	ldr	r7, [sp, #0]
 8008dfe:	4605      	mov	r5, r0
 8008e00:	4639      	mov	r1, r7
 8008e02:	4630      	mov	r0, r6
 8008e04:	f7ff f920 	bl	8008048 <_malloc_r>
 8008e08:	b948      	cbnz	r0, 8008e1e <__smakebuf_r+0x46>
 8008e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e0e:	059a      	lsls	r2, r3, #22
 8008e10:	d4ee      	bmi.n	8008df0 <__smakebuf_r+0x18>
 8008e12:	f023 0303 	bic.w	r3, r3, #3
 8008e16:	f043 0302 	orr.w	r3, r3, #2
 8008e1a:	81a3      	strh	r3, [r4, #12]
 8008e1c:	e7e2      	b.n	8008de4 <__smakebuf_r+0xc>
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	6020      	str	r0, [r4, #0]
 8008e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e26:	81a3      	strh	r3, [r4, #12]
 8008e28:	9b01      	ldr	r3, [sp, #4]
 8008e2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e2e:	b15b      	cbz	r3, 8008e48 <__smakebuf_r+0x70>
 8008e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e34:	4630      	mov	r0, r6
 8008e36:	f000 f82d 	bl	8008e94 <_isatty_r>
 8008e3a:	b128      	cbz	r0, 8008e48 <__smakebuf_r+0x70>
 8008e3c:	89a3      	ldrh	r3, [r4, #12]
 8008e3e:	f023 0303 	bic.w	r3, r3, #3
 8008e42:	f043 0301 	orr.w	r3, r3, #1
 8008e46:	81a3      	strh	r3, [r4, #12]
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	431d      	orrs	r5, r3
 8008e4c:	81a5      	strh	r5, [r4, #12]
 8008e4e:	e7cf      	b.n	8008df0 <__smakebuf_r+0x18>

08008e50 <_close_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	4d06      	ldr	r5, [pc, #24]	@ (8008e6c <_close_r+0x1c>)
 8008e54:	2300      	movs	r3, #0
 8008e56:	4604      	mov	r4, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	602b      	str	r3, [r5, #0]
 8008e5c:	f7f8 f9d1 	bl	8001202 <_close>
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	d102      	bne.n	8008e6a <_close_r+0x1a>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	b103      	cbz	r3, 8008e6a <_close_r+0x1a>
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
 8008e6c:	200006cc 	.word	0x200006cc

08008e70 <_fstat_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4d07      	ldr	r5, [pc, #28]	@ (8008e90 <_fstat_r+0x20>)
 8008e74:	2300      	movs	r3, #0
 8008e76:	4604      	mov	r4, r0
 8008e78:	4608      	mov	r0, r1
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	602b      	str	r3, [r5, #0]
 8008e7e:	f7f8 f9cc 	bl	800121a <_fstat>
 8008e82:	1c43      	adds	r3, r0, #1
 8008e84:	d102      	bne.n	8008e8c <_fstat_r+0x1c>
 8008e86:	682b      	ldr	r3, [r5, #0]
 8008e88:	b103      	cbz	r3, 8008e8c <_fstat_r+0x1c>
 8008e8a:	6023      	str	r3, [r4, #0]
 8008e8c:	bd38      	pop	{r3, r4, r5, pc}
 8008e8e:	bf00      	nop
 8008e90:	200006cc 	.word	0x200006cc

08008e94 <_isatty_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	4d06      	ldr	r5, [pc, #24]	@ (8008eb0 <_isatty_r+0x1c>)
 8008e98:	2300      	movs	r3, #0
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	602b      	str	r3, [r5, #0]
 8008ea0:	f7f8 f9cb 	bl	800123a <_isatty>
 8008ea4:	1c43      	adds	r3, r0, #1
 8008ea6:	d102      	bne.n	8008eae <_isatty_r+0x1a>
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	b103      	cbz	r3, 8008eae <_isatty_r+0x1a>
 8008eac:	6023      	str	r3, [r4, #0]
 8008eae:	bd38      	pop	{r3, r4, r5, pc}
 8008eb0:	200006cc 	.word	0x200006cc

08008eb4 <_lseek_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4d07      	ldr	r5, [pc, #28]	@ (8008ed4 <_lseek_r+0x20>)
 8008eb8:	4604      	mov	r4, r0
 8008eba:	4608      	mov	r0, r1
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	602a      	str	r2, [r5, #0]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	f7f8 f9c4 	bl	8001250 <_lseek>
 8008ec8:	1c43      	adds	r3, r0, #1
 8008eca:	d102      	bne.n	8008ed2 <_lseek_r+0x1e>
 8008ecc:	682b      	ldr	r3, [r5, #0]
 8008ece:	b103      	cbz	r3, 8008ed2 <_lseek_r+0x1e>
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
 8008ed4:	200006cc 	.word	0x200006cc

08008ed8 <_read_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d07      	ldr	r5, [pc, #28]	@ (8008ef8 <_read_r+0x20>)
 8008edc:	4604      	mov	r4, r0
 8008ede:	4608      	mov	r0, r1
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	602a      	str	r2, [r5, #0]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	f7f8 f952 	bl	8001190 <_read>
 8008eec:	1c43      	adds	r3, r0, #1
 8008eee:	d102      	bne.n	8008ef6 <_read_r+0x1e>
 8008ef0:	682b      	ldr	r3, [r5, #0]
 8008ef2:	b103      	cbz	r3, 8008ef6 <_read_r+0x1e>
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	200006cc 	.word	0x200006cc

08008efc <_write_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4d07      	ldr	r5, [pc, #28]	@ (8008f1c <_write_r+0x20>)
 8008f00:	4604      	mov	r4, r0
 8008f02:	4608      	mov	r0, r1
 8008f04:	4611      	mov	r1, r2
 8008f06:	2200      	movs	r2, #0
 8008f08:	602a      	str	r2, [r5, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	f7f8 f95d 	bl	80011ca <_write>
 8008f10:	1c43      	adds	r3, r0, #1
 8008f12:	d102      	bne.n	8008f1a <_write_r+0x1e>
 8008f14:	682b      	ldr	r3, [r5, #0]
 8008f16:	b103      	cbz	r3, 8008f1a <_write_r+0x1e>
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
 8008f1c:	200006cc 	.word	0x200006cc

08008f20 <_init>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	bf00      	nop
 8008f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f26:	bc08      	pop	{r3}
 8008f28:	469e      	mov	lr, r3
 8008f2a:	4770      	bx	lr

08008f2c <_fini>:
 8008f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2e:	bf00      	nop
 8008f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f32:	bc08      	pop	{r3}
 8008f34:	469e      	mov	lr, r3
 8008f36:	4770      	bx	lr
