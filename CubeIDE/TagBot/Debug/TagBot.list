
TagBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ec4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080090a4  080090a4  0000a0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009230  08009230  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  08009230  08009230  0000a230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009238  08009238  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009238  08009238  0000a238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800923c  0800923c  0000a23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009240  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  20000068  080092a8  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  080092a8  0000b740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002006c  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004319  00000000  00000000  0002b104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  0002f420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001598  00000000  00000000  00030fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a85  00000000  00000000  00032580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022d0a  00000000  00000000  00056005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e339f  00000000  00000000  00078d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0015c0ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007db0  00000000  00000000  0015c134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00163ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800908c 	.word	0x0800908c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800908c 	.word	0x0800908c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ADXL343_ReadRegister>:
	printf("Configuration done\r\n");

}

// Function to read from a register
void ADXL343_ReadRegister(uint8_t reg, int8_t* rx_data, size_t length) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
 80005bc:	73fb      	strb	r3, [r7, #15]

    uint8_t tx_data = reg | 0x80; // MSB = 1 pour la lecture
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	75fb      	strb	r3, [r7, #23]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Activer NSS
 80005c8:	2200      	movs	r2, #0
 80005ca:	2110      	movs	r1, #16
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d0:	f003 fbb2 	bl	8003d38 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx_data, 1, HAL_MAX_DELAY); // Envoyer l'adresse
 80005d4:	f107 0117 	add.w	r1, r7, #23
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005dc:	2201      	movs	r2, #1
 80005de:	480a      	ldr	r0, [pc, #40]	@ (8000608 <ADXL343_ReadRegister+0x58>)
 80005e0:	f004 fd9f 	bl	8005122 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t*)rx_data, 1, HAL_MAX_DELAY);  // Lire la donnée
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005e8:	2201      	movs	r2, #1
 80005ea:	68b9      	ldr	r1, [r7, #8]
 80005ec:	4806      	ldr	r0, [pc, #24]	@ (8000608 <ADXL343_ReadRegister+0x58>)
 80005ee:	f004 ff0e 	bl	800540e <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // Désactiver NSS
 80005f2:	2201      	movs	r2, #1
 80005f4:	2110      	movs	r1, #16
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005fa:	f003 fb9d 	bl	8003d38 <HAL_GPIO_WritePin>


    //HAL_SPI_TransmitReceive(hspi, pTxData, pRxData, Size, Timeout); // a utiliser quand NSS hardware ioc enable
}
 80005fe:	bf00      	nop
 8000600:	3718      	adds	r7, #24
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000298 	.word	0x20000298

0800060c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08c      	sub	sp, #48	@ 0x30
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2220      	movs	r2, #32
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f007 ff83 	bl	8008530 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800062a:	4b3a      	ldr	r3, [pc, #232]	@ (8000714 <MX_ADC1_Init+0x108>)
 800062c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000630:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000632:	4b38      	ldr	r3, [pc, #224]	@ (8000714 <MX_ADC1_Init+0x108>)
 8000634:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000638:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063a:	4b36      	ldr	r3, [pc, #216]	@ (8000714 <MX_ADC1_Init+0x108>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000640:	4b34      	ldr	r3, [pc, #208]	@ (8000714 <MX_ADC1_Init+0x108>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000646:	4b33      	ldr	r3, [pc, #204]	@ (8000714 <MX_ADC1_Init+0x108>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800064c:	4b31      	ldr	r3, [pc, #196]	@ (8000714 <MX_ADC1_Init+0x108>)
 800064e:	2201      	movs	r2, #1
 8000650:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000652:	4b30      	ldr	r3, [pc, #192]	@ (8000714 <MX_ADC1_Init+0x108>)
 8000654:	2204      	movs	r2, #4
 8000656:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000658:	4b2e      	ldr	r3, [pc, #184]	@ (8000714 <MX_ADC1_Init+0x108>)
 800065a:	2200      	movs	r2, #0
 800065c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800065e:	4b2d      	ldr	r3, [pc, #180]	@ (8000714 <MX_ADC1_Init+0x108>)
 8000660:	2200      	movs	r2, #0
 8000662:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000664:	4b2b      	ldr	r3, [pc, #172]	@ (8000714 <MX_ADC1_Init+0x108>)
 8000666:	2202      	movs	r2, #2
 8000668:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066a:	4b2a      	ldr	r3, [pc, #168]	@ (8000714 <MX_ADC1_Init+0x108>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000672:	4b28      	ldr	r3, [pc, #160]	@ (8000714 <MX_ADC1_Init+0x108>)
 8000674:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000678:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800067a:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <MX_ADC1_Init+0x108>)
 800067c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000680:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000682:	4b24      	ldr	r3, [pc, #144]	@ (8000714 <MX_ADC1_Init+0x108>)
 8000684:	2201      	movs	r2, #1
 8000686:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800068a:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <MX_ADC1_Init+0x108>)
 800068c:	2200      	movs	r2, #0
 800068e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000690:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <MX_ADC1_Init+0x108>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000698:	481e      	ldr	r0, [pc, #120]	@ (8000714 <MX_ADC1_Init+0x108>)
 800069a:	f001 fe29 	bl	80022f0 <HAL_ADC_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80006a4:	f000 fcfe 	bl	80010a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b0:	4619      	mov	r1, r3
 80006b2:	4818      	ldr	r0, [pc, #96]	@ (8000714 <MX_ADC1_Init+0x108>)
 80006b4:	f002 fd98 	bl	80031e8 <HAL_ADCEx_MultiModeConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80006be:	f000 fcf1 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_ADC1_Init+0x10c>)
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c6:	2306      	movs	r3, #6
 80006c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80006ca:	2304      	movs	r3, #4
 80006cc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ce:	237f      	movs	r3, #127	@ 0x7f
 80006d0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d2:	2304      	movs	r3, #4
 80006d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4619      	mov	r1, r3
 80006de:	480d      	ldr	r0, [pc, #52]	@ (8000714 <MX_ADC1_Init+0x108>)
 80006e0:	f002 f852 	bl	8002788 <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006ea:	f000 fcdb 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <MX_ADC1_Init+0x110>)
 80006f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006f2:	230c      	movs	r3, #12
 80006f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4619      	mov	r1, r3
 80006fa:	4806      	ldr	r0, [pc, #24]	@ (8000714 <MX_ADC1_Init+0x108>)
 80006fc:	f002 f844 	bl	8002788 <HAL_ADC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000706:	f000 fccd 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	3730      	adds	r7, #48	@ 0x30
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000084 	.word	0x20000084
 8000718:	14f00020 	.word	0x14f00020
 800071c:	2e300800 	.word	0x2e300800

08000720 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	2220      	movs	r2, #32
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f007 feff 	bl	8008530 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000732:	4b33      	ldr	r3, [pc, #204]	@ (8000800 <MX_ADC2_Init+0xe0>)
 8000734:	4a33      	ldr	r2, [pc, #204]	@ (8000804 <MX_ADC2_Init+0xe4>)
 8000736:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000738:	4b31      	ldr	r3, [pc, #196]	@ (8000800 <MX_ADC2_Init+0xe0>)
 800073a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800073e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000740:	4b2f      	ldr	r3, [pc, #188]	@ (8000800 <MX_ADC2_Init+0xe0>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000746:	4b2e      	ldr	r3, [pc, #184]	@ (8000800 <MX_ADC2_Init+0xe0>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800074c:	4b2c      	ldr	r3, [pc, #176]	@ (8000800 <MX_ADC2_Init+0xe0>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000752:	4b2b      	ldr	r3, [pc, #172]	@ (8000800 <MX_ADC2_Init+0xe0>)
 8000754:	2201      	movs	r2, #1
 8000756:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000758:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <MX_ADC2_Init+0xe0>)
 800075a:	2204      	movs	r2, #4
 800075c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800075e:	4b28      	ldr	r3, [pc, #160]	@ (8000800 <MX_ADC2_Init+0xe0>)
 8000760:	2200      	movs	r2, #0
 8000762:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000764:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <MX_ADC2_Init+0xe0>)
 8000766:	2200      	movs	r2, #0
 8000768:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800076a:	4b25      	ldr	r3, [pc, #148]	@ (8000800 <MX_ADC2_Init+0xe0>)
 800076c:	2202      	movs	r2, #2
 800076e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000770:	4b23      	ldr	r3, [pc, #140]	@ (8000800 <MX_ADC2_Init+0xe0>)
 8000772:	2200      	movs	r2, #0
 8000774:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000778:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <MX_ADC2_Init+0xe0>)
 800077a:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800077e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000780:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <MX_ADC2_Init+0xe0>)
 8000782:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000786:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000788:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_ADC2_Init+0xe0>)
 800078a:	2201      	movs	r2, #1
 800078c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <MX_ADC2_Init+0xe0>)
 8000792:	2200      	movs	r2, #0
 8000794:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000796:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <MX_ADC2_Init+0xe0>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800079e:	4818      	ldr	r0, [pc, #96]	@ (8000800 <MX_ADC2_Init+0xe0>)
 80007a0:	f001 fda6 	bl	80022f0 <HAL_ADC_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80007aa:	f000 fc7b 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007ae:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <MX_ADC2_Init+0xe8>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b2:	2306      	movs	r3, #6
 80007b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80007b6:	2304      	movs	r3, #4
 80007b8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ba:	237f      	movs	r3, #127	@ 0x7f
 80007bc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007be:	2304      	movs	r3, #4
 80007c0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007c6:	463b      	mov	r3, r7
 80007c8:	4619      	mov	r1, r3
 80007ca:	480d      	ldr	r0, [pc, #52]	@ (8000800 <MX_ADC2_Init+0xe0>)
 80007cc:	f001 ffdc 	bl	8002788 <HAL_ADC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80007d6:	f000 fc65 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_ADC2_Init+0xec>)
 80007dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007de:	230c      	movs	r3, #12
 80007e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007e2:	463b      	mov	r3, r7
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	@ (8000800 <MX_ADC2_Init+0xe0>)
 80007e8:	f001 ffce 	bl	8002788 <HAL_ADC_ConfigChannel>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80007f2:	f000 fc57 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	3720      	adds	r7, #32
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200000f0 	.word	0x200000f0
 8000804:	50000100 	.word	0x50000100
 8000808:	32601000 	.word	0x32601000
 800080c:	3ef08000 	.word	0x3ef08000

08000810 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b09c      	sub	sp, #112	@ 0x70
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000828:	f107 0318 	add.w	r3, r7, #24
 800082c:	2244      	movs	r2, #68	@ 0x44
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f007 fe7d 	bl	8008530 <memset>
  if(adcHandle->Instance==ADC1)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800083e:	d16a      	bne.n	8000916 <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000840:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000844:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000846:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800084a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800084c:	f107 0318 	add.w	r3, r7, #24
 8000850:	4618      	mov	r0, r3
 8000852:	f004 f9cb 	bl	8004bec <HAL_RCCEx_PeriphCLKConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800085c:	f000 fc22 	bl	80010a4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000860:	4b66      	ldr	r3, [pc, #408]	@ (80009fc <HAL_ADC_MspInit+0x1ec>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	4a65      	ldr	r2, [pc, #404]	@ (80009fc <HAL_ADC_MspInit+0x1ec>)
 8000868:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800086a:	4b64      	ldr	r3, [pc, #400]	@ (80009fc <HAL_ADC_MspInit+0x1ec>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d10b      	bne.n	800088a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000872:	4b63      	ldr	r3, [pc, #396]	@ (8000a00 <HAL_ADC_MspInit+0x1f0>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	4a62      	ldr	r2, [pc, #392]	@ (8000a00 <HAL_ADC_MspInit+0x1f0>)
 8000878:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800087c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087e:	4b60      	ldr	r3, [pc, #384]	@ (8000a00 <HAL_ADC_MspInit+0x1f0>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b5d      	ldr	r3, [pc, #372]	@ (8000a00 <HAL_ADC_MspInit+0x1f0>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	4a5c      	ldr	r2, [pc, #368]	@ (8000a00 <HAL_ADC_MspInit+0x1f0>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000896:	4b5a      	ldr	r3, [pc, #360]	@ (8000a00 <HAL_ADC_MspInit+0x1f0>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CAPTEUR_DIST_N_Pin|CAPTEUR_DIST_W_Pin;
 80008a2:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80008a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80008b4:	4619      	mov	r1, r3
 80008b6:	4853      	ldr	r0, [pc, #332]	@ (8000a04 <HAL_ADC_MspInit+0x1f4>)
 80008b8:	f003 f8bc 	bl	8003a34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80008bc:	4b52      	ldr	r3, [pc, #328]	@ (8000a08 <HAL_ADC_MspInit+0x1f8>)
 80008be:	4a53      	ldr	r2, [pc, #332]	@ (8000a0c <HAL_ADC_MspInit+0x1fc>)
 80008c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008c2:	4b51      	ldr	r3, [pc, #324]	@ (8000a08 <HAL_ADC_MspInit+0x1f8>)
 80008c4:	2205      	movs	r2, #5
 80008c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008c8:	4b4f      	ldr	r3, [pc, #316]	@ (8000a08 <HAL_ADC_MspInit+0x1f8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ce:	4b4e      	ldr	r3, [pc, #312]	@ (8000a08 <HAL_ADC_MspInit+0x1f8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008d4:	4b4c      	ldr	r3, [pc, #304]	@ (8000a08 <HAL_ADC_MspInit+0x1f8>)
 80008d6:	2280      	movs	r2, #128	@ 0x80
 80008d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008da:	4b4b      	ldr	r3, [pc, #300]	@ (8000a08 <HAL_ADC_MspInit+0x1f8>)
 80008dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008e2:	4b49      	ldr	r3, [pc, #292]	@ (8000a08 <HAL_ADC_MspInit+0x1f8>)
 80008e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008ea:	4b47      	ldr	r3, [pc, #284]	@ (8000a08 <HAL_ADC_MspInit+0x1f8>)
 80008ec:	2220      	movs	r2, #32
 80008ee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80008f0:	4b45      	ldr	r3, [pc, #276]	@ (8000a08 <HAL_ADC_MspInit+0x1f8>)
 80008f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008f8:	4843      	ldr	r0, [pc, #268]	@ (8000a08 <HAL_ADC_MspInit+0x1f8>)
 80008fa:	f002 fe29 	bl	8003550 <HAL_DMA_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000904:	f000 fbce 	bl	80010a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a08 <HAL_ADC_MspInit+0x1f8>)
 800090c:	655a      	str	r2, [r3, #84]	@ 0x54
 800090e:	4a3e      	ldr	r2, [pc, #248]	@ (8000a08 <HAL_ADC_MspInit+0x1f8>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000914:	e06e      	b.n	80009f4 <HAL_ADC_MspInit+0x1e4>
  else if(adcHandle->Instance==ADC2)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a10 <HAL_ADC_MspInit+0x200>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d169      	bne.n	80009f4 <HAL_ADC_MspInit+0x1e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000920:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000924:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000926:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800092a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800092c:	f107 0318 	add.w	r3, r7, #24
 8000930:	4618      	mov	r0, r3
 8000932:	f004 f95b 	bl	8004bec <HAL_RCCEx_PeriphCLKConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 800093c:	f000 fbb2 	bl	80010a4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000940:	4b2e      	ldr	r3, [pc, #184]	@ (80009fc <HAL_ADC_MspInit+0x1ec>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	4a2d      	ldr	r2, [pc, #180]	@ (80009fc <HAL_ADC_MspInit+0x1ec>)
 8000948:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800094a:	4b2c      	ldr	r3, [pc, #176]	@ (80009fc <HAL_ADC_MspInit+0x1ec>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d10b      	bne.n	800096a <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000952:	4b2b      	ldr	r3, [pc, #172]	@ (8000a00 <HAL_ADC_MspInit+0x1f0>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	4a2a      	ldr	r2, [pc, #168]	@ (8000a00 <HAL_ADC_MspInit+0x1f0>)
 8000958:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800095c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095e:	4b28      	ldr	r3, [pc, #160]	@ (8000a00 <HAL_ADC_MspInit+0x1f0>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <HAL_ADC_MspInit+0x1f0>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	4a24      	ldr	r2, [pc, #144]	@ (8000a00 <HAL_ADC_MspInit+0x1f0>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000976:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <HAL_ADC_MspInit+0x1f0>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CAPTEUR_DIST_S_Pin|CAPTEUR_DIST_E_Pin;
 8000982:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000986:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000988:	2303      	movs	r3, #3
 800098a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000994:	4619      	mov	r1, r3
 8000996:	481b      	ldr	r0, [pc, #108]	@ (8000a04 <HAL_ADC_MspInit+0x1f4>)
 8000998:	f003 f84c 	bl	8003a34 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel1;
 800099c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <HAL_ADC_MspInit+0x204>)
 800099e:	4a1e      	ldr	r2, [pc, #120]	@ (8000a18 <HAL_ADC_MspInit+0x208>)
 80009a0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <HAL_ADC_MspInit+0x204>)
 80009a4:	2224      	movs	r2, #36	@ 0x24
 80009a6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <HAL_ADC_MspInit+0x204>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ae:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <HAL_ADC_MspInit+0x204>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <HAL_ADC_MspInit+0x204>)
 80009b6:	2280      	movs	r2, #128	@ 0x80
 80009b8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009ba:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <HAL_ADC_MspInit+0x204>)
 80009bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009c0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009c2:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <HAL_ADC_MspInit+0x204>)
 80009c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009c8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80009ca:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <HAL_ADC_MspInit+0x204>)
 80009cc:	2220      	movs	r2, #32
 80009ce:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80009d0:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <HAL_ADC_MspInit+0x204>)
 80009d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80009d8:	480e      	ldr	r0, [pc, #56]	@ (8000a14 <HAL_ADC_MspInit+0x204>)
 80009da:	f002 fdb9 	bl	8003550 <HAL_DMA_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_ADC_MspInit+0x1d8>
      Error_Handler();
 80009e4:	f000 fb5e 	bl	80010a4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <HAL_ADC_MspInit+0x204>)
 80009ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80009ee:	4a09      	ldr	r2, [pc, #36]	@ (8000a14 <HAL_ADC_MspInit+0x204>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80009f4:	bf00      	nop
 80009f6:	3770      	adds	r7, #112	@ 0x70
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000021c 	.word	0x2000021c
 8000a00:	40021000 	.word	0x40021000
 8000a04:	48000400 	.word	0x48000400
 8000a08:	2000015c 	.word	0x2000015c
 8000a0c:	4002001c 	.word	0x4002001c
 8000a10:	50000100 	.word	0x50000100
 8000a14:	200001bc 	.word	0x200001bc
 8000a18:	40020008 	.word	0x40020008

08000a1c <distSensor_initADC_DMA>:
uint32_t value_sud; 				// Valeur de sud (ADC2 Channel 12)



void distSensor_initADC_DMA(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0


	HAL_ADC_Start_DMA(&hadc1, adc1_dma_buffer, ADC1_CHANNEL_COUNT);
 8000a20:	2202      	movs	r2, #2
 8000a22:	4907      	ldr	r1, [pc, #28]	@ (8000a40 <distSensor_initADC_DMA+0x24>)
 8000a24:	4807      	ldr	r0, [pc, #28]	@ (8000a44 <distSensor_initADC_DMA+0x28>)
 8000a26:	f001 fde7 	bl	80025f8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, adc2_dma_buffer, ADC2_CHANNEL_COUNT);
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	4906      	ldr	r1, [pc, #24]	@ (8000a48 <distSensor_initADC_DMA+0x2c>)
 8000a2e:	4807      	ldr	r0, [pc, #28]	@ (8000a4c <distSensor_initADC_DMA+0x30>)
 8000a30:	f001 fde2 	bl	80025f8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim6);
 8000a34:	4806      	ldr	r0, [pc, #24]	@ (8000a50 <distSensor_initADC_DMA+0x34>)
 8000a36:	f005 fa55 	bl	8005ee4 <HAL_TIM_Base_Start>



}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000224 	.word	0x20000224
 8000a44:	20000084 	.word	0x20000084
 8000a48:	2000022c 	.word	0x2000022c
 8000a4c:	200000f0 	.word	0x200000f0
 8000a50:	200003e4 	.word	0x200003e4

08000a54 <distSensor_ReadADC_DMA>:
	return adc_value;   // Return the ADC value
}


uint32_t distSensor_ReadADC_DMA(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
	value_west = adc1_dma_buffer[0];    // Valeur de west (ADC1 Channel 5)
 8000a58:	4b20      	ldr	r3, [pc, #128]	@ (8000adc <distSensor_ReadADC_DMA+0x88>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a20      	ldr	r2, [pc, #128]	@ (8000ae0 <distSensor_ReadADC_DMA+0x8c>)
 8000a5e:	6013      	str	r3, [r2, #0]
	value_nord = adc1_dma_buffer[1];   // Valeur de nord (ADC1 Channel 11)
 8000a60:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <distSensor_ReadADC_DMA+0x88>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae4 <distSensor_ReadADC_DMA+0x90>)
 8000a66:	6013      	str	r3, [r2, #0]
	value_est = adc2_dma_buffer[0];   // Valeur de est (ADC2 Channel 15)
 8000a68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae8 <distSensor_ReadADC_DMA+0x94>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8000aec <distSensor_ReadADC_DMA+0x98>)
 8000a6e:	6013      	str	r3, [r2, #0]
	value_sud = adc2_dma_buffer[1];   // Valeur de sud (ADC2 Channel 12)
 8000a70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae8 <distSensor_ReadADC_DMA+0x94>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	4a1e      	ldr	r2, [pc, #120]	@ (8000af0 <distSensor_ReadADC_DMA+0x9c>)
 8000a76:	6013      	str	r3, [r2, #0]

	if (adc_ready_adc1_west == 1)
 8000a78:	4b1e      	ldr	r3, [pc, #120]	@ (8000af4 <distSensor_ReadADC_DMA+0xa0>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d105      	bne.n	8000a8e <distSensor_ReadADC_DMA+0x3a>
	{

		adc_ready_adc1_west = 0;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	@ (8000af4 <distSensor_ReadADC_DMA+0xa0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]

		return value_est;
 8000a88:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <distSensor_ReadADC_DMA+0x98>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	e021      	b.n	8000ad2 <distSensor_ReadADC_DMA+0x7e>

	}

	else if (adc_ready_adc1_nord == 1)
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000af8 <distSensor_ReadADC_DMA+0xa4>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d105      	bne.n	8000aa4 <distSensor_ReadADC_DMA+0x50>
	{

		adc_ready_adc1_nord = 0;
 8000a98:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <distSensor_ReadADC_DMA+0xa4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]

		return value_nord;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <distSensor_ReadADC_DMA+0x90>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	e016      	b.n	8000ad2 <distSensor_ReadADC_DMA+0x7e>

	}

	if (adc_ready_adc2_est == 1)
 8000aa4:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <distSensor_ReadADC_DMA+0xa8>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d105      	bne.n	8000aba <distSensor_ReadADC_DMA+0x66>
	{

		adc_ready_adc2_est = 0;
 8000aae:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <distSensor_ReadADC_DMA+0xa8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
		return value_est;
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <distSensor_ReadADC_DMA+0x98>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	e00b      	b.n	8000ad2 <distSensor_ReadADC_DMA+0x7e>

	}

	if (adc_ready_adc2_sud == 1)
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <distSensor_ReadADC_DMA+0xac>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d105      	bne.n	8000ad0 <distSensor_ReadADC_DMA+0x7c>
	{

		adc_ready_adc2_sud = 0;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <distSensor_ReadADC_DMA+0xac>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]

		return value_sud;
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <distSensor_ReadADC_DMA+0x9c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	e000      	b.n	8000ad2 <distSensor_ReadADC_DMA+0x7e>

	}

	else{
		return 1;
 8000ad0:	2301      	movs	r3, #1
	}




}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	20000224 	.word	0x20000224
 8000ae0:	20000234 	.word	0x20000234
 8000ae4:	20000238 	.word	0x20000238
 8000ae8:	2000022c 	.word	0x2000022c
 8000aec:	2000023c 	.word	0x2000023c
 8000af0:	20000240 	.word	0x20000240
 8000af4:	20000220 	.word	0x20000220
 8000af8:	20000221 	.word	0x20000221
 8000afc:	20000223 	.word	0x20000223
 8000b00:	20000222 	.word	0x20000222

08000b04 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b14:	d110      	bne.n	8000b38 <HAL_ADC_ConvCpltCallback+0x34>
	{

		if (value_west < 1000 )
 8000b16:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b1e:	d203      	bcs.n	8000b28 <HAL_ADC_ConvCpltCallback+0x24>
		{
			adc_ready_adc1_west = 1;
 8000b20:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <HAL_ADC_ConvCpltCallback+0x70>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	e007      	b.n	8000b38 <HAL_ADC_ConvCpltCallback+0x34>
		}
		else if (value_nord <1000)
 8000b28:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <HAL_ADC_ConvCpltCallback+0x74>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b30:	d202      	bcs.n	8000b38 <HAL_ADC_ConvCpltCallback+0x34>
		{
			adc_ready_adc1_nord = 1;
 8000b32:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <HAL_ADC_ConvCpltCallback+0x78>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
		}

	}

	if (hadc->Instance == ADC2)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a10      	ldr	r2, [pc, #64]	@ (8000b80 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d110      	bne.n	8000b64 <HAL_ADC_ConvCpltCallback+0x60>
	{
		if (value_sud < 1000 )
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <HAL_ADC_ConvCpltCallback+0x80>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b4a:	d203      	bcs.n	8000b54 <HAL_ADC_ConvCpltCallback+0x50>
		{
			adc_ready_adc2_sud = 1;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <HAL_ADC_ConvCpltCallback+0x84>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	701a      	strb	r2, [r3, #0]
		{
			adc_ready_adc2_est = 1;
		}

	}
}
 8000b52:	e007      	b.n	8000b64 <HAL_ADC_ConvCpltCallback+0x60>
		else if (value_est <1000)
 8000b54:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <HAL_ADC_ConvCpltCallback+0x88>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b5c:	d202      	bcs.n	8000b64 <HAL_ADC_ConvCpltCallback+0x60>
			adc_ready_adc2_est = 1;
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	20000234 	.word	0x20000234
 8000b74:	20000220 	.word	0x20000220
 8000b78:	20000238 	.word	0x20000238
 8000b7c:	20000221 	.word	0x20000221
 8000b80:	50000100 	.word	0x50000100
 8000b84:	20000240 	.word	0x20000240
 8000b88:	20000222 	.word	0x20000222
 8000b8c:	2000023c 	.word	0x2000023c
 8000b90:	20000223 	.word	0x20000223

08000b94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b9a:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <MX_DMA_Init+0x60>)
 8000b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b9e:	4a15      	ldr	r2, [pc, #84]	@ (8000bf4 <MX_DMA_Init+0x60>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ba6:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <MX_DMA_Init+0x60>)
 8000ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_DMA_Init+0x60>)
 8000bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf4 <MX_DMA_Init+0x60>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <MX_DMA_Init+0x60>)
 8000bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	200b      	movs	r0, #11
 8000bd0:	f002 fc89 	bl	80034e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bd4:	200b      	movs	r0, #11
 8000bd6:	f002 fca0 	bl	800351a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	200c      	movs	r0, #12
 8000be0:	f002 fc81 	bl	80034e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000be4:	200c      	movs	r0, #12
 8000be6:	f002 fc98 	bl	800351a <HAL_NVIC_EnableIRQ>

}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	@ 0x28
 8000bfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	4b52      	ldr	r3, [pc, #328]	@ (8000d58 <MX_GPIO_Init+0x160>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	4a51      	ldr	r2, [pc, #324]	@ (8000d58 <MX_GPIO_Init+0x160>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1a:	4b4f      	ldr	r3, [pc, #316]	@ (8000d58 <MX_GPIO_Init+0x160>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c26:	4b4c      	ldr	r3, [pc, #304]	@ (8000d58 <MX_GPIO_Init+0x160>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2a:	4a4b      	ldr	r2, [pc, #300]	@ (8000d58 <MX_GPIO_Init+0x160>)
 8000c2c:	f043 0320 	orr.w	r3, r3, #32
 8000c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c32:	4b49      	ldr	r3, [pc, #292]	@ (8000d58 <MX_GPIO_Init+0x160>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c36:	f003 0320 	and.w	r3, r3, #32
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b46      	ldr	r3, [pc, #280]	@ (8000d58 <MX_GPIO_Init+0x160>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	4a45      	ldr	r2, [pc, #276]	@ (8000d58 <MX_GPIO_Init+0x160>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4a:	4b43      	ldr	r3, [pc, #268]	@ (8000d58 <MX_GPIO_Init+0x160>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	4b40      	ldr	r3, [pc, #256]	@ (8000d58 <MX_GPIO_Init+0x160>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d58 <MX_GPIO_Init+0x160>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c62:	4b3d      	ldr	r3, [pc, #244]	@ (8000d58 <MX_GPIO_Init+0x160>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CHAT_Pin|LED_SOURIS_Pin|LIDAR_M_EN_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f246 0110 	movw	r1, #24592	@ 0x6010
 8000c74:	4839      	ldr	r0, [pc, #228]	@ (8000d5c <MX_GPIO_Init+0x164>)
 8000c76:	f003 f85f 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_1_Pin|USER_LED_2_Pin|Accelerometer_NSS_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2113      	movs	r1, #19
 8000c7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c82:	f003 f859 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIDAR_DEV_EN_GPIO_Port, LIDAR_DEV_EN_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4835      	ldr	r0, [pc, #212]	@ (8000d60 <MX_GPIO_Init+0x168>)
 8000c8c:	f003 f854 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_CHAT_Pin LED_SOURIS_Pin LIDAR_M_EN_Pin */
  GPIO_InitStruct.Pin = LED_CHAT_Pin|LED_SOURIS_Pin|LIDAR_M_EN_Pin;
 8000c90:	f246 0310 	movw	r3, #24592	@ 0x6010
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	482c      	ldr	r0, [pc, #176]	@ (8000d5c <MX_GPIO_Init+0x164>)
 8000caa:	f002 fec3 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BNT_CAT_MOUSE_Pin */
  GPIO_InitStruct.Pin = BNT_CAT_MOUSE_Pin;
 8000cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cb4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BNT_CAT_MOUSE_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4825      	ldr	r0, [pc, #148]	@ (8000d5c <MX_GPIO_Init+0x164>)
 8000cc6:	f002 feb5 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_1_Pin USER_LED_2_Pin Accelerometer_NSS_Pin */
  GPIO_InitStruct.Pin = USER_LED_1_Pin|USER_LED_2_Pin|Accelerometer_NSS_Pin;
 8000cca:	2313      	movs	r3, #19
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce4:	f002 fea6 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Accelerometer_INT1_Pin Accelerometer_INT2_Pin */
  GPIO_InitStruct.Pin = Accelerometer_INT1_Pin|Accelerometer_INT2_Pin;
 8000ce8:	230c      	movs	r3, #12
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d00:	f002 fe98 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIDAR_DEV_EN_Pin */
  GPIO_InitStruct.Pin = LIDAR_DEV_EN_Pin;
 8000d04:	2301      	movs	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LIDAR_DEV_EN_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4811      	ldr	r0, [pc, #68]	@ (8000d60 <MX_GPIO_Init+0x168>)
 8000d1c:	f002 fe8a 	bl	8003a34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	2008      	movs	r0, #8
 8000d26:	f002 fbde 	bl	80034e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d2a:	2008      	movs	r0, #8
 8000d2c:	f002 fbf5 	bl	800351a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	2009      	movs	r0, #9
 8000d36:	f002 fbd6 	bl	80034e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d3a:	2009      	movs	r0, #9
 8000d3c:	f002 fbed 	bl	800351a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	2028      	movs	r0, #40	@ 0x28
 8000d46:	f002 fbce 	bl	80034e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d4a:	2028      	movs	r0, #40	@ 0x28
 8000d4c:	f002 fbe5 	bl	800351a <HAL_NVIC_EnableIRQ>

}
 8000d50:	bf00      	nop
 8000d52:	3728      	adds	r7, #40	@ 0x28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48000800 	.word	0x48000800
 8000d60:	48000400 	.word	0x48000400

08000d64 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d68:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ddc <MX_I2C1_Init+0x78>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d70:	4a1b      	ldr	r2, [pc, #108]	@ (8000de0 <MX_I2C1_Init+0x7c>)
 8000d72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d74:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d7a:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d80:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d86:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d92:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d9e:	480e      	ldr	r0, [pc, #56]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000da0:	f003 f814 	bl	8003dcc <HAL_I2C_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000daa:	f000 f97b 	bl	80010a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4809      	ldr	r0, [pc, #36]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000db2:	f003 f8a6 	bl	8003f02 <HAL_I2CEx_ConfigAnalogFilter>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dbc:	f000 f972 	bl	80010a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <MX_I2C1_Init+0x74>)
 8000dc4:	f003 f8e8 	bl	8003f98 <HAL_I2CEx_ConfigDigitalFilter>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dce:	f000 f969 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000244 	.word	0x20000244
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	40621236 	.word	0x40621236

08000de4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b09c      	sub	sp, #112	@ 0x70
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dfc:	f107 0318 	add.w	r3, r7, #24
 8000e00:	2244      	movs	r2, #68	@ 0x44
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f007 fb93 	bl	8008530 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a2e      	ldr	r2, [pc, #184]	@ (8000ec8 <HAL_I2C_MspInit+0xe4>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d154      	bne.n	8000ebe <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e14:	2340      	movs	r3, #64	@ 0x40
 8000e16:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1c:	f107 0318 	add.w	r3, r7, #24
 8000e20:	4618      	mov	r0, r3
 8000e22:	f003 fee3 	bl	8004bec <HAL_RCCEx_PeriphCLKConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e2c:	f000 f93a 	bl	80010a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <HAL_I2C_MspInit+0xe8>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e34:	4a25      	ldr	r2, [pc, #148]	@ (8000ecc <HAL_I2C_MspInit+0xe8>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3c:	4b23      	ldr	r3, [pc, #140]	@ (8000ecc <HAL_I2C_MspInit+0xe8>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	4b20      	ldr	r3, [pc, #128]	@ (8000ecc <HAL_I2C_MspInit+0xe8>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8000ecc <HAL_I2C_MspInit+0xe8>)
 8000e4e:	f043 0302 	orr.w	r3, r3, #2
 8000e52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e54:	4b1d      	ldr	r3, [pc, #116]	@ (8000ecc <HAL_I2C_MspInit+0xe8>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e66:	2312      	movs	r3, #18
 8000e68:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e72:	2304      	movs	r3, #4
 8000e74:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e80:	f002 fdd8 	bl	8003a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8a:	2312      	movs	r3, #18
 8000e8c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e96:	2304      	movs	r3, #4
 8000e98:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480b      	ldr	r0, [pc, #44]	@ (8000ed0 <HAL_I2C_MspInit+0xec>)
 8000ea2:	f002 fdc7 	bl	8003a34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <HAL_I2C_MspInit+0xe8>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eaa:	4a08      	ldr	r2, [pc, #32]	@ (8000ecc <HAL_I2C_MspInit+0xe8>)
 8000eac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_I2C_MspInit+0xe8>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3770      	adds	r7, #112	@ 0x70
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	48000400 	.word	0x48000400

08000ed4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000edc:	1d39      	adds	r1, r7, #4
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4803      	ldr	r0, [pc, #12]	@ (8000ef4 <__io_putchar+0x20>)
 8000ee6:	f006 fac7 	bl	8007478 <HAL_UART_Transmit>
	return chr;
 8000eea:	687b      	ldr	r3, [r7, #4]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200004c8 	.word	0x200004c8

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f000 ff46 	bl	8001d8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f853 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f7ff fe77 	bl	8000bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f0a:	f7ff fe43 	bl	8000b94 <MX_DMA_Init>
  MX_UART4_Init();
 8000f0e:	f000 fddf 	bl	8001ad0 <MX_UART4_Init>
  MX_SPI1_Init();
 8000f12:	f000 f8cd 	bl	80010b0 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000f16:	f000 fbd1 	bl	80016bc <MX_TIM4_Init>
  MX_ADC1_Init();
 8000f1a:	f7ff fb77 	bl	800060c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f1e:	f7ff fbff 	bl	8000720 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000f22:	f000 faa1 	bl	8001468 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f26:	f000 fb73 	bl	8001610 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000f2a:	f000 fe21 	bl	8001b70 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f2e:	f7ff ff19 	bl	8000d64 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000f32:	f000 fc19 	bl	8001768 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000f36:	f000 fc4d 	bl	80017d4 <MX_TIM7_Init>
  MX_TIM16_Init();
 8000f3a:	f000 fc81 	bl	8001840 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	printf(" _____________________________\r\n");
 8000f3e:	4814      	ldr	r0, [pc, #80]	@ (8000f90 <main+0x98>)
 8000f40:	f007 faee 	bl	8008520 <puts>
	printf("|                             |\r\n");
 8000f44:	4813      	ldr	r0, [pc, #76]	@ (8000f94 <main+0x9c>)
 8000f46:	f007 faeb 	bl	8008520 <puts>
	printf("|                             |\r\n");
 8000f4a:	4812      	ldr	r0, [pc, #72]	@ (8000f94 <main+0x9c>)
 8000f4c:	f007 fae8 	bl	8008520 <puts>
	printf("|  WELCOME ON TAGBOT PROJECT  |\r\n");
 8000f50:	4811      	ldr	r0, [pc, #68]	@ (8000f98 <main+0xa0>)
 8000f52:	f007 fae5 	bl	8008520 <puts>
	printf("|                             |\r\n");
 8000f56:	480f      	ldr	r0, [pc, #60]	@ (8000f94 <main+0x9c>)
 8000f58:	f007 fae2 	bl	8008520 <puts>
	printf("|_____________________________|\r\n");
 8000f5c:	480f      	ldr	r0, [pc, #60]	@ (8000f9c <main+0xa4>)
 8000f5e:	f007 fadf 	bl	8008520 <puts>

	/* Ce code initialise l'adc en dma*/
	distSensor_initADC_DMA();
 8000f62:	f7ff fd5b 	bl	8000a1c <distSensor_initADC_DMA>
	printf("Démarrage du test des capteurs de distance...\r\n");
 8000f66:	480e      	ldr	r0, [pc, #56]	@ (8000fa0 <main+0xa8>)
 8000f68:	f007 fada 	bl	8008520 <puts>

		/* Ce code n'affiche que les valeurs inférieures à 1000 (la distance est trop élevée) */



	    uint32_t distance = distSensor_ReadADC_DMA();
 8000f6c:	f7ff fd72 	bl	8000a54 <distSensor_ReadADC_DMA>
 8000f70:	6078      	str	r0, [r7, #4]

	    if (distance == 1){
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d103      	bne.n	8000f80 <main+0x88>
	    	printf("error\r\n");
 8000f78:	480a      	ldr	r0, [pc, #40]	@ (8000fa4 <main+0xac>)
 8000f7a:	f007 fad1 	bl	8008520 <puts>
 8000f7e:	e003      	b.n	8000f88 <main+0x90>
	    }
	    else {

	    	printf("Capteur detect vide, %lu\r\n",distance );
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <main+0xb0>)
 8000f84:	f007 fa64 	bl	8008450 <iprintf>
	    }
	    HAL_Delay(200);
 8000f88:	20c8      	movs	r0, #200	@ 0xc8
 8000f8a:	f000 ff71 	bl	8001e70 <HAL_Delay>
	{
 8000f8e:	e7ed      	b.n	8000f6c <main+0x74>
 8000f90:	080090a4 	.word	0x080090a4
 8000f94:	080090c4 	.word	0x080090c4
 8000f98:	080090e8 	.word	0x080090e8
 8000f9c:	0800910c 	.word	0x0800910c
 8000fa0:	08009130 	.word	0x08009130
 8000fa4:	08009160 	.word	0x08009160
 8000fa8:	08009168 	.word	0x08009168

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	@ 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	2238      	movs	r2, #56	@ 0x38
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f007 fab8 	bl	8008530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f003 f82e 	bl	8004030 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fdc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fea:	2355      	movs	r3, #85	@ 0x55
 8000fec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	4618      	mov	r0, r3
 8001000:	f003 f8ca 	bl	8004198 <HAL_RCC_OscConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800100a:	f000 f84b 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100e:	230f      	movs	r3, #15
 8001010:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001012:	2303      	movs	r3, #3
 8001014:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2104      	movs	r1, #4
 8001026:	4618      	mov	r0, r3
 8001028:	f003 fbc8 	bl	80047bc <HAL_RCC_ClockConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001032:	f000 f837 	bl	80010a4 <Error_Handler>
  }
}
 8001036:	bf00      	nop
 8001038:	3750      	adds	r7, #80	@ 0x50
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
//	ADXL343_DetectTap();
	if(GPIO_Pin == BNT_CAT_MOUSE_Pin){
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001050:	d103      	bne.n	800105a <HAL_GPIO_EXTI_Callback+0x1a>
		printf("Button pushed\r\n");
 8001052:	4811      	ldr	r0, [pc, #68]	@ (8001098 <HAL_GPIO_EXTI_Callback+0x58>)
 8001054:	f007 fa64 	bl	8008520 <puts>
	} else if(GPIO_Pin == Accelerometer_INT2_Pin){
		printf("Acc Int2\r\n");
		uint8_t tap_status;
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); //Renvoie la valeur du registre int_source
	}
}
 8001058:	e01a      	b.n	8001090 <HAL_GPIO_EXTI_Callback+0x50>
	} else if(GPIO_Pin == Accelerometer_INT1_Pin){
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	2b04      	cmp	r3, #4
 800105e:	d10a      	bne.n	8001076 <HAL_GPIO_EXTI_Callback+0x36>
		printf("Acc Int1\r\n");
 8001060:	480e      	ldr	r0, [pc, #56]	@ (800109c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001062:	f007 fa5d 	bl	8008520 <puts>
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); //Renvoie la valeur du registre int_source
 8001066:	f107 030f 	add.w	r3, r7, #15
 800106a:	2201      	movs	r2, #1
 800106c:	4619      	mov	r1, r3
 800106e:	2030      	movs	r0, #48	@ 0x30
 8001070:	f7ff fa9e 	bl	80005b0 <ADXL343_ReadRegister>
}
 8001074:	e00c      	b.n	8001090 <HAL_GPIO_EXTI_Callback+0x50>
	} else if(GPIO_Pin == Accelerometer_INT2_Pin){
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	2b08      	cmp	r3, #8
 800107a:	d109      	bne.n	8001090 <HAL_GPIO_EXTI_Callback+0x50>
		printf("Acc Int2\r\n");
 800107c:	4808      	ldr	r0, [pc, #32]	@ (80010a0 <HAL_GPIO_EXTI_Callback+0x60>)
 800107e:	f007 fa4f 	bl	8008520 <puts>
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); //Renvoie la valeur du registre int_source
 8001082:	f107 030e 	add.w	r3, r7, #14
 8001086:	2201      	movs	r2, #1
 8001088:	4619      	mov	r1, r3
 800108a:	2030      	movs	r0, #48	@ 0x30
 800108c:	f7ff fa90 	bl	80005b0 <ADXL343_ReadRegister>
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	08009184 	.word	0x08009184
 800109c:	08009194 	.word	0x08009194
 80010a0:	080091a0 	.word	0x080091a0

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <Error_Handler+0x8>

080010b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <MX_SPI1_Init+0x74>)
 80010b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001128 <MX_SPI1_Init+0x78>)
 80010b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <MX_SPI1_Init+0x74>)
 80010bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010c2:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <MX_SPI1_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c8:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <MX_SPI1_Init+0x74>)
 80010ca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80010ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <MX_SPI1_Init+0x74>)
 80010d2:	2202      	movs	r2, #2
 80010d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <MX_SPI1_Init+0x74>)
 80010d8:	2201      	movs	r2, #1
 80010da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_SPI1_Init+0x74>)
 80010de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <MX_SPI1_Init+0x74>)
 80010e6:	2230      	movs	r2, #48	@ 0x30
 80010e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <MX_SPI1_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_SPI1_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <MX_SPI1_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <MX_SPI1_Init+0x74>)
 80010fe:	2207      	movs	r2, #7
 8001100:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <MX_SPI1_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <MX_SPI1_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	@ (8001124 <MX_SPI1_Init+0x74>)
 8001110:	f003 ff5c 	bl	8004fcc <HAL_SPI_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800111a:	f7ff ffc3 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000298 	.word	0x20000298
 8001128:	40013000 	.word	0x40013000

0800112c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	@ 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <HAL_SPI_MspInit+0x7c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d128      	bne.n	80011a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800114e:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 8001150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001152:	4a16      	ldr	r2, [pc, #88]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 8001154:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001158:	6613      	str	r3, [r2, #96]	@ 0x60
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 800115c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800115e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	4a10      	ldr	r2, [pc, #64]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Accelerometer_SCK_Pin|Accelerometer_MISO_Pin|Accelerometer_MOSI_Pin;
 800117e:	23e0      	movs	r3, #224	@ 0xe0
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800118e:	2305      	movs	r3, #5
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119c:	f002 fc4a 	bl	8003a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	@ 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40013000 	.word	0x40013000
 80011ac:	40021000 	.word	0x40021000

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <HAL_MspInit+0x44>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ba:	4a0e      	ldr	r2, [pc, #56]	@ (80011f4 <HAL_MspInit+0x44>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <HAL_MspInit+0x44>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <HAL_MspInit+0x44>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d2:	4a08      	ldr	r2, [pc, #32]	@ (80011f4 <HAL_MspInit+0x44>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_MspInit+0x44>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80011e6:	f002 ffc7 	bl	8004178 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <NMI_Handler+0x4>

08001200 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <MemManage_Handler+0x4>

08001210 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <BusFault_Handler+0x4>

08001218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <UsageFault_Handler+0x4>

08001220 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124e:	f000 fdf1 	bl	8001e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
    // Read the INT_SOURCE register to clear the interrupt
    int8_t tap_status;
    ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1);
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	2201      	movs	r2, #1
 8001262:	4619      	mov	r1, r3
 8001264:	2030      	movs	r0, #48	@ 0x30
 8001266:	f7ff f9a3 	bl	80005b0 <ADXL343_ReadRegister>

	if (tap_status & (1<<6)) {  // Tap for single tap
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00a      	beq.n	800128e <EXTI2_IRQHandler+0x36>
		printf("Tap detected!\r\n");
 8001278:	4808      	ldr	r0, [pc, #32]	@ (800129c <EXTI2_IRQHandler+0x44>)
 800127a:	f007 f951 	bl	8008520 <puts>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800127e:	2101      	movs	r1, #1
 8001280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001284:	f002 fd70 	bl	8003d68 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001288:	2064      	movs	r0, #100	@ 0x64
 800128a:	f000 fdf1 	bl	8001e70 <HAL_Delay>
	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Accelerometer_INT1_Pin);
 800128e:	2004      	movs	r0, #4
 8001290:	f002 fd84 	bl	8003d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	080091ac 	.word	0x080091ac

080012a0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
//		printf("Tap detected!\r\n");
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
//		HAL_Delay(100);
//	}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Accelerometer_INT2_Pin);
 80012a4:	2008      	movs	r0, #8
 80012a6:	f002 fd79 	bl	8003d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <DMA1_Channel1_IRQHandler+0x10>)
 80012b6:	f002 fa6e 	bl	8003796 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200001bc 	.word	0x200001bc

080012c4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012c8:	4802      	ldr	r0, [pc, #8]	@ (80012d4 <DMA1_Channel2_IRQHandler+0x10>)
 80012ca:	f002 fa64 	bl	8003796 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000015c 	.word	0x2000015c

080012d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BNT_CAT_MOUSE_Pin);
 80012dc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80012e0:	f002 fd5c 	bl	8003d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012ec:	4802      	ldr	r0, [pc, #8]	@ (80012f8 <TIM6_DAC_IRQHandler+0x10>)
 80012ee:	f004 ff62 	bl	80061b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200003e4 	.word	0x200003e4

080012fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	e00a      	b.n	8001324 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800130e:	f3af 8000 	nop.w
 8001312:	4601      	mov	r1, r0
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60ba      	str	r2, [r7, #8]
 800131a:	b2ca      	uxtb	r2, r1
 800131c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	dbf0      	blt.n	800130e <_read+0x12>
  }

  return len;
 800132c:	687b      	ldr	r3, [r7, #4]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	e009      	b.n	800135c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	60ba      	str	r2, [r7, #8]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fdbf 	bl	8000ed4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	dbf1      	blt.n	8001348 <_write+0x12>
  }
  return len;
 8001364:	687b      	ldr	r3, [r7, #4]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_close>:

int _close(int file)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001396:	605a      	str	r2, [r3, #4]
  return 0;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <_isatty>:

int _isatty(int file)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	@ (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fa:	4b10      	ldr	r3, [pc, #64]	@ (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001408:	f007 f8aa 	bl	8008560 <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	@ (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	@ (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20008000 	.word	0x20008000
 8001438:	00000400 	.word	0x00000400
 800143c:	200002fc 	.word	0x200002fc
 8001440:	20000740 	.word	0x20000740

08001444 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b09c      	sub	sp, #112	@ 0x70
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001488:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2234      	movs	r2, #52	@ 0x34
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f007 f844 	bl	8008530 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014a8:	4b57      	ldr	r3, [pc, #348]	@ (8001608 <MX_TIM1_Init+0x1a0>)
 80014aa:	4a58      	ldr	r2, [pc, #352]	@ (800160c <MX_TIM1_Init+0x1a4>)
 80014ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014ae:	4b56      	ldr	r3, [pc, #344]	@ (8001608 <MX_TIM1_Init+0x1a0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b54      	ldr	r3, [pc, #336]	@ (8001608 <MX_TIM1_Init+0x1a0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6799;
 80014ba:	4b53      	ldr	r3, [pc, #332]	@ (8001608 <MX_TIM1_Init+0x1a0>)
 80014bc:	f641 228f 	movw	r2, #6799	@ 0x1a8f
 80014c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b51      	ldr	r3, [pc, #324]	@ (8001608 <MX_TIM1_Init+0x1a0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001608 <MX_TIM1_Init+0x1a0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001608 <MX_TIM1_Init+0x1a0>)
 80014d0:	2280      	movs	r2, #128	@ 0x80
 80014d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014d4:	484c      	ldr	r0, [pc, #304]	@ (8001608 <MX_TIM1_Init+0x1a0>)
 80014d6:	f004 fcad 	bl	8005e34 <HAL_TIM_Base_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80014e0:	f7ff fde0 	bl	80010a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014ea:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014ee:	4619      	mov	r1, r3
 80014f0:	4845      	ldr	r0, [pc, #276]	@ (8001608 <MX_TIM1_Init+0x1a0>)
 80014f2:	f005 f8c3 	bl	800667c <HAL_TIM_ConfigClockSource>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014fc:	f7ff fdd2 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001500:	4841      	ldr	r0, [pc, #260]	@ (8001608 <MX_TIM1_Init+0x1a0>)
 8001502:	f004 fd51 	bl	8005fa8 <HAL_TIM_PWM_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800150c:	f7ff fdca 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800151c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001520:	4619      	mov	r1, r3
 8001522:	4839      	ldr	r0, [pc, #228]	@ (8001608 <MX_TIM1_Init+0x1a0>)
 8001524:	f005 fe04 	bl	8007130 <HAL_TIMEx_MasterConfigSynchronization>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800152e:	f7ff fdb9 	bl	80010a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001532:	2360      	movs	r3, #96	@ 0x60
 8001534:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800153a:	2300      	movs	r3, #0
 800153c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800153e:	2300      	movs	r3, #0
 8001540:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001552:	2200      	movs	r2, #0
 8001554:	4619      	mov	r1, r3
 8001556:	482c      	ldr	r0, [pc, #176]	@ (8001608 <MX_TIM1_Init+0x1a0>)
 8001558:	f004 ff7c 	bl	8006454 <HAL_TIM_PWM_ConfigChannel>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001562:	f7ff fd9f 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001566:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800156a:	2204      	movs	r2, #4
 800156c:	4619      	mov	r1, r3
 800156e:	4826      	ldr	r0, [pc, #152]	@ (8001608 <MX_TIM1_Init+0x1a0>)
 8001570:	f004 ff70 	bl	8006454 <HAL_TIM_PWM_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800157a:	f7ff fd93 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800157e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001582:	2208      	movs	r2, #8
 8001584:	4619      	mov	r1, r3
 8001586:	4820      	ldr	r0, [pc, #128]	@ (8001608 <MX_TIM1_Init+0x1a0>)
 8001588:	f004 ff64 	bl	8006454 <HAL_TIM_PWM_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001592:	f7ff fd87 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001596:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800159a:	220c      	movs	r2, #12
 800159c:	4619      	mov	r1, r3
 800159e:	481a      	ldr	r0, [pc, #104]	@ (8001608 <MX_TIM1_Init+0x1a0>)
 80015a0:	f004 ff58 	bl	8006454 <HAL_TIM_PWM_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80015aa:	f7ff fd7b 	bl	80010a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80015de:	2300      	movs	r3, #0
 80015e0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	4619      	mov	r1, r3
 80015ea:	4807      	ldr	r0, [pc, #28]	@ (8001608 <MX_TIM1_Init+0x1a0>)
 80015ec:	f005 fe22 	bl	8007234 <HAL_TIMEx_ConfigBreakDeadTime>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 80015f6:	f7ff fd55 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015fa:	4803      	ldr	r0, [pc, #12]	@ (8001608 <MX_TIM1_Init+0x1a0>)
 80015fc:	f000 fa1e 	bl	8001a3c <HAL_TIM_MspPostInit>

}
 8001600:	bf00      	nop
 8001602:	3770      	adds	r7, #112	@ 0x70
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000300 	.word	0x20000300
 800160c:	40012c00 	.word	0x40012c00

08001610 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	@ 0x30
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	2224      	movs	r2, #36	@ 0x24
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f006 ff86 	bl	8008530 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	463b      	mov	r3, r7
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <MX_TIM3_Init+0xa4>)
 8001630:	4a21      	ldr	r2, [pc, #132]	@ (80016b8 <MX_TIM3_Init+0xa8>)
 8001632:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001634:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <MX_TIM3_Init+0xa4>)
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163a:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <MX_TIM3_Init+0xa4>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001640:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <MX_TIM3_Init+0xa4>)
 8001642:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001646:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <MX_TIM3_Init+0xa4>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <MX_TIM3_Init+0xa4>)
 8001650:	2280      	movs	r2, #128	@ 0x80
 8001652:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001654:	2301      	movs	r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800165c:	2301      	movs	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800166c:	2301      	movs	r3, #1
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	4619      	mov	r1, r3
 800167e:	480d      	ldr	r0, [pc, #52]	@ (80016b4 <MX_TIM3_Init+0xa4>)
 8001680:	f004 fcf3 	bl	800606a <HAL_TIM_Encoder_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800168a:	f7ff fd0b 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001696:	463b      	mov	r3, r7
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <MX_TIM3_Init+0xa4>)
 800169c:	f005 fd48 	bl	8007130 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80016a6:	f7ff fcfd 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3730      	adds	r7, #48	@ 0x30
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000034c 	.word	0x2000034c
 80016b8:	40000400 	.word	0x40000400

080016bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08c      	sub	sp, #48	@ 0x30
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	2224      	movs	r2, #36	@ 0x24
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f006 ff30 	bl	8008530 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	463b      	mov	r3, r7
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016da:	4b21      	ldr	r3, [pc, #132]	@ (8001760 <MX_TIM4_Init+0xa4>)
 80016dc:	4a21      	ldr	r2, [pc, #132]	@ (8001764 <MX_TIM4_Init+0xa8>)
 80016de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <MX_TIM4_Init+0xa4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <MX_TIM4_Init+0xa4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <MX_TIM4_Init+0xa4>)
 80016ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <MX_TIM4_Init+0xa4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <MX_TIM4_Init+0xa4>)
 80016fc:	2280      	movs	r2, #128	@ 0x80
 80016fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001700:	2301      	movs	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001708:	2301      	movs	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001718:	2301      	movs	r3, #1
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800171c:	2300      	movs	r3, #0
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	4619      	mov	r1, r3
 800172a:	480d      	ldr	r0, [pc, #52]	@ (8001760 <MX_TIM4_Init+0xa4>)
 800172c:	f004 fc9d 	bl	800606a <HAL_TIM_Encoder_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001736:	f7ff fcb5 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001742:	463b      	mov	r3, r7
 8001744:	4619      	mov	r1, r3
 8001746:	4806      	ldr	r0, [pc, #24]	@ (8001760 <MX_TIM4_Init+0xa4>)
 8001748:	f005 fcf2 	bl	8007130 <HAL_TIMEx_MasterConfigSynchronization>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001752:	f7ff fca7 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	3730      	adds	r7, #48	@ 0x30
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000398 	.word	0x20000398
 8001764:	40000800 	.word	0x40000800

08001768 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001778:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <MX_TIM6_Init+0x64>)
 800177a:	4a15      	ldr	r2, [pc, #84]	@ (80017d0 <MX_TIM6_Init+0x68>)
 800177c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 800177e:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <MX_TIM6_Init+0x64>)
 8001780:	22a9      	movs	r2, #169	@ 0xa9
 8001782:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <MX_TIM6_Init+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <MX_TIM6_Init+0x64>)
 800178c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001790:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <MX_TIM6_Init+0x64>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001798:	480c      	ldr	r0, [pc, #48]	@ (80017cc <MX_TIM6_Init+0x64>)
 800179a:	f004 fb4b 	bl	8005e34 <HAL_TIM_Base_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80017a4:	f7ff fc7e 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017a8:	2320      	movs	r3, #32
 80017aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	@ (80017cc <MX_TIM6_Init+0x64>)
 80017b6:	f005 fcbb 	bl	8007130 <HAL_TIMEx_MasterConfigSynchronization>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80017c0:	f7ff fc70 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200003e4 	.word	0x200003e4
 80017d0:	40001000 	.word	0x40001000

080017d4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80017e4:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <MX_TIM7_Init+0x64>)
 80017e6:	4a15      	ldr	r2, [pc, #84]	@ (800183c <MX_TIM7_Init+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 80017ea:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <MX_TIM7_Init+0x64>)
 80017ec:	22a9      	movs	r2, #169	@ 0xa9
 80017ee:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <MX_TIM7_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <MX_TIM7_Init+0x64>)
 80017f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017fc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <MX_TIM7_Init+0x64>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001804:	480c      	ldr	r0, [pc, #48]	@ (8001838 <MX_TIM7_Init+0x64>)
 8001806:	f004 fb15 	bl	8005e34 <HAL_TIM_Base_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001810:	f7ff fc48 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	@ (8001838 <MX_TIM7_Init+0x64>)
 8001822:	f005 fc85 	bl	8007130 <HAL_TIMEx_MasterConfigSynchronization>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800182c:	f7ff fc3a 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000430 	.word	0x20000430
 800183c:	40001400 	.word	0x40001400

08001840 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001844:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <MX_TIM16_Init+0x48>)
 8001846:	4a11      	ldr	r2, [pc, #68]	@ (800188c <MX_TIM16_Init+0x4c>)
 8001848:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1699;
 800184a:	4b0f      	ldr	r3, [pc, #60]	@ (8001888 <MX_TIM16_Init+0x48>)
 800184c:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001850:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001852:	4b0d      	ldr	r3, [pc, #52]	@ (8001888 <MX_TIM16_Init+0x48>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8001858:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <MX_TIM16_Init+0x48>)
 800185a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800185e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001860:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <MX_TIM16_Init+0x48>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001866:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <MX_TIM16_Init+0x48>)
 8001868:	2200      	movs	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <MX_TIM16_Init+0x48>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	@ (8001888 <MX_TIM16_Init+0x48>)
 8001874:	f004 fade 	bl	8005e34 <HAL_TIM_Base_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800187e:	f7ff fc11 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2000047c 	.word	0x2000047c
 800188c:	40014400 	.word	0x40014400

08001890 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a28      	ldr	r2, [pc, #160]	@ (8001940 <HAL_TIM_Base_MspInit+0xb0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d10c      	bne.n	80018bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018a2:	4b28      	ldr	r3, [pc, #160]	@ (8001944 <HAL_TIM_Base_MspInit+0xb4>)
 80018a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a6:	4a27      	ldr	r2, [pc, #156]	@ (8001944 <HAL_TIM_Base_MspInit+0xb4>)
 80018a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80018ae:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <HAL_TIM_Base_MspInit+0xb4>)
 80018b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80018ba:	e03c      	b.n	8001936 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM6)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a21      	ldr	r2, [pc, #132]	@ (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d114      	bne.n	80018f0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001944 <HAL_TIM_Base_MspInit+0xb4>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001944 <HAL_TIM_Base_MspInit+0xb4>)
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001944 <HAL_TIM_Base_MspInit+0xb4>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	2036      	movs	r0, #54	@ 0x36
 80018e4:	f001 fdff 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018e8:	2036      	movs	r0, #54	@ 0x36
 80018ea:	f001 fe16 	bl	800351a <HAL_NVIC_EnableIRQ>
}
 80018ee:	e022      	b.n	8001936 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM7)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a15      	ldr	r2, [pc, #84]	@ (800194c <HAL_TIM_Base_MspInit+0xbc>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d10c      	bne.n	8001914 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018fa:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <HAL_TIM_Base_MspInit+0xb4>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fe:	4a11      	ldr	r2, [pc, #68]	@ (8001944 <HAL_TIM_Base_MspInit+0xb4>)
 8001900:	f043 0320 	orr.w	r3, r3, #32
 8001904:	6593      	str	r3, [r2, #88]	@ 0x58
 8001906:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <HAL_TIM_Base_MspInit+0xb4>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
}
 8001912:	e010      	b.n	8001936 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM16)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0d      	ldr	r2, [pc, #52]	@ (8001950 <HAL_TIM_Base_MspInit+0xc0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d10b      	bne.n	8001936 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <HAL_TIM_Base_MspInit+0xb4>)
 8001920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001922:	4a08      	ldr	r2, [pc, #32]	@ (8001944 <HAL_TIM_Base_MspInit+0xb4>)
 8001924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001928:	6613      	str	r3, [r2, #96]	@ 0x60
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_TIM_Base_MspInit+0xb4>)
 800192c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800192e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40012c00 	.word	0x40012c00
 8001944:	40021000 	.word	0x40021000
 8001948:	40001000 	.word	0x40001000
 800194c:	40001400 	.word	0x40001400
 8001950:	40014400 	.word	0x40014400

08001954 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08c      	sub	sp, #48	@ 0x30
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a2e      	ldr	r2, [pc, #184]	@ (8001a2c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d128      	bne.n	80019c8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001976:	4b2e      	ldr	r3, [pc, #184]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0xdc>)
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	6593      	str	r3, [r2, #88]	@ 0x58
 8001982:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	4b28      	ldr	r3, [pc, #160]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001992:	4a27      	ldr	r2, [pc, #156]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800199a:	4b25      	ldr	r3, [pc, #148]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0xdc>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LIDAR_M_SCTR_Pin|ENCODER_RIGHT_A_Pin|ENCODER_RIGHT_B_Pin;
 80019a6:	2332      	movs	r3, #50	@ 0x32
 80019a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019b6:	2302      	movs	r3, #2
 80019b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	4619      	mov	r1, r3
 80019c0:	481c      	ldr	r0, [pc, #112]	@ (8001a34 <HAL_TIM_Encoder_MspInit+0xe0>)
 80019c2:	f002 f837 	bl	8003a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80019c6:	e02c      	b.n	8001a22 <HAL_TIM_Encoder_MspInit+0xce>
  else if(tim_encoderHandle->Instance==TIM4)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001a38 <HAL_TIM_Encoder_MspInit+0xe4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d127      	bne.n	8001a22 <HAL_TIM_Encoder_MspInit+0xce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019d2:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d6:	4a16      	ldr	r2, [pc, #88]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80019de:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ee:	4a10      	ldr	r2, [pc, #64]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_LEFT_A_Pin|ENCODER_LEFT_B_Pin;
 8001a02:	23c0      	movs	r3, #192	@ 0xc0
 8001a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a12:	2302      	movs	r3, #2
 8001a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	@ (8001a34 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001a1e:	f002 f809 	bl	8003a34 <HAL_GPIO_Init>
}
 8001a22:	bf00      	nop
 8001a24:	3730      	adds	r7, #48	@ 0x30
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40000400 	.word	0x40000400
 8001a30:	40021000 	.word	0x40021000
 8001a34:	48000400 	.word	0x48000400
 8001a38:	40000800 	.word	0x40000800

08001a3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac8 <HAL_TIM_MspPostInit+0x8c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d12f      	bne.n	8001abe <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001acc <HAL_TIM_MspPostInit+0x90>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a62:	4a1a      	ldr	r2, [pc, #104]	@ (8001acc <HAL_TIM_MspPostInit+0x90>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a6a:	4b18      	ldr	r3, [pc, #96]	@ (8001acc <HAL_TIM_MspPostInit+0x90>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = RIGHT_MOTOR_FWD_Pin|RIGHT_MOTOR_REV_Pin|LEFT_MOTOR_FWD_Pin;
 8001a76:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001a7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a88:	2306      	movs	r3, #6
 8001a8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	4619      	mov	r1, r3
 8001a92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a96:	f001 ffcd 	bl	8003a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEFT_MOTOR_REV_Pin;
 8001a9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8001aac:	230b      	movs	r3, #11
 8001aae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LEFT_MOTOR_REV_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aba:	f001 ffbb 	bl	8003a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001abe:	bf00      	nop
 8001ac0:	3720      	adds	r7, #32
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40012c00 	.word	0x40012c00
 8001acc:	40021000 	.word	0x40021000

08001ad0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	@ (8001b68 <MX_UART4_Init+0x98>)
 8001ad6:	4a25      	ldr	r2, [pc, #148]	@ (8001b6c <MX_UART4_Init+0x9c>)
 8001ad8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001ada:	4b23      	ldr	r3, [pc, #140]	@ (8001b68 <MX_UART4_Init+0x98>)
 8001adc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ae0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae2:	4b21      	ldr	r3, [pc, #132]	@ (8001b68 <MX_UART4_Init+0x98>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b68 <MX_UART4_Init+0x98>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001aee:	4b1e      	ldr	r3, [pc, #120]	@ (8001b68 <MX_UART4_Init+0x98>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001af4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b68 <MX_UART4_Init+0x98>)
 8001af6:	220c      	movs	r2, #12
 8001af8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <MX_UART4_Init+0x98>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b00:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <MX_UART4_Init+0x98>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b06:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <MX_UART4_Init+0x98>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b0c:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <MX_UART4_Init+0x98>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001b12:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <MX_UART4_Init+0x98>)
 8001b14:	2208      	movs	r2, #8
 8001b16:	629a      	str	r2, [r3, #40]	@ 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001b18:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <MX_UART4_Init+0x98>)
 8001b1a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b1e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b20:	4811      	ldr	r0, [pc, #68]	@ (8001b68 <MX_UART4_Init+0x98>)
 8001b22:	f005 fc59 	bl	80073d8 <HAL_UART_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_UART4_Init+0x60>
  {
    Error_Handler();
 8001b2c:	f7ff faba 	bl	80010a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b30:	2100      	movs	r1, #0
 8001b32:	480d      	ldr	r0, [pc, #52]	@ (8001b68 <MX_UART4_Init+0x98>)
 8001b34:	f006 fa52 	bl	8007fdc <HAL_UARTEx_SetTxFifoThreshold>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8001b3e:	f7ff fab1 	bl	80010a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b42:	2100      	movs	r1, #0
 8001b44:	4808      	ldr	r0, [pc, #32]	@ (8001b68 <MX_UART4_Init+0x98>)
 8001b46:	f006 fa87 	bl	8008058 <HAL_UARTEx_SetRxFifoThreshold>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_UART4_Init+0x84>
  {
    Error_Handler();
 8001b50:	f7ff faa8 	bl	80010a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001b54:	4804      	ldr	r0, [pc, #16]	@ (8001b68 <MX_UART4_Init+0x98>)
 8001b56:	f006 fa08 	bl	8007f6a <HAL_UARTEx_DisableFifoMode>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_UART4_Init+0x94>
  {
    Error_Handler();
 8001b60:	f7ff faa0 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200004c8 	.word	0x200004c8
 8001b6c:	40004c00 	.word	0x40004c00

08001b70 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b74:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <MX_USART3_UART_Init+0x90>)
 8001b76:	4a23      	ldr	r2, [pc, #140]	@ (8001c04 <MX_USART3_UART_Init+0x94>)
 8001b78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 128000;
 8001b7a:	4b21      	ldr	r3, [pc, #132]	@ (8001c00 <MX_USART3_UART_Init+0x90>)
 8001b7c:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8001b80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	4b1f      	ldr	r3, [pc, #124]	@ (8001c00 <MX_USART3_UART_Init+0x90>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	@ (8001c00 <MX_USART3_UART_Init+0x90>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c00 <MX_USART3_UART_Init+0x90>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	@ (8001c00 <MX_USART3_UART_Init+0x90>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9a:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <MX_USART3_UART_Init+0x90>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	4b17      	ldr	r3, [pc, #92]	@ (8001c00 <MX_USART3_UART_Init+0x90>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba6:	4b16      	ldr	r3, [pc, #88]	@ (8001c00 <MX_USART3_UART_Init+0x90>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bac:	4b14      	ldr	r3, [pc, #80]	@ (8001c00 <MX_USART3_UART_Init+0x90>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <MX_USART3_UART_Init+0x90>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bb8:	4811      	ldr	r0, [pc, #68]	@ (8001c00 <MX_USART3_UART_Init+0x90>)
 8001bba:	f005 fc0d 	bl	80073d8 <HAL_UART_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001bc4:	f7ff fa6e 	bl	80010a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	480d      	ldr	r0, [pc, #52]	@ (8001c00 <MX_USART3_UART_Init+0x90>)
 8001bcc:	f006 fa06 	bl	8007fdc <HAL_UARTEx_SetTxFifoThreshold>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001bd6:	f7ff fa65 	bl	80010a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4808      	ldr	r0, [pc, #32]	@ (8001c00 <MX_USART3_UART_Init+0x90>)
 8001bde:	f006 fa3b 	bl	8008058 <HAL_UARTEx_SetRxFifoThreshold>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001be8:	f7ff fa5c 	bl	80010a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001bec:	4804      	ldr	r0, [pc, #16]	@ (8001c00 <MX_USART3_UART_Init+0x90>)
 8001bee:	f006 f9bc 	bl	8007f6a <HAL_UARTEx_DisableFifoMode>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001bf8:	f7ff fa54 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	2000055c 	.word	0x2000055c
 8001c04:	40004800 	.word	0x40004800

08001c08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b09c      	sub	sp, #112	@ 0x70
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c20:	f107 0318 	add.w	r3, r7, #24
 8001c24:	2244      	movs	r2, #68	@ 0x44
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f006 fc81 	bl	8008530 <memset>
  if(uartHandle->Instance==UART4)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a3d      	ldr	r2, [pc, #244]	@ (8001d28 <HAL_UART_MspInit+0x120>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d137      	bne.n	8001ca8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c38:	2308      	movs	r3, #8
 8001c3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c40:	f107 0318 	add.w	r3, r7, #24
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 ffd1 	bl	8004bec <HAL_RCCEx_PeriphCLKConfig>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c50:	f7ff fa28 	bl	80010a4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c54:	4b35      	ldr	r3, [pc, #212]	@ (8001d2c <HAL_UART_MspInit+0x124>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c58:	4a34      	ldr	r2, [pc, #208]	@ (8001d2c <HAL_UART_MspInit+0x124>)
 8001c5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001c5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c60:	4b32      	ldr	r3, [pc, #200]	@ (8001d2c <HAL_UART_MspInit+0x124>)
 8001c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d2c <HAL_UART_MspInit+0x124>)
 8001c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c70:	4a2e      	ldr	r2, [pc, #184]	@ (8001d2c <HAL_UART_MspInit+0x124>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c78:	4b2c      	ldr	r3, [pc, #176]	@ (8001d2c <HAL_UART_MspInit+0x124>)
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001c84:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001c96:	2305      	movs	r3, #5
 8001c98:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4823      	ldr	r0, [pc, #140]	@ (8001d30 <HAL_UART_MspInit+0x128>)
 8001ca2:	f001 fec7 	bl	8003a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ca6:	e03b      	b.n	8001d20 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a21      	ldr	r2, [pc, #132]	@ (8001d34 <HAL_UART_MspInit+0x12c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d136      	bne.n	8001d20 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cba:	f107 0318 	add.w	r3, r7, #24
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f002 ff94 	bl	8004bec <HAL_RCCEx_PeriphCLKConfig>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001cca:	f7ff f9eb 	bl	80010a4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cce:	4b17      	ldr	r3, [pc, #92]	@ (8001d2c <HAL_UART_MspInit+0x124>)
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd2:	4a16      	ldr	r2, [pc, #88]	@ (8001d2c <HAL_UART_MspInit+0x124>)
 8001cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cda:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <HAL_UART_MspInit+0x124>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce6:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <HAL_UART_MspInit+0x124>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	4a10      	ldr	r2, [pc, #64]	@ (8001d2c <HAL_UART_MspInit+0x124>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <HAL_UART_MspInit+0x124>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_INPUT_Pin|LIDAR_OUTPUT_Pin;
 8001cfe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d02:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d10:	2307      	movs	r3, #7
 8001d12:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4807      	ldr	r0, [pc, #28]	@ (8001d38 <HAL_UART_MspInit+0x130>)
 8001d1c:	f001 fe8a 	bl	8003a34 <HAL_GPIO_Init>
}
 8001d20:	bf00      	nop
 8001d22:	3770      	adds	r7, #112	@ 0x70
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40004c00 	.word	0x40004c00
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	48000800 	.word	0x48000800
 8001d34:	40004800 	.word	0x40004800
 8001d38:	48000400 	.word	0x48000400

08001d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d3c:	480d      	ldr	r0, [pc, #52]	@ (8001d74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d3e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d40:	f7ff fb80 	bl	8001444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d44:	480c      	ldr	r0, [pc, #48]	@ (8001d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d46:	490d      	ldr	r1, [pc, #52]	@ (8001d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d48:	4a0d      	ldr	r2, [pc, #52]	@ (8001d80 <LoopForever+0xe>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d88 <LoopForever+0x16>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001d6a:	f006 fbff 	bl	800856c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d6e:	f7ff f8c3 	bl	8000ef8 <main>

08001d72 <LoopForever>:

LoopForever:
    b LoopForever
 8001d72:	e7fe      	b.n	8001d72 <LoopForever>
  ldr   r0, =_estack
 8001d74:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d7c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d80:	08009240 	.word	0x08009240
  ldr r2, =_sbss
 8001d84:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d88:	20000740 	.word	0x20000740

08001d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC1_2_IRQHandler>

08001d8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f001 fb99 	bl	80034d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d9e:	200f      	movs	r0, #15
 8001da0:	f000 f80e 	bl	8001dc0 <HAL_InitTick>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	71fb      	strb	r3, [r7, #7]
 8001dae:	e001      	b.n	8001db4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001db0:	f7ff f9fe 	bl	80011b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001db4:	79fb      	ldrb	r3, [r7, #7]

}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001dcc:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <HAL_InitTick+0x68>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d022      	beq.n	8001e1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001dd4:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <HAL_InitTick+0x6c>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <HAL_InitTick+0x68>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001de0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	4618      	mov	r0, r3
 8001dea:	f001 fba4 	bl	8003536 <HAL_SYSTICK_Config>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10f      	bne.n	8001e14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b0f      	cmp	r3, #15
 8001df8:	d809      	bhi.n	8001e0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e02:	f001 fb70 	bl	80034e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e06:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <HAL_InitTick+0x70>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	e007      	b.n	8001e1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
 8001e12:	e004      	b.n	8001e1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
 8001e18:	e001      	b.n	8001e1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	20000004 	.word	0x20000004

08001e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <HAL_IncTick+0x1c>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b05      	ldr	r3, [pc, #20]	@ (8001e54 <HAL_IncTick+0x20>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4413      	add	r3, r2
 8001e42:	4a03      	ldr	r2, [pc, #12]	@ (8001e50 <HAL_IncTick+0x1c>)
 8001e44:	6013      	str	r3, [r2, #0]
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	200005f0 	.word	0x200005f0
 8001e54:	20000008 	.word	0x20000008

08001e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	@ (8001e6c <HAL_GetTick+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	200005f0 	.word	0x200005f0

08001e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff ffee 	bl	8001e58 <HAL_GetTick>
 8001e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e88:	d004      	beq.n	8001e94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e8a:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <HAL_Delay+0x40>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4413      	add	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e94:	bf00      	nop
 8001e96:	f7ff ffdf 	bl	8001e58 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d8f7      	bhi.n	8001e96 <HAL_Delay+0x26>
  {
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000008 	.word	0x20000008

08001eb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	3360      	adds	r3, #96	@ 0x60
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <LL_ADC_SetOffset+0x44>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f54:	bf00      	nop
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	03fff000 	.word	0x03fff000

08001f64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3360      	adds	r3, #96	@ 0x60
 8001f72:	461a      	mov	r2, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3360      	adds	r3, #96	@ 0x60
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fba:	bf00      	nop
 8001fbc:	371c      	adds	r7, #28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b087      	sub	sp, #28
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3360      	adds	r3, #96	@ 0x60
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ff0:	bf00      	nop
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3360      	adds	r3, #96	@ 0x60
 800200c:	461a      	mov	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	431a      	orrs	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002026:	bf00      	nop
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	615a      	str	r2, [r3, #20]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800207e:	b480      	push	{r7}
 8002080:	b087      	sub	sp, #28
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3330      	adds	r3, #48	@ 0x30
 800208e:	461a      	mov	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	4413      	add	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	211f      	movs	r1, #31
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	401a      	ands	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	0e9b      	lsrs	r3, r3, #26
 80020b6:	f003 011f 	and.w	r1, r3, #31
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	431a      	orrs	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020ca:	bf00      	nop
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b087      	sub	sp, #28
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3314      	adds	r3, #20
 80020e6:	461a      	mov	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	0e5b      	lsrs	r3, r3, #25
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	4413      	add	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	0d1b      	lsrs	r3, r3, #20
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	2107      	movs	r1, #7
 8002104:	fa01 f303 	lsl.w	r3, r1, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	401a      	ands	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	0d1b      	lsrs	r3, r3, #20
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	431a      	orrs	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002120:	bf00      	nop
 8002122:	371c      	adds	r7, #28
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002144:	43db      	mvns	r3, r3
 8002146:	401a      	ands	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0318 	and.w	r3, r3, #24
 800214e:	4908      	ldr	r1, [pc, #32]	@ (8002170 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002150:	40d9      	lsrs	r1, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	400b      	ands	r3, r1
 8002156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215a:	431a      	orrs	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	0007ffff 	.word	0x0007ffff

08002174 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 031f 	and.w	r3, r3, #31
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80021a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6093      	str	r3, [r2, #8]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021c8:	d101      	bne.n	80021ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80021ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002214:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002218:	d101      	bne.n	800221e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800223c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <LL_ADC_IsEnabled+0x18>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <LL_ADC_IsEnabled+0x1a>
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800228a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800228e:	f043 0204 	orr.w	r2, r3, #4
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d101      	bne.n	80022ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d101      	bne.n	80022e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b089      	sub	sp, #36	@ 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e167      	b.n	80025da <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d109      	bne.n	800232c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7fe fa79 	bl	8000810 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff3f 	bl	80021b4 <LL_ADC_IsDeepPowerDownEnabled>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d004      	beq.n	8002346 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff25 	bl	8002190 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff5a 	bl	8002204 <LL_ADC_IsInternalRegulatorEnabled>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d115      	bne.n	8002382 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff ff3e 	bl	80021dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002360:	4ba0      	ldr	r3, [pc, #640]	@ (80025e4 <HAL_ADC_Init+0x2f4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	099b      	lsrs	r3, r3, #6
 8002366:	4aa0      	ldr	r2, [pc, #640]	@ (80025e8 <HAL_ADC_Init+0x2f8>)
 8002368:	fba2 2303 	umull	r2, r3, r2, r3
 800236c:	099b      	lsrs	r3, r3, #6
 800236e:	3301      	adds	r3, #1
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002374:	e002      	b.n	800237c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3b01      	subs	r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f9      	bne.n	8002376 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ff3c 	bl	8002204 <LL_ADC_IsInternalRegulatorEnabled>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10d      	bne.n	80023ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002396:	f043 0210 	orr.w	r2, r3, #16
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a2:	f043 0201 	orr.w	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ff75 	bl	80022a2 <LL_ADC_REG_IsConversionOngoing>
 80023b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 8100 	bne.w	80025c8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f040 80fc 	bne.w	80025c8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80023d8:	f043 0202 	orr.w	r2, r3, #2
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff35 	bl	8002254 <LL_ADC_IsEnabled>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d111      	bne.n	8002414 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80023f4:	f7ff ff2e 	bl	8002254 <LL_ADC_IsEnabled>
 80023f8:	4604      	mov	r4, r0
 80023fa:	487c      	ldr	r0, [pc, #496]	@ (80025ec <HAL_ADC_Init+0x2fc>)
 80023fc:	f7ff ff2a 	bl	8002254 <LL_ADC_IsEnabled>
 8002400:	4603      	mov	r3, r0
 8002402:	4323      	orrs	r3, r4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4619      	mov	r1, r3
 800240e:	4878      	ldr	r0, [pc, #480]	@ (80025f0 <HAL_ADC_Init+0x300>)
 8002410:	f7ff fd50 	bl	8001eb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7f5b      	ldrb	r3, [r3, #29]
 8002418:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800241e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002424:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800242a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002432:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800243e:	2b01      	cmp	r3, #1
 8002440:	d106      	bne.n	8002450 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002446:	3b01      	subs	r3, #1
 8002448:	045b      	lsls	r3, r3, #17
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002464:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	4b60      	ldr	r3, [pc, #384]	@ (80025f4 <HAL_ADC_Init+0x304>)
 8002474:	4013      	ands	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	69b9      	ldr	r1, [r7, #24]
 800247c:	430b      	orrs	r3, r1
 800247e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ff14 	bl	80022c8 <LL_ADC_INJ_IsConversionOngoing>
 80024a0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d16d      	bne.n	8002584 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d16a      	bne.n	8002584 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024b2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80024ba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024ca:	f023 0302 	bic.w	r3, r3, #2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	69b9      	ldr	r1, [r7, #24]
 80024d4:	430b      	orrs	r3, r1
 80024d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d017      	beq.n	8002510 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80024ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80024f8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80024fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6911      	ldr	r1, [r2, #16]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	430b      	orrs	r3, r1
 800250a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800250e:	e013      	b.n	8002538 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800251e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002530:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002534:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800253e:	2b01      	cmp	r3, #1
 8002540:	d118      	bne.n	8002574 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800254c:	f023 0304 	bic.w	r3, r3, #4
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002558:	4311      	orrs	r1, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800255e:	4311      	orrs	r1, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002564:	430a      	orrs	r2, r1
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	611a      	str	r2, [r3, #16]
 8002572:	e007      	b.n	8002584 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0201 	bic.w	r2, r2, #1
 8002582:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d10c      	bne.n	80025a6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	f023 010f 	bic.w	r1, r3, #15
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	1e5a      	subs	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80025a4:	e007      	b.n	80025b6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 020f 	bic.w	r2, r2, #15
 80025b4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ba:	f023 0303 	bic.w	r3, r3, #3
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025c6:	e007      	b.n	80025d8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025cc:	f043 0210 	orr.w	r2, r3, #16
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3724      	adds	r7, #36	@ 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd90      	pop	{r4, r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000000 	.word	0x20000000
 80025e8:	053e2d63 	.word	0x053e2d63
 80025ec:	50000100 	.word	0x50000100
 80025f0:	50000300 	.word	0x50000300
 80025f4:	fff04007 	.word	0xfff04007

080025f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002604:	4851      	ldr	r0, [pc, #324]	@ (800274c <HAL_ADC_Start_DMA+0x154>)
 8002606:	f7ff fdb5 	bl	8002174 <LL_ADC_GetMultimode>
 800260a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fe46 	bl	80022a2 <LL_ADC_REG_IsConversionOngoing>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	f040 808f 	bne.w	800273c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_ADC_Start_DMA+0x34>
 8002628:	2302      	movs	r3, #2
 800262a:	e08a      	b.n	8002742 <HAL_ADC_Start_DMA+0x14a>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	2b05      	cmp	r3, #5
 800263e:	d002      	beq.n	8002646 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	2b09      	cmp	r3, #9
 8002644:	d173      	bne.n	800272e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fc8e 	bl	8002f68 <ADC_Enable>
 800264c:	4603      	mov	r3, r0
 800264e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002650:	7dfb      	ldrb	r3, [r7, #23]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d166      	bne.n	8002724 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a38      	ldr	r2, [pc, #224]	@ (8002750 <HAL_ADC_Start_DMA+0x158>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d002      	beq.n	800267a <HAL_ADC_Start_DMA+0x82>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	e001      	b.n	800267e <HAL_ADC_Start_DMA+0x86>
 800267a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	4293      	cmp	r3, r2
 8002684:	d002      	beq.n	800268c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d105      	bne.n	8002698 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002690:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d006      	beq.n	80026b2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a8:	f023 0206 	bic.w	r2, r3, #6
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	661a      	str	r2, [r3, #96]	@ 0x60
 80026b0:	e002      	b.n	80026b8 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026bc:	4a25      	ldr	r2, [pc, #148]	@ (8002754 <HAL_ADC_Start_DMA+0x15c>)
 80026be:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c4:	4a24      	ldr	r2, [pc, #144]	@ (8002758 <HAL_ADC_Start_DMA+0x160>)
 80026c6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026cc:	4a23      	ldr	r2, [pc, #140]	@ (800275c <HAL_ADC_Start_DMA+0x164>)
 80026ce:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	221c      	movs	r2, #28
 80026d6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0210 	orr.w	r2, r2, #16
 80026ee:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3340      	adds	r3, #64	@ 0x40
 800270a:	4619      	mov	r1, r3
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f000 ffc6 	bl	80036a0 <HAL_DMA_Start_IT>
 8002714:	4603      	mov	r3, r0
 8002716:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fdac 	bl	800227a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002722:	e00d      	b.n	8002740 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800272c:	e008      	b.n	8002740 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800273a:	e001      	b.n	8002740 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800273c:	2302      	movs	r3, #2
 800273e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002740:	7dfb      	ldrb	r3, [r7, #23]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	50000300 	.word	0x50000300
 8002750:	50000100 	.word	0x50000100
 8002754:	08003075 	.word	0x08003075
 8002758:	0800314d 	.word	0x0800314d
 800275c:	08003169 	.word	0x08003169

08002760 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b0b6      	sub	sp, #216	@ 0xd8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x22>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e3c8      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x7b4>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fd73 	bl	80022a2 <LL_ADC_REG_IsConversionOngoing>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 83ad 	bne.w	8002f1e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	f7ff fc54 	bl	800207e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fd61 	bl	80022a2 <LL_ADC_REG_IsConversionOngoing>
 80027e0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fd6d 	bl	80022c8 <LL_ADC_INJ_IsConversionOngoing>
 80027ee:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 81d9 	bne.w	8002bae <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002800:	2b00      	cmp	r3, #0
 8002802:	f040 81d4 	bne.w	8002bae <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800280e:	d10f      	bne.n	8002830 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2200      	movs	r2, #0
 800281a:	4619      	mov	r1, r3
 800281c:	f7ff fc5b 	bl	80020d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fc02 	bl	8002032 <LL_ADC_SetSamplingTimeCommonConfig>
 800282e:	e00e      	b.n	800284e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6819      	ldr	r1, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	461a      	mov	r2, r3
 800283e:	f7ff fc4a 	bl	80020d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fbf2 	bl	8002032 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	08db      	lsrs	r3, r3, #3
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b04      	cmp	r3, #4
 800286e:	d022      	beq.n	80028b6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6919      	ldr	r1, [r3, #16]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002880:	f7ff fb4c 	bl	8001f1c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	6919      	ldr	r1, [r3, #16]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	461a      	mov	r2, r3
 8002892:	f7ff fb98 	bl	8001fc6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d102      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x124>
 80028a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028aa:	e000      	b.n	80028ae <HAL_ADC_ConfigChannel+0x126>
 80028ac:	2300      	movs	r3, #0
 80028ae:	461a      	mov	r2, r3
 80028b0:	f7ff fba4 	bl	8001ffc <LL_ADC_SetOffsetSaturation>
 80028b4:	e17b      	b.n	8002bae <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fb51 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10a      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x15a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fb46 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 80028d8:	4603      	mov	r3, r0
 80028da:	0e9b      	lsrs	r3, r3, #26
 80028dc:	f003 021f 	and.w	r2, r3, #31
 80028e0:	e01e      	b.n	8002920 <HAL_ADC_ConfigChannel+0x198>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fb3b 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002900:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002904:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002908:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002910:	2320      	movs	r3, #32
 8002912:	e004      	b.n	800291e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002914:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	b2db      	uxtb	r3, r3
 800291e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002928:	2b00      	cmp	r3, #0
 800292a:	d105      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x1b0>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	0e9b      	lsrs	r3, r3, #26
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	e018      	b.n	800296a <HAL_ADC_ConfigChannel+0x1e2>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800294c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002950:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002954:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800295c:	2320      	movs	r3, #32
 800295e:	e004      	b.n	800296a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002960:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800296a:	429a      	cmp	r2, r3
 800296c:	d106      	bne.n	800297c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2200      	movs	r2, #0
 8002974:	2100      	movs	r1, #0
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fb0a 	bl	8001f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2101      	movs	r1, #1
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff faee 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002988:	4603      	mov	r3, r0
 800298a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10a      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x220>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2101      	movs	r1, #1
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fae3 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 800299e:	4603      	mov	r3, r0
 80029a0:	0e9b      	lsrs	r3, r3, #26
 80029a2:	f003 021f 	and.w	r2, r3, #31
 80029a6:	e01e      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x25e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2101      	movs	r1, #1
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fad8 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80029c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80029ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80029d6:	2320      	movs	r3, #32
 80029d8:	e004      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80029da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d105      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x276>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	0e9b      	lsrs	r3, r3, #26
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	e018      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x2a8>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002a12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002a1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002a22:	2320      	movs	r3, #32
 8002a24:	e004      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002a26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d106      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff faa7 	bl	8001f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2102      	movs	r1, #2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fa8b 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10a      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x2e6>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fa80 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002a64:	4603      	mov	r3, r0
 8002a66:	0e9b      	lsrs	r3, r3, #26
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	e01e      	b.n	8002aac <HAL_ADC_ConfigChannel+0x324>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2102      	movs	r1, #2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fa75 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002a94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	e004      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002aa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x33c>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0e9b      	lsrs	r3, r3, #26
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	e016      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x36a>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002ad6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ad8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	e004      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d106      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2200      	movs	r2, #0
 8002afc:	2102      	movs	r1, #2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fa46 	bl	8001f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2103      	movs	r1, #3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fa2a 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10a      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x3a8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2103      	movs	r1, #3
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fa1f 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002b26:	4603      	mov	r3, r0
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	f003 021f 	and.w	r2, r3, #31
 8002b2e:	e017      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x3d8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2103      	movs	r1, #3
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fa14 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002b48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b4a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002b4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002b52:	2320      	movs	r3, #32
 8002b54:	e003      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002b56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x3f0>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0e9b      	lsrs	r3, r3, #26
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	e011      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x414>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002b86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b88:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002b8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002b90:	2320      	movs	r3, #32
 8002b92:	e003      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002b94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d106      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2103      	movs	r1, #3
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff f9f1 	bl	8001f90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff fb4e 	bl	8002254 <LL_ADC_IsEnabled>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 8140 	bne.w	8002e40 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	6819      	ldr	r1, [r3, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	f7ff faad 	bl	800212c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	4a8f      	ldr	r2, [pc, #572]	@ (8002e14 <HAL_ADC_ConfigChannel+0x68c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	f040 8131 	bne.w	8002e40 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10b      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x47e>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	0e9b      	lsrs	r3, r3, #26
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	f003 031f 	and.w	r3, r3, #31
 8002bfa:	2b09      	cmp	r3, #9
 8002bfc:	bf94      	ite	ls
 8002bfe:	2301      	movls	r3, #1
 8002c00:	2300      	movhi	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	e019      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x4b2>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002c14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c16:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002c18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002c1e:	2320      	movs	r3, #32
 8002c20:	e003      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002c22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c24:	fab3 f383 	clz	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	2b09      	cmp	r3, #9
 8002c32:	bf94      	ite	ls
 8002c34:	2301      	movls	r3, #1
 8002c36:	2300      	movhi	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d079      	beq.n	8002d32 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d107      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x4d2>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	0e9b      	lsrs	r3, r3, #26
 8002c50:	3301      	adds	r3, #1
 8002c52:	069b      	lsls	r3, r3, #26
 8002c54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c58:	e015      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x4fe>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c6a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002c72:	2320      	movs	r3, #32
 8002c74:	e003      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c78:	fab3 f383 	clz	r3, r3
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	069b      	lsls	r3, r3, #26
 8002c82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x51e>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	0e9b      	lsrs	r3, r3, #26
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca4:	e017      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x54e>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002cb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002cb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	e003      	b.n	8002cca <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd6:	ea42 0103 	orr.w	r1, r2, r3
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10a      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x574>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	0e9b      	lsrs	r3, r3, #26
 8002cec:	3301      	adds	r3, #1
 8002cee:	f003 021f 	and.w	r2, r3, #31
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	051b      	lsls	r3, r3, #20
 8002cfa:	e018      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x5a6>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002d14:	2320      	movs	r3, #32
 8002d16:	e003      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	f003 021f 	and.w	r2, r3, #31
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d2e:	430b      	orrs	r3, r1
 8002d30:	e081      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d107      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x5c6>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	0e9b      	lsrs	r3, r3, #26
 8002d44:	3301      	adds	r3, #1
 8002d46:	069b      	lsls	r3, r3, #26
 8002d48:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d4c:	e015      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x5f2>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002d66:	2320      	movs	r3, #32
 8002d68:	e003      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6c:	fab3 f383 	clz	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	069b      	lsls	r3, r3, #26
 8002d76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x612>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	0e9b      	lsrs	r3, r3, #26
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	2101      	movs	r1, #1
 8002d94:	fa01 f303 	lsl.w	r3, r1, r3
 8002d98:	e017      	b.n	8002dca <HAL_ADC_ConfigChannel+0x642>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	61fb      	str	r3, [r7, #28]
  return result;
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002db2:	2320      	movs	r3, #32
 8002db4:	e003      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db8:	fab3 f383 	clz	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	ea42 0103 	orr.w	r1, r2, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10d      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x66e>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	0e9b      	lsrs	r3, r3, #26
 8002de0:	3301      	adds	r3, #1
 8002de2:	f003 021f 	and.w	r2, r3, #31
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	3b1e      	subs	r3, #30
 8002dee:	051b      	lsls	r3, r3, #20
 8002df0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002df4:	e01e      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x6ac>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	613b      	str	r3, [r7, #16]
  return result;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d104      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002e0e:	2320      	movs	r3, #32
 8002e10:	e006      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x698>
 8002e12:	bf00      	nop
 8002e14:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	3301      	adds	r3, #1
 8002e22:	f003 021f 	and.w	r2, r3, #31
 8002e26:	4613      	mov	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3b1e      	subs	r3, #30
 8002e2e:	051b      	lsls	r3, r3, #20
 8002e30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e34:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f7ff f94b 	bl	80020d6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b3f      	ldr	r3, [pc, #252]	@ (8002f44 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d071      	beq.n	8002f30 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e4c:	483e      	ldr	r0, [pc, #248]	@ (8002f48 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e4e:	f7ff f857 	bl	8001f00 <LL_ADC_GetCommonPathInternalCh>
 8002e52:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a3c      	ldr	r2, [pc, #240]	@ (8002f4c <HAL_ADC_ConfigChannel+0x7c4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d004      	beq.n	8002e6a <HAL_ADC_ConfigChannel+0x6e2>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a3a      	ldr	r2, [pc, #232]	@ (8002f50 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d127      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d121      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e7e:	d157      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e88:	4619      	mov	r1, r3
 8002e8a:	482f      	ldr	r0, [pc, #188]	@ (8002f48 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e8c:	f7ff f825 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e90:	4b30      	ldr	r3, [pc, #192]	@ (8002f54 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	099b      	lsrs	r3, r3, #6
 8002e96:	4a30      	ldr	r2, [pc, #192]	@ (8002f58 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	099b      	lsrs	r3, r3, #6
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002eaa:	e002      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f9      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eb8:	e03a      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a27      	ldr	r2, [pc, #156]	@ (8002f5c <HAL_ADC_ConfigChannel+0x7d4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d113      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ec4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ec8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10d      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a22      	ldr	r2, [pc, #136]	@ (8002f60 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d02a      	beq.n	8002f30 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ede:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4818      	ldr	r0, [pc, #96]	@ (8002f48 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ee6:	f7fe fff8 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eea:	e021      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f64 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d11c      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d116      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a16      	ldr	r2, [pc, #88]	@ (8002f60 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d011      	beq.n	8002f30 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f14:	4619      	mov	r1, r3
 8002f16:	480c      	ldr	r0, [pc, #48]	@ (8002f48 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f18:	f7fe ffdf 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
 8002f1c:	e008      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f22:	f043 0220 	orr.w	r2, r3, #32
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f38:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	37d8      	adds	r7, #216	@ 0xd8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	80080000 	.word	0x80080000
 8002f48:	50000300 	.word	0x50000300
 8002f4c:	c3210000 	.word	0xc3210000
 8002f50:	90c00010 	.word	0x90c00010
 8002f54:	20000000 	.word	0x20000000
 8002f58:	053e2d63 	.word	0x053e2d63
 8002f5c:	c7520000 	.word	0xc7520000
 8002f60:	50000100 	.word	0x50000100
 8002f64:	cb840000 	.word	0xcb840000

08002f68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff f96b 	bl	8002254 <LL_ADC_IsEnabled>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d169      	bne.n	8003058 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	4b36      	ldr	r3, [pc, #216]	@ (8003064 <ADC_Enable+0xfc>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00d      	beq.n	8002fae <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f96:	f043 0210 	orr.w	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e055      	b.n	800305a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff f93a 	bl	800222c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002fb8:	482b      	ldr	r0, [pc, #172]	@ (8003068 <ADC_Enable+0x100>)
 8002fba:	f7fe ffa1 	bl	8001f00 <LL_ADC_GetCommonPathInternalCh>
 8002fbe:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002fc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d013      	beq.n	8002ff0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fc8:	4b28      	ldr	r3, [pc, #160]	@ (800306c <ADC_Enable+0x104>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	099b      	lsrs	r3, r3, #6
 8002fce:	4a28      	ldr	r2, [pc, #160]	@ (8003070 <ADC_Enable+0x108>)
 8002fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd4:	099b      	lsrs	r3, r3, #6
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fe2:	e002      	b.n	8002fea <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f9      	bne.n	8002fe4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ff0:	f7fe ff32 	bl	8001e58 <HAL_GetTick>
 8002ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ff6:	e028      	b.n	800304a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff f929 	bl	8002254 <LL_ADC_IsEnabled>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d104      	bne.n	8003012 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff f90d 	bl	800222c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003012:	f7fe ff21 	bl	8001e58 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d914      	bls.n	800304a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d00d      	beq.n	800304a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003032:	f043 0210 	orr.w	r2, r3, #16
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303e:	f043 0201 	orr.w	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e007      	b.n	800305a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d1cf      	bne.n	8002ff8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	8000003f 	.word	0x8000003f
 8003068:	50000300 	.word	0x50000300
 800306c:	20000000 	.word	0x20000000
 8003070:	053e2d63 	.word	0x053e2d63

08003074 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003080:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003086:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800308a:	2b00      	cmp	r3, #0
 800308c:	d14b      	bne.n	8003126 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003092:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d021      	beq.n	80030ec <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe ffd3 	bl	8002058 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d032      	beq.n	800311e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d12b      	bne.n	800311e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d11f      	bne.n	800311e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e2:	f043 0201 	orr.w	r2, r3, #1
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030ea:	e018      	b.n	800311e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d111      	bne.n	800311e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d105      	bne.n	800311e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003116:	f043 0201 	orr.w	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f7fd fcf0 	bl	8000b04 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003124:	e00e      	b.n	8003144 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312a:	f003 0310 	and.w	r3, r3, #16
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f7ff fb1e 	bl	8002774 <HAL_ADC_ErrorCallback>
}
 8003138:	e004      	b.n	8003144 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4798      	blx	r3
}
 8003144:	bf00      	nop
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003158:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f7ff fb00 	bl	8002760 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003174:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003186:	f043 0204 	orr.w	r2, r3, #4
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7ff faf0 	bl	8002774 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <LL_ADC_IsEnabled>:
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <LL_ADC_IsEnabled+0x18>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <LL_ADC_IsEnabled+0x1a>
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d101      	bne.n	80031da <LL_ADC_REG_IsConversionOngoing+0x18>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b0a1      	sub	sp, #132	@ 0x84
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003202:	2302      	movs	r3, #2
 8003204:	e08b      	b.n	800331e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800320e:	2300      	movs	r3, #0
 8003210:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003212:	2300      	movs	r3, #0
 8003214:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800321e:	d102      	bne.n	8003226 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003220:	4b41      	ldr	r3, [pc, #260]	@ (8003328 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003222:	60bb      	str	r3, [r7, #8]
 8003224:	e001      	b.n	800322a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10b      	bne.n	8003248 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003234:	f043 0220 	orr.w	r2, r3, #32
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e06a      	b.n	800331e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff ffb9 	bl	80031c2 <LL_ADC_REG_IsConversionOngoing>
 8003250:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff ffb3 	bl	80031c2 <LL_ADC_REG_IsConversionOngoing>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d14c      	bne.n	80032fc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003262:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003264:	2b00      	cmp	r3, #0
 8003266:	d149      	bne.n	80032fc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003268:	4b30      	ldr	r3, [pc, #192]	@ (800332c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800326a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d028      	beq.n	80032c6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003274:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	6859      	ldr	r1, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003286:	035b      	lsls	r3, r3, #13
 8003288:	430b      	orrs	r3, r1
 800328a:	431a      	orrs	r2, r3
 800328c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800328e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003290:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003294:	f7ff ff82 	bl	800319c <LL_ADC_IsEnabled>
 8003298:	4604      	mov	r4, r0
 800329a:	4823      	ldr	r0, [pc, #140]	@ (8003328 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800329c:	f7ff ff7e 	bl	800319c <LL_ADC_IsEnabled>
 80032a0:	4603      	mov	r3, r0
 80032a2:	4323      	orrs	r3, r4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d133      	bne.n	8003310 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80032b0:	f023 030f 	bic.w	r3, r3, #15
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	6811      	ldr	r1, [r2, #0]
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	6892      	ldr	r2, [r2, #8]
 80032bc:	430a      	orrs	r2, r1
 80032be:	431a      	orrs	r2, r3
 80032c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032c2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032c4:	e024      	b.n	8003310 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032d2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80032d6:	f7ff ff61 	bl	800319c <LL_ADC_IsEnabled>
 80032da:	4604      	mov	r4, r0
 80032dc:	4812      	ldr	r0, [pc, #72]	@ (8003328 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80032de:	f7ff ff5d 	bl	800319c <LL_ADC_IsEnabled>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4323      	orrs	r3, r4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d112      	bne.n	8003310 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80032f2:	f023 030f 	bic.w	r3, r3, #15
 80032f6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80032f8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032fa:	e009      	b.n	8003310 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003300:	f043 0220 	orr.w	r2, r3, #32
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800330e:	e000      	b.n	8003312 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003310:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800331a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800331e:	4618      	mov	r0, r3
 8003320:	3784      	adds	r7, #132	@ 0x84
 8003322:	46bd      	mov	sp, r7
 8003324:	bd90      	pop	{r4, r7, pc}
 8003326:	bf00      	nop
 8003328:	50000100 	.word	0x50000100
 800332c:	50000300 	.word	0x50000300

08003330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003340:	4b0c      	ldr	r3, [pc, #48]	@ (8003374 <__NVIC_SetPriorityGrouping+0x44>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800334c:	4013      	ands	r3, r2
 800334e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800335c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003362:	4a04      	ldr	r2, [pc, #16]	@ (8003374 <__NVIC_SetPriorityGrouping+0x44>)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	60d3      	str	r3, [r2, #12]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800337c:	4b04      	ldr	r3, [pc, #16]	@ (8003390 <__NVIC_GetPriorityGrouping+0x18>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	0a1b      	lsrs	r3, r3, #8
 8003382:	f003 0307 	and.w	r3, r3, #7
}
 8003386:	4618      	mov	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	db0b      	blt.n	80033be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	f003 021f 	and.w	r2, r3, #31
 80033ac:	4907      	ldr	r1, [pc, #28]	@ (80033cc <__NVIC_EnableIRQ+0x38>)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2001      	movs	r0, #1
 80033b6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000e100 	.word	0xe000e100

080033d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	6039      	str	r1, [r7, #0]
 80033da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	db0a      	blt.n	80033fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	490c      	ldr	r1, [pc, #48]	@ (800341c <__NVIC_SetPriority+0x4c>)
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	0112      	lsls	r2, r2, #4
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	440b      	add	r3, r1
 80033f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033f8:	e00a      	b.n	8003410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	4908      	ldr	r1, [pc, #32]	@ (8003420 <__NVIC_SetPriority+0x50>)
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	3b04      	subs	r3, #4
 8003408:	0112      	lsls	r2, r2, #4
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	440b      	add	r3, r1
 800340e:	761a      	strb	r2, [r3, #24]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000e100 	.word	0xe000e100
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003424:	b480      	push	{r7}
 8003426:	b089      	sub	sp, #36	@ 0x24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f1c3 0307 	rsb	r3, r3, #7
 800343e:	2b04      	cmp	r3, #4
 8003440:	bf28      	it	cs
 8003442:	2304      	movcs	r3, #4
 8003444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3304      	adds	r3, #4
 800344a:	2b06      	cmp	r3, #6
 800344c:	d902      	bls.n	8003454 <NVIC_EncodePriority+0x30>
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3b03      	subs	r3, #3
 8003452:	e000      	b.n	8003456 <NVIC_EncodePriority+0x32>
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003458:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43da      	mvns	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	401a      	ands	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800346c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	43d9      	mvns	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800347c:	4313      	orrs	r3, r2
         );
}
 800347e:	4618      	mov	r0, r3
 8003480:	3724      	adds	r7, #36	@ 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800349c:	d301      	bcc.n	80034a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800349e:	2301      	movs	r3, #1
 80034a0:	e00f      	b.n	80034c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034a2:	4a0a      	ldr	r2, [pc, #40]	@ (80034cc <SysTick_Config+0x40>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034aa:	210f      	movs	r1, #15
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034b0:	f7ff ff8e 	bl	80033d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b4:	4b05      	ldr	r3, [pc, #20]	@ (80034cc <SysTick_Config+0x40>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ba:	4b04      	ldr	r3, [pc, #16]	@ (80034cc <SysTick_Config+0x40>)
 80034bc:	2207      	movs	r2, #7
 80034be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	e000e010 	.word	0xe000e010

080034d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff ff29 	bl	8003330 <__NVIC_SetPriorityGrouping>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b086      	sub	sp, #24
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034f4:	f7ff ff40 	bl	8003378 <__NVIC_GetPriorityGrouping>
 80034f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	6978      	ldr	r0, [r7, #20]
 8003500:	f7ff ff90 	bl	8003424 <NVIC_EncodePriority>
 8003504:	4602      	mov	r2, r0
 8003506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff5f 	bl	80033d0 <__NVIC_SetPriority>
}
 8003512:	bf00      	nop
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	4603      	mov	r3, r0
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ff33 	bl	8003394 <__NVIC_EnableIRQ>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff ffa4 	bl	800348c <SysTick_Config>
 8003544:	4603      	mov	r3, r0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e08d      	b.n	800367e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	4b47      	ldr	r3, [pc, #284]	@ (8003688 <HAL_DMA_Init+0x138>)
 800356a:	429a      	cmp	r2, r3
 800356c:	d80f      	bhi.n	800358e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	4b45      	ldr	r3, [pc, #276]	@ (800368c <HAL_DMA_Init+0x13c>)
 8003576:	4413      	add	r3, r2
 8003578:	4a45      	ldr	r2, [pc, #276]	@ (8003690 <HAL_DMA_Init+0x140>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	009a      	lsls	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a42      	ldr	r2, [pc, #264]	@ (8003694 <HAL_DMA_Init+0x144>)
 800358a:	641a      	str	r2, [r3, #64]	@ 0x40
 800358c:	e00e      	b.n	80035ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	4b40      	ldr	r3, [pc, #256]	@ (8003698 <HAL_DMA_Init+0x148>)
 8003596:	4413      	add	r3, r2
 8003598:	4a3d      	ldr	r2, [pc, #244]	@ (8003690 <HAL_DMA_Init+0x140>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	009a      	lsls	r2, r3, #2
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a3c      	ldr	r2, [pc, #240]	@ (800369c <HAL_DMA_Init+0x14c>)
 80035aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80035c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f9b6 	bl	8003970 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800360c:	d102      	bne.n	8003614 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003628:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d010      	beq.n	8003654 <HAL_DMA_Init+0x104>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b04      	cmp	r3, #4
 8003638:	d80c      	bhi.n	8003654 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f9d6 	bl	80039ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	e008      	b.n	8003666 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40020407 	.word	0x40020407
 800368c:	bffdfff8 	.word	0xbffdfff8
 8003690:	cccccccd 	.word	0xcccccccd
 8003694:	40020000 	.word	0x40020000
 8003698:	bffdfbf8 	.word	0xbffdfbf8
 800369c:	40020400 	.word	0x40020400

080036a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_DMA_Start_IT+0x20>
 80036bc:	2302      	movs	r3, #2
 80036be:	e066      	b.n	800378e <HAL_DMA_Start_IT+0xee>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d155      	bne.n	8003780 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f8fb 	bl	80038f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 020e 	orr.w	r2, r2, #14
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	e00f      	b.n	8003738 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0204 	bic.w	r2, r2, #4
 8003726:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 020a 	orr.w	r2, r2, #10
 8003736:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003750:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003754:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003768:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800376c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e005      	b.n	800378c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003788:	2302      	movs	r3, #2
 800378a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800378c:	7dfb      	ldrb	r3, [r7, #23]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b2:	f003 031f 	and.w	r3, r3, #31
 80037b6:	2204      	movs	r2, #4
 80037b8:	409a      	lsls	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4013      	ands	r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d026      	beq.n	8003810 <HAL_DMA_IRQHandler+0x7a>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d021      	beq.n	8003810 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d107      	bne.n	80037ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0204 	bic.w	r2, r2, #4
 80037e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	f003 021f 	and.w	r2, r3, #31
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	2104      	movs	r1, #4
 80037f8:	fa01 f202 	lsl.w	r2, r1, r2
 80037fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003802:	2b00      	cmp	r3, #0
 8003804:	d071      	beq.n	80038ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800380e:	e06c      	b.n	80038ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	2202      	movs	r2, #2
 800381a:	409a      	lsls	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d02e      	beq.n	8003882 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d029      	beq.n	8003882 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10b      	bne.n	8003854 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 020a 	bic.w	r2, r2, #10
 800384a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003858:	f003 021f 	and.w	r2, r3, #31
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003860:	2102      	movs	r1, #2
 8003862:	fa01 f202 	lsl.w	r2, r1, r2
 8003866:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d038      	beq.n	80038ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003880:	e033      	b.n	80038ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003886:	f003 031f 	and.w	r3, r3, #31
 800388a:	2208      	movs	r2, #8
 800388c:	409a      	lsls	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4013      	ands	r3, r2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d02a      	beq.n	80038ec <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d025      	beq.n	80038ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 020e 	bic.w	r2, r2, #14
 80038ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b4:	f003 021f 	and.w	r2, r3, #31
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	2101      	movs	r1, #1
 80038be:	fa01 f202 	lsl.w	r2, r1, r2
 80038c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038ea:	bf00      	nop
 80038ec:	bf00      	nop
}
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800390a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003910:	2b00      	cmp	r3, #0
 8003912:	d004      	beq.n	800391e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800391c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003922:	f003 021f 	and.w	r2, r3, #31
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392a:	2101      	movs	r1, #1
 800392c:	fa01 f202 	lsl.w	r2, r1, r2
 8003930:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b10      	cmp	r3, #16
 8003940:	d108      	bne.n	8003954 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003952:	e007      	b.n	8003964 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	60da      	str	r2, [r3, #12]
}
 8003964:	bf00      	nop
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	461a      	mov	r2, r3
 800397e:	4b16      	ldr	r3, [pc, #88]	@ (80039d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003980:	429a      	cmp	r2, r3
 8003982:	d802      	bhi.n	800398a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003984:	4b15      	ldr	r3, [pc, #84]	@ (80039dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	e001      	b.n	800398e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800398a:	4b15      	ldr	r3, [pc, #84]	@ (80039e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800398c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	3b08      	subs	r3, #8
 800399a:	4a12      	ldr	r2, [pc, #72]	@ (80039e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800399c:	fba2 2303 	umull	r2, r3, r2, r3
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a8:	089b      	lsrs	r3, r3, #2
 80039aa:	009a      	lsls	r2, r3, #2
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4413      	add	r3, r2
 80039b0:	461a      	mov	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a0b      	ldr	r2, [pc, #44]	@ (80039e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80039ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2201      	movs	r2, #1
 80039c4:	409a      	lsls	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80039ca:	bf00      	nop
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40020407 	.word	0x40020407
 80039dc:	40020800 	.word	0x40020800
 80039e0:	40020820 	.word	0x40020820
 80039e4:	cccccccd 	.word	0xcccccccd
 80039e8:	40020880 	.word	0x40020880

080039ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4b0b      	ldr	r3, [pc, #44]	@ (8003a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	461a      	mov	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a08      	ldr	r2, [pc, #32]	@ (8003a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a0e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	2201      	movs	r2, #1
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003a20:	bf00      	nop
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	1000823f 	.word	0x1000823f
 8003a30:	40020940 	.word	0x40020940

08003a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a42:	e15a      	b.n	8003cfa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	2101      	movs	r1, #1
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a50:	4013      	ands	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 814c 	beq.w	8003cf4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d005      	beq.n	8003a74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d130      	bne.n	8003ad6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	2203      	movs	r2, #3
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aaa:	2201      	movs	r2, #1
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	f003 0201 	and.w	r2, r3, #1
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d017      	beq.n	8003b12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	2203      	movs	r2, #3
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d123      	bne.n	8003b66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	08da      	lsrs	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3208      	adds	r2, #8
 8003b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	220f      	movs	r2, #15
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	08da      	lsrs	r2, r3, #3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3208      	adds	r2, #8
 8003b60:	6939      	ldr	r1, [r7, #16]
 8003b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	2203      	movs	r2, #3
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43db      	mvns	r3, r3
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 0203 	and.w	r2, r3, #3
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80a6 	beq.w	8003cf4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba8:	4b5b      	ldr	r3, [pc, #364]	@ (8003d18 <HAL_GPIO_Init+0x2e4>)
 8003baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bac:	4a5a      	ldr	r2, [pc, #360]	@ (8003d18 <HAL_GPIO_Init+0x2e4>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6613      	str	r3, [r2, #96]	@ 0x60
 8003bb4:	4b58      	ldr	r3, [pc, #352]	@ (8003d18 <HAL_GPIO_Init+0x2e4>)
 8003bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bc0:	4a56      	ldr	r2, [pc, #344]	@ (8003d1c <HAL_GPIO_Init+0x2e8>)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	089b      	lsrs	r3, r3, #2
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	220f      	movs	r2, #15
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4013      	ands	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003bea:	d01f      	beq.n	8003c2c <HAL_GPIO_Init+0x1f8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a4c      	ldr	r2, [pc, #304]	@ (8003d20 <HAL_GPIO_Init+0x2ec>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d019      	beq.n	8003c28 <HAL_GPIO_Init+0x1f4>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a4b      	ldr	r2, [pc, #300]	@ (8003d24 <HAL_GPIO_Init+0x2f0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d013      	beq.n	8003c24 <HAL_GPIO_Init+0x1f0>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a4a      	ldr	r2, [pc, #296]	@ (8003d28 <HAL_GPIO_Init+0x2f4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00d      	beq.n	8003c20 <HAL_GPIO_Init+0x1ec>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a49      	ldr	r2, [pc, #292]	@ (8003d2c <HAL_GPIO_Init+0x2f8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d007      	beq.n	8003c1c <HAL_GPIO_Init+0x1e8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a48      	ldr	r2, [pc, #288]	@ (8003d30 <HAL_GPIO_Init+0x2fc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d101      	bne.n	8003c18 <HAL_GPIO_Init+0x1e4>
 8003c14:	2305      	movs	r3, #5
 8003c16:	e00a      	b.n	8003c2e <HAL_GPIO_Init+0x1fa>
 8003c18:	2306      	movs	r3, #6
 8003c1a:	e008      	b.n	8003c2e <HAL_GPIO_Init+0x1fa>
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	e006      	b.n	8003c2e <HAL_GPIO_Init+0x1fa>
 8003c20:	2303      	movs	r3, #3
 8003c22:	e004      	b.n	8003c2e <HAL_GPIO_Init+0x1fa>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e002      	b.n	8003c2e <HAL_GPIO_Init+0x1fa>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_GPIO_Init+0x1fa>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	f002 0203 	and.w	r2, r2, #3
 8003c34:	0092      	lsls	r2, r2, #2
 8003c36:	4093      	lsls	r3, r2
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c3e:	4937      	ldr	r1, [pc, #220]	@ (8003d1c <HAL_GPIO_Init+0x2e8>)
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	089b      	lsrs	r3, r3, #2
 8003c44:	3302      	adds	r3, #2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c4c:	4b39      	ldr	r3, [pc, #228]	@ (8003d34 <HAL_GPIO_Init+0x300>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c70:	4a30      	ldr	r2, [pc, #192]	@ (8003d34 <HAL_GPIO_Init+0x300>)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c76:	4b2f      	ldr	r3, [pc, #188]	@ (8003d34 <HAL_GPIO_Init+0x300>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c9a:	4a26      	ldr	r2, [pc, #152]	@ (8003d34 <HAL_GPIO_Init+0x300>)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003ca0:	4b24      	ldr	r3, [pc, #144]	@ (8003d34 <HAL_GPIO_Init+0x300>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4013      	ands	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d34 <HAL_GPIO_Init+0x300>)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003cca:	4b1a      	ldr	r3, [pc, #104]	@ (8003d34 <HAL_GPIO_Init+0x300>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cee:	4a11      	ldr	r2, [pc, #68]	@ (8003d34 <HAL_GPIO_Init+0x300>)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f47f ae9d 	bne.w	8003a44 <HAL_GPIO_Init+0x10>
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	bf00      	nop
 8003d0e:	371c      	adds	r7, #28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40010000 	.word	0x40010000
 8003d20:	48000400 	.word	0x48000400
 8003d24:	48000800 	.word	0x48000800
 8003d28:	48000c00 	.word	0x48000c00
 8003d2c:	48001000 	.word	0x48001000
 8003d30:	48001400 	.word	0x48001400
 8003d34:	40010400 	.word	0x40010400

08003d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	807b      	strh	r3, [r7, #2]
 8003d44:	4613      	mov	r3, r2
 8003d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d48:	787b      	ldrb	r3, [r7, #1]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d4e:	887a      	ldrh	r2, [r7, #2]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d54:	e002      	b.n	8003d5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d56:	887a      	ldrh	r2, [r7, #2]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	041a      	lsls	r2, r3, #16
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	43d9      	mvns	r1, r3
 8003d86:	887b      	ldrh	r3, [r7, #2]
 8003d88:	400b      	ands	r3, r1
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	619a      	str	r2, [r3, #24]
}
 8003d90:	bf00      	nop
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003da6:	4b08      	ldr	r3, [pc, #32]	@ (8003dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d006      	beq.n	8003dc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003db2:	4a05      	ldr	r2, [pc, #20]	@ (8003dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fd f940 	bl	8001040 <HAL_GPIO_EXTI_Callback>
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40010400 	.word	0x40010400

08003dcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e08d      	b.n	8003efa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fc fff6 	bl	8000de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2224      	movs	r2, #36	@ 0x24
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d107      	bne.n	8003e46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e42:	609a      	str	r2, [r3, #8]
 8003e44:	e006      	b.n	8003e54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003e52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d108      	bne.n	8003e6e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e6a:	605a      	str	r2, [r3, #4]
 8003e6c:	e007      	b.n	8003e7e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ea0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69d9      	ldr	r1, [r3, #28]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1a      	ldr	r2, [r3, #32]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d138      	bne.n	8003f8a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e032      	b.n	8003f8c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2224      	movs	r2, #36	@ 0x24
 8003f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f54:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6819      	ldr	r1, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0201 	orr.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	e000      	b.n	8003f8c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f8a:	2302      	movs	r3, #2
  }
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d139      	bne.n	8004022 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e033      	b.n	8004024 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2224      	movs	r2, #36	@ 0x24
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003fea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0201 	orr.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	e000      	b.n	8004024 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004022:	2302      	movs	r3, #2
  }
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d141      	bne.n	80040c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800403e:	4b4b      	ldr	r3, [pc, #300]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800404a:	d131      	bne.n	80040b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800404c:	4b47      	ldr	r3, [pc, #284]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004052:	4a46      	ldr	r2, [pc, #280]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004058:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800405c:	4b43      	ldr	r3, [pc, #268]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004064:	4a41      	ldr	r2, [pc, #260]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004066:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800406a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800406c:	4b40      	ldr	r3, [pc, #256]	@ (8004170 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2232      	movs	r2, #50	@ 0x32
 8004072:	fb02 f303 	mul.w	r3, r2, r3
 8004076:	4a3f      	ldr	r2, [pc, #252]	@ (8004174 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	0c9b      	lsrs	r3, r3, #18
 800407e:	3301      	adds	r3, #1
 8004080:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004082:	e002      	b.n	800408a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3b01      	subs	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800408a:	4b38      	ldr	r3, [pc, #224]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004096:	d102      	bne.n	800409e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f2      	bne.n	8004084 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800409e:	4b33      	ldr	r3, [pc, #204]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040aa:	d158      	bne.n	800415e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e057      	b.n	8004160 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040b0:	4b2e      	ldr	r3, [pc, #184]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040b6:	4a2d      	ldr	r2, [pc, #180]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80040c0:	e04d      	b.n	800415e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040c8:	d141      	bne.n	800414e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ca:	4b28      	ldr	r3, [pc, #160]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d6:	d131      	bne.n	800413c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040d8:	4b24      	ldr	r3, [pc, #144]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040de:	4a23      	ldr	r2, [pc, #140]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040e8:	4b20      	ldr	r3, [pc, #128]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040f0:	4a1e      	ldr	r2, [pc, #120]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004170 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2232      	movs	r2, #50	@ 0x32
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	4a1c      	ldr	r2, [pc, #112]	@ (8004174 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	0c9b      	lsrs	r3, r3, #18
 800410a:	3301      	adds	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800410e:	e002      	b.n	8004116 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3b01      	subs	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004116:	4b15      	ldr	r3, [pc, #84]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800411e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004122:	d102      	bne.n	800412a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f2      	bne.n	8004110 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800412a:	4b10      	ldr	r3, [pc, #64]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004136:	d112      	bne.n	800415e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e011      	b.n	8004160 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800413c:	4b0b      	ldr	r3, [pc, #44]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004142:	4a0a      	ldr	r2, [pc, #40]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004148:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800414c:	e007      	b.n	800415e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800414e:	4b07      	ldr	r3, [pc, #28]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004156:	4a05      	ldr	r2, [pc, #20]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004158:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800415c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	40007000 	.word	0x40007000
 8004170:	20000000 	.word	0x20000000
 8004174:	431bde83 	.word	0x431bde83

08004178 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800417c:	4b05      	ldr	r3, [pc, #20]	@ (8004194 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	4a04      	ldr	r2, [pc, #16]	@ (8004194 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004182:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004186:	6093      	str	r3, [r2, #8]
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40007000 	.word	0x40007000

08004198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e2fe      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d075      	beq.n	80042a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b6:	4b97      	ldr	r3, [pc, #604]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041c0:	4b94      	ldr	r3, [pc, #592]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b0c      	cmp	r3, #12
 80041ce:	d102      	bne.n	80041d6 <HAL_RCC_OscConfig+0x3e>
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d002      	beq.n	80041dc <HAL_RCC_OscConfig+0x44>
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d10b      	bne.n	80041f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041dc:	4b8d      	ldr	r3, [pc, #564]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d05b      	beq.n	80042a0 <HAL_RCC_OscConfig+0x108>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d157      	bne.n	80042a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e2d9      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041fc:	d106      	bne.n	800420c <HAL_RCC_OscConfig+0x74>
 80041fe:	4b85      	ldr	r3, [pc, #532]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a84      	ldr	r2, [pc, #528]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 8004204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e01d      	b.n	8004248 <HAL_RCC_OscConfig+0xb0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004214:	d10c      	bne.n	8004230 <HAL_RCC_OscConfig+0x98>
 8004216:	4b7f      	ldr	r3, [pc, #508]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a7e      	ldr	r2, [pc, #504]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 800421c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	4b7c      	ldr	r3, [pc, #496]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a7b      	ldr	r2, [pc, #492]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 8004228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	e00b      	b.n	8004248 <HAL_RCC_OscConfig+0xb0>
 8004230:	4b78      	ldr	r3, [pc, #480]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a77      	ldr	r2, [pc, #476]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 8004236:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	4b75      	ldr	r3, [pc, #468]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a74      	ldr	r2, [pc, #464]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 8004242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d013      	beq.n	8004278 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004250:	f7fd fe02 	bl	8001e58 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004258:	f7fd fdfe 	bl	8001e58 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b64      	cmp	r3, #100	@ 0x64
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e29e      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800426a:	4b6a      	ldr	r3, [pc, #424]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0f0      	beq.n	8004258 <HAL_RCC_OscConfig+0xc0>
 8004276:	e014      	b.n	80042a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7fd fdee 	bl	8001e58 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004280:	f7fd fdea 	bl	8001e58 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	@ 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e28a      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004292:	4b60      	ldr	r3, [pc, #384]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0xe8>
 800429e:	e000      	b.n	80042a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d075      	beq.n	800439a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ae:	4b59      	ldr	r3, [pc, #356]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
 80042b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042b8:	4b56      	ldr	r3, [pc, #344]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b0c      	cmp	r3, #12
 80042c6:	d102      	bne.n	80042ce <HAL_RCC_OscConfig+0x136>
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d002      	beq.n	80042d4 <HAL_RCC_OscConfig+0x13c>
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d11f      	bne.n	8004314 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042d4:	4b4f      	ldr	r3, [pc, #316]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_RCC_OscConfig+0x154>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e25d      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ec:	4b49      	ldr	r3, [pc, #292]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	061b      	lsls	r3, r3, #24
 80042fa:	4946      	ldr	r1, [pc, #280]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004300:	4b45      	ldr	r3, [pc, #276]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7fd fd5b 	bl	8001dc0 <HAL_InitTick>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d043      	beq.n	8004398 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e249      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d023      	beq.n	8004364 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800431c:	4b3d      	ldr	r3, [pc, #244]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a3c      	ldr	r2, [pc, #240]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 8004322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fd fd96 	bl	8001e58 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004330:	f7fd fd92 	bl	8001e58 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e232      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004342:	4b34      	ldr	r3, [pc, #208]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434e:	4b31      	ldr	r3, [pc, #196]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	061b      	lsls	r3, r3, #24
 800435c:	492d      	ldr	r1, [pc, #180]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 800435e:	4313      	orrs	r3, r2
 8004360:	604b      	str	r3, [r1, #4]
 8004362:	e01a      	b.n	800439a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004364:	4b2b      	ldr	r3, [pc, #172]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a2a      	ldr	r2, [pc, #168]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 800436a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800436e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004370:	f7fd fd72 	bl	8001e58 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004378:	f7fd fd6e 	bl	8001e58 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e20e      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800438a:	4b22      	ldr	r3, [pc, #136]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x1e0>
 8004396:	e000      	b.n	800439a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004398:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d041      	beq.n	800442a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d01c      	beq.n	80043e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ae:	4b19      	ldr	r3, [pc, #100]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 80043b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043b4:	4a17      	ldr	r2, [pc, #92]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043be:	f7fd fd4b 	bl	8001e58 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c6:	f7fd fd47 	bl	8001e58 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e1e7      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 80043da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0ef      	beq.n	80043c6 <HAL_RCC_OscConfig+0x22e>
 80043e6:	e020      	b.n	800442a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 80043ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ee:	4a09      	ldr	r2, [pc, #36]	@ (8004414 <HAL_RCC_OscConfig+0x27c>)
 80043f0:	f023 0301 	bic.w	r3, r3, #1
 80043f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f8:	f7fd fd2e 	bl	8001e58 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043fe:	e00d      	b.n	800441c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004400:	f7fd fd2a 	bl	8001e58 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d906      	bls.n	800441c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e1ca      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800441c:	4b8c      	ldr	r3, [pc, #560]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 800441e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1ea      	bne.n	8004400 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80a6 	beq.w	8004584 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004438:	2300      	movs	r3, #0
 800443a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800443c:	4b84      	ldr	r3, [pc, #528]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 800443e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_RCC_OscConfig+0x2b4>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <HAL_RCC_OscConfig+0x2b6>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00d      	beq.n	800446e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004452:	4b7f      	ldr	r3, [pc, #508]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 8004454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004456:	4a7e      	ldr	r2, [pc, #504]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 8004458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800445c:	6593      	str	r3, [r2, #88]	@ 0x58
 800445e:	4b7c      	ldr	r3, [pc, #496]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 8004460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800446a:	2301      	movs	r3, #1
 800446c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800446e:	4b79      	ldr	r3, [pc, #484]	@ (8004654 <HAL_RCC_OscConfig+0x4bc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004476:	2b00      	cmp	r3, #0
 8004478:	d118      	bne.n	80044ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800447a:	4b76      	ldr	r3, [pc, #472]	@ (8004654 <HAL_RCC_OscConfig+0x4bc>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a75      	ldr	r2, [pc, #468]	@ (8004654 <HAL_RCC_OscConfig+0x4bc>)
 8004480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004486:	f7fd fce7 	bl	8001e58 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448e:	f7fd fce3 	bl	8001e58 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e183      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a0:	4b6c      	ldr	r3, [pc, #432]	@ (8004654 <HAL_RCC_OscConfig+0x4bc>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d108      	bne.n	80044c6 <HAL_RCC_OscConfig+0x32e>
 80044b4:	4b66      	ldr	r3, [pc, #408]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ba:	4a65      	ldr	r2, [pc, #404]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044c4:	e024      	b.n	8004510 <HAL_RCC_OscConfig+0x378>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b05      	cmp	r3, #5
 80044cc:	d110      	bne.n	80044f0 <HAL_RCC_OscConfig+0x358>
 80044ce:	4b60      	ldr	r3, [pc, #384]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 80044d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d4:	4a5e      	ldr	r2, [pc, #376]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 80044d6:	f043 0304 	orr.w	r3, r3, #4
 80044da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044de:	4b5c      	ldr	r3, [pc, #368]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e4:	4a5a      	ldr	r2, [pc, #360]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044ee:	e00f      	b.n	8004510 <HAL_RCC_OscConfig+0x378>
 80044f0:	4b57      	ldr	r3, [pc, #348]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f6:	4a56      	ldr	r2, [pc, #344]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004500:	4b53      	ldr	r3, [pc, #332]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004506:	4a52      	ldr	r2, [pc, #328]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 8004508:	f023 0304 	bic.w	r3, r3, #4
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d016      	beq.n	8004546 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fd fc9e 	bl	8001e58 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800451e:	e00a      	b.n	8004536 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004520:	f7fd fc9a 	bl	8001e58 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e138      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004536:	4b46      	ldr	r3, [pc, #280]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 8004538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0ed      	beq.n	8004520 <HAL_RCC_OscConfig+0x388>
 8004544:	e015      	b.n	8004572 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004546:	f7fd fc87 	bl	8001e58 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800454c:	e00a      	b.n	8004564 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454e:	f7fd fc83 	bl	8001e58 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800455c:	4293      	cmp	r3, r2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e121      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004564:	4b3a      	ldr	r3, [pc, #232]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1ed      	bne.n	800454e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004572:	7ffb      	ldrb	r3, [r7, #31]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d105      	bne.n	8004584 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004578:	4b35      	ldr	r3, [pc, #212]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 800457a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457c:	4a34      	ldr	r2, [pc, #208]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 800457e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004582:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d03c      	beq.n	800460a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01c      	beq.n	80045d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004598:	4b2d      	ldr	r3, [pc, #180]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 800459a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800459e:	4a2c      	ldr	r2, [pc, #176]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fd fc56 	bl	8001e58 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045b0:	f7fd fc52 	bl	8001e58 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e0f2      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045c2:	4b23      	ldr	r3, [pc, #140]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 80045c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0ef      	beq.n	80045b0 <HAL_RCC_OscConfig+0x418>
 80045d0:	e01b      	b.n	800460a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045d2:	4b1f      	ldr	r3, [pc, #124]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 80045d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e2:	f7fd fc39 	bl	8001e58 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045ea:	f7fd fc35 	bl	8001e58 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0d5      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045fc:	4b14      	ldr	r3, [pc, #80]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 80045fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1ef      	bne.n	80045ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80c9 	beq.w	80047a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004614:	4b0e      	ldr	r3, [pc, #56]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 030c 	and.w	r3, r3, #12
 800461c:	2b0c      	cmp	r3, #12
 800461e:	f000 8083 	beq.w	8004728 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d15e      	bne.n	80046e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800462a:	4b09      	ldr	r3, [pc, #36]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a08      	ldr	r2, [pc, #32]	@ (8004650 <HAL_RCC_OscConfig+0x4b8>)
 8004630:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004636:	f7fd fc0f 	bl	8001e58 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800463c:	e00c      	b.n	8004658 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800463e:	f7fd fc0b 	bl	8001e58 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d905      	bls.n	8004658 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e0ab      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
 8004650:	40021000 	.word	0x40021000
 8004654:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004658:	4b55      	ldr	r3, [pc, #340]	@ (80047b0 <HAL_RCC_OscConfig+0x618>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1ec      	bne.n	800463e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004664:	4b52      	ldr	r3, [pc, #328]	@ (80047b0 <HAL_RCC_OscConfig+0x618>)
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	4b52      	ldr	r3, [pc, #328]	@ (80047b4 <HAL_RCC_OscConfig+0x61c>)
 800466a:	4013      	ands	r3, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6a11      	ldr	r1, [r2, #32]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004674:	3a01      	subs	r2, #1
 8004676:	0112      	lsls	r2, r2, #4
 8004678:	4311      	orrs	r1, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800467e:	0212      	lsls	r2, r2, #8
 8004680:	4311      	orrs	r1, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004686:	0852      	lsrs	r2, r2, #1
 8004688:	3a01      	subs	r2, #1
 800468a:	0552      	lsls	r2, r2, #21
 800468c:	4311      	orrs	r1, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004692:	0852      	lsrs	r2, r2, #1
 8004694:	3a01      	subs	r2, #1
 8004696:	0652      	lsls	r2, r2, #25
 8004698:	4311      	orrs	r1, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800469e:	06d2      	lsls	r2, r2, #27
 80046a0:	430a      	orrs	r2, r1
 80046a2:	4943      	ldr	r1, [pc, #268]	@ (80047b0 <HAL_RCC_OscConfig+0x618>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a8:	4b41      	ldr	r3, [pc, #260]	@ (80047b0 <HAL_RCC_OscConfig+0x618>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a40      	ldr	r2, [pc, #256]	@ (80047b0 <HAL_RCC_OscConfig+0x618>)
 80046ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046b4:	4b3e      	ldr	r3, [pc, #248]	@ (80047b0 <HAL_RCC_OscConfig+0x618>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4a3d      	ldr	r2, [pc, #244]	@ (80047b0 <HAL_RCC_OscConfig+0x618>)
 80046ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fd fbca 	bl	8001e58 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fd fbc6 	bl	8001e58 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e066      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046da:	4b35      	ldr	r3, [pc, #212]	@ (80047b0 <HAL_RCC_OscConfig+0x618>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0f0      	beq.n	80046c8 <HAL_RCC_OscConfig+0x530>
 80046e6:	e05e      	b.n	80047a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e8:	4b31      	ldr	r3, [pc, #196]	@ (80047b0 <HAL_RCC_OscConfig+0x618>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a30      	ldr	r2, [pc, #192]	@ (80047b0 <HAL_RCC_OscConfig+0x618>)
 80046ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f4:	f7fd fbb0 	bl	8001e58 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fc:	f7fd fbac 	bl	8001e58 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e04c      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800470e:	4b28      	ldr	r3, [pc, #160]	@ (80047b0 <HAL_RCC_OscConfig+0x618>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800471a:	4b25      	ldr	r3, [pc, #148]	@ (80047b0 <HAL_RCC_OscConfig+0x618>)
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	4924      	ldr	r1, [pc, #144]	@ (80047b0 <HAL_RCC_OscConfig+0x618>)
 8004720:	4b25      	ldr	r3, [pc, #148]	@ (80047b8 <HAL_RCC_OscConfig+0x620>)
 8004722:	4013      	ands	r3, r2
 8004724:	60cb      	str	r3, [r1, #12]
 8004726:	e03e      	b.n	80047a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e039      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004734:	4b1e      	ldr	r3, [pc, #120]	@ (80047b0 <HAL_RCC_OscConfig+0x618>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f003 0203 	and.w	r2, r3, #3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	429a      	cmp	r2, r3
 8004746:	d12c      	bne.n	80047a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004752:	3b01      	subs	r3, #1
 8004754:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d123      	bne.n	80047a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004764:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004766:	429a      	cmp	r2, r3
 8004768:	d11b      	bne.n	80047a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004774:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004776:	429a      	cmp	r2, r3
 8004778:	d113      	bne.n	80047a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	3b01      	subs	r3, #1
 8004788:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800478a:	429a      	cmp	r2, r3
 800478c:	d109      	bne.n	80047a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	3b01      	subs	r3, #1
 800479c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800479e:	429a      	cmp	r2, r3
 80047a0:	d001      	beq.n	80047a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3720      	adds	r7, #32
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40021000 	.word	0x40021000
 80047b4:	019f800c 	.word	0x019f800c
 80047b8:	feeefffc 	.word	0xfeeefffc

080047bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e11e      	b.n	8004a12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047d4:	4b91      	ldr	r3, [pc, #580]	@ (8004a1c <HAL_RCC_ClockConfig+0x260>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 030f 	and.w	r3, r3, #15
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d910      	bls.n	8004804 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e2:	4b8e      	ldr	r3, [pc, #568]	@ (8004a1c <HAL_RCC_ClockConfig+0x260>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 020f 	bic.w	r2, r3, #15
 80047ea:	498c      	ldr	r1, [pc, #560]	@ (8004a1c <HAL_RCC_ClockConfig+0x260>)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	4b8a      	ldr	r3, [pc, #552]	@ (8004a1c <HAL_RCC_ClockConfig+0x260>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e106      	b.n	8004a12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d073      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b03      	cmp	r3, #3
 8004816:	d129      	bne.n	800486c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004818:	4b81      	ldr	r3, [pc, #516]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e0f4      	b.n	8004a12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004828:	f000 f99c 	bl	8004b64 <RCC_GetSysClockFreqFromPLLSource>
 800482c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4a7c      	ldr	r2, [pc, #496]	@ (8004a24 <HAL_RCC_ClockConfig+0x268>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d93f      	bls.n	80048b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004836:	4b7a      	ldr	r3, [pc, #488]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d009      	beq.n	8004856 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800484a:	2b00      	cmp	r3, #0
 800484c:	d033      	beq.n	80048b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004852:	2b00      	cmp	r3, #0
 8004854:	d12f      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004856:	4b72      	ldr	r3, [pc, #456]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800485e:	4a70      	ldr	r2, [pc, #448]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 8004860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004864:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004866:	2380      	movs	r3, #128	@ 0x80
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e024      	b.n	80048b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d107      	bne.n	8004884 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004874:	4b6a      	ldr	r3, [pc, #424]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d109      	bne.n	8004894 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0c6      	b.n	8004a12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004884:	4b66      	ldr	r3, [pc, #408]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e0be      	b.n	8004a12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004894:	f000 f8ce 	bl	8004a34 <HAL_RCC_GetSysClockFreq>
 8004898:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4a61      	ldr	r2, [pc, #388]	@ (8004a24 <HAL_RCC_ClockConfig+0x268>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d909      	bls.n	80048b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048aa:	4a5d      	ldr	r2, [pc, #372]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 80048ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048b2:	2380      	movs	r3, #128	@ 0x80
 80048b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048b6:	4b5a      	ldr	r3, [pc, #360]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f023 0203 	bic.w	r2, r3, #3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	4957      	ldr	r1, [pc, #348]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048c8:	f7fd fac6 	bl	8001e58 <HAL_GetTick>
 80048cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ce:	e00a      	b.n	80048e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d0:	f7fd fac2 	bl	8001e58 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048de:	4293      	cmp	r3, r2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e095      	b.n	8004a12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e6:	4b4e      	ldr	r3, [pc, #312]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 020c 	and.w	r2, r3, #12
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d1eb      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d023      	beq.n	800494c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004910:	4b43      	ldr	r3, [pc, #268]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	4a42      	ldr	r2, [pc, #264]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 8004916:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800491a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004928:	4b3d      	ldr	r3, [pc, #244]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004930:	4a3b      	ldr	r2, [pc, #236]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 8004932:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004936:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004938:	4b39      	ldr	r3, [pc, #228]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4936      	ldr	r1, [pc, #216]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 8004946:	4313      	orrs	r3, r2
 8004948:	608b      	str	r3, [r1, #8]
 800494a:	e008      	b.n	800495e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2b80      	cmp	r3, #128	@ 0x80
 8004950:	d105      	bne.n	800495e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004952:	4b33      	ldr	r3, [pc, #204]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	4a32      	ldr	r2, [pc, #200]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 8004958:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800495c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800495e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a1c <HAL_RCC_ClockConfig+0x260>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d21d      	bcs.n	80049a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496c:	4b2b      	ldr	r3, [pc, #172]	@ (8004a1c <HAL_RCC_ClockConfig+0x260>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f023 020f 	bic.w	r2, r3, #15
 8004974:	4929      	ldr	r1, [pc, #164]	@ (8004a1c <HAL_RCC_ClockConfig+0x260>)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	4313      	orrs	r3, r2
 800497a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800497c:	f7fd fa6c 	bl	8001e58 <HAL_GetTick>
 8004980:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004982:	e00a      	b.n	800499a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004984:	f7fd fa68 	bl	8001e58 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e03b      	b.n	8004a12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499a:	4b20      	ldr	r3, [pc, #128]	@ (8004a1c <HAL_RCC_ClockConfig+0x260>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d1ed      	bne.n	8004984 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d008      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	4917      	ldr	r1, [pc, #92]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049d2:	4b13      	ldr	r3, [pc, #76]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	490f      	ldr	r1, [pc, #60]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049e6:	f000 f825 	bl	8004a34 <HAL_RCC_GetSysClockFreq>
 80049ea:	4602      	mov	r2, r0
 80049ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004a20 <HAL_RCC_ClockConfig+0x264>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	490c      	ldr	r1, [pc, #48]	@ (8004a28 <HAL_RCC_ClockConfig+0x26c>)
 80049f8:	5ccb      	ldrb	r3, [r1, r3]
 80049fa:	f003 031f 	and.w	r3, r3, #31
 80049fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004a02:	4a0a      	ldr	r2, [pc, #40]	@ (8004a2c <HAL_RCC_ClockConfig+0x270>)
 8004a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a06:	4b0a      	ldr	r3, [pc, #40]	@ (8004a30 <HAL_RCC_ClockConfig+0x274>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fd f9d8 	bl	8001dc0 <HAL_InitTick>
 8004a10:	4603      	mov	r3, r0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40022000 	.word	0x40022000
 8004a20:	40021000 	.word	0x40021000
 8004a24:	04c4b400 	.word	0x04c4b400
 8004a28:	080091bc 	.word	0x080091bc
 8004a2c:	20000000 	.word	0x20000000
 8004a30:	20000004 	.word	0x20000004

08004a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8004aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d102      	bne.n	8004a4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a46:	4b2a      	ldr	r3, [pc, #168]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	e047      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a4c:	4b27      	ldr	r3, [pc, #156]	@ (8004aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 030c 	and.w	r3, r3, #12
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d102      	bne.n	8004a5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a58:	4b25      	ldr	r3, [pc, #148]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a5a:	613b      	str	r3, [r7, #16]
 8004a5c:	e03e      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a5e:	4b23      	ldr	r3, [pc, #140]	@ (8004aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b0c      	cmp	r3, #12
 8004a68:	d136      	bne.n	8004ad8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a6a:	4b20      	ldr	r3, [pc, #128]	@ (8004aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a74:	4b1d      	ldr	r3, [pc, #116]	@ (8004aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	3301      	adds	r3, #1
 8004a80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d10c      	bne.n	8004aa2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a88:	4a19      	ldr	r2, [pc, #100]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a90:	4a16      	ldr	r2, [pc, #88]	@ (8004aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a92:	68d2      	ldr	r2, [r2, #12]
 8004a94:	0a12      	lsrs	r2, r2, #8
 8004a96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	617b      	str	r3, [r7, #20]
      break;
 8004aa0:	e00c      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aa2:	4a13      	ldr	r2, [pc, #76]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aaa:	4a10      	ldr	r2, [pc, #64]	@ (8004aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aac:	68d2      	ldr	r2, [r2, #12]
 8004aae:	0a12      	lsrs	r2, r2, #8
 8004ab0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ab4:	fb02 f303 	mul.w	r3, r2, r3
 8004ab8:	617b      	str	r3, [r7, #20]
      break;
 8004aba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004abc:	4b0b      	ldr	r3, [pc, #44]	@ (8004aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	0e5b      	lsrs	r3, r3, #25
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	e001      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004adc:	693b      	ldr	r3, [r7, #16]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40021000 	.word	0x40021000
 8004af0:	00f42400 	.word	0x00f42400

08004af4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004af8:	4b03      	ldr	r3, [pc, #12]	@ (8004b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004afa:	681b      	ldr	r3, [r3, #0]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20000000 	.word	0x20000000

08004b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b10:	f7ff fff0 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8004b14:	4602      	mov	r2, r0
 8004b16:	4b06      	ldr	r3, [pc, #24]	@ (8004b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	0a1b      	lsrs	r3, r3, #8
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	4904      	ldr	r1, [pc, #16]	@ (8004b34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b22:	5ccb      	ldrb	r3, [r1, r3]
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40021000 	.word	0x40021000
 8004b34:	080091cc 	.word	0x080091cc

08004b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b3c:	f7ff ffda 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8004b40:	4602      	mov	r2, r0
 8004b42:	4b06      	ldr	r3, [pc, #24]	@ (8004b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	0adb      	lsrs	r3, r3, #11
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	4904      	ldr	r1, [pc, #16]	@ (8004b60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b4e:	5ccb      	ldrb	r3, [r1, r3]
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	080091cc 	.word	0x080091cc

08004b64 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004be4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b74:	4b1b      	ldr	r3, [pc, #108]	@ (8004be4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	3301      	adds	r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d10c      	bne.n	8004ba2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b88:	4a17      	ldr	r2, [pc, #92]	@ (8004be8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b90:	4a14      	ldr	r2, [pc, #80]	@ (8004be4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b92:	68d2      	ldr	r2, [r2, #12]
 8004b94:	0a12      	lsrs	r2, r2, #8
 8004b96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b9a:	fb02 f303 	mul.w	r3, r2, r3
 8004b9e:	617b      	str	r3, [r7, #20]
    break;
 8004ba0:	e00c      	b.n	8004bbc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ba2:	4a11      	ldr	r2, [pc, #68]	@ (8004be8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	4a0e      	ldr	r2, [pc, #56]	@ (8004be4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bac:	68d2      	ldr	r2, [r2, #12]
 8004bae:	0a12      	lsrs	r2, r2, #8
 8004bb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bb4:	fb02 f303 	mul.w	r3, r2, r3
 8004bb8:	617b      	str	r3, [r7, #20]
    break;
 8004bba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bbc:	4b09      	ldr	r3, [pc, #36]	@ (8004be4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	0e5b      	lsrs	r3, r3, #25
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004bd6:	687b      	ldr	r3, [r7, #4]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	40021000 	.word	0x40021000
 8004be8:	00f42400 	.word	0x00f42400

08004bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 8098 	beq.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c0e:	4b43      	ldr	r3, [pc, #268]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10d      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c1a:	4b40      	ldr	r3, [pc, #256]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1e:	4a3f      	ldr	r2, [pc, #252]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c26:	4b3d      	ldr	r3, [pc, #244]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c2e:	60bb      	str	r3, [r7, #8]
 8004c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c32:	2301      	movs	r3, #1
 8004c34:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c36:	4b3a      	ldr	r3, [pc, #232]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a39      	ldr	r2, [pc, #228]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c42:	f7fd f909 	bl	8001e58 <HAL_GetTick>
 8004c46:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c48:	e009      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c4a:	f7fd f905 	bl	8001e58 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d902      	bls.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	74fb      	strb	r3, [r7, #19]
        break;
 8004c5c:	e005      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c5e:	4b30      	ldr	r3, [pc, #192]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0ef      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c6a:	7cfb      	ldrb	r3, [r7, #19]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d159      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c70:	4b2a      	ldr	r3, [pc, #168]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c7a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d01e      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d019      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c8c:	4b23      	ldr	r3, [pc, #140]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c98:	4b20      	ldr	r3, [pc, #128]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cae:	4a1b      	ldr	r2, [pc, #108]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cb8:	4a18      	ldr	r2, [pc, #96]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d016      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cca:	f7fd f8c5 	bl	8001e58 <HAL_GetTick>
 8004cce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd0:	e00b      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd2:	f7fd f8c1 	bl	8001e58 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d902      	bls.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	74fb      	strb	r3, [r7, #19]
            break;
 8004ce8:	e006      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cea:	4b0c      	ldr	r3, [pc, #48]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0ec      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004cf8:	7cfb      	ldrb	r3, [r7, #19]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10b      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cfe:	4b07      	ldr	r3, [pc, #28]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0c:	4903      	ldr	r1, [pc, #12]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d14:	e008      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d16:	7cfb      	ldrb	r3, [r7, #19]
 8004d18:	74bb      	strb	r3, [r7, #18]
 8004d1a:	e005      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d24:	7cfb      	ldrb	r3, [r7, #19]
 8004d26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d28:	7c7b      	ldrb	r3, [r7, #17]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d105      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d2e:	4ba6      	ldr	r3, [pc, #664]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d32:	4aa5      	ldr	r2, [pc, #660]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d46:	4ba0      	ldr	r3, [pc, #640]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4c:	f023 0203 	bic.w	r2, r3, #3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	499c      	ldr	r1, [pc, #624]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d68:	4b97      	ldr	r3, [pc, #604]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6e:	f023 020c 	bic.w	r2, r3, #12
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	4994      	ldr	r1, [pc, #592]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d8a:	4b8f      	ldr	r3, [pc, #572]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d90:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	498b      	ldr	r1, [pc, #556]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dac:	4b86      	ldr	r3, [pc, #536]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	4983      	ldr	r1, [pc, #524]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dce:	4b7e      	ldr	r3, [pc, #504]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	497a      	ldr	r1, [pc, #488]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004df0:	4b75      	ldr	r3, [pc, #468]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	4972      	ldr	r1, [pc, #456]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e12:	4b6d      	ldr	r3, [pc, #436]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e18:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	4969      	ldr	r1, [pc, #420]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e34:	4b64      	ldr	r3, [pc, #400]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	4961      	ldr	r1, [pc, #388]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e56:	4b5c      	ldr	r3, [pc, #368]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	4958      	ldr	r1, [pc, #352]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d015      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e78:	4b53      	ldr	r3, [pc, #332]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e86:	4950      	ldr	r1, [pc, #320]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e96:	d105      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e98:	4b4b      	ldr	r3, [pc, #300]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ea2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d015      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004eb0:	4b45      	ldr	r3, [pc, #276]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebe:	4942      	ldr	r1, [pc, #264]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ece:	d105      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed0:	4b3d      	ldr	r3, [pc, #244]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4a3c      	ldr	r2, [pc, #240]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eda:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d015      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ee8:	4b37      	ldr	r3, [pc, #220]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef6:	4934      	ldr	r1, [pc, #208]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f06:	d105      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f08:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4a2e      	ldr	r2, [pc, #184]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f12:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d015      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f20:	4b29      	ldr	r3, [pc, #164]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f2e:	4926      	ldr	r1, [pc, #152]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f3e:	d105      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f40:	4b21      	ldr	r3, [pc, #132]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	4a20      	ldr	r2, [pc, #128]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f4a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d015      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f58:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f66:	4918      	ldr	r1, [pc, #96]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f76:	d105      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f78:	4b13      	ldr	r3, [pc, #76]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	4a12      	ldr	r2, [pc, #72]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d015      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f90:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f96:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9e:	490a      	ldr	r1, [pc, #40]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004faa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fae:	d105      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fb0:	4b05      	ldr	r3, [pc, #20]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4a04      	ldr	r2, [pc, #16]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004fbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40021000 	.word	0x40021000

08004fcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e09d      	b.n	800511a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d108      	bne.n	8004ff8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fee:	d009      	beq.n	8005004 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	61da      	str	r2, [r3, #28]
 8004ff6:	e005      	b.n	8005004 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fc f884 	bl	800112c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800503a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005044:	d902      	bls.n	800504c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e002      	b.n	8005052 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800504c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005050:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800505a:	d007      	beq.n	800506c <HAL_SPI_Init+0xa0>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005064:	d002      	beq.n	800506c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ae:	ea42 0103 	orr.w	r1, r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	0c1b      	lsrs	r3, r3, #16
 80050c8:	f003 0204 	and.w	r2, r3, #4
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050da:	f003 0308 	and.w	r3, r3, #8
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80050e8:	ea42 0103 	orr.w	r1, r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b088      	sub	sp, #32
 8005126:	af00      	add	r7, sp, #0
 8005128:	60f8      	str	r0, [r7, #12]
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	603b      	str	r3, [r7, #0]
 800512e:	4613      	mov	r3, r2
 8005130:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005132:	f7fc fe91 	bl	8001e58 <HAL_GetTick>
 8005136:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	d001      	beq.n	800514c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005148:	2302      	movs	r3, #2
 800514a:	e15c      	b.n	8005406 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <HAL_SPI_Transmit+0x36>
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e154      	b.n	8005406 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_SPI_Transmit+0x48>
 8005166:	2302      	movs	r3, #2
 8005168:	e14d      	b.n	8005406 <HAL_SPI_Transmit+0x2e4>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2203      	movs	r2, #3
 8005176:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	88fa      	ldrh	r2, [r7, #6]
 800518a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	88fa      	ldrh	r2, [r7, #6]
 8005190:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051bc:	d10f      	bne.n	80051de <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e8:	2b40      	cmp	r3, #64	@ 0x40
 80051ea:	d007      	beq.n	80051fc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005204:	d952      	bls.n	80052ac <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <HAL_SPI_Transmit+0xf2>
 800520e:	8b7b      	ldrh	r3, [r7, #26]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d145      	bne.n	80052a0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005218:	881a      	ldrh	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005224:	1c9a      	adds	r2, r3, #2
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005238:	e032      	b.n	80052a0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b02      	cmp	r3, #2
 8005246:	d112      	bne.n	800526e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524c:	881a      	ldrh	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005258:	1c9a      	adds	r2, r3, #2
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800526c:	e018      	b.n	80052a0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800526e:	f7fc fdf3 	bl	8001e58 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d803      	bhi.n	8005286 <HAL_SPI_Transmit+0x164>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005284:	d102      	bne.n	800528c <HAL_SPI_Transmit+0x16a>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d109      	bne.n	80052a0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e0b2      	b.n	8005406 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1c7      	bne.n	800523a <HAL_SPI_Transmit+0x118>
 80052aa:	e083      	b.n	80053b4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <HAL_SPI_Transmit+0x198>
 80052b4:	8b7b      	ldrh	r3, [r7, #26]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d177      	bne.n	80053aa <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d912      	bls.n	80052ea <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c8:	881a      	ldrh	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d4:	1c9a      	adds	r2, r3, #2
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052de:	b29b      	uxth	r3, r3
 80052e0:	3b02      	subs	r3, #2
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052e8:	e05f      	b.n	80053aa <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	330c      	adds	r3, #12
 80052f4:	7812      	ldrb	r2, [r2, #0]
 80052f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005310:	e04b      	b.n	80053aa <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b02      	cmp	r3, #2
 800531e:	d12b      	bne.n	8005378 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005324:	b29b      	uxth	r3, r3
 8005326:	2b01      	cmp	r3, #1
 8005328:	d912      	bls.n	8005350 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532e:	881a      	ldrh	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533a:	1c9a      	adds	r2, r3, #2
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b02      	subs	r3, #2
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800534e:	e02c      	b.n	80053aa <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	330c      	adds	r3, #12
 800535a:	7812      	ldrb	r2, [r2, #0]
 800535c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005376:	e018      	b.n	80053aa <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005378:	f7fc fd6e 	bl	8001e58 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d803      	bhi.n	8005390 <HAL_SPI_Transmit+0x26e>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800538e:	d102      	bne.n	8005396 <HAL_SPI_Transmit+0x274>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e02d      	b.n	8005406 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1ae      	bne.n	8005312 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 fcf5 	bl	8005da8 <SPI_EndRxTxTransaction>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10a      	bne.n	80053e8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005404:	2300      	movs	r3, #0
  }
}
 8005406:	4618      	mov	r0, r3
 8005408:	3720      	adds	r7, #32
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b088      	sub	sp, #32
 8005412:	af02      	add	r7, sp, #8
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	603b      	str	r3, [r7, #0]
 800541a:	4613      	mov	r3, r2
 800541c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b01      	cmp	r3, #1
 8005428:	d001      	beq.n	800542e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800542a:	2302      	movs	r3, #2
 800542c:	e123      	b.n	8005676 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <HAL_SPI_Receive+0x2c>
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e11b      	b.n	8005676 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005446:	d112      	bne.n	800546e <HAL_SPI_Receive+0x60>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10e      	bne.n	800546e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2204      	movs	r2, #4
 8005454:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005458:	88fa      	ldrh	r2, [r7, #6]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	4613      	mov	r3, r2
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 f90a 	bl	800567e <HAL_SPI_TransmitReceive>
 800546a:	4603      	mov	r3, r0
 800546c:	e103      	b.n	8005676 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800546e:	f7fc fcf3 	bl	8001e58 <HAL_GetTick>
 8005472:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_SPI_Receive+0x74>
 800547e:	2302      	movs	r3, #2
 8005480:	e0f9      	b.n	8005676 <HAL_SPI_Receive+0x268>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2204      	movs	r2, #4
 800548e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	88fa      	ldrh	r2, [r7, #6]
 80054a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	88fa      	ldrh	r2, [r7, #6]
 80054aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054d4:	d908      	bls.n	80054e8 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80054e4:	605a      	str	r2, [r3, #4]
 80054e6:	e007      	b.n	80054f8 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80054f6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005500:	d10f      	bne.n	8005522 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005510:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005520:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552c:	2b40      	cmp	r3, #64	@ 0x40
 800552e:	d007      	beq.n	8005540 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800553e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005548:	d875      	bhi.n	8005636 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800554a:	e037      	b.n	80055bc <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b01      	cmp	r3, #1
 8005558:	d117      	bne.n	800558a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f103 020c 	add.w	r2, r3, #12
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005566:	7812      	ldrb	r2, [r2, #0]
 8005568:	b2d2      	uxtb	r2, r2
 800556a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800557c:	b29b      	uxth	r3, r3
 800557e:	3b01      	subs	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005588:	e018      	b.n	80055bc <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800558a:	f7fc fc65 	bl	8001e58 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d803      	bhi.n	80055a2 <HAL_SPI_Receive+0x194>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055a0:	d102      	bne.n	80055a8 <HAL_SPI_Receive+0x19a>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d109      	bne.n	80055bc <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e05c      	b.n	8005676 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1c1      	bne.n	800554c <HAL_SPI_Receive+0x13e>
 80055c8:	e03b      	b.n	8005642 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d115      	bne.n	8005604 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	b292      	uxth	r2, r2
 80055e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	1c9a      	adds	r2, r3, #2
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005602:	e018      	b.n	8005636 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005604:	f7fc fc28 	bl	8001e58 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d803      	bhi.n	800561c <HAL_SPI_Receive+0x20e>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800561a:	d102      	bne.n	8005622 <HAL_SPI_Receive+0x214>
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e01f      	b.n	8005676 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1c3      	bne.n	80055ca <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	6839      	ldr	r1, [r7, #0]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 fb56 	bl	8005cf8 <SPI_EndRxTransaction>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8005674:	2300      	movs	r3, #0
  }
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b08a      	sub	sp, #40	@ 0x28
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	607a      	str	r2, [r7, #4]
 800568a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800568c:	2301      	movs	r3, #1
 800568e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005690:	f7fc fbe2 	bl	8001e58 <HAL_GetTick>
 8005694:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800569c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80056a4:	887b      	ldrh	r3, [r7, #2]
 80056a6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80056a8:	887b      	ldrh	r3, [r7, #2]
 80056aa:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056ac:	7ffb      	ldrb	r3, [r7, #31]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d00c      	beq.n	80056cc <HAL_SPI_TransmitReceive+0x4e>
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056b8:	d106      	bne.n	80056c8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d102      	bne.n	80056c8 <HAL_SPI_TransmitReceive+0x4a>
 80056c2:	7ffb      	ldrb	r3, [r7, #31]
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d001      	beq.n	80056cc <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80056c8:	2302      	movs	r3, #2
 80056ca:	e1f3      	b.n	8005ab4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <HAL_SPI_TransmitReceive+0x60>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <HAL_SPI_TransmitReceive+0x60>
 80056d8:	887b      	ldrh	r3, [r7, #2]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e1e8      	b.n	8005ab4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_SPI_TransmitReceive+0x72>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e1e1      	b.n	8005ab4 <HAL_SPI_TransmitReceive+0x436>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b04      	cmp	r3, #4
 8005702:	d003      	beq.n	800570c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2205      	movs	r2, #5
 8005708:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	887a      	ldrh	r2, [r7, #2]
 800571c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	887a      	ldrh	r2, [r7, #2]
 8005724:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	887a      	ldrh	r2, [r7, #2]
 8005732:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	887a      	ldrh	r2, [r7, #2]
 8005738:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800574e:	d802      	bhi.n	8005756 <HAL_SPI_TransmitReceive+0xd8>
 8005750:	8abb      	ldrh	r3, [r7, #20]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d908      	bls.n	8005768 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005764:	605a      	str	r2, [r3, #4]
 8005766:	e007      	b.n	8005778 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005776:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005782:	2b40      	cmp	r3, #64	@ 0x40
 8005784:	d007      	beq.n	8005796 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005794:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800579e:	f240 8083 	bls.w	80058a8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_SPI_TransmitReceive+0x132>
 80057aa:	8afb      	ldrh	r3, [r7, #22]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d16f      	bne.n	8005890 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b4:	881a      	ldrh	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c0:	1c9a      	adds	r2, r3, #2
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057d4:	e05c      	b.n	8005890 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d11b      	bne.n	800581c <HAL_SPI_TransmitReceive+0x19e>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d016      	beq.n	800581c <HAL_SPI_TransmitReceive+0x19e>
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d113      	bne.n	800581c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f8:	881a      	ldrh	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005804:	1c9a      	adds	r2, r3, #2
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800580e:	b29b      	uxth	r3, r3
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b01      	cmp	r3, #1
 8005828:	d11c      	bne.n	8005864 <HAL_SPI_TransmitReceive+0x1e6>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d016      	beq.n	8005864 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005840:	b292      	uxth	r2, r2
 8005842:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005848:	1c9a      	adds	r2, r3, #2
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005860:	2301      	movs	r3, #1
 8005862:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005864:	f7fc faf8 	bl	8001e58 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005870:	429a      	cmp	r2, r3
 8005872:	d80d      	bhi.n	8005890 <HAL_SPI_TransmitReceive+0x212>
 8005874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005876:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800587a:	d009      	beq.n	8005890 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e111      	b.n	8005ab4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d19d      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x158>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d197      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x158>
 80058a6:	e0e5      	b.n	8005a74 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_SPI_TransmitReceive+0x23a>
 80058b0:	8afb      	ldrh	r3, [r7, #22]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	f040 80d1 	bne.w	8005a5a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d912      	bls.n	80058e8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c6:	881a      	ldrh	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d2:	1c9a      	adds	r2, r3, #2
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058dc:	b29b      	uxth	r3, r3
 80058de:	3b02      	subs	r3, #2
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058e6:	e0b8      	b.n	8005a5a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	330c      	adds	r3, #12
 80058f2:	7812      	ldrb	r2, [r2, #0]
 80058f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800590e:	e0a4      	b.n	8005a5a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b02      	cmp	r3, #2
 800591c:	d134      	bne.n	8005988 <HAL_SPI_TransmitReceive+0x30a>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d02f      	beq.n	8005988 <HAL_SPI_TransmitReceive+0x30a>
 8005928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592a:	2b01      	cmp	r3, #1
 800592c:	d12c      	bne.n	8005988 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005932:	b29b      	uxth	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	d912      	bls.n	800595e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593c:	881a      	ldrh	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005948:	1c9a      	adds	r2, r3, #2
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b02      	subs	r3, #2
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800595c:	e012      	b.n	8005984 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	330c      	adds	r3, #12
 8005968:	7812      	ldrb	r2, [r2, #0]
 800596a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b01      	cmp	r3, #1
 8005994:	d148      	bne.n	8005a28 <HAL_SPI_TransmitReceive+0x3aa>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800599c:	b29b      	uxth	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d042      	beq.n	8005a28 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d923      	bls.n	80059f6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b8:	b292      	uxth	r2, r2
 80059ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c0:	1c9a      	adds	r2, r3, #2
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b02      	subs	r3, #2
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d81f      	bhi.n	8005a24 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80059f2:	605a      	str	r2, [r3, #4]
 80059f4:	e016      	b.n	8005a24 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f103 020c 	add.w	r2, r3, #12
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a02:	7812      	ldrb	r2, [r2, #0]
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a24:	2301      	movs	r3, #1
 8005a26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a28:	f7fc fa16 	bl	8001e58 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d803      	bhi.n	8005a40 <HAL_SPI_TransmitReceive+0x3c2>
 8005a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a3e:	d102      	bne.n	8005a46 <HAL_SPI_TransmitReceive+0x3c8>
 8005a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d109      	bne.n	8005a5a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e02c      	b.n	8005ab4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f47f af55 	bne.w	8005910 <HAL_SPI_TransmitReceive+0x292>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f47f af4e 	bne.w	8005910 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a74:	6a3a      	ldr	r2, [r7, #32]
 8005a76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f995 	bl	8005da8 <SPI_EndRxTxTransaction>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d008      	beq.n	8005a96 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2220      	movs	r2, #32
 8005a88:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e00e      	b.n	8005ab4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
  }
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3728      	adds	r7, #40	@ 0x28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b088      	sub	sp, #32
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	603b      	str	r3, [r7, #0]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005acc:	f7fc f9c4 	bl	8001e58 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad4:	1a9b      	subs	r3, r3, r2
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	4413      	add	r3, r2
 8005ada:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005adc:	f7fc f9bc 	bl	8001e58 <HAL_GetTick>
 8005ae0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ae2:	4b39      	ldr	r3, [pc, #228]	@ (8005bc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	015b      	lsls	r3, r3, #5
 8005ae8:	0d1b      	lsrs	r3, r3, #20
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	fb02 f303 	mul.w	r3, r2, r3
 8005af0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005af2:	e054      	b.n	8005b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005afa:	d050      	beq.n	8005b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005afc:	f7fc f9ac 	bl	8001e58 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d902      	bls.n	8005b12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d13d      	bne.n	8005b8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b2a:	d111      	bne.n	8005b50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b34:	d004      	beq.n	8005b40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b3e:	d107      	bne.n	8005b50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b58:	d10f      	bne.n	8005b7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e017      	b.n	8005bbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	bf0c      	ite	eq
 8005bae:	2301      	moveq	r3, #1
 8005bb0:	2300      	movne	r3, #0
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	79fb      	ldrb	r3, [r7, #7]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d19b      	bne.n	8005af4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000000 	.word	0x20000000

08005bcc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08a      	sub	sp, #40	@ 0x28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005bde:	f7fc f93b 	bl	8001e58 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be6:	1a9b      	subs	r3, r3, r2
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	4413      	add	r3, r2
 8005bec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005bee:	f7fc f933 	bl	8001e58 <HAL_GetTick>
 8005bf2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005bfc:	4b3d      	ldr	r3, [pc, #244]	@ (8005cf4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	00da      	lsls	r2, r3, #3
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	0d1b      	lsrs	r3, r3, #20
 8005c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c0e:	fb02 f303 	mul.w	r3, r2, r3
 8005c12:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c14:	e060      	b.n	8005cd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005c1c:	d107      	bne.n	8005c2e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d104      	bne.n	8005c2e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c34:	d050      	beq.n	8005cd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c36:	f7fc f90f 	bl	8001e58 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d902      	bls.n	8005c4c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d13d      	bne.n	8005cc8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c64:	d111      	bne.n	8005c8a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c6e:	d004      	beq.n	8005c7a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c78:	d107      	bne.n	8005c8a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c92:	d10f      	bne.n	8005cb4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e010      	b.n	8005cea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d196      	bne.n	8005c16 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3728      	adds	r7, #40	@ 0x28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000000 	.word	0x20000000

08005cf8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d0c:	d111      	bne.n	8005d32 <SPI_EndRxTransaction+0x3a>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d16:	d004      	beq.n	8005d22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d20:	d107      	bne.n	8005d32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d30:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2180      	movs	r1, #128	@ 0x80
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f7ff febd 	bl	8005abc <SPI_WaitFlagStateUntilTimeout>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d007      	beq.n	8005d58 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d4c:	f043 0220 	orr.w	r2, r3, #32
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e023      	b.n	8005da0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d60:	d11d      	bne.n	8005d9e <SPI_EndRxTransaction+0xa6>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d6a:	d004      	beq.n	8005d76 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d74:	d113      	bne.n	8005d9e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f7ff ff22 	bl	8005bcc <SPI_WaitFifoStateUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d007      	beq.n	8005d9e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d92:	f043 0220 	orr.w	r2, r3, #32
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e000      	b.n	8005da0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f7ff ff03 	bl	8005bcc <SPI_WaitFifoStateUntilTimeout>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d007      	beq.n	8005ddc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dd0:	f043 0220 	orr.w	r2, r3, #32
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e027      	b.n	8005e2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2200      	movs	r2, #0
 8005de4:	2180      	movs	r1, #128	@ 0x80
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f7ff fe68 	bl	8005abc <SPI_WaitFlagStateUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d007      	beq.n	8005e02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005df6:	f043 0220 	orr.w	r2, r3, #32
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e014      	b.n	8005e2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f7ff fedc 	bl	8005bcc <SPI_WaitFifoStateUntilTimeout>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d007      	beq.n	8005e2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e1e:	f043 0220 	orr.w	r2, r3, #32
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e000      	b.n	8005e2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e049      	b.n	8005eda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d106      	bne.n	8005e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fb fd18 	bl	8001890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4619      	mov	r1, r3
 8005e72:	4610      	mov	r0, r2
 8005e74:	f000 fd2e 	bl	80068d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
	...

08005ee4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d001      	beq.n	8005efc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e042      	b.n	8005f82 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a21      	ldr	r2, [pc, #132]	@ (8005f90 <HAL_TIM_Base_Start+0xac>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d018      	beq.n	8005f40 <HAL_TIM_Base_Start+0x5c>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f16:	d013      	beq.n	8005f40 <HAL_TIM_Base_Start+0x5c>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005f94 <HAL_TIM_Base_Start+0xb0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00e      	beq.n	8005f40 <HAL_TIM_Base_Start+0x5c>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a1c      	ldr	r2, [pc, #112]	@ (8005f98 <HAL_TIM_Base_Start+0xb4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d009      	beq.n	8005f40 <HAL_TIM_Base_Start+0x5c>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a1a      	ldr	r2, [pc, #104]	@ (8005f9c <HAL_TIM_Base_Start+0xb8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d004      	beq.n	8005f40 <HAL_TIM_Base_Start+0x5c>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a19      	ldr	r2, [pc, #100]	@ (8005fa0 <HAL_TIM_Base_Start+0xbc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d115      	bne.n	8005f6c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	4b17      	ldr	r3, [pc, #92]	@ (8005fa4 <HAL_TIM_Base_Start+0xc0>)
 8005f48:	4013      	ands	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b06      	cmp	r3, #6
 8005f50:	d015      	beq.n	8005f7e <HAL_TIM_Base_Start+0x9a>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f58:	d011      	beq.n	8005f7e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0201 	orr.w	r2, r2, #1
 8005f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6a:	e008      	b.n	8005f7e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0201 	orr.w	r2, r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	e000      	b.n	8005f80 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40012c00 	.word	0x40012c00
 8005f94:	40000400 	.word	0x40000400
 8005f98:	40000800 	.word	0x40000800
 8005f9c:	40013400 	.word	0x40013400
 8005fa0:	40014000 	.word	0x40014000
 8005fa4:	00010007 	.word	0x00010007

08005fa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e049      	b.n	800604e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f841 	bl	8006056 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	f000 fc74 	bl	80068d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b086      	sub	sp, #24
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e097      	b.n	80061ae <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fb fc5e 	bl	8001954 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6812      	ldr	r2, [r2, #0]
 80060aa:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80060ae:	f023 0307 	bic.w	r3, r3, #7
 80060b2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	3304      	adds	r3, #4
 80060bc:	4619      	mov	r1, r3
 80060be:	4610      	mov	r0, r2
 80060c0:	f000 fc08 	bl	80068d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ec:	f023 0303 	bic.w	r3, r3, #3
 80060f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	021b      	lsls	r3, r3, #8
 80060fc:	4313      	orrs	r3, r2
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800610a:	f023 030c 	bic.w	r3, r3, #12
 800610e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006116:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800611a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	021b      	lsls	r3, r3, #8
 8006126:	4313      	orrs	r3, r2
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	011a      	lsls	r2, r3, #4
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	031b      	lsls	r3, r3, #12
 800613a:	4313      	orrs	r3, r2
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006148:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006150:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	4313      	orrs	r3, r2
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d020      	beq.n	800621a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d01b      	beq.n	800621a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f06f 0202 	mvn.w	r2, #2
 80061ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	f003 0303 	and.w	r3, r3, #3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fb49 	bl	8006898 <HAL_TIM_IC_CaptureCallback>
 8006206:	e005      	b.n	8006214 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fb3b 	bl	8006884 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fb4c 	bl	80068ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d020      	beq.n	8006266 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f003 0304 	and.w	r3, r3, #4
 800622a:	2b00      	cmp	r3, #0
 800622c:	d01b      	beq.n	8006266 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f06f 0204 	mvn.w	r2, #4
 8006236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fb23 	bl	8006898 <HAL_TIM_IC_CaptureCallback>
 8006252:	e005      	b.n	8006260 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fb15 	bl	8006884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fb26 	bl	80068ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f003 0308 	and.w	r3, r3, #8
 800626c:	2b00      	cmp	r3, #0
 800626e:	d020      	beq.n	80062b2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d01b      	beq.n	80062b2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f06f 0208 	mvn.w	r2, #8
 8006282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2204      	movs	r2, #4
 8006288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	f003 0303 	and.w	r3, r3, #3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fafd 	bl	8006898 <HAL_TIM_IC_CaptureCallback>
 800629e:	e005      	b.n	80062ac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 faef 	bl	8006884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fb00 	bl	80068ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d020      	beq.n	80062fe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f003 0310 	and.w	r3, r3, #16
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d01b      	beq.n	80062fe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f06f 0210 	mvn.w	r2, #16
 80062ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2208      	movs	r2, #8
 80062d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fad7 	bl	8006898 <HAL_TIM_IC_CaptureCallback>
 80062ea:	e005      	b.n	80062f8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fac9 	bl	8006884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fada 	bl	80068ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00c      	beq.n	8006322 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d007      	beq.n	8006322 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f06f 0201 	mvn.w	r2, #1
 800631a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 faa7 	bl	8006870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00c      	beq.n	8006350 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f001 f808 	bl	8007360 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00c      	beq.n	8006374 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006360:	2b00      	cmp	r3, #0
 8006362:	d007      	beq.n	8006374 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800636c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 f800 	bl	8007374 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00c      	beq.n	8006398 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006384:	2b00      	cmp	r3, #0
 8006386:	d007      	beq.n	8006398 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fa94 	bl	80068c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f003 0320 	and.w	r3, r3, #32
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00c      	beq.n	80063bc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f003 0320 	and.w	r3, r3, #32
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d007      	beq.n	80063bc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f06f 0220 	mvn.w	r2, #32
 80063b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 ffc8 	bl	800734c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00c      	beq.n	80063e0 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d007      	beq.n	80063e0 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80063d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 ffd4 	bl	8007388 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00c      	beq.n	8006404 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d007      	beq.n	8006404 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80063fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 ffcc 	bl	800739c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00c      	beq.n	8006428 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 ffc4 	bl	80073b0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00c      	beq.n	800644c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d007      	beq.n	800644c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 ffbc 	bl	80073c4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800644c:	bf00      	nop
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800646a:	2b01      	cmp	r3, #1
 800646c:	d101      	bne.n	8006472 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800646e:	2302      	movs	r3, #2
 8006470:	e0ff      	b.n	8006672 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b14      	cmp	r3, #20
 800647e:	f200 80f0 	bhi.w	8006662 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006482:	a201      	add	r2, pc, #4	@ (adr r2, 8006488 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006488:	080064dd 	.word	0x080064dd
 800648c:	08006663 	.word	0x08006663
 8006490:	08006663 	.word	0x08006663
 8006494:	08006663 	.word	0x08006663
 8006498:	0800651d 	.word	0x0800651d
 800649c:	08006663 	.word	0x08006663
 80064a0:	08006663 	.word	0x08006663
 80064a4:	08006663 	.word	0x08006663
 80064a8:	0800655f 	.word	0x0800655f
 80064ac:	08006663 	.word	0x08006663
 80064b0:	08006663 	.word	0x08006663
 80064b4:	08006663 	.word	0x08006663
 80064b8:	0800659f 	.word	0x0800659f
 80064bc:	08006663 	.word	0x08006663
 80064c0:	08006663 	.word	0x08006663
 80064c4:	08006663 	.word	0x08006663
 80064c8:	080065e1 	.word	0x080065e1
 80064cc:	08006663 	.word	0x08006663
 80064d0:	08006663 	.word	0x08006663
 80064d4:	08006663 	.word	0x08006663
 80064d8:	08006621 	.word	0x08006621
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fa92 	bl	8006a0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0208 	orr.w	r2, r2, #8
 80064f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699a      	ldr	r2, [r3, #24]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0204 	bic.w	r2, r2, #4
 8006506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6999      	ldr	r1, [r3, #24]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	691a      	ldr	r2, [r3, #16]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	619a      	str	r2, [r3, #24]
      break;
 800651a:	e0a5      	b.n	8006668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68b9      	ldr	r1, [r7, #8]
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fb02 	bl	8006b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699a      	ldr	r2, [r3, #24]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6999      	ldr	r1, [r3, #24]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	021a      	lsls	r2, r3, #8
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	619a      	str	r2, [r3, #24]
      break;
 800655c:	e084      	b.n	8006668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fb6b 	bl	8006c40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69da      	ldr	r2, [r3, #28]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f042 0208 	orr.w	r2, r2, #8
 8006578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69da      	ldr	r2, [r3, #28]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0204 	bic.w	r2, r2, #4
 8006588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69d9      	ldr	r1, [r3, #28]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	61da      	str	r2, [r3, #28]
      break;
 800659c:	e064      	b.n	8006668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 fbd3 	bl	8006d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69da      	ldr	r2, [r3, #28]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69d9      	ldr	r1, [r3, #28]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	021a      	lsls	r2, r3, #8
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	61da      	str	r2, [r3, #28]
      break;
 80065de:	e043      	b.n	8006668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fc3c 	bl	8006e64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0208 	orr.w	r2, r2, #8
 80065fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0204 	bic.w	r2, r2, #4
 800660a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	691a      	ldr	r2, [r3, #16]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800661e:	e023      	b.n	8006668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68b9      	ldr	r1, [r7, #8]
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fc80 	bl	8006f2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800663a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800664a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	021a      	lsls	r2, r3, #8
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006660:	e002      	b.n	8006668 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	75fb      	strb	r3, [r7, #23]
      break;
 8006666:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006670:	7dfb      	ldrb	r3, [r7, #23]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop

0800667c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_TIM_ConfigClockSource+0x1c>
 8006694:	2302      	movs	r3, #2
 8006696:	e0de      	b.n	8006856 <HAL_TIM_ConfigClockSource+0x1da>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80066b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a63      	ldr	r2, [pc, #396]	@ (8006860 <HAL_TIM_ConfigClockSource+0x1e4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	f000 80a9 	beq.w	800682a <HAL_TIM_ConfigClockSource+0x1ae>
 80066d8:	4a61      	ldr	r2, [pc, #388]	@ (8006860 <HAL_TIM_ConfigClockSource+0x1e4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	f200 80ae 	bhi.w	800683c <HAL_TIM_ConfigClockSource+0x1c0>
 80066e0:	4a60      	ldr	r2, [pc, #384]	@ (8006864 <HAL_TIM_ConfigClockSource+0x1e8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	f000 80a1 	beq.w	800682a <HAL_TIM_ConfigClockSource+0x1ae>
 80066e8:	4a5e      	ldr	r2, [pc, #376]	@ (8006864 <HAL_TIM_ConfigClockSource+0x1e8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	f200 80a6 	bhi.w	800683c <HAL_TIM_ConfigClockSource+0x1c0>
 80066f0:	4a5d      	ldr	r2, [pc, #372]	@ (8006868 <HAL_TIM_ConfigClockSource+0x1ec>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	f000 8099 	beq.w	800682a <HAL_TIM_ConfigClockSource+0x1ae>
 80066f8:	4a5b      	ldr	r2, [pc, #364]	@ (8006868 <HAL_TIM_ConfigClockSource+0x1ec>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	f200 809e 	bhi.w	800683c <HAL_TIM_ConfigClockSource+0x1c0>
 8006700:	4a5a      	ldr	r2, [pc, #360]	@ (800686c <HAL_TIM_ConfigClockSource+0x1f0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	f000 8091 	beq.w	800682a <HAL_TIM_ConfigClockSource+0x1ae>
 8006708:	4a58      	ldr	r2, [pc, #352]	@ (800686c <HAL_TIM_ConfigClockSource+0x1f0>)
 800670a:	4293      	cmp	r3, r2
 800670c:	f200 8096 	bhi.w	800683c <HAL_TIM_ConfigClockSource+0x1c0>
 8006710:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006714:	f000 8089 	beq.w	800682a <HAL_TIM_ConfigClockSource+0x1ae>
 8006718:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800671c:	f200 808e 	bhi.w	800683c <HAL_TIM_ConfigClockSource+0x1c0>
 8006720:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006724:	d03e      	beq.n	80067a4 <HAL_TIM_ConfigClockSource+0x128>
 8006726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800672a:	f200 8087 	bhi.w	800683c <HAL_TIM_ConfigClockSource+0x1c0>
 800672e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006732:	f000 8086 	beq.w	8006842 <HAL_TIM_ConfigClockSource+0x1c6>
 8006736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800673a:	d87f      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x1c0>
 800673c:	2b70      	cmp	r3, #112	@ 0x70
 800673e:	d01a      	beq.n	8006776 <HAL_TIM_ConfigClockSource+0xfa>
 8006740:	2b70      	cmp	r3, #112	@ 0x70
 8006742:	d87b      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x1c0>
 8006744:	2b60      	cmp	r3, #96	@ 0x60
 8006746:	d050      	beq.n	80067ea <HAL_TIM_ConfigClockSource+0x16e>
 8006748:	2b60      	cmp	r3, #96	@ 0x60
 800674a:	d877      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x1c0>
 800674c:	2b50      	cmp	r3, #80	@ 0x50
 800674e:	d03c      	beq.n	80067ca <HAL_TIM_ConfigClockSource+0x14e>
 8006750:	2b50      	cmp	r3, #80	@ 0x50
 8006752:	d873      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x1c0>
 8006754:	2b40      	cmp	r3, #64	@ 0x40
 8006756:	d058      	beq.n	800680a <HAL_TIM_ConfigClockSource+0x18e>
 8006758:	2b40      	cmp	r3, #64	@ 0x40
 800675a:	d86f      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x1c0>
 800675c:	2b30      	cmp	r3, #48	@ 0x30
 800675e:	d064      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x1ae>
 8006760:	2b30      	cmp	r3, #48	@ 0x30
 8006762:	d86b      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x1c0>
 8006764:	2b20      	cmp	r3, #32
 8006766:	d060      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x1ae>
 8006768:	2b20      	cmp	r3, #32
 800676a:	d867      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x1c0>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d05c      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x1ae>
 8006770:	2b10      	cmp	r3, #16
 8006772:	d05a      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x1ae>
 8006774:	e062      	b.n	800683c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006786:	f000 fcb3 	bl	80070f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	609a      	str	r2, [r3, #8]
      break;
 80067a2:	e04f      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067b4:	f000 fc9c 	bl	80070f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067c6:	609a      	str	r2, [r3, #8]
      break;
 80067c8:	e03c      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067d6:	461a      	mov	r2, r3
 80067d8:	f000 fc0e 	bl	8006ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2150      	movs	r1, #80	@ 0x50
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fc67 	bl	80070b6 <TIM_ITRx_SetConfig>
      break;
 80067e8:	e02c      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067f6:	461a      	mov	r2, r3
 80067f8:	f000 fc2d 	bl	8007056 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2160      	movs	r1, #96	@ 0x60
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fc57 	bl	80070b6 <TIM_ITRx_SetConfig>
      break;
 8006808:	e01c      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006816:	461a      	mov	r2, r3
 8006818:	f000 fbee 	bl	8006ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2140      	movs	r1, #64	@ 0x40
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fc47 	bl	80070b6 <TIM_ITRx_SetConfig>
      break;
 8006828:	e00c      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4619      	mov	r1, r3
 8006834:	4610      	mov	r0, r2
 8006836:	f000 fc3e 	bl	80070b6 <TIM_ITRx_SetConfig>
      break;
 800683a:	e003      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	73fb      	strb	r3, [r7, #15]
      break;
 8006840:	e000      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006854:	7bfb      	ldrb	r3, [r7, #15]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	00100070 	.word	0x00100070
 8006864:	00100040 	.word	0x00100040
 8006868:	00100030 	.word	0x00100030
 800686c:	00100020 	.word	0x00100020

08006870 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a42      	ldr	r2, [pc, #264]	@ (80069f0 <TIM_Base_SetConfig+0x11c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00f      	beq.n	800690c <TIM_Base_SetConfig+0x38>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068f2:	d00b      	beq.n	800690c <TIM_Base_SetConfig+0x38>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a3f      	ldr	r2, [pc, #252]	@ (80069f4 <TIM_Base_SetConfig+0x120>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d007      	beq.n	800690c <TIM_Base_SetConfig+0x38>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a3e      	ldr	r2, [pc, #248]	@ (80069f8 <TIM_Base_SetConfig+0x124>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d003      	beq.n	800690c <TIM_Base_SetConfig+0x38>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a3d      	ldr	r2, [pc, #244]	@ (80069fc <TIM_Base_SetConfig+0x128>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d108      	bne.n	800691e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a33      	ldr	r2, [pc, #204]	@ (80069f0 <TIM_Base_SetConfig+0x11c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d01b      	beq.n	800695e <TIM_Base_SetConfig+0x8a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800692c:	d017      	beq.n	800695e <TIM_Base_SetConfig+0x8a>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a30      	ldr	r2, [pc, #192]	@ (80069f4 <TIM_Base_SetConfig+0x120>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d013      	beq.n	800695e <TIM_Base_SetConfig+0x8a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a2f      	ldr	r2, [pc, #188]	@ (80069f8 <TIM_Base_SetConfig+0x124>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d00f      	beq.n	800695e <TIM_Base_SetConfig+0x8a>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a2e      	ldr	r2, [pc, #184]	@ (80069fc <TIM_Base_SetConfig+0x128>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d00b      	beq.n	800695e <TIM_Base_SetConfig+0x8a>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a2d      	ldr	r2, [pc, #180]	@ (8006a00 <TIM_Base_SetConfig+0x12c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d007      	beq.n	800695e <TIM_Base_SetConfig+0x8a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a2c      	ldr	r2, [pc, #176]	@ (8006a04 <TIM_Base_SetConfig+0x130>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d003      	beq.n	800695e <TIM_Base_SetConfig+0x8a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a2b      	ldr	r2, [pc, #172]	@ (8006a08 <TIM_Base_SetConfig+0x134>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d108      	bne.n	8006970 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a16      	ldr	r2, [pc, #88]	@ (80069f0 <TIM_Base_SetConfig+0x11c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d00f      	beq.n	80069bc <TIM_Base_SetConfig+0xe8>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a17      	ldr	r2, [pc, #92]	@ (80069fc <TIM_Base_SetConfig+0x128>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00b      	beq.n	80069bc <TIM_Base_SetConfig+0xe8>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a16      	ldr	r2, [pc, #88]	@ (8006a00 <TIM_Base_SetConfig+0x12c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d007      	beq.n	80069bc <TIM_Base_SetConfig+0xe8>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a15      	ldr	r2, [pc, #84]	@ (8006a04 <TIM_Base_SetConfig+0x130>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d003      	beq.n	80069bc <TIM_Base_SetConfig+0xe8>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a14      	ldr	r2, [pc, #80]	@ (8006a08 <TIM_Base_SetConfig+0x134>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d103      	bne.n	80069c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	691a      	ldr	r2, [r3, #16]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d105      	bne.n	80069e2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f023 0201 	bic.w	r2, r3, #1
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	611a      	str	r2, [r3, #16]
  }
}
 80069e2:	bf00      	nop
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	40012c00 	.word	0x40012c00
 80069f4:	40000400 	.word	0x40000400
 80069f8:	40000800 	.word	0x40000800
 80069fc:	40013400 	.word	0x40013400
 8006a00:	40014000 	.word	0x40014000
 8006a04:	40014400 	.word	0x40014400
 8006a08:	40014800 	.word	0x40014800

08006a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	f023 0201 	bic.w	r2, r3, #1
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0303 	bic.w	r3, r3, #3
 8006a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f023 0302 	bic.w	r3, r3, #2
 8006a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a2c      	ldr	r2, [pc, #176]	@ (8006b18 <TIM_OC1_SetConfig+0x10c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00f      	beq.n	8006a8c <TIM_OC1_SetConfig+0x80>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8006b1c <TIM_OC1_SetConfig+0x110>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00b      	beq.n	8006a8c <TIM_OC1_SetConfig+0x80>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a2a      	ldr	r2, [pc, #168]	@ (8006b20 <TIM_OC1_SetConfig+0x114>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d007      	beq.n	8006a8c <TIM_OC1_SetConfig+0x80>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a29      	ldr	r2, [pc, #164]	@ (8006b24 <TIM_OC1_SetConfig+0x118>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d003      	beq.n	8006a8c <TIM_OC1_SetConfig+0x80>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a28      	ldr	r2, [pc, #160]	@ (8006b28 <TIM_OC1_SetConfig+0x11c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d10c      	bne.n	8006aa6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f023 0308 	bic.w	r3, r3, #8
 8006a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f023 0304 	bic.w	r3, r3, #4
 8006aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8006b18 <TIM_OC1_SetConfig+0x10c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00f      	beq.n	8006ace <TIM_OC1_SetConfig+0xc2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8006b1c <TIM_OC1_SetConfig+0x110>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00b      	beq.n	8006ace <TIM_OC1_SetConfig+0xc2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a19      	ldr	r2, [pc, #100]	@ (8006b20 <TIM_OC1_SetConfig+0x114>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d007      	beq.n	8006ace <TIM_OC1_SetConfig+0xc2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a18      	ldr	r2, [pc, #96]	@ (8006b24 <TIM_OC1_SetConfig+0x118>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d003      	beq.n	8006ace <TIM_OC1_SetConfig+0xc2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a17      	ldr	r2, [pc, #92]	@ (8006b28 <TIM_OC1_SetConfig+0x11c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d111      	bne.n	8006af2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	621a      	str	r2, [r3, #32]
}
 8006b0c:	bf00      	nop
 8006b0e:	371c      	adds	r7, #28
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	40012c00 	.word	0x40012c00
 8006b1c:	40013400 	.word	0x40013400
 8006b20:	40014000 	.word	0x40014000
 8006b24:	40014400 	.word	0x40014400
 8006b28:	40014800 	.word	0x40014800

08006b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	f023 0210 	bic.w	r2, r3, #16
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f023 0320 	bic.w	r3, r3, #32
 8006b7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	011b      	lsls	r3, r3, #4
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a28      	ldr	r2, [pc, #160]	@ (8006c2c <TIM_OC2_SetConfig+0x100>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d003      	beq.n	8006b98 <TIM_OC2_SetConfig+0x6c>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a27      	ldr	r2, [pc, #156]	@ (8006c30 <TIM_OC2_SetConfig+0x104>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d10d      	bne.n	8006bb4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	011b      	lsls	r3, r3, #4
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8006c2c <TIM_OC2_SetConfig+0x100>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00f      	beq.n	8006bdc <TIM_OC2_SetConfig+0xb0>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8006c30 <TIM_OC2_SetConfig+0x104>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00b      	beq.n	8006bdc <TIM_OC2_SetConfig+0xb0>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8006c34 <TIM_OC2_SetConfig+0x108>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d007      	beq.n	8006bdc <TIM_OC2_SetConfig+0xb0>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a1a      	ldr	r2, [pc, #104]	@ (8006c38 <TIM_OC2_SetConfig+0x10c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_OC2_SetConfig+0xb0>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a19      	ldr	r2, [pc, #100]	@ (8006c3c <TIM_OC2_SetConfig+0x110>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d113      	bne.n	8006c04 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006be2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	621a      	str	r2, [r3, #32]
}
 8006c1e:	bf00      	nop
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	40012c00 	.word	0x40012c00
 8006c30:	40013400 	.word	0x40013400
 8006c34:	40014000 	.word	0x40014000
 8006c38:	40014400 	.word	0x40014400
 8006c3c:	40014800 	.word	0x40014800

08006c40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 0303 	bic.w	r3, r3, #3
 8006c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	021b      	lsls	r3, r3, #8
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a27      	ldr	r2, [pc, #156]	@ (8006d3c <TIM_OC3_SetConfig+0xfc>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d003      	beq.n	8006caa <TIM_OC3_SetConfig+0x6a>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a26      	ldr	r2, [pc, #152]	@ (8006d40 <TIM_OC3_SetConfig+0x100>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d10d      	bne.n	8006cc6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	021b      	lsls	r3, r3, #8
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8006d3c <TIM_OC3_SetConfig+0xfc>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d00f      	beq.n	8006cee <TIM_OC3_SetConfig+0xae>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8006d40 <TIM_OC3_SetConfig+0x100>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d00b      	beq.n	8006cee <TIM_OC3_SetConfig+0xae>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a1a      	ldr	r2, [pc, #104]	@ (8006d44 <TIM_OC3_SetConfig+0x104>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d007      	beq.n	8006cee <TIM_OC3_SetConfig+0xae>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a19      	ldr	r2, [pc, #100]	@ (8006d48 <TIM_OC3_SetConfig+0x108>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d003      	beq.n	8006cee <TIM_OC3_SetConfig+0xae>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a18      	ldr	r2, [pc, #96]	@ (8006d4c <TIM_OC3_SetConfig+0x10c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d113      	bne.n	8006d16 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	011b      	lsls	r3, r3, #4
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	621a      	str	r2, [r3, #32]
}
 8006d30:	bf00      	nop
 8006d32:	371c      	adds	r7, #28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	40012c00 	.word	0x40012c00
 8006d40:	40013400 	.word	0x40013400
 8006d44:	40014000 	.word	0x40014000
 8006d48:	40014400 	.word	0x40014400
 8006d4c:	40014800 	.word	0x40014800

08006d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	021b      	lsls	r3, r3, #8
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	031b      	lsls	r3, r3, #12
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a28      	ldr	r2, [pc, #160]	@ (8006e50 <TIM_OC4_SetConfig+0x100>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d003      	beq.n	8006dbc <TIM_OC4_SetConfig+0x6c>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a27      	ldr	r2, [pc, #156]	@ (8006e54 <TIM_OC4_SetConfig+0x104>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d10d      	bne.n	8006dd8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	031b      	lsls	r3, r3, #12
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a1d      	ldr	r2, [pc, #116]	@ (8006e50 <TIM_OC4_SetConfig+0x100>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d00f      	beq.n	8006e00 <TIM_OC4_SetConfig+0xb0>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a1c      	ldr	r2, [pc, #112]	@ (8006e54 <TIM_OC4_SetConfig+0x104>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00b      	beq.n	8006e00 <TIM_OC4_SetConfig+0xb0>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a1b      	ldr	r2, [pc, #108]	@ (8006e58 <TIM_OC4_SetConfig+0x108>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d007      	beq.n	8006e00 <TIM_OC4_SetConfig+0xb0>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a1a      	ldr	r2, [pc, #104]	@ (8006e5c <TIM_OC4_SetConfig+0x10c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d003      	beq.n	8006e00 <TIM_OC4_SetConfig+0xb0>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a19      	ldr	r2, [pc, #100]	@ (8006e60 <TIM_OC4_SetConfig+0x110>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d113      	bne.n	8006e28 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e06:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e0e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	019b      	lsls	r3, r3, #6
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	019b      	lsls	r3, r3, #6
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	621a      	str	r2, [r3, #32]
}
 8006e42:	bf00      	nop
 8006e44:	371c      	adds	r7, #28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	40012c00 	.word	0x40012c00
 8006e54:	40013400 	.word	0x40013400
 8006e58:	40014000 	.word	0x40014000
 8006e5c:	40014400 	.word	0x40014400
 8006e60:	40014800 	.word	0x40014800

08006e64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b087      	sub	sp, #28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006ea8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	041b      	lsls	r3, r3, #16
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a17      	ldr	r2, [pc, #92]	@ (8006f18 <TIM_OC5_SetConfig+0xb4>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d00f      	beq.n	8006ede <TIM_OC5_SetConfig+0x7a>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a16      	ldr	r2, [pc, #88]	@ (8006f1c <TIM_OC5_SetConfig+0xb8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d00b      	beq.n	8006ede <TIM_OC5_SetConfig+0x7a>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a15      	ldr	r2, [pc, #84]	@ (8006f20 <TIM_OC5_SetConfig+0xbc>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d007      	beq.n	8006ede <TIM_OC5_SetConfig+0x7a>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a14      	ldr	r2, [pc, #80]	@ (8006f24 <TIM_OC5_SetConfig+0xc0>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d003      	beq.n	8006ede <TIM_OC5_SetConfig+0x7a>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a13      	ldr	r2, [pc, #76]	@ (8006f28 <TIM_OC5_SetConfig+0xc4>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d109      	bne.n	8006ef2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	021b      	lsls	r3, r3, #8
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	621a      	str	r2, [r3, #32]
}
 8006f0c:	bf00      	nop
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	40012c00 	.word	0x40012c00
 8006f1c:	40013400 	.word	0x40013400
 8006f20:	40014000 	.word	0x40014000
 8006f24:	40014400 	.word	0x40014400
 8006f28:	40014800 	.word	0x40014800

08006f2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	021b      	lsls	r3, r3, #8
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	051b      	lsls	r3, r3, #20
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a18      	ldr	r2, [pc, #96]	@ (8006fe4 <TIM_OC6_SetConfig+0xb8>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d00f      	beq.n	8006fa8 <TIM_OC6_SetConfig+0x7c>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a17      	ldr	r2, [pc, #92]	@ (8006fe8 <TIM_OC6_SetConfig+0xbc>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00b      	beq.n	8006fa8 <TIM_OC6_SetConfig+0x7c>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a16      	ldr	r2, [pc, #88]	@ (8006fec <TIM_OC6_SetConfig+0xc0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d007      	beq.n	8006fa8 <TIM_OC6_SetConfig+0x7c>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a15      	ldr	r2, [pc, #84]	@ (8006ff0 <TIM_OC6_SetConfig+0xc4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d003      	beq.n	8006fa8 <TIM_OC6_SetConfig+0x7c>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a14      	ldr	r2, [pc, #80]	@ (8006ff4 <TIM_OC6_SetConfig+0xc8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d109      	bne.n	8006fbc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	029b      	lsls	r3, r3, #10
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	621a      	str	r2, [r3, #32]
}
 8006fd6:	bf00      	nop
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40012c00 	.word	0x40012c00
 8006fe8:	40013400 	.word	0x40013400
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40014400 	.word	0x40014400
 8006ff4:	40014800 	.word	0x40014800

08006ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	f023 0201 	bic.w	r2, r3, #1
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f023 030a 	bic.w	r3, r3, #10
 8007034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4313      	orrs	r3, r2
 800703c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007056:	b480      	push	{r7}
 8007058:	b087      	sub	sp, #28
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	f023 0210 	bic.w	r2, r3, #16
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007080:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	031b      	lsls	r3, r3, #12
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	4313      	orrs	r3, r2
 800708a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007092:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	4313      	orrs	r3, r2
 800709c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	621a      	str	r2, [r3, #32]
}
 80070aa:	bf00      	nop
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b085      	sub	sp, #20
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80070cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	f043 0307 	orr.w	r3, r3, #7
 80070dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	609a      	str	r2, [r3, #8]
}
 80070e4:	bf00      	nop
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800710a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	021a      	lsls	r2, r3, #8
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	431a      	orrs	r2, r3
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	4313      	orrs	r3, r2
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	4313      	orrs	r3, r2
 800711c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	609a      	str	r2, [r3, #8]
}
 8007124:	bf00      	nop
 8007126:	371c      	adds	r7, #28
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007140:	2b01      	cmp	r3, #1
 8007142:	d101      	bne.n	8007148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007144:	2302      	movs	r3, #2
 8007146:	e065      	b.n	8007214 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a2c      	ldr	r2, [pc, #176]	@ (8007220 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d004      	beq.n	800717c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a2b      	ldr	r2, [pc, #172]	@ (8007224 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d108      	bne.n	800718e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007182:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007198:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007220 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d018      	beq.n	80071e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071be:	d013      	beq.n	80071e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a18      	ldr	r2, [pc, #96]	@ (8007228 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d00e      	beq.n	80071e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a17      	ldr	r2, [pc, #92]	@ (800722c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d009      	beq.n	80071e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a12      	ldr	r2, [pc, #72]	@ (8007224 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d004      	beq.n	80071e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a13      	ldr	r2, [pc, #76]	@ (8007230 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d10c      	bne.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	40012c00 	.word	0x40012c00
 8007224:	40013400 	.word	0x40013400
 8007228:	40000400 	.word	0x40000400
 800722c:	40000800 	.word	0x40000800
 8007230:	40014000 	.word	0x40014000

08007234 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800724c:	2302      	movs	r3, #2
 800724e:	e073      	b.n	8007338 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	4313      	orrs	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	4313      	orrs	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	4313      	orrs	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4313      	orrs	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	041b      	lsls	r3, r3, #16
 80072c6:	4313      	orrs	r3, r2
 80072c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	69db      	ldr	r3, [r3, #28]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a19      	ldr	r2, [pc, #100]	@ (8007344 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d004      	beq.n	80072ec <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a18      	ldr	r2, [pc, #96]	@ (8007348 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d11c      	bne.n	8007326 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f6:	051b      	lsls	r3, r3, #20
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007322:	4313      	orrs	r3, r2
 8007324:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	40012c00 	.word	0x40012c00
 8007348:	40013400 	.word	0x40013400

0800734c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e042      	b.n	8007470 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d106      	bne.n	8007402 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7fa fc03 	bl	8001c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2224      	movs	r2, #36	@ 0x24
 8007406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0201 	bic.w	r2, r2, #1
 8007418:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fb82 	bl	8007b2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f8b3 	bl	8007594 <UART_SetConfig>
 800742e:	4603      	mov	r3, r0
 8007430:	2b01      	cmp	r3, #1
 8007432:	d101      	bne.n	8007438 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e01b      	b.n	8007470 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007446:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689a      	ldr	r2, [r3, #8]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007456:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f042 0201 	orr.w	r2, r2, #1
 8007466:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fc01 	bl	8007c70 <UART_CheckIdleState>
 800746e:	4603      	mov	r3, r0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08a      	sub	sp, #40	@ 0x28
 800747c:	af02      	add	r7, sp, #8
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	603b      	str	r3, [r7, #0]
 8007484:	4613      	mov	r3, r2
 8007486:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800748e:	2b20      	cmp	r3, #32
 8007490:	d17b      	bne.n	800758a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <HAL_UART_Transmit+0x26>
 8007498:	88fb      	ldrh	r3, [r7, #6]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e074      	b.n	800758c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2221      	movs	r2, #33	@ 0x21
 80074ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074b2:	f7fa fcd1 	bl	8001e58 <HAL_GetTick>
 80074b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	88fa      	ldrh	r2, [r7, #6]
 80074bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	88fa      	ldrh	r2, [r7, #6]
 80074c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074d0:	d108      	bne.n	80074e4 <HAL_UART_Transmit+0x6c>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d104      	bne.n	80074e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	61bb      	str	r3, [r7, #24]
 80074e2:	e003      	b.n	80074ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074e8:	2300      	movs	r3, #0
 80074ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074ec:	e030      	b.n	8007550 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2200      	movs	r2, #0
 80074f6:	2180      	movs	r1, #128	@ 0x80
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 fc63 	bl	8007dc4 <UART_WaitOnFlagUntilTimeout>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d005      	beq.n	8007510 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2220      	movs	r2, #32
 8007508:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e03d      	b.n	800758c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10b      	bne.n	800752e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007524:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	3302      	adds	r3, #2
 800752a:	61bb      	str	r3, [r7, #24]
 800752c:	e007      	b.n	800753e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	781a      	ldrb	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	3301      	adds	r3, #1
 800753c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007544:	b29b      	uxth	r3, r3
 8007546:	3b01      	subs	r3, #1
 8007548:	b29a      	uxth	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007556:	b29b      	uxth	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1c8      	bne.n	80074ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2200      	movs	r2, #0
 8007564:	2140      	movs	r1, #64	@ 0x40
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fc2c 	bl	8007dc4 <UART_WaitOnFlagUntilTimeout>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d005      	beq.n	800757e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2220      	movs	r2, #32
 8007576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e006      	b.n	800758c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2220      	movs	r2, #32
 8007582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	e000      	b.n	800758c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800758a:	2302      	movs	r3, #2
  }
}
 800758c:	4618      	mov	r0, r3
 800758e:	3720      	adds	r7, #32
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007598:	b08c      	sub	sp, #48	@ 0x30
 800759a:	af00      	add	r7, sp, #0
 800759c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	431a      	orrs	r2, r3
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	431a      	orrs	r2, r3
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	4bab      	ldr	r3, [pc, #684]	@ (8007870 <UART_SetConfig+0x2dc>)
 80075c4:	4013      	ands	r3, r2
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	6812      	ldr	r2, [r2, #0]
 80075ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075cc:	430b      	orrs	r3, r1
 80075ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4aa0      	ldr	r2, [pc, #640]	@ (8007874 <UART_SetConfig+0x2e0>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d004      	beq.n	8007600 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075fc:	4313      	orrs	r3, r2
 80075fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800760a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	6812      	ldr	r2, [r2, #0]
 8007612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007614:	430b      	orrs	r3, r1
 8007616:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761e:	f023 010f 	bic.w	r1, r3, #15
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	430a      	orrs	r2, r1
 800762c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a91      	ldr	r2, [pc, #580]	@ (8007878 <UART_SetConfig+0x2e4>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d125      	bne.n	8007684 <UART_SetConfig+0xf0>
 8007638:	4b90      	ldr	r3, [pc, #576]	@ (800787c <UART_SetConfig+0x2e8>)
 800763a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	2b03      	cmp	r3, #3
 8007644:	d81a      	bhi.n	800767c <UART_SetConfig+0xe8>
 8007646:	a201      	add	r2, pc, #4	@ (adr r2, 800764c <UART_SetConfig+0xb8>)
 8007648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764c:	0800765d 	.word	0x0800765d
 8007650:	0800766d 	.word	0x0800766d
 8007654:	08007665 	.word	0x08007665
 8007658:	08007675 	.word	0x08007675
 800765c:	2301      	movs	r3, #1
 800765e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007662:	e0d6      	b.n	8007812 <UART_SetConfig+0x27e>
 8007664:	2302      	movs	r3, #2
 8007666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800766a:	e0d2      	b.n	8007812 <UART_SetConfig+0x27e>
 800766c:	2304      	movs	r3, #4
 800766e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007672:	e0ce      	b.n	8007812 <UART_SetConfig+0x27e>
 8007674:	2308      	movs	r3, #8
 8007676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800767a:	e0ca      	b.n	8007812 <UART_SetConfig+0x27e>
 800767c:	2310      	movs	r3, #16
 800767e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007682:	e0c6      	b.n	8007812 <UART_SetConfig+0x27e>
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a7d      	ldr	r2, [pc, #500]	@ (8007880 <UART_SetConfig+0x2ec>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d138      	bne.n	8007700 <UART_SetConfig+0x16c>
 800768e:	4b7b      	ldr	r3, [pc, #492]	@ (800787c <UART_SetConfig+0x2e8>)
 8007690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007694:	f003 030c 	and.w	r3, r3, #12
 8007698:	2b0c      	cmp	r3, #12
 800769a:	d82d      	bhi.n	80076f8 <UART_SetConfig+0x164>
 800769c:	a201      	add	r2, pc, #4	@ (adr r2, 80076a4 <UART_SetConfig+0x110>)
 800769e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a2:	bf00      	nop
 80076a4:	080076d9 	.word	0x080076d9
 80076a8:	080076f9 	.word	0x080076f9
 80076ac:	080076f9 	.word	0x080076f9
 80076b0:	080076f9 	.word	0x080076f9
 80076b4:	080076e9 	.word	0x080076e9
 80076b8:	080076f9 	.word	0x080076f9
 80076bc:	080076f9 	.word	0x080076f9
 80076c0:	080076f9 	.word	0x080076f9
 80076c4:	080076e1 	.word	0x080076e1
 80076c8:	080076f9 	.word	0x080076f9
 80076cc:	080076f9 	.word	0x080076f9
 80076d0:	080076f9 	.word	0x080076f9
 80076d4:	080076f1 	.word	0x080076f1
 80076d8:	2300      	movs	r3, #0
 80076da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076de:	e098      	b.n	8007812 <UART_SetConfig+0x27e>
 80076e0:	2302      	movs	r3, #2
 80076e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076e6:	e094      	b.n	8007812 <UART_SetConfig+0x27e>
 80076e8:	2304      	movs	r3, #4
 80076ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ee:	e090      	b.n	8007812 <UART_SetConfig+0x27e>
 80076f0:	2308      	movs	r3, #8
 80076f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076f6:	e08c      	b.n	8007812 <UART_SetConfig+0x27e>
 80076f8:	2310      	movs	r3, #16
 80076fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076fe:	e088      	b.n	8007812 <UART_SetConfig+0x27e>
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a5f      	ldr	r2, [pc, #380]	@ (8007884 <UART_SetConfig+0x2f0>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d125      	bne.n	8007756 <UART_SetConfig+0x1c2>
 800770a:	4b5c      	ldr	r3, [pc, #368]	@ (800787c <UART_SetConfig+0x2e8>)
 800770c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007710:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007714:	2b30      	cmp	r3, #48	@ 0x30
 8007716:	d016      	beq.n	8007746 <UART_SetConfig+0x1b2>
 8007718:	2b30      	cmp	r3, #48	@ 0x30
 800771a:	d818      	bhi.n	800774e <UART_SetConfig+0x1ba>
 800771c:	2b20      	cmp	r3, #32
 800771e:	d00a      	beq.n	8007736 <UART_SetConfig+0x1a2>
 8007720:	2b20      	cmp	r3, #32
 8007722:	d814      	bhi.n	800774e <UART_SetConfig+0x1ba>
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <UART_SetConfig+0x19a>
 8007728:	2b10      	cmp	r3, #16
 800772a:	d008      	beq.n	800773e <UART_SetConfig+0x1aa>
 800772c:	e00f      	b.n	800774e <UART_SetConfig+0x1ba>
 800772e:	2300      	movs	r3, #0
 8007730:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007734:	e06d      	b.n	8007812 <UART_SetConfig+0x27e>
 8007736:	2302      	movs	r3, #2
 8007738:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800773c:	e069      	b.n	8007812 <UART_SetConfig+0x27e>
 800773e:	2304      	movs	r3, #4
 8007740:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007744:	e065      	b.n	8007812 <UART_SetConfig+0x27e>
 8007746:	2308      	movs	r3, #8
 8007748:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800774c:	e061      	b.n	8007812 <UART_SetConfig+0x27e>
 800774e:	2310      	movs	r3, #16
 8007750:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007754:	e05d      	b.n	8007812 <UART_SetConfig+0x27e>
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a4b      	ldr	r2, [pc, #300]	@ (8007888 <UART_SetConfig+0x2f4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d125      	bne.n	80077ac <UART_SetConfig+0x218>
 8007760:	4b46      	ldr	r3, [pc, #280]	@ (800787c <UART_SetConfig+0x2e8>)
 8007762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007766:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800776a:	2bc0      	cmp	r3, #192	@ 0xc0
 800776c:	d016      	beq.n	800779c <UART_SetConfig+0x208>
 800776e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007770:	d818      	bhi.n	80077a4 <UART_SetConfig+0x210>
 8007772:	2b80      	cmp	r3, #128	@ 0x80
 8007774:	d00a      	beq.n	800778c <UART_SetConfig+0x1f8>
 8007776:	2b80      	cmp	r3, #128	@ 0x80
 8007778:	d814      	bhi.n	80077a4 <UART_SetConfig+0x210>
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <UART_SetConfig+0x1f0>
 800777e:	2b40      	cmp	r3, #64	@ 0x40
 8007780:	d008      	beq.n	8007794 <UART_SetConfig+0x200>
 8007782:	e00f      	b.n	80077a4 <UART_SetConfig+0x210>
 8007784:	2300      	movs	r3, #0
 8007786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800778a:	e042      	b.n	8007812 <UART_SetConfig+0x27e>
 800778c:	2302      	movs	r3, #2
 800778e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007792:	e03e      	b.n	8007812 <UART_SetConfig+0x27e>
 8007794:	2304      	movs	r3, #4
 8007796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800779a:	e03a      	b.n	8007812 <UART_SetConfig+0x27e>
 800779c:	2308      	movs	r3, #8
 800779e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077a2:	e036      	b.n	8007812 <UART_SetConfig+0x27e>
 80077a4:	2310      	movs	r3, #16
 80077a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077aa:	e032      	b.n	8007812 <UART_SetConfig+0x27e>
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a30      	ldr	r2, [pc, #192]	@ (8007874 <UART_SetConfig+0x2e0>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d12a      	bne.n	800780c <UART_SetConfig+0x278>
 80077b6:	4b31      	ldr	r3, [pc, #196]	@ (800787c <UART_SetConfig+0x2e8>)
 80077b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80077c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077c4:	d01a      	beq.n	80077fc <UART_SetConfig+0x268>
 80077c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077ca:	d81b      	bhi.n	8007804 <UART_SetConfig+0x270>
 80077cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077d0:	d00c      	beq.n	80077ec <UART_SetConfig+0x258>
 80077d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077d6:	d815      	bhi.n	8007804 <UART_SetConfig+0x270>
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <UART_SetConfig+0x250>
 80077dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077e0:	d008      	beq.n	80077f4 <UART_SetConfig+0x260>
 80077e2:	e00f      	b.n	8007804 <UART_SetConfig+0x270>
 80077e4:	2300      	movs	r3, #0
 80077e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ea:	e012      	b.n	8007812 <UART_SetConfig+0x27e>
 80077ec:	2302      	movs	r3, #2
 80077ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077f2:	e00e      	b.n	8007812 <UART_SetConfig+0x27e>
 80077f4:	2304      	movs	r3, #4
 80077f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077fa:	e00a      	b.n	8007812 <UART_SetConfig+0x27e>
 80077fc:	2308      	movs	r3, #8
 80077fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007802:	e006      	b.n	8007812 <UART_SetConfig+0x27e>
 8007804:	2310      	movs	r3, #16
 8007806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800780a:	e002      	b.n	8007812 <UART_SetConfig+0x27e>
 800780c:	2310      	movs	r3, #16
 800780e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a17      	ldr	r2, [pc, #92]	@ (8007874 <UART_SetConfig+0x2e0>)
 8007818:	4293      	cmp	r3, r2
 800781a:	f040 80a8 	bne.w	800796e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800781e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007822:	2b08      	cmp	r3, #8
 8007824:	d834      	bhi.n	8007890 <UART_SetConfig+0x2fc>
 8007826:	a201      	add	r2, pc, #4	@ (adr r2, 800782c <UART_SetConfig+0x298>)
 8007828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782c:	08007851 	.word	0x08007851
 8007830:	08007891 	.word	0x08007891
 8007834:	08007859 	.word	0x08007859
 8007838:	08007891 	.word	0x08007891
 800783c:	0800785f 	.word	0x0800785f
 8007840:	08007891 	.word	0x08007891
 8007844:	08007891 	.word	0x08007891
 8007848:	08007891 	.word	0x08007891
 800784c:	08007867 	.word	0x08007867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007850:	f7fd f95c 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 8007854:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007856:	e021      	b.n	800789c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007858:	4b0c      	ldr	r3, [pc, #48]	@ (800788c <UART_SetConfig+0x2f8>)
 800785a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800785c:	e01e      	b.n	800789c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800785e:	f7fd f8e9 	bl	8004a34 <HAL_RCC_GetSysClockFreq>
 8007862:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007864:	e01a      	b.n	800789c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800786a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800786c:	e016      	b.n	800789c <UART_SetConfig+0x308>
 800786e:	bf00      	nop
 8007870:	cfff69f3 	.word	0xcfff69f3
 8007874:	40008000 	.word	0x40008000
 8007878:	40013800 	.word	0x40013800
 800787c:	40021000 	.word	0x40021000
 8007880:	40004400 	.word	0x40004400
 8007884:	40004800 	.word	0x40004800
 8007888:	40004c00 	.word	0x40004c00
 800788c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007890:	2300      	movs	r3, #0
 8007892:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800789a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800789c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 812a 	beq.w	8007af8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a8:	4a9e      	ldr	r2, [pc, #632]	@ (8007b24 <UART_SetConfig+0x590>)
 80078aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078ae:	461a      	mov	r2, r3
 80078b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80078b6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	4613      	mov	r3, r2
 80078be:	005b      	lsls	r3, r3, #1
 80078c0:	4413      	add	r3, r2
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d305      	bcc.n	80078d4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078ce:	69ba      	ldr	r2, [r7, #24]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d903      	bls.n	80078dc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80078da:	e10d      	b.n	8007af8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078de:	2200      	movs	r2, #0
 80078e0:	60bb      	str	r3, [r7, #8]
 80078e2:	60fa      	str	r2, [r7, #12]
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e8:	4a8e      	ldr	r2, [pc, #568]	@ (8007b24 <UART_SetConfig+0x590>)
 80078ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2200      	movs	r2, #0
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	607a      	str	r2, [r7, #4]
 80078f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078fe:	f7f8 fcdf 	bl	80002c0 <__aeabi_uldivmod>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	4610      	mov	r0, r2
 8007908:	4619      	mov	r1, r3
 800790a:	f04f 0200 	mov.w	r2, #0
 800790e:	f04f 0300 	mov.w	r3, #0
 8007912:	020b      	lsls	r3, r1, #8
 8007914:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007918:	0202      	lsls	r2, r0, #8
 800791a:	6979      	ldr	r1, [r7, #20]
 800791c:	6849      	ldr	r1, [r1, #4]
 800791e:	0849      	lsrs	r1, r1, #1
 8007920:	2000      	movs	r0, #0
 8007922:	460c      	mov	r4, r1
 8007924:	4605      	mov	r5, r0
 8007926:	eb12 0804 	adds.w	r8, r2, r4
 800792a:	eb43 0905 	adc.w	r9, r3, r5
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	469a      	mov	sl, r3
 8007936:	4693      	mov	fp, r2
 8007938:	4652      	mov	r2, sl
 800793a:	465b      	mov	r3, fp
 800793c:	4640      	mov	r0, r8
 800793e:	4649      	mov	r1, r9
 8007940:	f7f8 fcbe 	bl	80002c0 <__aeabi_uldivmod>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	4613      	mov	r3, r2
 800794a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007952:	d308      	bcc.n	8007966 <UART_SetConfig+0x3d2>
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800795a:	d204      	bcs.n	8007966 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6a3a      	ldr	r2, [r7, #32]
 8007962:	60da      	str	r2, [r3, #12]
 8007964:	e0c8      	b.n	8007af8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800796c:	e0c4      	b.n	8007af8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007976:	d167      	bne.n	8007a48 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007978:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800797c:	2b08      	cmp	r3, #8
 800797e:	d828      	bhi.n	80079d2 <UART_SetConfig+0x43e>
 8007980:	a201      	add	r2, pc, #4	@ (adr r2, 8007988 <UART_SetConfig+0x3f4>)
 8007982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007986:	bf00      	nop
 8007988:	080079ad 	.word	0x080079ad
 800798c:	080079b5 	.word	0x080079b5
 8007990:	080079bd 	.word	0x080079bd
 8007994:	080079d3 	.word	0x080079d3
 8007998:	080079c3 	.word	0x080079c3
 800799c:	080079d3 	.word	0x080079d3
 80079a0:	080079d3 	.word	0x080079d3
 80079a4:	080079d3 	.word	0x080079d3
 80079a8:	080079cb 	.word	0x080079cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079ac:	f7fd f8ae 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 80079b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079b2:	e014      	b.n	80079de <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079b4:	f7fd f8c0 	bl	8004b38 <HAL_RCC_GetPCLK2Freq>
 80079b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079ba:	e010      	b.n	80079de <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079bc:	4b5a      	ldr	r3, [pc, #360]	@ (8007b28 <UART_SetConfig+0x594>)
 80079be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079c0:	e00d      	b.n	80079de <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079c2:	f7fd f837 	bl	8004a34 <HAL_RCC_GetSysClockFreq>
 80079c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079c8:	e009      	b.n	80079de <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079d0:	e005      	b.n	80079de <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80079dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 8089 	beq.w	8007af8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ea:	4a4e      	ldr	r2, [pc, #312]	@ (8007b24 <UART_SetConfig+0x590>)
 80079ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079f0:	461a      	mov	r2, r3
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80079f8:	005a      	lsls	r2, r3, #1
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	085b      	lsrs	r3, r3, #1
 8007a00:	441a      	add	r2, r3
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	2b0f      	cmp	r3, #15
 8007a10:	d916      	bls.n	8007a40 <UART_SetConfig+0x4ac>
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a18:	d212      	bcs.n	8007a40 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	f023 030f 	bic.w	r3, r3, #15
 8007a22:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	085b      	lsrs	r3, r3, #1
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	f003 0307 	and.w	r3, r3, #7
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	8bfb      	ldrh	r3, [r7, #30]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	8bfa      	ldrh	r2, [r7, #30]
 8007a3c:	60da      	str	r2, [r3, #12]
 8007a3e:	e05b      	b.n	8007af8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a46:	e057      	b.n	8007af8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a4c:	2b08      	cmp	r3, #8
 8007a4e:	d828      	bhi.n	8007aa2 <UART_SetConfig+0x50e>
 8007a50:	a201      	add	r2, pc, #4	@ (adr r2, 8007a58 <UART_SetConfig+0x4c4>)
 8007a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a56:	bf00      	nop
 8007a58:	08007a7d 	.word	0x08007a7d
 8007a5c:	08007a85 	.word	0x08007a85
 8007a60:	08007a8d 	.word	0x08007a8d
 8007a64:	08007aa3 	.word	0x08007aa3
 8007a68:	08007a93 	.word	0x08007a93
 8007a6c:	08007aa3 	.word	0x08007aa3
 8007a70:	08007aa3 	.word	0x08007aa3
 8007a74:	08007aa3 	.word	0x08007aa3
 8007a78:	08007a9b 	.word	0x08007a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a7c:	f7fd f846 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 8007a80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a82:	e014      	b.n	8007aae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a84:	f7fd f858 	bl	8004b38 <HAL_RCC_GetPCLK2Freq>
 8007a88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a8a:	e010      	b.n	8007aae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a8c:	4b26      	ldr	r3, [pc, #152]	@ (8007b28 <UART_SetConfig+0x594>)
 8007a8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a90:	e00d      	b.n	8007aae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a92:	f7fc ffcf 	bl	8004a34 <HAL_RCC_GetSysClockFreq>
 8007a96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a98:	e009      	b.n	8007aae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007aa0:	e005      	b.n	8007aae <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007aac:	bf00      	nop
    }

    if (pclk != 0U)
 8007aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d021      	beq.n	8007af8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab8:	4a1a      	ldr	r2, [pc, #104]	@ (8007b24 <UART_SetConfig+0x590>)
 8007aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	085b      	lsrs	r3, r3, #1
 8007acc:	441a      	add	r2, r3
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	2b0f      	cmp	r3, #15
 8007adc:	d909      	bls.n	8007af2 <UART_SetConfig+0x55e>
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ae4:	d205      	bcs.n	8007af2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	60da      	str	r2, [r3, #12]
 8007af0:	e002      	b.n	8007af8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2200      	movs	r2, #0
 8007b12:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007b14:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3730      	adds	r7, #48	@ 0x30
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b22:	bf00      	nop
 8007b24:	080091d4 	.word	0x080091d4
 8007b28:	00f42400 	.word	0x00f42400

08007b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b38:	f003 0308 	and.w	r3, r3, #8
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00a      	beq.n	8007b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	430a      	orrs	r2, r1
 8007b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00a      	beq.n	8007b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	430a      	orrs	r2, r1
 8007b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00a      	beq.n	8007b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b9e:	f003 0304 	and.w	r3, r3, #4
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00a      	beq.n	8007bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc0:	f003 0310 	and.w	r3, r3, #16
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00a      	beq.n	8007bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be2:	f003 0320 	and.w	r3, r3, #32
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d01a      	beq.n	8007c42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c2a:	d10a      	bne.n	8007c42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	430a      	orrs	r2, r1
 8007c62:	605a      	str	r2, [r3, #4]
  }
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b098      	sub	sp, #96	@ 0x60
 8007c74:	af02      	add	r7, sp, #8
 8007c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c80:	f7fa f8ea 	bl	8001e58 <HAL_GetTick>
 8007c84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0308 	and.w	r3, r3, #8
 8007c90:	2b08      	cmp	r3, #8
 8007c92:	d12f      	bne.n	8007cf4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f88e 	bl	8007dc4 <UART_WaitOnFlagUntilTimeout>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d022      	beq.n	8007cf4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb6:	e853 3f00 	ldrex	r3, [r3]
 8007cba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ccc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cd4:	e841 2300 	strex	r3, r2, [r1]
 8007cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1e6      	bne.n	8007cae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2220      	movs	r2, #32
 8007ce4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e063      	b.n	8007dbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0304 	and.w	r3, r3, #4
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d149      	bne.n	8007d96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f857 	bl	8007dc4 <UART_WaitOnFlagUntilTimeout>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d03c      	beq.n	8007d96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	623b      	str	r3, [r7, #32]
   return(result);
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	461a      	mov	r2, r3
 8007d38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d42:	e841 2300 	strex	r3, r2, [r1]
 8007d46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e6      	bne.n	8007d1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3308      	adds	r3, #8
 8007d54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	e853 3f00 	ldrex	r3, [r3]
 8007d5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f023 0301 	bic.w	r3, r3, #1
 8007d64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d6e:	61fa      	str	r2, [r7, #28]
 8007d70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d72:	69b9      	ldr	r1, [r7, #24]
 8007d74:	69fa      	ldr	r2, [r7, #28]
 8007d76:	e841 2300 	strex	r3, r2, [r1]
 8007d7a:	617b      	str	r3, [r7, #20]
   return(result);
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1e5      	bne.n	8007d4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2220      	movs	r2, #32
 8007d86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e012      	b.n	8007dbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2220      	movs	r2, #32
 8007da2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3758      	adds	r7, #88	@ 0x58
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	603b      	str	r3, [r7, #0]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dd4:	e04f      	b.n	8007e76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ddc:	d04b      	beq.n	8007e76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dde:	f7fa f83b 	bl	8001e58 <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d302      	bcc.n	8007df4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e04e      	b.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0304 	and.w	r3, r3, #4
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d037      	beq.n	8007e76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	2b80      	cmp	r3, #128	@ 0x80
 8007e0a:	d034      	beq.n	8007e76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2b40      	cmp	r3, #64	@ 0x40
 8007e10:	d031      	beq.n	8007e76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	f003 0308 	and.w	r3, r3, #8
 8007e1c:	2b08      	cmp	r3, #8
 8007e1e:	d110      	bne.n	8007e42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2208      	movs	r2, #8
 8007e26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 f838 	bl	8007e9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2208      	movs	r2, #8
 8007e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e029      	b.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e50:	d111      	bne.n	8007e76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f81e 	bl	8007e9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2220      	movs	r2, #32
 8007e66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e00f      	b.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69da      	ldr	r2, [r3, #28]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	4013      	ands	r3, r2
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	bf0c      	ite	eq
 8007e86:	2301      	moveq	r3, #1
 8007e88:	2300      	movne	r3, #0
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d0a0      	beq.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b095      	sub	sp, #84	@ 0x54
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eae:	e853 3f00 	ldrex	r3, [r3]
 8007eb2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ec4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ec6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007eca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ecc:	e841 2300 	strex	r3, r2, [r1]
 8007ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e6      	bne.n	8007ea6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	3308      	adds	r3, #8
 8007ede:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	e853 3f00 	ldrex	r3, [r3]
 8007ee6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007eee:	f023 0301 	bic.w	r3, r3, #1
 8007ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3308      	adds	r3, #8
 8007efa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007efc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f04:	e841 2300 	strex	r3, r2, [r1]
 8007f08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1e3      	bne.n	8007ed8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d118      	bne.n	8007f4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f023 0310 	bic.w	r3, r3, #16
 8007f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f36:	61bb      	str	r3, [r7, #24]
 8007f38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6979      	ldr	r1, [r7, #20]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	613b      	str	r3, [r7, #16]
   return(result);
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e6      	bne.n	8007f18 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f5e:	bf00      	nop
 8007f60:	3754      	adds	r7, #84	@ 0x54
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b085      	sub	sp, #20
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d101      	bne.n	8007f80 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	e027      	b.n	8007fd0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2224      	movs	r2, #36	@ 0x24
 8007f8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f022 0201 	bic.w	r2, r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007fae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d101      	bne.n	8007ff4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	e02d      	b.n	8008050 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2224      	movs	r2, #36	@ 0x24
 8008000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0201 	bic.w	r2, r2, #1
 800801a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	430a      	orrs	r2, r1
 800802e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f84f 	bl	80080d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2220      	movs	r2, #32
 8008042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008068:	2b01      	cmp	r3, #1
 800806a:	d101      	bne.n	8008070 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800806c:	2302      	movs	r3, #2
 800806e:	e02d      	b.n	80080cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2224      	movs	r2, #36	@ 0x24
 800807c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0201 	bic.w	r2, r2, #1
 8008096:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	430a      	orrs	r2, r1
 80080aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f811 	bl	80080d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2220      	movs	r2, #32
 80080be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d108      	bne.n	80080f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080f4:	e031      	b.n	800815a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080f6:	2308      	movs	r3, #8
 80080f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080fa:	2308      	movs	r3, #8
 80080fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	0e5b      	lsrs	r3, r3, #25
 8008106:	b2db      	uxtb	r3, r3
 8008108:	f003 0307 	and.w	r3, r3, #7
 800810c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	0f5b      	lsrs	r3, r3, #29
 8008116:	b2db      	uxtb	r3, r3
 8008118:	f003 0307 	and.w	r3, r3, #7
 800811c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	7b3a      	ldrb	r2, [r7, #12]
 8008122:	4911      	ldr	r1, [pc, #68]	@ (8008168 <UARTEx_SetNbDataToProcess+0x94>)
 8008124:	5c8a      	ldrb	r2, [r1, r2]
 8008126:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800812a:	7b3a      	ldrb	r2, [r7, #12]
 800812c:	490f      	ldr	r1, [pc, #60]	@ (800816c <UARTEx_SetNbDataToProcess+0x98>)
 800812e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008130:	fb93 f3f2 	sdiv	r3, r3, r2
 8008134:	b29a      	uxth	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800813c:	7bfb      	ldrb	r3, [r7, #15]
 800813e:	7b7a      	ldrb	r2, [r7, #13]
 8008140:	4909      	ldr	r1, [pc, #36]	@ (8008168 <UARTEx_SetNbDataToProcess+0x94>)
 8008142:	5c8a      	ldrb	r2, [r1, r2]
 8008144:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008148:	7b7a      	ldrb	r2, [r7, #13]
 800814a:	4908      	ldr	r1, [pc, #32]	@ (800816c <UARTEx_SetNbDataToProcess+0x98>)
 800814c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800814e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008152:	b29a      	uxth	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800815a:	bf00      	nop
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	080091ec 	.word	0x080091ec
 800816c:	080091f4 	.word	0x080091f4

08008170 <sbrk_aligned>:
 8008170:	b570      	push	{r4, r5, r6, lr}
 8008172:	4e0f      	ldr	r6, [pc, #60]	@ (80081b0 <sbrk_aligned+0x40>)
 8008174:	460c      	mov	r4, r1
 8008176:	6831      	ldr	r1, [r6, #0]
 8008178:	4605      	mov	r5, r0
 800817a:	b911      	cbnz	r1, 8008182 <sbrk_aligned+0x12>
 800817c:	f000 f9e0 	bl	8008540 <_sbrk_r>
 8008180:	6030      	str	r0, [r6, #0]
 8008182:	4621      	mov	r1, r4
 8008184:	4628      	mov	r0, r5
 8008186:	f000 f9db 	bl	8008540 <_sbrk_r>
 800818a:	1c43      	adds	r3, r0, #1
 800818c:	d103      	bne.n	8008196 <sbrk_aligned+0x26>
 800818e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008192:	4620      	mov	r0, r4
 8008194:	bd70      	pop	{r4, r5, r6, pc}
 8008196:	1cc4      	adds	r4, r0, #3
 8008198:	f024 0403 	bic.w	r4, r4, #3
 800819c:	42a0      	cmp	r0, r4
 800819e:	d0f8      	beq.n	8008192 <sbrk_aligned+0x22>
 80081a0:	1a21      	subs	r1, r4, r0
 80081a2:	4628      	mov	r0, r5
 80081a4:	f000 f9cc 	bl	8008540 <_sbrk_r>
 80081a8:	3001      	adds	r0, #1
 80081aa:	d1f2      	bne.n	8008192 <sbrk_aligned+0x22>
 80081ac:	e7ef      	b.n	800818e <sbrk_aligned+0x1e>
 80081ae:	bf00      	nop
 80081b0:	200005f4 	.word	0x200005f4

080081b4 <_malloc_r>:
 80081b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b8:	1ccd      	adds	r5, r1, #3
 80081ba:	f025 0503 	bic.w	r5, r5, #3
 80081be:	3508      	adds	r5, #8
 80081c0:	2d0c      	cmp	r5, #12
 80081c2:	bf38      	it	cc
 80081c4:	250c      	movcc	r5, #12
 80081c6:	2d00      	cmp	r5, #0
 80081c8:	4606      	mov	r6, r0
 80081ca:	db01      	blt.n	80081d0 <_malloc_r+0x1c>
 80081cc:	42a9      	cmp	r1, r5
 80081ce:	d904      	bls.n	80081da <_malloc_r+0x26>
 80081d0:	230c      	movs	r3, #12
 80081d2:	6033      	str	r3, [r6, #0]
 80081d4:	2000      	movs	r0, #0
 80081d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082b0 <_malloc_r+0xfc>
 80081de:	f000 f869 	bl	80082b4 <__malloc_lock>
 80081e2:	f8d8 3000 	ldr.w	r3, [r8]
 80081e6:	461c      	mov	r4, r3
 80081e8:	bb44      	cbnz	r4, 800823c <_malloc_r+0x88>
 80081ea:	4629      	mov	r1, r5
 80081ec:	4630      	mov	r0, r6
 80081ee:	f7ff ffbf 	bl	8008170 <sbrk_aligned>
 80081f2:	1c43      	adds	r3, r0, #1
 80081f4:	4604      	mov	r4, r0
 80081f6:	d158      	bne.n	80082aa <_malloc_r+0xf6>
 80081f8:	f8d8 4000 	ldr.w	r4, [r8]
 80081fc:	4627      	mov	r7, r4
 80081fe:	2f00      	cmp	r7, #0
 8008200:	d143      	bne.n	800828a <_malloc_r+0xd6>
 8008202:	2c00      	cmp	r4, #0
 8008204:	d04b      	beq.n	800829e <_malloc_r+0xea>
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	4639      	mov	r1, r7
 800820a:	4630      	mov	r0, r6
 800820c:	eb04 0903 	add.w	r9, r4, r3
 8008210:	f000 f996 	bl	8008540 <_sbrk_r>
 8008214:	4581      	cmp	r9, r0
 8008216:	d142      	bne.n	800829e <_malloc_r+0xea>
 8008218:	6821      	ldr	r1, [r4, #0]
 800821a:	1a6d      	subs	r5, r5, r1
 800821c:	4629      	mov	r1, r5
 800821e:	4630      	mov	r0, r6
 8008220:	f7ff ffa6 	bl	8008170 <sbrk_aligned>
 8008224:	3001      	adds	r0, #1
 8008226:	d03a      	beq.n	800829e <_malloc_r+0xea>
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	442b      	add	r3, r5
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	f8d8 3000 	ldr.w	r3, [r8]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	bb62      	cbnz	r2, 8008290 <_malloc_r+0xdc>
 8008236:	f8c8 7000 	str.w	r7, [r8]
 800823a:	e00f      	b.n	800825c <_malloc_r+0xa8>
 800823c:	6822      	ldr	r2, [r4, #0]
 800823e:	1b52      	subs	r2, r2, r5
 8008240:	d420      	bmi.n	8008284 <_malloc_r+0xd0>
 8008242:	2a0b      	cmp	r2, #11
 8008244:	d917      	bls.n	8008276 <_malloc_r+0xc2>
 8008246:	1961      	adds	r1, r4, r5
 8008248:	42a3      	cmp	r3, r4
 800824a:	6025      	str	r5, [r4, #0]
 800824c:	bf18      	it	ne
 800824e:	6059      	strne	r1, [r3, #4]
 8008250:	6863      	ldr	r3, [r4, #4]
 8008252:	bf08      	it	eq
 8008254:	f8c8 1000 	streq.w	r1, [r8]
 8008258:	5162      	str	r2, [r4, r5]
 800825a:	604b      	str	r3, [r1, #4]
 800825c:	4630      	mov	r0, r6
 800825e:	f000 f82f 	bl	80082c0 <__malloc_unlock>
 8008262:	f104 000b 	add.w	r0, r4, #11
 8008266:	1d23      	adds	r3, r4, #4
 8008268:	f020 0007 	bic.w	r0, r0, #7
 800826c:	1ac2      	subs	r2, r0, r3
 800826e:	bf1c      	itt	ne
 8008270:	1a1b      	subne	r3, r3, r0
 8008272:	50a3      	strne	r3, [r4, r2]
 8008274:	e7af      	b.n	80081d6 <_malloc_r+0x22>
 8008276:	6862      	ldr	r2, [r4, #4]
 8008278:	42a3      	cmp	r3, r4
 800827a:	bf0c      	ite	eq
 800827c:	f8c8 2000 	streq.w	r2, [r8]
 8008280:	605a      	strne	r2, [r3, #4]
 8008282:	e7eb      	b.n	800825c <_malloc_r+0xa8>
 8008284:	4623      	mov	r3, r4
 8008286:	6864      	ldr	r4, [r4, #4]
 8008288:	e7ae      	b.n	80081e8 <_malloc_r+0x34>
 800828a:	463c      	mov	r4, r7
 800828c:	687f      	ldr	r7, [r7, #4]
 800828e:	e7b6      	b.n	80081fe <_malloc_r+0x4a>
 8008290:	461a      	mov	r2, r3
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	42a3      	cmp	r3, r4
 8008296:	d1fb      	bne.n	8008290 <_malloc_r+0xdc>
 8008298:	2300      	movs	r3, #0
 800829a:	6053      	str	r3, [r2, #4]
 800829c:	e7de      	b.n	800825c <_malloc_r+0xa8>
 800829e:	230c      	movs	r3, #12
 80082a0:	6033      	str	r3, [r6, #0]
 80082a2:	4630      	mov	r0, r6
 80082a4:	f000 f80c 	bl	80082c0 <__malloc_unlock>
 80082a8:	e794      	b.n	80081d4 <_malloc_r+0x20>
 80082aa:	6005      	str	r5, [r0, #0]
 80082ac:	e7d6      	b.n	800825c <_malloc_r+0xa8>
 80082ae:	bf00      	nop
 80082b0:	200005f8 	.word	0x200005f8

080082b4 <__malloc_lock>:
 80082b4:	4801      	ldr	r0, [pc, #4]	@ (80082bc <__malloc_lock+0x8>)
 80082b6:	f000 b97e 	b.w	80085b6 <__retarget_lock_acquire_recursive>
 80082ba:	bf00      	nop
 80082bc:	20000738 	.word	0x20000738

080082c0 <__malloc_unlock>:
 80082c0:	4801      	ldr	r0, [pc, #4]	@ (80082c8 <__malloc_unlock+0x8>)
 80082c2:	f000 b979 	b.w	80085b8 <__retarget_lock_release_recursive>
 80082c6:	bf00      	nop
 80082c8:	20000738 	.word	0x20000738

080082cc <std>:
 80082cc:	2300      	movs	r3, #0
 80082ce:	b510      	push	{r4, lr}
 80082d0:	4604      	mov	r4, r0
 80082d2:	e9c0 3300 	strd	r3, r3, [r0]
 80082d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082da:	6083      	str	r3, [r0, #8]
 80082dc:	8181      	strh	r1, [r0, #12]
 80082de:	6643      	str	r3, [r0, #100]	@ 0x64
 80082e0:	81c2      	strh	r2, [r0, #14]
 80082e2:	6183      	str	r3, [r0, #24]
 80082e4:	4619      	mov	r1, r3
 80082e6:	2208      	movs	r2, #8
 80082e8:	305c      	adds	r0, #92	@ 0x5c
 80082ea:	f000 f921 	bl	8008530 <memset>
 80082ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008324 <std+0x58>)
 80082f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80082f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008328 <std+0x5c>)
 80082f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80082f6:	4b0d      	ldr	r3, [pc, #52]	@ (800832c <std+0x60>)
 80082f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80082fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008330 <std+0x64>)
 80082fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80082fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008334 <std+0x68>)
 8008300:	6224      	str	r4, [r4, #32]
 8008302:	429c      	cmp	r4, r3
 8008304:	d006      	beq.n	8008314 <std+0x48>
 8008306:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800830a:	4294      	cmp	r4, r2
 800830c:	d002      	beq.n	8008314 <std+0x48>
 800830e:	33d0      	adds	r3, #208	@ 0xd0
 8008310:	429c      	cmp	r4, r3
 8008312:	d105      	bne.n	8008320 <std+0x54>
 8008314:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800831c:	f000 b94a 	b.w	80085b4 <__retarget_lock_init_recursive>
 8008320:	bd10      	pop	{r4, pc}
 8008322:	bf00      	nop
 8008324:	08008d49 	.word	0x08008d49
 8008328:	08008d6b 	.word	0x08008d6b
 800832c:	08008da3 	.word	0x08008da3
 8008330:	08008dc7 	.word	0x08008dc7
 8008334:	200005fc 	.word	0x200005fc

08008338 <stdio_exit_handler>:
 8008338:	4a02      	ldr	r2, [pc, #8]	@ (8008344 <stdio_exit_handler+0xc>)
 800833a:	4903      	ldr	r1, [pc, #12]	@ (8008348 <stdio_exit_handler+0x10>)
 800833c:	4803      	ldr	r0, [pc, #12]	@ (800834c <stdio_exit_handler+0x14>)
 800833e:	f000 b869 	b.w	8008414 <_fwalk_sglue>
 8008342:	bf00      	nop
 8008344:	2000000c 	.word	0x2000000c
 8008348:	08008cf9 	.word	0x08008cf9
 800834c:	2000001c 	.word	0x2000001c

08008350 <cleanup_stdio>:
 8008350:	6841      	ldr	r1, [r0, #4]
 8008352:	4b0c      	ldr	r3, [pc, #48]	@ (8008384 <cleanup_stdio+0x34>)
 8008354:	4299      	cmp	r1, r3
 8008356:	b510      	push	{r4, lr}
 8008358:	4604      	mov	r4, r0
 800835a:	d001      	beq.n	8008360 <cleanup_stdio+0x10>
 800835c:	f000 fccc 	bl	8008cf8 <_fflush_r>
 8008360:	68a1      	ldr	r1, [r4, #8]
 8008362:	4b09      	ldr	r3, [pc, #36]	@ (8008388 <cleanup_stdio+0x38>)
 8008364:	4299      	cmp	r1, r3
 8008366:	d002      	beq.n	800836e <cleanup_stdio+0x1e>
 8008368:	4620      	mov	r0, r4
 800836a:	f000 fcc5 	bl	8008cf8 <_fflush_r>
 800836e:	68e1      	ldr	r1, [r4, #12]
 8008370:	4b06      	ldr	r3, [pc, #24]	@ (800838c <cleanup_stdio+0x3c>)
 8008372:	4299      	cmp	r1, r3
 8008374:	d004      	beq.n	8008380 <cleanup_stdio+0x30>
 8008376:	4620      	mov	r0, r4
 8008378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800837c:	f000 bcbc 	b.w	8008cf8 <_fflush_r>
 8008380:	bd10      	pop	{r4, pc}
 8008382:	bf00      	nop
 8008384:	200005fc 	.word	0x200005fc
 8008388:	20000664 	.word	0x20000664
 800838c:	200006cc 	.word	0x200006cc

08008390 <global_stdio_init.part.0>:
 8008390:	b510      	push	{r4, lr}
 8008392:	4b0b      	ldr	r3, [pc, #44]	@ (80083c0 <global_stdio_init.part.0+0x30>)
 8008394:	4c0b      	ldr	r4, [pc, #44]	@ (80083c4 <global_stdio_init.part.0+0x34>)
 8008396:	4a0c      	ldr	r2, [pc, #48]	@ (80083c8 <global_stdio_init.part.0+0x38>)
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	4620      	mov	r0, r4
 800839c:	2200      	movs	r2, #0
 800839e:	2104      	movs	r1, #4
 80083a0:	f7ff ff94 	bl	80082cc <std>
 80083a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80083a8:	2201      	movs	r2, #1
 80083aa:	2109      	movs	r1, #9
 80083ac:	f7ff ff8e 	bl	80082cc <std>
 80083b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80083b4:	2202      	movs	r2, #2
 80083b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083ba:	2112      	movs	r1, #18
 80083bc:	f7ff bf86 	b.w	80082cc <std>
 80083c0:	20000734 	.word	0x20000734
 80083c4:	200005fc 	.word	0x200005fc
 80083c8:	08008339 	.word	0x08008339

080083cc <__sfp_lock_acquire>:
 80083cc:	4801      	ldr	r0, [pc, #4]	@ (80083d4 <__sfp_lock_acquire+0x8>)
 80083ce:	f000 b8f2 	b.w	80085b6 <__retarget_lock_acquire_recursive>
 80083d2:	bf00      	nop
 80083d4:	20000739 	.word	0x20000739

080083d8 <__sfp_lock_release>:
 80083d8:	4801      	ldr	r0, [pc, #4]	@ (80083e0 <__sfp_lock_release+0x8>)
 80083da:	f000 b8ed 	b.w	80085b8 <__retarget_lock_release_recursive>
 80083de:	bf00      	nop
 80083e0:	20000739 	.word	0x20000739

080083e4 <__sinit>:
 80083e4:	b510      	push	{r4, lr}
 80083e6:	4604      	mov	r4, r0
 80083e8:	f7ff fff0 	bl	80083cc <__sfp_lock_acquire>
 80083ec:	6a23      	ldr	r3, [r4, #32]
 80083ee:	b11b      	cbz	r3, 80083f8 <__sinit+0x14>
 80083f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083f4:	f7ff bff0 	b.w	80083d8 <__sfp_lock_release>
 80083f8:	4b04      	ldr	r3, [pc, #16]	@ (800840c <__sinit+0x28>)
 80083fa:	6223      	str	r3, [r4, #32]
 80083fc:	4b04      	ldr	r3, [pc, #16]	@ (8008410 <__sinit+0x2c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1f5      	bne.n	80083f0 <__sinit+0xc>
 8008404:	f7ff ffc4 	bl	8008390 <global_stdio_init.part.0>
 8008408:	e7f2      	b.n	80083f0 <__sinit+0xc>
 800840a:	bf00      	nop
 800840c:	08008351 	.word	0x08008351
 8008410:	20000734 	.word	0x20000734

08008414 <_fwalk_sglue>:
 8008414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008418:	4607      	mov	r7, r0
 800841a:	4688      	mov	r8, r1
 800841c:	4614      	mov	r4, r2
 800841e:	2600      	movs	r6, #0
 8008420:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008424:	f1b9 0901 	subs.w	r9, r9, #1
 8008428:	d505      	bpl.n	8008436 <_fwalk_sglue+0x22>
 800842a:	6824      	ldr	r4, [r4, #0]
 800842c:	2c00      	cmp	r4, #0
 800842e:	d1f7      	bne.n	8008420 <_fwalk_sglue+0xc>
 8008430:	4630      	mov	r0, r6
 8008432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008436:	89ab      	ldrh	r3, [r5, #12]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d907      	bls.n	800844c <_fwalk_sglue+0x38>
 800843c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008440:	3301      	adds	r3, #1
 8008442:	d003      	beq.n	800844c <_fwalk_sglue+0x38>
 8008444:	4629      	mov	r1, r5
 8008446:	4638      	mov	r0, r7
 8008448:	47c0      	blx	r8
 800844a:	4306      	orrs	r6, r0
 800844c:	3568      	adds	r5, #104	@ 0x68
 800844e:	e7e9      	b.n	8008424 <_fwalk_sglue+0x10>

08008450 <iprintf>:
 8008450:	b40f      	push	{r0, r1, r2, r3}
 8008452:	b507      	push	{r0, r1, r2, lr}
 8008454:	4906      	ldr	r1, [pc, #24]	@ (8008470 <iprintf+0x20>)
 8008456:	ab04      	add	r3, sp, #16
 8008458:	6808      	ldr	r0, [r1, #0]
 800845a:	f853 2b04 	ldr.w	r2, [r3], #4
 800845e:	6881      	ldr	r1, [r0, #8]
 8008460:	9301      	str	r3, [sp, #4]
 8008462:	f000 f91f 	bl	80086a4 <_vfiprintf_r>
 8008466:	b003      	add	sp, #12
 8008468:	f85d eb04 	ldr.w	lr, [sp], #4
 800846c:	b004      	add	sp, #16
 800846e:	4770      	bx	lr
 8008470:	20000018 	.word	0x20000018

08008474 <_puts_r>:
 8008474:	6a03      	ldr	r3, [r0, #32]
 8008476:	b570      	push	{r4, r5, r6, lr}
 8008478:	6884      	ldr	r4, [r0, #8]
 800847a:	4605      	mov	r5, r0
 800847c:	460e      	mov	r6, r1
 800847e:	b90b      	cbnz	r3, 8008484 <_puts_r+0x10>
 8008480:	f7ff ffb0 	bl	80083e4 <__sinit>
 8008484:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008486:	07db      	lsls	r3, r3, #31
 8008488:	d405      	bmi.n	8008496 <_puts_r+0x22>
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	0598      	lsls	r0, r3, #22
 800848e:	d402      	bmi.n	8008496 <_puts_r+0x22>
 8008490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008492:	f000 f890 	bl	80085b6 <__retarget_lock_acquire_recursive>
 8008496:	89a3      	ldrh	r3, [r4, #12]
 8008498:	0719      	lsls	r1, r3, #28
 800849a:	d502      	bpl.n	80084a2 <_puts_r+0x2e>
 800849c:	6923      	ldr	r3, [r4, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d135      	bne.n	800850e <_puts_r+0x9a>
 80084a2:	4621      	mov	r1, r4
 80084a4:	4628      	mov	r0, r5
 80084a6:	f000 fcd1 	bl	8008e4c <__swsetup_r>
 80084aa:	b380      	cbz	r0, 800850e <_puts_r+0x9a>
 80084ac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80084b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084b2:	07da      	lsls	r2, r3, #31
 80084b4:	d405      	bmi.n	80084c2 <_puts_r+0x4e>
 80084b6:	89a3      	ldrh	r3, [r4, #12]
 80084b8:	059b      	lsls	r3, r3, #22
 80084ba:	d402      	bmi.n	80084c2 <_puts_r+0x4e>
 80084bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084be:	f000 f87b 	bl	80085b8 <__retarget_lock_release_recursive>
 80084c2:	4628      	mov	r0, r5
 80084c4:	bd70      	pop	{r4, r5, r6, pc}
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	da04      	bge.n	80084d4 <_puts_r+0x60>
 80084ca:	69a2      	ldr	r2, [r4, #24]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	dc17      	bgt.n	8008500 <_puts_r+0x8c>
 80084d0:	290a      	cmp	r1, #10
 80084d2:	d015      	beq.n	8008500 <_puts_r+0x8c>
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	6022      	str	r2, [r4, #0]
 80084da:	7019      	strb	r1, [r3, #0]
 80084dc:	68a3      	ldr	r3, [r4, #8]
 80084de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084e2:	3b01      	subs	r3, #1
 80084e4:	60a3      	str	r3, [r4, #8]
 80084e6:	2900      	cmp	r1, #0
 80084e8:	d1ed      	bne.n	80084c6 <_puts_r+0x52>
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	da11      	bge.n	8008512 <_puts_r+0x9e>
 80084ee:	4622      	mov	r2, r4
 80084f0:	210a      	movs	r1, #10
 80084f2:	4628      	mov	r0, r5
 80084f4:	f000 fc6b 	bl	8008dce <__swbuf_r>
 80084f8:	3001      	adds	r0, #1
 80084fa:	d0d7      	beq.n	80084ac <_puts_r+0x38>
 80084fc:	250a      	movs	r5, #10
 80084fe:	e7d7      	b.n	80084b0 <_puts_r+0x3c>
 8008500:	4622      	mov	r2, r4
 8008502:	4628      	mov	r0, r5
 8008504:	f000 fc63 	bl	8008dce <__swbuf_r>
 8008508:	3001      	adds	r0, #1
 800850a:	d1e7      	bne.n	80084dc <_puts_r+0x68>
 800850c:	e7ce      	b.n	80084ac <_puts_r+0x38>
 800850e:	3e01      	subs	r6, #1
 8008510:	e7e4      	b.n	80084dc <_puts_r+0x68>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	1c5a      	adds	r2, r3, #1
 8008516:	6022      	str	r2, [r4, #0]
 8008518:	220a      	movs	r2, #10
 800851a:	701a      	strb	r2, [r3, #0]
 800851c:	e7ee      	b.n	80084fc <_puts_r+0x88>
	...

08008520 <puts>:
 8008520:	4b02      	ldr	r3, [pc, #8]	@ (800852c <puts+0xc>)
 8008522:	4601      	mov	r1, r0
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	f7ff bfa5 	b.w	8008474 <_puts_r>
 800852a:	bf00      	nop
 800852c:	20000018 	.word	0x20000018

08008530 <memset>:
 8008530:	4402      	add	r2, r0
 8008532:	4603      	mov	r3, r0
 8008534:	4293      	cmp	r3, r2
 8008536:	d100      	bne.n	800853a <memset+0xa>
 8008538:	4770      	bx	lr
 800853a:	f803 1b01 	strb.w	r1, [r3], #1
 800853e:	e7f9      	b.n	8008534 <memset+0x4>

08008540 <_sbrk_r>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	4d06      	ldr	r5, [pc, #24]	@ (800855c <_sbrk_r+0x1c>)
 8008544:	2300      	movs	r3, #0
 8008546:	4604      	mov	r4, r0
 8008548:	4608      	mov	r0, r1
 800854a:	602b      	str	r3, [r5, #0]
 800854c:	f7f8 ff44 	bl	80013d8 <_sbrk>
 8008550:	1c43      	adds	r3, r0, #1
 8008552:	d102      	bne.n	800855a <_sbrk_r+0x1a>
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	b103      	cbz	r3, 800855a <_sbrk_r+0x1a>
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	bd38      	pop	{r3, r4, r5, pc}
 800855c:	2000073c 	.word	0x2000073c

08008560 <__errno>:
 8008560:	4b01      	ldr	r3, [pc, #4]	@ (8008568 <__errno+0x8>)
 8008562:	6818      	ldr	r0, [r3, #0]
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	20000018 	.word	0x20000018

0800856c <__libc_init_array>:
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	4d0d      	ldr	r5, [pc, #52]	@ (80085a4 <__libc_init_array+0x38>)
 8008570:	4c0d      	ldr	r4, [pc, #52]	@ (80085a8 <__libc_init_array+0x3c>)
 8008572:	1b64      	subs	r4, r4, r5
 8008574:	10a4      	asrs	r4, r4, #2
 8008576:	2600      	movs	r6, #0
 8008578:	42a6      	cmp	r6, r4
 800857a:	d109      	bne.n	8008590 <__libc_init_array+0x24>
 800857c:	4d0b      	ldr	r5, [pc, #44]	@ (80085ac <__libc_init_array+0x40>)
 800857e:	4c0c      	ldr	r4, [pc, #48]	@ (80085b0 <__libc_init_array+0x44>)
 8008580:	f000 fd84 	bl	800908c <_init>
 8008584:	1b64      	subs	r4, r4, r5
 8008586:	10a4      	asrs	r4, r4, #2
 8008588:	2600      	movs	r6, #0
 800858a:	42a6      	cmp	r6, r4
 800858c:	d105      	bne.n	800859a <__libc_init_array+0x2e>
 800858e:	bd70      	pop	{r4, r5, r6, pc}
 8008590:	f855 3b04 	ldr.w	r3, [r5], #4
 8008594:	4798      	blx	r3
 8008596:	3601      	adds	r6, #1
 8008598:	e7ee      	b.n	8008578 <__libc_init_array+0xc>
 800859a:	f855 3b04 	ldr.w	r3, [r5], #4
 800859e:	4798      	blx	r3
 80085a0:	3601      	adds	r6, #1
 80085a2:	e7f2      	b.n	800858a <__libc_init_array+0x1e>
 80085a4:	08009238 	.word	0x08009238
 80085a8:	08009238 	.word	0x08009238
 80085ac:	08009238 	.word	0x08009238
 80085b0:	0800923c 	.word	0x0800923c

080085b4 <__retarget_lock_init_recursive>:
 80085b4:	4770      	bx	lr

080085b6 <__retarget_lock_acquire_recursive>:
 80085b6:	4770      	bx	lr

080085b8 <__retarget_lock_release_recursive>:
 80085b8:	4770      	bx	lr
	...

080085bc <_free_r>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	4605      	mov	r5, r0
 80085c0:	2900      	cmp	r1, #0
 80085c2:	d041      	beq.n	8008648 <_free_r+0x8c>
 80085c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085c8:	1f0c      	subs	r4, r1, #4
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	bfb8      	it	lt
 80085ce:	18e4      	addlt	r4, r4, r3
 80085d0:	f7ff fe70 	bl	80082b4 <__malloc_lock>
 80085d4:	4a1d      	ldr	r2, [pc, #116]	@ (800864c <_free_r+0x90>)
 80085d6:	6813      	ldr	r3, [r2, #0]
 80085d8:	b933      	cbnz	r3, 80085e8 <_free_r+0x2c>
 80085da:	6063      	str	r3, [r4, #4]
 80085dc:	6014      	str	r4, [r2, #0]
 80085de:	4628      	mov	r0, r5
 80085e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085e4:	f7ff be6c 	b.w	80082c0 <__malloc_unlock>
 80085e8:	42a3      	cmp	r3, r4
 80085ea:	d908      	bls.n	80085fe <_free_r+0x42>
 80085ec:	6820      	ldr	r0, [r4, #0]
 80085ee:	1821      	adds	r1, r4, r0
 80085f0:	428b      	cmp	r3, r1
 80085f2:	bf01      	itttt	eq
 80085f4:	6819      	ldreq	r1, [r3, #0]
 80085f6:	685b      	ldreq	r3, [r3, #4]
 80085f8:	1809      	addeq	r1, r1, r0
 80085fa:	6021      	streq	r1, [r4, #0]
 80085fc:	e7ed      	b.n	80085da <_free_r+0x1e>
 80085fe:	461a      	mov	r2, r3
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	b10b      	cbz	r3, 8008608 <_free_r+0x4c>
 8008604:	42a3      	cmp	r3, r4
 8008606:	d9fa      	bls.n	80085fe <_free_r+0x42>
 8008608:	6811      	ldr	r1, [r2, #0]
 800860a:	1850      	adds	r0, r2, r1
 800860c:	42a0      	cmp	r0, r4
 800860e:	d10b      	bne.n	8008628 <_free_r+0x6c>
 8008610:	6820      	ldr	r0, [r4, #0]
 8008612:	4401      	add	r1, r0
 8008614:	1850      	adds	r0, r2, r1
 8008616:	4283      	cmp	r3, r0
 8008618:	6011      	str	r1, [r2, #0]
 800861a:	d1e0      	bne.n	80085de <_free_r+0x22>
 800861c:	6818      	ldr	r0, [r3, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	6053      	str	r3, [r2, #4]
 8008622:	4408      	add	r0, r1
 8008624:	6010      	str	r0, [r2, #0]
 8008626:	e7da      	b.n	80085de <_free_r+0x22>
 8008628:	d902      	bls.n	8008630 <_free_r+0x74>
 800862a:	230c      	movs	r3, #12
 800862c:	602b      	str	r3, [r5, #0]
 800862e:	e7d6      	b.n	80085de <_free_r+0x22>
 8008630:	6820      	ldr	r0, [r4, #0]
 8008632:	1821      	adds	r1, r4, r0
 8008634:	428b      	cmp	r3, r1
 8008636:	bf04      	itt	eq
 8008638:	6819      	ldreq	r1, [r3, #0]
 800863a:	685b      	ldreq	r3, [r3, #4]
 800863c:	6063      	str	r3, [r4, #4]
 800863e:	bf04      	itt	eq
 8008640:	1809      	addeq	r1, r1, r0
 8008642:	6021      	streq	r1, [r4, #0]
 8008644:	6054      	str	r4, [r2, #4]
 8008646:	e7ca      	b.n	80085de <_free_r+0x22>
 8008648:	bd38      	pop	{r3, r4, r5, pc}
 800864a:	bf00      	nop
 800864c:	200005f8 	.word	0x200005f8

08008650 <__sfputc_r>:
 8008650:	6893      	ldr	r3, [r2, #8]
 8008652:	3b01      	subs	r3, #1
 8008654:	2b00      	cmp	r3, #0
 8008656:	b410      	push	{r4}
 8008658:	6093      	str	r3, [r2, #8]
 800865a:	da08      	bge.n	800866e <__sfputc_r+0x1e>
 800865c:	6994      	ldr	r4, [r2, #24]
 800865e:	42a3      	cmp	r3, r4
 8008660:	db01      	blt.n	8008666 <__sfputc_r+0x16>
 8008662:	290a      	cmp	r1, #10
 8008664:	d103      	bne.n	800866e <__sfputc_r+0x1e>
 8008666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800866a:	f000 bbb0 	b.w	8008dce <__swbuf_r>
 800866e:	6813      	ldr	r3, [r2, #0]
 8008670:	1c58      	adds	r0, r3, #1
 8008672:	6010      	str	r0, [r2, #0]
 8008674:	7019      	strb	r1, [r3, #0]
 8008676:	4608      	mov	r0, r1
 8008678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800867c:	4770      	bx	lr

0800867e <__sfputs_r>:
 800867e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008680:	4606      	mov	r6, r0
 8008682:	460f      	mov	r7, r1
 8008684:	4614      	mov	r4, r2
 8008686:	18d5      	adds	r5, r2, r3
 8008688:	42ac      	cmp	r4, r5
 800868a:	d101      	bne.n	8008690 <__sfputs_r+0x12>
 800868c:	2000      	movs	r0, #0
 800868e:	e007      	b.n	80086a0 <__sfputs_r+0x22>
 8008690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008694:	463a      	mov	r2, r7
 8008696:	4630      	mov	r0, r6
 8008698:	f7ff ffda 	bl	8008650 <__sfputc_r>
 800869c:	1c43      	adds	r3, r0, #1
 800869e:	d1f3      	bne.n	8008688 <__sfputs_r+0xa>
 80086a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086a4 <_vfiprintf_r>:
 80086a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a8:	460d      	mov	r5, r1
 80086aa:	b09d      	sub	sp, #116	@ 0x74
 80086ac:	4614      	mov	r4, r2
 80086ae:	4698      	mov	r8, r3
 80086b0:	4606      	mov	r6, r0
 80086b2:	b118      	cbz	r0, 80086bc <_vfiprintf_r+0x18>
 80086b4:	6a03      	ldr	r3, [r0, #32]
 80086b6:	b90b      	cbnz	r3, 80086bc <_vfiprintf_r+0x18>
 80086b8:	f7ff fe94 	bl	80083e4 <__sinit>
 80086bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086be:	07d9      	lsls	r1, r3, #31
 80086c0:	d405      	bmi.n	80086ce <_vfiprintf_r+0x2a>
 80086c2:	89ab      	ldrh	r3, [r5, #12]
 80086c4:	059a      	lsls	r2, r3, #22
 80086c6:	d402      	bmi.n	80086ce <_vfiprintf_r+0x2a>
 80086c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086ca:	f7ff ff74 	bl	80085b6 <__retarget_lock_acquire_recursive>
 80086ce:	89ab      	ldrh	r3, [r5, #12]
 80086d0:	071b      	lsls	r3, r3, #28
 80086d2:	d501      	bpl.n	80086d8 <_vfiprintf_r+0x34>
 80086d4:	692b      	ldr	r3, [r5, #16]
 80086d6:	b99b      	cbnz	r3, 8008700 <_vfiprintf_r+0x5c>
 80086d8:	4629      	mov	r1, r5
 80086da:	4630      	mov	r0, r6
 80086dc:	f000 fbb6 	bl	8008e4c <__swsetup_r>
 80086e0:	b170      	cbz	r0, 8008700 <_vfiprintf_r+0x5c>
 80086e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086e4:	07dc      	lsls	r4, r3, #31
 80086e6:	d504      	bpl.n	80086f2 <_vfiprintf_r+0x4e>
 80086e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086ec:	b01d      	add	sp, #116	@ 0x74
 80086ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f2:	89ab      	ldrh	r3, [r5, #12]
 80086f4:	0598      	lsls	r0, r3, #22
 80086f6:	d4f7      	bmi.n	80086e8 <_vfiprintf_r+0x44>
 80086f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086fa:	f7ff ff5d 	bl	80085b8 <__retarget_lock_release_recursive>
 80086fe:	e7f3      	b.n	80086e8 <_vfiprintf_r+0x44>
 8008700:	2300      	movs	r3, #0
 8008702:	9309      	str	r3, [sp, #36]	@ 0x24
 8008704:	2320      	movs	r3, #32
 8008706:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800870a:	f8cd 800c 	str.w	r8, [sp, #12]
 800870e:	2330      	movs	r3, #48	@ 0x30
 8008710:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80088c0 <_vfiprintf_r+0x21c>
 8008714:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008718:	f04f 0901 	mov.w	r9, #1
 800871c:	4623      	mov	r3, r4
 800871e:	469a      	mov	sl, r3
 8008720:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008724:	b10a      	cbz	r2, 800872a <_vfiprintf_r+0x86>
 8008726:	2a25      	cmp	r2, #37	@ 0x25
 8008728:	d1f9      	bne.n	800871e <_vfiprintf_r+0x7a>
 800872a:	ebba 0b04 	subs.w	fp, sl, r4
 800872e:	d00b      	beq.n	8008748 <_vfiprintf_r+0xa4>
 8008730:	465b      	mov	r3, fp
 8008732:	4622      	mov	r2, r4
 8008734:	4629      	mov	r1, r5
 8008736:	4630      	mov	r0, r6
 8008738:	f7ff ffa1 	bl	800867e <__sfputs_r>
 800873c:	3001      	adds	r0, #1
 800873e:	f000 80a7 	beq.w	8008890 <_vfiprintf_r+0x1ec>
 8008742:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008744:	445a      	add	r2, fp
 8008746:	9209      	str	r2, [sp, #36]	@ 0x24
 8008748:	f89a 3000 	ldrb.w	r3, [sl]
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 809f 	beq.w	8008890 <_vfiprintf_r+0x1ec>
 8008752:	2300      	movs	r3, #0
 8008754:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800875c:	f10a 0a01 	add.w	sl, sl, #1
 8008760:	9304      	str	r3, [sp, #16]
 8008762:	9307      	str	r3, [sp, #28]
 8008764:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008768:	931a      	str	r3, [sp, #104]	@ 0x68
 800876a:	4654      	mov	r4, sl
 800876c:	2205      	movs	r2, #5
 800876e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008772:	4853      	ldr	r0, [pc, #332]	@ (80088c0 <_vfiprintf_r+0x21c>)
 8008774:	f7f7 fd54 	bl	8000220 <memchr>
 8008778:	9a04      	ldr	r2, [sp, #16]
 800877a:	b9d8      	cbnz	r0, 80087b4 <_vfiprintf_r+0x110>
 800877c:	06d1      	lsls	r1, r2, #27
 800877e:	bf44      	itt	mi
 8008780:	2320      	movmi	r3, #32
 8008782:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008786:	0713      	lsls	r3, r2, #28
 8008788:	bf44      	itt	mi
 800878a:	232b      	movmi	r3, #43	@ 0x2b
 800878c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008790:	f89a 3000 	ldrb.w	r3, [sl]
 8008794:	2b2a      	cmp	r3, #42	@ 0x2a
 8008796:	d015      	beq.n	80087c4 <_vfiprintf_r+0x120>
 8008798:	9a07      	ldr	r2, [sp, #28]
 800879a:	4654      	mov	r4, sl
 800879c:	2000      	movs	r0, #0
 800879e:	f04f 0c0a 	mov.w	ip, #10
 80087a2:	4621      	mov	r1, r4
 80087a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087a8:	3b30      	subs	r3, #48	@ 0x30
 80087aa:	2b09      	cmp	r3, #9
 80087ac:	d94b      	bls.n	8008846 <_vfiprintf_r+0x1a2>
 80087ae:	b1b0      	cbz	r0, 80087de <_vfiprintf_r+0x13a>
 80087b0:	9207      	str	r2, [sp, #28]
 80087b2:	e014      	b.n	80087de <_vfiprintf_r+0x13a>
 80087b4:	eba0 0308 	sub.w	r3, r0, r8
 80087b8:	fa09 f303 	lsl.w	r3, r9, r3
 80087bc:	4313      	orrs	r3, r2
 80087be:	9304      	str	r3, [sp, #16]
 80087c0:	46a2      	mov	sl, r4
 80087c2:	e7d2      	b.n	800876a <_vfiprintf_r+0xc6>
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	1d19      	adds	r1, r3, #4
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	9103      	str	r1, [sp, #12]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	bfbb      	ittet	lt
 80087d0:	425b      	neglt	r3, r3
 80087d2:	f042 0202 	orrlt.w	r2, r2, #2
 80087d6:	9307      	strge	r3, [sp, #28]
 80087d8:	9307      	strlt	r3, [sp, #28]
 80087da:	bfb8      	it	lt
 80087dc:	9204      	strlt	r2, [sp, #16]
 80087de:	7823      	ldrb	r3, [r4, #0]
 80087e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80087e2:	d10a      	bne.n	80087fa <_vfiprintf_r+0x156>
 80087e4:	7863      	ldrb	r3, [r4, #1]
 80087e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80087e8:	d132      	bne.n	8008850 <_vfiprintf_r+0x1ac>
 80087ea:	9b03      	ldr	r3, [sp, #12]
 80087ec:	1d1a      	adds	r2, r3, #4
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	9203      	str	r2, [sp, #12]
 80087f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087f6:	3402      	adds	r4, #2
 80087f8:	9305      	str	r3, [sp, #20]
 80087fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80088d0 <_vfiprintf_r+0x22c>
 80087fe:	7821      	ldrb	r1, [r4, #0]
 8008800:	2203      	movs	r2, #3
 8008802:	4650      	mov	r0, sl
 8008804:	f7f7 fd0c 	bl	8000220 <memchr>
 8008808:	b138      	cbz	r0, 800881a <_vfiprintf_r+0x176>
 800880a:	9b04      	ldr	r3, [sp, #16]
 800880c:	eba0 000a 	sub.w	r0, r0, sl
 8008810:	2240      	movs	r2, #64	@ 0x40
 8008812:	4082      	lsls	r2, r0
 8008814:	4313      	orrs	r3, r2
 8008816:	3401      	adds	r4, #1
 8008818:	9304      	str	r3, [sp, #16]
 800881a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800881e:	4829      	ldr	r0, [pc, #164]	@ (80088c4 <_vfiprintf_r+0x220>)
 8008820:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008824:	2206      	movs	r2, #6
 8008826:	f7f7 fcfb 	bl	8000220 <memchr>
 800882a:	2800      	cmp	r0, #0
 800882c:	d03f      	beq.n	80088ae <_vfiprintf_r+0x20a>
 800882e:	4b26      	ldr	r3, [pc, #152]	@ (80088c8 <_vfiprintf_r+0x224>)
 8008830:	bb1b      	cbnz	r3, 800887a <_vfiprintf_r+0x1d6>
 8008832:	9b03      	ldr	r3, [sp, #12]
 8008834:	3307      	adds	r3, #7
 8008836:	f023 0307 	bic.w	r3, r3, #7
 800883a:	3308      	adds	r3, #8
 800883c:	9303      	str	r3, [sp, #12]
 800883e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008840:	443b      	add	r3, r7
 8008842:	9309      	str	r3, [sp, #36]	@ 0x24
 8008844:	e76a      	b.n	800871c <_vfiprintf_r+0x78>
 8008846:	fb0c 3202 	mla	r2, ip, r2, r3
 800884a:	460c      	mov	r4, r1
 800884c:	2001      	movs	r0, #1
 800884e:	e7a8      	b.n	80087a2 <_vfiprintf_r+0xfe>
 8008850:	2300      	movs	r3, #0
 8008852:	3401      	adds	r4, #1
 8008854:	9305      	str	r3, [sp, #20]
 8008856:	4619      	mov	r1, r3
 8008858:	f04f 0c0a 	mov.w	ip, #10
 800885c:	4620      	mov	r0, r4
 800885e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008862:	3a30      	subs	r2, #48	@ 0x30
 8008864:	2a09      	cmp	r2, #9
 8008866:	d903      	bls.n	8008870 <_vfiprintf_r+0x1cc>
 8008868:	2b00      	cmp	r3, #0
 800886a:	d0c6      	beq.n	80087fa <_vfiprintf_r+0x156>
 800886c:	9105      	str	r1, [sp, #20]
 800886e:	e7c4      	b.n	80087fa <_vfiprintf_r+0x156>
 8008870:	fb0c 2101 	mla	r1, ip, r1, r2
 8008874:	4604      	mov	r4, r0
 8008876:	2301      	movs	r3, #1
 8008878:	e7f0      	b.n	800885c <_vfiprintf_r+0x1b8>
 800887a:	ab03      	add	r3, sp, #12
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	462a      	mov	r2, r5
 8008880:	4b12      	ldr	r3, [pc, #72]	@ (80088cc <_vfiprintf_r+0x228>)
 8008882:	a904      	add	r1, sp, #16
 8008884:	4630      	mov	r0, r6
 8008886:	f3af 8000 	nop.w
 800888a:	4607      	mov	r7, r0
 800888c:	1c78      	adds	r0, r7, #1
 800888e:	d1d6      	bne.n	800883e <_vfiprintf_r+0x19a>
 8008890:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008892:	07d9      	lsls	r1, r3, #31
 8008894:	d405      	bmi.n	80088a2 <_vfiprintf_r+0x1fe>
 8008896:	89ab      	ldrh	r3, [r5, #12]
 8008898:	059a      	lsls	r2, r3, #22
 800889a:	d402      	bmi.n	80088a2 <_vfiprintf_r+0x1fe>
 800889c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800889e:	f7ff fe8b 	bl	80085b8 <__retarget_lock_release_recursive>
 80088a2:	89ab      	ldrh	r3, [r5, #12]
 80088a4:	065b      	lsls	r3, r3, #25
 80088a6:	f53f af1f 	bmi.w	80086e8 <_vfiprintf_r+0x44>
 80088aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088ac:	e71e      	b.n	80086ec <_vfiprintf_r+0x48>
 80088ae:	ab03      	add	r3, sp, #12
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	462a      	mov	r2, r5
 80088b4:	4b05      	ldr	r3, [pc, #20]	@ (80088cc <_vfiprintf_r+0x228>)
 80088b6:	a904      	add	r1, sp, #16
 80088b8:	4630      	mov	r0, r6
 80088ba:	f000 f879 	bl	80089b0 <_printf_i>
 80088be:	e7e4      	b.n	800888a <_vfiprintf_r+0x1e6>
 80088c0:	080091fc 	.word	0x080091fc
 80088c4:	08009206 	.word	0x08009206
 80088c8:	00000000 	.word	0x00000000
 80088cc:	0800867f 	.word	0x0800867f
 80088d0:	08009202 	.word	0x08009202

080088d4 <_printf_common>:
 80088d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088d8:	4616      	mov	r6, r2
 80088da:	4698      	mov	r8, r3
 80088dc:	688a      	ldr	r2, [r1, #8]
 80088de:	690b      	ldr	r3, [r1, #16]
 80088e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088e4:	4293      	cmp	r3, r2
 80088e6:	bfb8      	it	lt
 80088e8:	4613      	movlt	r3, r2
 80088ea:	6033      	str	r3, [r6, #0]
 80088ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088f0:	4607      	mov	r7, r0
 80088f2:	460c      	mov	r4, r1
 80088f4:	b10a      	cbz	r2, 80088fa <_printf_common+0x26>
 80088f6:	3301      	adds	r3, #1
 80088f8:	6033      	str	r3, [r6, #0]
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	0699      	lsls	r1, r3, #26
 80088fe:	bf42      	ittt	mi
 8008900:	6833      	ldrmi	r3, [r6, #0]
 8008902:	3302      	addmi	r3, #2
 8008904:	6033      	strmi	r3, [r6, #0]
 8008906:	6825      	ldr	r5, [r4, #0]
 8008908:	f015 0506 	ands.w	r5, r5, #6
 800890c:	d106      	bne.n	800891c <_printf_common+0x48>
 800890e:	f104 0a19 	add.w	sl, r4, #25
 8008912:	68e3      	ldr	r3, [r4, #12]
 8008914:	6832      	ldr	r2, [r6, #0]
 8008916:	1a9b      	subs	r3, r3, r2
 8008918:	42ab      	cmp	r3, r5
 800891a:	dc26      	bgt.n	800896a <_printf_common+0x96>
 800891c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008920:	6822      	ldr	r2, [r4, #0]
 8008922:	3b00      	subs	r3, #0
 8008924:	bf18      	it	ne
 8008926:	2301      	movne	r3, #1
 8008928:	0692      	lsls	r2, r2, #26
 800892a:	d42b      	bmi.n	8008984 <_printf_common+0xb0>
 800892c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008930:	4641      	mov	r1, r8
 8008932:	4638      	mov	r0, r7
 8008934:	47c8      	blx	r9
 8008936:	3001      	adds	r0, #1
 8008938:	d01e      	beq.n	8008978 <_printf_common+0xa4>
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	6922      	ldr	r2, [r4, #16]
 800893e:	f003 0306 	and.w	r3, r3, #6
 8008942:	2b04      	cmp	r3, #4
 8008944:	bf02      	ittt	eq
 8008946:	68e5      	ldreq	r5, [r4, #12]
 8008948:	6833      	ldreq	r3, [r6, #0]
 800894a:	1aed      	subeq	r5, r5, r3
 800894c:	68a3      	ldr	r3, [r4, #8]
 800894e:	bf0c      	ite	eq
 8008950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008954:	2500      	movne	r5, #0
 8008956:	4293      	cmp	r3, r2
 8008958:	bfc4      	itt	gt
 800895a:	1a9b      	subgt	r3, r3, r2
 800895c:	18ed      	addgt	r5, r5, r3
 800895e:	2600      	movs	r6, #0
 8008960:	341a      	adds	r4, #26
 8008962:	42b5      	cmp	r5, r6
 8008964:	d11a      	bne.n	800899c <_printf_common+0xc8>
 8008966:	2000      	movs	r0, #0
 8008968:	e008      	b.n	800897c <_printf_common+0xa8>
 800896a:	2301      	movs	r3, #1
 800896c:	4652      	mov	r2, sl
 800896e:	4641      	mov	r1, r8
 8008970:	4638      	mov	r0, r7
 8008972:	47c8      	blx	r9
 8008974:	3001      	adds	r0, #1
 8008976:	d103      	bne.n	8008980 <_printf_common+0xac>
 8008978:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800897c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008980:	3501      	adds	r5, #1
 8008982:	e7c6      	b.n	8008912 <_printf_common+0x3e>
 8008984:	18e1      	adds	r1, r4, r3
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	2030      	movs	r0, #48	@ 0x30
 800898a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800898e:	4422      	add	r2, r4
 8008990:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008994:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008998:	3302      	adds	r3, #2
 800899a:	e7c7      	b.n	800892c <_printf_common+0x58>
 800899c:	2301      	movs	r3, #1
 800899e:	4622      	mov	r2, r4
 80089a0:	4641      	mov	r1, r8
 80089a2:	4638      	mov	r0, r7
 80089a4:	47c8      	blx	r9
 80089a6:	3001      	adds	r0, #1
 80089a8:	d0e6      	beq.n	8008978 <_printf_common+0xa4>
 80089aa:	3601      	adds	r6, #1
 80089ac:	e7d9      	b.n	8008962 <_printf_common+0x8e>
	...

080089b0 <_printf_i>:
 80089b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089b4:	7e0f      	ldrb	r7, [r1, #24]
 80089b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089b8:	2f78      	cmp	r7, #120	@ 0x78
 80089ba:	4691      	mov	r9, r2
 80089bc:	4680      	mov	r8, r0
 80089be:	460c      	mov	r4, r1
 80089c0:	469a      	mov	sl, r3
 80089c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80089c6:	d807      	bhi.n	80089d8 <_printf_i+0x28>
 80089c8:	2f62      	cmp	r7, #98	@ 0x62
 80089ca:	d80a      	bhi.n	80089e2 <_printf_i+0x32>
 80089cc:	2f00      	cmp	r7, #0
 80089ce:	f000 80d2 	beq.w	8008b76 <_printf_i+0x1c6>
 80089d2:	2f58      	cmp	r7, #88	@ 0x58
 80089d4:	f000 80b9 	beq.w	8008b4a <_printf_i+0x19a>
 80089d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089e0:	e03a      	b.n	8008a58 <_printf_i+0xa8>
 80089e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089e6:	2b15      	cmp	r3, #21
 80089e8:	d8f6      	bhi.n	80089d8 <_printf_i+0x28>
 80089ea:	a101      	add	r1, pc, #4	@ (adr r1, 80089f0 <_printf_i+0x40>)
 80089ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089f0:	08008a49 	.word	0x08008a49
 80089f4:	08008a5d 	.word	0x08008a5d
 80089f8:	080089d9 	.word	0x080089d9
 80089fc:	080089d9 	.word	0x080089d9
 8008a00:	080089d9 	.word	0x080089d9
 8008a04:	080089d9 	.word	0x080089d9
 8008a08:	08008a5d 	.word	0x08008a5d
 8008a0c:	080089d9 	.word	0x080089d9
 8008a10:	080089d9 	.word	0x080089d9
 8008a14:	080089d9 	.word	0x080089d9
 8008a18:	080089d9 	.word	0x080089d9
 8008a1c:	08008b5d 	.word	0x08008b5d
 8008a20:	08008a87 	.word	0x08008a87
 8008a24:	08008b17 	.word	0x08008b17
 8008a28:	080089d9 	.word	0x080089d9
 8008a2c:	080089d9 	.word	0x080089d9
 8008a30:	08008b7f 	.word	0x08008b7f
 8008a34:	080089d9 	.word	0x080089d9
 8008a38:	08008a87 	.word	0x08008a87
 8008a3c:	080089d9 	.word	0x080089d9
 8008a40:	080089d9 	.word	0x080089d9
 8008a44:	08008b1f 	.word	0x08008b1f
 8008a48:	6833      	ldr	r3, [r6, #0]
 8008a4a:	1d1a      	adds	r2, r3, #4
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	6032      	str	r2, [r6, #0]
 8008a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e09d      	b.n	8008b98 <_printf_i+0x1e8>
 8008a5c:	6833      	ldr	r3, [r6, #0]
 8008a5e:	6820      	ldr	r0, [r4, #0]
 8008a60:	1d19      	adds	r1, r3, #4
 8008a62:	6031      	str	r1, [r6, #0]
 8008a64:	0606      	lsls	r6, r0, #24
 8008a66:	d501      	bpl.n	8008a6c <_printf_i+0xbc>
 8008a68:	681d      	ldr	r5, [r3, #0]
 8008a6a:	e003      	b.n	8008a74 <_printf_i+0xc4>
 8008a6c:	0645      	lsls	r5, r0, #25
 8008a6e:	d5fb      	bpl.n	8008a68 <_printf_i+0xb8>
 8008a70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a74:	2d00      	cmp	r5, #0
 8008a76:	da03      	bge.n	8008a80 <_printf_i+0xd0>
 8008a78:	232d      	movs	r3, #45	@ 0x2d
 8008a7a:	426d      	negs	r5, r5
 8008a7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a80:	4859      	ldr	r0, [pc, #356]	@ (8008be8 <_printf_i+0x238>)
 8008a82:	230a      	movs	r3, #10
 8008a84:	e011      	b.n	8008aaa <_printf_i+0xfa>
 8008a86:	6821      	ldr	r1, [r4, #0]
 8008a88:	6833      	ldr	r3, [r6, #0]
 8008a8a:	0608      	lsls	r0, r1, #24
 8008a8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a90:	d402      	bmi.n	8008a98 <_printf_i+0xe8>
 8008a92:	0649      	lsls	r1, r1, #25
 8008a94:	bf48      	it	mi
 8008a96:	b2ad      	uxthmi	r5, r5
 8008a98:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a9a:	4853      	ldr	r0, [pc, #332]	@ (8008be8 <_printf_i+0x238>)
 8008a9c:	6033      	str	r3, [r6, #0]
 8008a9e:	bf14      	ite	ne
 8008aa0:	230a      	movne	r3, #10
 8008aa2:	2308      	moveq	r3, #8
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008aaa:	6866      	ldr	r6, [r4, #4]
 8008aac:	60a6      	str	r6, [r4, #8]
 8008aae:	2e00      	cmp	r6, #0
 8008ab0:	bfa2      	ittt	ge
 8008ab2:	6821      	ldrge	r1, [r4, #0]
 8008ab4:	f021 0104 	bicge.w	r1, r1, #4
 8008ab8:	6021      	strge	r1, [r4, #0]
 8008aba:	b90d      	cbnz	r5, 8008ac0 <_printf_i+0x110>
 8008abc:	2e00      	cmp	r6, #0
 8008abe:	d04b      	beq.n	8008b58 <_printf_i+0x1a8>
 8008ac0:	4616      	mov	r6, r2
 8008ac2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ac6:	fb03 5711 	mls	r7, r3, r1, r5
 8008aca:	5dc7      	ldrb	r7, [r0, r7]
 8008acc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ad0:	462f      	mov	r7, r5
 8008ad2:	42bb      	cmp	r3, r7
 8008ad4:	460d      	mov	r5, r1
 8008ad6:	d9f4      	bls.n	8008ac2 <_printf_i+0x112>
 8008ad8:	2b08      	cmp	r3, #8
 8008ada:	d10b      	bne.n	8008af4 <_printf_i+0x144>
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	07df      	lsls	r7, r3, #31
 8008ae0:	d508      	bpl.n	8008af4 <_printf_i+0x144>
 8008ae2:	6923      	ldr	r3, [r4, #16]
 8008ae4:	6861      	ldr	r1, [r4, #4]
 8008ae6:	4299      	cmp	r1, r3
 8008ae8:	bfde      	ittt	le
 8008aea:	2330      	movle	r3, #48	@ 0x30
 8008aec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008af0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008af4:	1b92      	subs	r2, r2, r6
 8008af6:	6122      	str	r2, [r4, #16]
 8008af8:	f8cd a000 	str.w	sl, [sp]
 8008afc:	464b      	mov	r3, r9
 8008afe:	aa03      	add	r2, sp, #12
 8008b00:	4621      	mov	r1, r4
 8008b02:	4640      	mov	r0, r8
 8008b04:	f7ff fee6 	bl	80088d4 <_printf_common>
 8008b08:	3001      	adds	r0, #1
 8008b0a:	d14a      	bne.n	8008ba2 <_printf_i+0x1f2>
 8008b0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b10:	b004      	add	sp, #16
 8008b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	f043 0320 	orr.w	r3, r3, #32
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	4833      	ldr	r0, [pc, #204]	@ (8008bec <_printf_i+0x23c>)
 8008b20:	2778      	movs	r7, #120	@ 0x78
 8008b22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	6831      	ldr	r1, [r6, #0]
 8008b2a:	061f      	lsls	r7, r3, #24
 8008b2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b30:	d402      	bmi.n	8008b38 <_printf_i+0x188>
 8008b32:	065f      	lsls	r7, r3, #25
 8008b34:	bf48      	it	mi
 8008b36:	b2ad      	uxthmi	r5, r5
 8008b38:	6031      	str	r1, [r6, #0]
 8008b3a:	07d9      	lsls	r1, r3, #31
 8008b3c:	bf44      	itt	mi
 8008b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8008b42:	6023      	strmi	r3, [r4, #0]
 8008b44:	b11d      	cbz	r5, 8008b4e <_printf_i+0x19e>
 8008b46:	2310      	movs	r3, #16
 8008b48:	e7ac      	b.n	8008aa4 <_printf_i+0xf4>
 8008b4a:	4827      	ldr	r0, [pc, #156]	@ (8008be8 <_printf_i+0x238>)
 8008b4c:	e7e9      	b.n	8008b22 <_printf_i+0x172>
 8008b4e:	6823      	ldr	r3, [r4, #0]
 8008b50:	f023 0320 	bic.w	r3, r3, #32
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	e7f6      	b.n	8008b46 <_printf_i+0x196>
 8008b58:	4616      	mov	r6, r2
 8008b5a:	e7bd      	b.n	8008ad8 <_printf_i+0x128>
 8008b5c:	6833      	ldr	r3, [r6, #0]
 8008b5e:	6825      	ldr	r5, [r4, #0]
 8008b60:	6961      	ldr	r1, [r4, #20]
 8008b62:	1d18      	adds	r0, r3, #4
 8008b64:	6030      	str	r0, [r6, #0]
 8008b66:	062e      	lsls	r6, r5, #24
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	d501      	bpl.n	8008b70 <_printf_i+0x1c0>
 8008b6c:	6019      	str	r1, [r3, #0]
 8008b6e:	e002      	b.n	8008b76 <_printf_i+0x1c6>
 8008b70:	0668      	lsls	r0, r5, #25
 8008b72:	d5fb      	bpl.n	8008b6c <_printf_i+0x1bc>
 8008b74:	8019      	strh	r1, [r3, #0]
 8008b76:	2300      	movs	r3, #0
 8008b78:	6123      	str	r3, [r4, #16]
 8008b7a:	4616      	mov	r6, r2
 8008b7c:	e7bc      	b.n	8008af8 <_printf_i+0x148>
 8008b7e:	6833      	ldr	r3, [r6, #0]
 8008b80:	1d1a      	adds	r2, r3, #4
 8008b82:	6032      	str	r2, [r6, #0]
 8008b84:	681e      	ldr	r6, [r3, #0]
 8008b86:	6862      	ldr	r2, [r4, #4]
 8008b88:	2100      	movs	r1, #0
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	f7f7 fb48 	bl	8000220 <memchr>
 8008b90:	b108      	cbz	r0, 8008b96 <_printf_i+0x1e6>
 8008b92:	1b80      	subs	r0, r0, r6
 8008b94:	6060      	str	r0, [r4, #4]
 8008b96:	6863      	ldr	r3, [r4, #4]
 8008b98:	6123      	str	r3, [r4, #16]
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ba0:	e7aa      	b.n	8008af8 <_printf_i+0x148>
 8008ba2:	6923      	ldr	r3, [r4, #16]
 8008ba4:	4632      	mov	r2, r6
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	4640      	mov	r0, r8
 8008baa:	47d0      	blx	sl
 8008bac:	3001      	adds	r0, #1
 8008bae:	d0ad      	beq.n	8008b0c <_printf_i+0x15c>
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	079b      	lsls	r3, r3, #30
 8008bb4:	d413      	bmi.n	8008bde <_printf_i+0x22e>
 8008bb6:	68e0      	ldr	r0, [r4, #12]
 8008bb8:	9b03      	ldr	r3, [sp, #12]
 8008bba:	4298      	cmp	r0, r3
 8008bbc:	bfb8      	it	lt
 8008bbe:	4618      	movlt	r0, r3
 8008bc0:	e7a6      	b.n	8008b10 <_printf_i+0x160>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	4632      	mov	r2, r6
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	4640      	mov	r0, r8
 8008bca:	47d0      	blx	sl
 8008bcc:	3001      	adds	r0, #1
 8008bce:	d09d      	beq.n	8008b0c <_printf_i+0x15c>
 8008bd0:	3501      	adds	r5, #1
 8008bd2:	68e3      	ldr	r3, [r4, #12]
 8008bd4:	9903      	ldr	r1, [sp, #12]
 8008bd6:	1a5b      	subs	r3, r3, r1
 8008bd8:	42ab      	cmp	r3, r5
 8008bda:	dcf2      	bgt.n	8008bc2 <_printf_i+0x212>
 8008bdc:	e7eb      	b.n	8008bb6 <_printf_i+0x206>
 8008bde:	2500      	movs	r5, #0
 8008be0:	f104 0619 	add.w	r6, r4, #25
 8008be4:	e7f5      	b.n	8008bd2 <_printf_i+0x222>
 8008be6:	bf00      	nop
 8008be8:	0800920d 	.word	0x0800920d
 8008bec:	0800921e 	.word	0x0800921e

08008bf0 <__sflush_r>:
 8008bf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf8:	0716      	lsls	r6, r2, #28
 8008bfa:	4605      	mov	r5, r0
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	d454      	bmi.n	8008caa <__sflush_r+0xba>
 8008c00:	684b      	ldr	r3, [r1, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	dc02      	bgt.n	8008c0c <__sflush_r+0x1c>
 8008c06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	dd48      	ble.n	8008c9e <__sflush_r+0xae>
 8008c0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c0e:	2e00      	cmp	r6, #0
 8008c10:	d045      	beq.n	8008c9e <__sflush_r+0xae>
 8008c12:	2300      	movs	r3, #0
 8008c14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c18:	682f      	ldr	r7, [r5, #0]
 8008c1a:	6a21      	ldr	r1, [r4, #32]
 8008c1c:	602b      	str	r3, [r5, #0]
 8008c1e:	d030      	beq.n	8008c82 <__sflush_r+0x92>
 8008c20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c22:	89a3      	ldrh	r3, [r4, #12]
 8008c24:	0759      	lsls	r1, r3, #29
 8008c26:	d505      	bpl.n	8008c34 <__sflush_r+0x44>
 8008c28:	6863      	ldr	r3, [r4, #4]
 8008c2a:	1ad2      	subs	r2, r2, r3
 8008c2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c2e:	b10b      	cbz	r3, 8008c34 <__sflush_r+0x44>
 8008c30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c32:	1ad2      	subs	r2, r2, r3
 8008c34:	2300      	movs	r3, #0
 8008c36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c38:	6a21      	ldr	r1, [r4, #32]
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	47b0      	blx	r6
 8008c3e:	1c43      	adds	r3, r0, #1
 8008c40:	89a3      	ldrh	r3, [r4, #12]
 8008c42:	d106      	bne.n	8008c52 <__sflush_r+0x62>
 8008c44:	6829      	ldr	r1, [r5, #0]
 8008c46:	291d      	cmp	r1, #29
 8008c48:	d82b      	bhi.n	8008ca2 <__sflush_r+0xb2>
 8008c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8008cf4 <__sflush_r+0x104>)
 8008c4c:	410a      	asrs	r2, r1
 8008c4e:	07d6      	lsls	r6, r2, #31
 8008c50:	d427      	bmi.n	8008ca2 <__sflush_r+0xb2>
 8008c52:	2200      	movs	r2, #0
 8008c54:	6062      	str	r2, [r4, #4]
 8008c56:	04d9      	lsls	r1, r3, #19
 8008c58:	6922      	ldr	r2, [r4, #16]
 8008c5a:	6022      	str	r2, [r4, #0]
 8008c5c:	d504      	bpl.n	8008c68 <__sflush_r+0x78>
 8008c5e:	1c42      	adds	r2, r0, #1
 8008c60:	d101      	bne.n	8008c66 <__sflush_r+0x76>
 8008c62:	682b      	ldr	r3, [r5, #0]
 8008c64:	b903      	cbnz	r3, 8008c68 <__sflush_r+0x78>
 8008c66:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c6a:	602f      	str	r7, [r5, #0]
 8008c6c:	b1b9      	cbz	r1, 8008c9e <__sflush_r+0xae>
 8008c6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c72:	4299      	cmp	r1, r3
 8008c74:	d002      	beq.n	8008c7c <__sflush_r+0x8c>
 8008c76:	4628      	mov	r0, r5
 8008c78:	f7ff fca0 	bl	80085bc <_free_r>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c80:	e00d      	b.n	8008c9e <__sflush_r+0xae>
 8008c82:	2301      	movs	r3, #1
 8008c84:	4628      	mov	r0, r5
 8008c86:	47b0      	blx	r6
 8008c88:	4602      	mov	r2, r0
 8008c8a:	1c50      	adds	r0, r2, #1
 8008c8c:	d1c9      	bne.n	8008c22 <__sflush_r+0x32>
 8008c8e:	682b      	ldr	r3, [r5, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d0c6      	beq.n	8008c22 <__sflush_r+0x32>
 8008c94:	2b1d      	cmp	r3, #29
 8008c96:	d001      	beq.n	8008c9c <__sflush_r+0xac>
 8008c98:	2b16      	cmp	r3, #22
 8008c9a:	d11e      	bne.n	8008cda <__sflush_r+0xea>
 8008c9c:	602f      	str	r7, [r5, #0]
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	e022      	b.n	8008ce8 <__sflush_r+0xf8>
 8008ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ca6:	b21b      	sxth	r3, r3
 8008ca8:	e01b      	b.n	8008ce2 <__sflush_r+0xf2>
 8008caa:	690f      	ldr	r7, [r1, #16]
 8008cac:	2f00      	cmp	r7, #0
 8008cae:	d0f6      	beq.n	8008c9e <__sflush_r+0xae>
 8008cb0:	0793      	lsls	r3, r2, #30
 8008cb2:	680e      	ldr	r6, [r1, #0]
 8008cb4:	bf08      	it	eq
 8008cb6:	694b      	ldreq	r3, [r1, #20]
 8008cb8:	600f      	str	r7, [r1, #0]
 8008cba:	bf18      	it	ne
 8008cbc:	2300      	movne	r3, #0
 8008cbe:	eba6 0807 	sub.w	r8, r6, r7
 8008cc2:	608b      	str	r3, [r1, #8]
 8008cc4:	f1b8 0f00 	cmp.w	r8, #0
 8008cc8:	dde9      	ble.n	8008c9e <__sflush_r+0xae>
 8008cca:	6a21      	ldr	r1, [r4, #32]
 8008ccc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008cce:	4643      	mov	r3, r8
 8008cd0:	463a      	mov	r2, r7
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	47b0      	blx	r6
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	dc08      	bgt.n	8008cec <__sflush_r+0xfc>
 8008cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ce2:	81a3      	strh	r3, [r4, #12]
 8008ce4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cec:	4407      	add	r7, r0
 8008cee:	eba8 0800 	sub.w	r8, r8, r0
 8008cf2:	e7e7      	b.n	8008cc4 <__sflush_r+0xd4>
 8008cf4:	dfbffffe 	.word	0xdfbffffe

08008cf8 <_fflush_r>:
 8008cf8:	b538      	push	{r3, r4, r5, lr}
 8008cfa:	690b      	ldr	r3, [r1, #16]
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	460c      	mov	r4, r1
 8008d00:	b913      	cbnz	r3, 8008d08 <_fflush_r+0x10>
 8008d02:	2500      	movs	r5, #0
 8008d04:	4628      	mov	r0, r5
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	b118      	cbz	r0, 8008d12 <_fflush_r+0x1a>
 8008d0a:	6a03      	ldr	r3, [r0, #32]
 8008d0c:	b90b      	cbnz	r3, 8008d12 <_fflush_r+0x1a>
 8008d0e:	f7ff fb69 	bl	80083e4 <__sinit>
 8008d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0f3      	beq.n	8008d02 <_fflush_r+0xa>
 8008d1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d1c:	07d0      	lsls	r0, r2, #31
 8008d1e:	d404      	bmi.n	8008d2a <_fflush_r+0x32>
 8008d20:	0599      	lsls	r1, r3, #22
 8008d22:	d402      	bmi.n	8008d2a <_fflush_r+0x32>
 8008d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d26:	f7ff fc46 	bl	80085b6 <__retarget_lock_acquire_recursive>
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	f7ff ff5f 	bl	8008bf0 <__sflush_r>
 8008d32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d34:	07da      	lsls	r2, r3, #31
 8008d36:	4605      	mov	r5, r0
 8008d38:	d4e4      	bmi.n	8008d04 <_fflush_r+0xc>
 8008d3a:	89a3      	ldrh	r3, [r4, #12]
 8008d3c:	059b      	lsls	r3, r3, #22
 8008d3e:	d4e1      	bmi.n	8008d04 <_fflush_r+0xc>
 8008d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d42:	f7ff fc39 	bl	80085b8 <__retarget_lock_release_recursive>
 8008d46:	e7dd      	b.n	8008d04 <_fflush_r+0xc>

08008d48 <__sread>:
 8008d48:	b510      	push	{r4, lr}
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d50:	f000 f978 	bl	8009044 <_read_r>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	bfab      	itete	ge
 8008d58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d5c:	181b      	addge	r3, r3, r0
 8008d5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d62:	bfac      	ite	ge
 8008d64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d66:	81a3      	strhlt	r3, [r4, #12]
 8008d68:	bd10      	pop	{r4, pc}

08008d6a <__swrite>:
 8008d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6e:	461f      	mov	r7, r3
 8008d70:	898b      	ldrh	r3, [r1, #12]
 8008d72:	05db      	lsls	r3, r3, #23
 8008d74:	4605      	mov	r5, r0
 8008d76:	460c      	mov	r4, r1
 8008d78:	4616      	mov	r6, r2
 8008d7a:	d505      	bpl.n	8008d88 <__swrite+0x1e>
 8008d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d80:	2302      	movs	r3, #2
 8008d82:	2200      	movs	r2, #0
 8008d84:	f000 f94c 	bl	8009020 <_lseek_r>
 8008d88:	89a3      	ldrh	r3, [r4, #12]
 8008d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d92:	81a3      	strh	r3, [r4, #12]
 8008d94:	4632      	mov	r2, r6
 8008d96:	463b      	mov	r3, r7
 8008d98:	4628      	mov	r0, r5
 8008d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9e:	f000 b963 	b.w	8009068 <_write_r>

08008da2 <__sseek>:
 8008da2:	b510      	push	{r4, lr}
 8008da4:	460c      	mov	r4, r1
 8008da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008daa:	f000 f939 	bl	8009020 <_lseek_r>
 8008dae:	1c43      	adds	r3, r0, #1
 8008db0:	89a3      	ldrh	r3, [r4, #12]
 8008db2:	bf15      	itete	ne
 8008db4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008db6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008dba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008dbe:	81a3      	strheq	r3, [r4, #12]
 8008dc0:	bf18      	it	ne
 8008dc2:	81a3      	strhne	r3, [r4, #12]
 8008dc4:	bd10      	pop	{r4, pc}

08008dc6 <__sclose>:
 8008dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dca:	f000 b8f7 	b.w	8008fbc <_close_r>

08008dce <__swbuf_r>:
 8008dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd0:	460e      	mov	r6, r1
 8008dd2:	4614      	mov	r4, r2
 8008dd4:	4605      	mov	r5, r0
 8008dd6:	b118      	cbz	r0, 8008de0 <__swbuf_r+0x12>
 8008dd8:	6a03      	ldr	r3, [r0, #32]
 8008dda:	b90b      	cbnz	r3, 8008de0 <__swbuf_r+0x12>
 8008ddc:	f7ff fb02 	bl	80083e4 <__sinit>
 8008de0:	69a3      	ldr	r3, [r4, #24]
 8008de2:	60a3      	str	r3, [r4, #8]
 8008de4:	89a3      	ldrh	r3, [r4, #12]
 8008de6:	071a      	lsls	r2, r3, #28
 8008de8:	d501      	bpl.n	8008dee <__swbuf_r+0x20>
 8008dea:	6923      	ldr	r3, [r4, #16]
 8008dec:	b943      	cbnz	r3, 8008e00 <__swbuf_r+0x32>
 8008dee:	4621      	mov	r1, r4
 8008df0:	4628      	mov	r0, r5
 8008df2:	f000 f82b 	bl	8008e4c <__swsetup_r>
 8008df6:	b118      	cbz	r0, 8008e00 <__swbuf_r+0x32>
 8008df8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	6922      	ldr	r2, [r4, #16]
 8008e04:	1a98      	subs	r0, r3, r2
 8008e06:	6963      	ldr	r3, [r4, #20]
 8008e08:	b2f6      	uxtb	r6, r6
 8008e0a:	4283      	cmp	r3, r0
 8008e0c:	4637      	mov	r7, r6
 8008e0e:	dc05      	bgt.n	8008e1c <__swbuf_r+0x4e>
 8008e10:	4621      	mov	r1, r4
 8008e12:	4628      	mov	r0, r5
 8008e14:	f7ff ff70 	bl	8008cf8 <_fflush_r>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	d1ed      	bne.n	8008df8 <__swbuf_r+0x2a>
 8008e1c:	68a3      	ldr	r3, [r4, #8]
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	60a3      	str	r3, [r4, #8]
 8008e22:	6823      	ldr	r3, [r4, #0]
 8008e24:	1c5a      	adds	r2, r3, #1
 8008e26:	6022      	str	r2, [r4, #0]
 8008e28:	701e      	strb	r6, [r3, #0]
 8008e2a:	6962      	ldr	r2, [r4, #20]
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d004      	beq.n	8008e3c <__swbuf_r+0x6e>
 8008e32:	89a3      	ldrh	r3, [r4, #12]
 8008e34:	07db      	lsls	r3, r3, #31
 8008e36:	d5e1      	bpl.n	8008dfc <__swbuf_r+0x2e>
 8008e38:	2e0a      	cmp	r6, #10
 8008e3a:	d1df      	bne.n	8008dfc <__swbuf_r+0x2e>
 8008e3c:	4621      	mov	r1, r4
 8008e3e:	4628      	mov	r0, r5
 8008e40:	f7ff ff5a 	bl	8008cf8 <_fflush_r>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d0d9      	beq.n	8008dfc <__swbuf_r+0x2e>
 8008e48:	e7d6      	b.n	8008df8 <__swbuf_r+0x2a>
	...

08008e4c <__swsetup_r>:
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	4b29      	ldr	r3, [pc, #164]	@ (8008ef4 <__swsetup_r+0xa8>)
 8008e50:	4605      	mov	r5, r0
 8008e52:	6818      	ldr	r0, [r3, #0]
 8008e54:	460c      	mov	r4, r1
 8008e56:	b118      	cbz	r0, 8008e60 <__swsetup_r+0x14>
 8008e58:	6a03      	ldr	r3, [r0, #32]
 8008e5a:	b90b      	cbnz	r3, 8008e60 <__swsetup_r+0x14>
 8008e5c:	f7ff fac2 	bl	80083e4 <__sinit>
 8008e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e64:	0719      	lsls	r1, r3, #28
 8008e66:	d422      	bmi.n	8008eae <__swsetup_r+0x62>
 8008e68:	06da      	lsls	r2, r3, #27
 8008e6a:	d407      	bmi.n	8008e7c <__swsetup_r+0x30>
 8008e6c:	2209      	movs	r2, #9
 8008e6e:	602a      	str	r2, [r5, #0]
 8008e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e74:	81a3      	strh	r3, [r4, #12]
 8008e76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e7a:	e033      	b.n	8008ee4 <__swsetup_r+0x98>
 8008e7c:	0758      	lsls	r0, r3, #29
 8008e7e:	d512      	bpl.n	8008ea6 <__swsetup_r+0x5a>
 8008e80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e82:	b141      	cbz	r1, 8008e96 <__swsetup_r+0x4a>
 8008e84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e88:	4299      	cmp	r1, r3
 8008e8a:	d002      	beq.n	8008e92 <__swsetup_r+0x46>
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	f7ff fb95 	bl	80085bc <_free_r>
 8008e92:	2300      	movs	r3, #0
 8008e94:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e96:	89a3      	ldrh	r3, [r4, #12]
 8008e98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e9c:	81a3      	strh	r3, [r4, #12]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	6063      	str	r3, [r4, #4]
 8008ea2:	6923      	ldr	r3, [r4, #16]
 8008ea4:	6023      	str	r3, [r4, #0]
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	f043 0308 	orr.w	r3, r3, #8
 8008eac:	81a3      	strh	r3, [r4, #12]
 8008eae:	6923      	ldr	r3, [r4, #16]
 8008eb0:	b94b      	cbnz	r3, 8008ec6 <__swsetup_r+0x7a>
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ebc:	d003      	beq.n	8008ec6 <__swsetup_r+0x7a>
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	f000 f83f 	bl	8008f44 <__smakebuf_r>
 8008ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eca:	f013 0201 	ands.w	r2, r3, #1
 8008ece:	d00a      	beq.n	8008ee6 <__swsetup_r+0x9a>
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	60a2      	str	r2, [r4, #8]
 8008ed4:	6962      	ldr	r2, [r4, #20]
 8008ed6:	4252      	negs	r2, r2
 8008ed8:	61a2      	str	r2, [r4, #24]
 8008eda:	6922      	ldr	r2, [r4, #16]
 8008edc:	b942      	cbnz	r2, 8008ef0 <__swsetup_r+0xa4>
 8008ede:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ee2:	d1c5      	bne.n	8008e70 <__swsetup_r+0x24>
 8008ee4:	bd38      	pop	{r3, r4, r5, pc}
 8008ee6:	0799      	lsls	r1, r3, #30
 8008ee8:	bf58      	it	pl
 8008eea:	6962      	ldrpl	r2, [r4, #20]
 8008eec:	60a2      	str	r2, [r4, #8]
 8008eee:	e7f4      	b.n	8008eda <__swsetup_r+0x8e>
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	e7f7      	b.n	8008ee4 <__swsetup_r+0x98>
 8008ef4:	20000018 	.word	0x20000018

08008ef8 <__swhatbuf_r>:
 8008ef8:	b570      	push	{r4, r5, r6, lr}
 8008efa:	460c      	mov	r4, r1
 8008efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f00:	2900      	cmp	r1, #0
 8008f02:	b096      	sub	sp, #88	@ 0x58
 8008f04:	4615      	mov	r5, r2
 8008f06:	461e      	mov	r6, r3
 8008f08:	da0d      	bge.n	8008f26 <__swhatbuf_r+0x2e>
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f10:	f04f 0100 	mov.w	r1, #0
 8008f14:	bf14      	ite	ne
 8008f16:	2340      	movne	r3, #64	@ 0x40
 8008f18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	6031      	str	r1, [r6, #0]
 8008f20:	602b      	str	r3, [r5, #0]
 8008f22:	b016      	add	sp, #88	@ 0x58
 8008f24:	bd70      	pop	{r4, r5, r6, pc}
 8008f26:	466a      	mov	r2, sp
 8008f28:	f000 f858 	bl	8008fdc <_fstat_r>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	dbec      	blt.n	8008f0a <__swhatbuf_r+0x12>
 8008f30:	9901      	ldr	r1, [sp, #4]
 8008f32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f3a:	4259      	negs	r1, r3
 8008f3c:	4159      	adcs	r1, r3
 8008f3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f42:	e7eb      	b.n	8008f1c <__swhatbuf_r+0x24>

08008f44 <__smakebuf_r>:
 8008f44:	898b      	ldrh	r3, [r1, #12]
 8008f46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f48:	079d      	lsls	r5, r3, #30
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	d507      	bpl.n	8008f60 <__smakebuf_r+0x1c>
 8008f50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	6123      	str	r3, [r4, #16]
 8008f58:	2301      	movs	r3, #1
 8008f5a:	6163      	str	r3, [r4, #20]
 8008f5c:	b003      	add	sp, #12
 8008f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f60:	ab01      	add	r3, sp, #4
 8008f62:	466a      	mov	r2, sp
 8008f64:	f7ff ffc8 	bl	8008ef8 <__swhatbuf_r>
 8008f68:	9f00      	ldr	r7, [sp, #0]
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f7ff f920 	bl	80081b4 <_malloc_r>
 8008f74:	b948      	cbnz	r0, 8008f8a <__smakebuf_r+0x46>
 8008f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f7a:	059a      	lsls	r2, r3, #22
 8008f7c:	d4ee      	bmi.n	8008f5c <__smakebuf_r+0x18>
 8008f7e:	f023 0303 	bic.w	r3, r3, #3
 8008f82:	f043 0302 	orr.w	r3, r3, #2
 8008f86:	81a3      	strh	r3, [r4, #12]
 8008f88:	e7e2      	b.n	8008f50 <__smakebuf_r+0xc>
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	6020      	str	r0, [r4, #0]
 8008f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f92:	81a3      	strh	r3, [r4, #12]
 8008f94:	9b01      	ldr	r3, [sp, #4]
 8008f96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f9a:	b15b      	cbz	r3, 8008fb4 <__smakebuf_r+0x70>
 8008f9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f000 f82d 	bl	8009000 <_isatty_r>
 8008fa6:	b128      	cbz	r0, 8008fb4 <__smakebuf_r+0x70>
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	f023 0303 	bic.w	r3, r3, #3
 8008fae:	f043 0301 	orr.w	r3, r3, #1
 8008fb2:	81a3      	strh	r3, [r4, #12]
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	431d      	orrs	r5, r3
 8008fb8:	81a5      	strh	r5, [r4, #12]
 8008fba:	e7cf      	b.n	8008f5c <__smakebuf_r+0x18>

08008fbc <_close_r>:
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4d06      	ldr	r5, [pc, #24]	@ (8008fd8 <_close_r+0x1c>)
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	4608      	mov	r0, r1
 8008fc6:	602b      	str	r3, [r5, #0]
 8008fc8:	f7f8 f9d1 	bl	800136e <_close>
 8008fcc:	1c43      	adds	r3, r0, #1
 8008fce:	d102      	bne.n	8008fd6 <_close_r+0x1a>
 8008fd0:	682b      	ldr	r3, [r5, #0]
 8008fd2:	b103      	cbz	r3, 8008fd6 <_close_r+0x1a>
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	bd38      	pop	{r3, r4, r5, pc}
 8008fd8:	2000073c 	.word	0x2000073c

08008fdc <_fstat_r>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4d07      	ldr	r5, [pc, #28]	@ (8008ffc <_fstat_r+0x20>)
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	4608      	mov	r0, r1
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	602b      	str	r3, [r5, #0]
 8008fea:	f7f8 f9cc 	bl	8001386 <_fstat>
 8008fee:	1c43      	adds	r3, r0, #1
 8008ff0:	d102      	bne.n	8008ff8 <_fstat_r+0x1c>
 8008ff2:	682b      	ldr	r3, [r5, #0]
 8008ff4:	b103      	cbz	r3, 8008ff8 <_fstat_r+0x1c>
 8008ff6:	6023      	str	r3, [r4, #0]
 8008ff8:	bd38      	pop	{r3, r4, r5, pc}
 8008ffa:	bf00      	nop
 8008ffc:	2000073c 	.word	0x2000073c

08009000 <_isatty_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4d06      	ldr	r5, [pc, #24]	@ (800901c <_isatty_r+0x1c>)
 8009004:	2300      	movs	r3, #0
 8009006:	4604      	mov	r4, r0
 8009008:	4608      	mov	r0, r1
 800900a:	602b      	str	r3, [r5, #0]
 800900c:	f7f8 f9cb 	bl	80013a6 <_isatty>
 8009010:	1c43      	adds	r3, r0, #1
 8009012:	d102      	bne.n	800901a <_isatty_r+0x1a>
 8009014:	682b      	ldr	r3, [r5, #0]
 8009016:	b103      	cbz	r3, 800901a <_isatty_r+0x1a>
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	2000073c 	.word	0x2000073c

08009020 <_lseek_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4d07      	ldr	r5, [pc, #28]	@ (8009040 <_lseek_r+0x20>)
 8009024:	4604      	mov	r4, r0
 8009026:	4608      	mov	r0, r1
 8009028:	4611      	mov	r1, r2
 800902a:	2200      	movs	r2, #0
 800902c:	602a      	str	r2, [r5, #0]
 800902e:	461a      	mov	r2, r3
 8009030:	f7f8 f9c4 	bl	80013bc <_lseek>
 8009034:	1c43      	adds	r3, r0, #1
 8009036:	d102      	bne.n	800903e <_lseek_r+0x1e>
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	b103      	cbz	r3, 800903e <_lseek_r+0x1e>
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	2000073c 	.word	0x2000073c

08009044 <_read_r>:
 8009044:	b538      	push	{r3, r4, r5, lr}
 8009046:	4d07      	ldr	r5, [pc, #28]	@ (8009064 <_read_r+0x20>)
 8009048:	4604      	mov	r4, r0
 800904a:	4608      	mov	r0, r1
 800904c:	4611      	mov	r1, r2
 800904e:	2200      	movs	r2, #0
 8009050:	602a      	str	r2, [r5, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	f7f8 f952 	bl	80012fc <_read>
 8009058:	1c43      	adds	r3, r0, #1
 800905a:	d102      	bne.n	8009062 <_read_r+0x1e>
 800905c:	682b      	ldr	r3, [r5, #0]
 800905e:	b103      	cbz	r3, 8009062 <_read_r+0x1e>
 8009060:	6023      	str	r3, [r4, #0]
 8009062:	bd38      	pop	{r3, r4, r5, pc}
 8009064:	2000073c 	.word	0x2000073c

08009068 <_write_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4d07      	ldr	r5, [pc, #28]	@ (8009088 <_write_r+0x20>)
 800906c:	4604      	mov	r4, r0
 800906e:	4608      	mov	r0, r1
 8009070:	4611      	mov	r1, r2
 8009072:	2200      	movs	r2, #0
 8009074:	602a      	str	r2, [r5, #0]
 8009076:	461a      	mov	r2, r3
 8009078:	f7f8 f95d 	bl	8001336 <_write>
 800907c:	1c43      	adds	r3, r0, #1
 800907e:	d102      	bne.n	8009086 <_write_r+0x1e>
 8009080:	682b      	ldr	r3, [r5, #0]
 8009082:	b103      	cbz	r3, 8009086 <_write_r+0x1e>
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	bd38      	pop	{r3, r4, r5, pc}
 8009088:	2000073c 	.word	0x2000073c

0800908c <_init>:
 800908c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908e:	bf00      	nop
 8009090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009092:	bc08      	pop	{r3}
 8009094:	469e      	mov	lr, r3
 8009096:	4770      	bx	lr

08009098 <_fini>:
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	bf00      	nop
 800909c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800909e:	bc08      	pop	{r3}
 80090a0:	469e      	mov	lr, r3
 80090a2:	4770      	bx	lr
