
TagBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bd8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08009db8  08009db8  0000adb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fe4  08009fe4  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009fe4  08009fe4  0000afe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fec  08009fec  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fec  08009fec  0000afec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ff0  08009ff0  0000aff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009ff4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000140c  2000006c  0800a060  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001478  0800a060  0000b478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023562  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f01  00000000  00000000  0002e5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002058  00000000  00000000  00033500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001916  00000000  00000000  00035558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253d5  00000000  00000000  00036e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027391  00000000  00000000  0005c243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb397  00000000  00000000  000835d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e96b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009070  00000000  00000000  0016e9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00177a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009da0 	.word	0x08009da0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08009da0 	.word	0x08009da0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ADXL343_Init>:
#define TAP_LATENT 0xC8 											// taping latency 250ms


//Function to initialize the accelerometer

int ADXL343_Init(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	uint8_t id = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71fb      	strb	r3, [r7, #7]

	// read the id of peripherique and check if is equal 0xE5
	ADXL343_ReadRegister(ADXL343_REG_DEVID, &id, 1);
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	2201      	movs	r2, #1
 80005be:	4619      	mov	r1, r3
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 f857 	bl	8000674 <ADXL343_ReadRegister>

	if (id != 0xE5) {
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2be5      	cmp	r3, #229	@ 0xe5
 80005ca:	d006      	beq.n	80005da <ADXL343_Init+0x2a>

		printf("ADXL343 no detected ! ID: %02X\r\n", id);
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	4619      	mov	r1, r3
 80005d0:	4815      	ldr	r0, [pc, #84]	@ (8000628 <ADXL343_Init+0x78>)
 80005d2:	f008 fdc7 	bl	8009164 <iprintf>
		return 1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	e022      	b.n	8000620 <ADXL343_Init+0x70>
	}
	/* Tasks creations */
	ADXL343_TaskCreate(NULL);
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 f8be 	bl	800075c <ADXL343_TaskCreate>

	/* Configuration of registers */

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2110      	movs	r1, #16
 80005e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e8:	f003 f8d8 	bl	800379c <HAL_GPIO_WritePin>
	ADXL343_WriteRegister(ADXL343_REG_POWER_CTL, 0x04); 			// init the power control (sleep)
 80005ec:	2104      	movs	r1, #4
 80005ee:	202d      	movs	r0, #45	@ 0x2d
 80005f0:	f000 f86e 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_DATA_FORMAT, 0x08);  			// establish format for data :full resolution and ±2g ->0x08, 16g ->0x0B
 80005f4:	2108      	movs	r1, #8
 80005f6:	2031      	movs	r0, #49	@ 0x31
 80005f8:	f000 f86a 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_BW_RATE, 0X0B);
 80005fc:	210b      	movs	r1, #11
 80005fe:	202c      	movs	r0, #44	@ 0x2c
 8000600:	f000 f866 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_POWER_CTL, 0x08);  			// measurement mode of power control (active)
 8000604:	2108      	movs	r1, #8
 8000606:	202d      	movs	r0, #45	@ 0x2d
 8000608:	f000 f862 	bl	80006d0 <ADXL343_WriteRegister>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); 			// Desactiver NSS
 800060c:	2201      	movs	r2, #1
 800060e:	2110      	movs	r1, #16
 8000610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000614:	f003 f8c2 	bl	800379c <HAL_GPIO_WritePin>


	printf("Initialization done\r\n");
 8000618:	4804      	ldr	r0, [pc, #16]	@ (800062c <ADXL343_Init+0x7c>)
 800061a:	f008 fe0b 	bl	8009234 <puts>
	return 0;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	08009db8 	.word	0x08009db8
 800062c:	08009ddc 	.word	0x08009ddc

08000630 <ADXL343_Configure>:

//Function to configure the accelerometer
void ADXL343_Configure(void){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	ADXL343_WriteRegister(ADXL343_REG_THRESH_TAP, TAP_THRESHOLD);  	// Set tap threshold : 2g ou 16g
 8000634:	21ff      	movs	r1, #255	@ 0xff
 8000636:	201d      	movs	r0, #29
 8000638:	f000 f84a 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_DUR, TAP_DURATION);         	// Set tap duration : 10ms
 800063c:	2110      	movs	r1, #16
 800063e:	2021      	movs	r0, #33	@ 0x21
 8000640:	f000 f846 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_LATENT, TAP_LATENT);
 8000644:	21c8      	movs	r1, #200	@ 0xc8
 8000646:	2022      	movs	r0, #34	@ 0x22
 8000648:	f000 f842 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_TAP_AXES, 0x07);				// Enable axe X Y Z for tap
 800064c:	2107      	movs	r1, #7
 800064e:	202a      	movs	r0, #42	@ 0x2a
 8000650:	f000 f83e 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_INT_ENABLE, 0x40);			// Enable interruption for single tap
 8000654:	2140      	movs	r1, #64	@ 0x40
 8000656:	202e      	movs	r0, #46	@ 0x2e
 8000658:	f000 f83a 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_INT_MAP, 0x40);				// Enable interruption on pin INT1
 800065c:	2140      	movs	r1, #64	@ 0x40
 800065e:	202f      	movs	r0, #47	@ 0x2f
 8000660:	f000 f836 	bl	80006d0 <ADXL343_WriteRegister>
	printf("Configuration done\r\n");
 8000664:	4802      	ldr	r0, [pc, #8]	@ (8000670 <ADXL343_Configure+0x40>)
 8000666:	f008 fde5 	bl	8009234 <puts>

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	08009df4 	.word	0x08009df4

08000674 <ADXL343_ReadRegister>:

// Function to read from a register
void ADXL343_ReadRegister(uint8_t reg, int8_t* rx_data, size_t length) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	73fb      	strb	r3, [r7, #15]

	uint8_t tx_data = reg | 0x80; // MSB = 1 pour la lecture
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000688:	b2db      	uxtb	r3, r3
 800068a:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); 			// Activer NSS
 800068c:	2200      	movs	r2, #0
 800068e:	2110      	movs	r1, #16
 8000690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000694:	f003 f882 	bl	800379c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &tx_data, 1, HAL_MAX_DELAY); 			// Envoyer l'adresse
 8000698:	f107 0117 	add.w	r1, r7, #23
 800069c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006a0:	2201      	movs	r2, #1
 80006a2:	480a      	ldr	r0, [pc, #40]	@ (80006cc <ADXL343_ReadRegister+0x58>)
 80006a4:	f004 fa6f 	bl	8004b86 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)rx_data, 1, HAL_MAX_DELAY);  	// Lire la donnée
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006ac:	2201      	movs	r2, #1
 80006ae:	68b9      	ldr	r1, [r7, #8]
 80006b0:	4806      	ldr	r0, [pc, #24]	@ (80006cc <ADXL343_ReadRegister+0x58>)
 80006b2:	f004 fbde 	bl	8004e72 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   			// Désactiver NSS
 80006b6:	2201      	movs	r2, #1
 80006b8:	2110      	movs	r1, #16
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006be:	f003 f86d 	bl	800379c <HAL_GPIO_WritePin>


	//HAL_SPI_TransmitReceive(hspi, pTxData, pRxData, Size, Timeout); // a utiliser quand NSS hardware ioc enable
}
 80006c2:	bf00      	nop
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000027c 	.word	0x2000027c

080006d0 <ADXL343_WriteRegister>:


//Function to write in the register
void ADXL343_WriteRegister(uint8_t reg, uint8_t data) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = reg;	//register
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	733b      	strb	r3, [r7, #12]
	buffer[1] = data;	//data
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); 			// enable NSS (PA4)
 80006e8:	2200      	movs	r2, #0
 80006ea:	2110      	movs	r1, #16
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f0:	f003 f854 	bl	800379c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, buffer, 2, HAL_MAX_DELAY); 			// Send data thanks to SPI
 80006f4:	f107 010c 	add.w	r1, r7, #12
 80006f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006fc:	2202      	movs	r2, #2
 80006fe:	4806      	ldr	r0, [pc, #24]	@ (8000718 <ADXL343_WriteRegister+0x48>)
 8000700:	f004 fa41 	bl	8004b86 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); 			// disable NSS (PA4)
 8000704:	2201      	movs	r2, #1
 8000706:	2110      	movs	r1, #16
 8000708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070c:	f003 f846 	bl	800379c <HAL_GPIO_WritePin>
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000027c 	.word	0x2000027c

0800071c <ADXL343_Task>:

	printf("calibration done offset x : %i, y : %i, z :%i\r\n", offsetx, offsety, offsetz);
}

void ADXL343_Task(void*unused )
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		int8_t tap_status;
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); //Renvoie la valeur du registre int_source
 8000724:	f107 030f 	add.w	r3, r7, #15
 8000728:	2201      	movs	r2, #1
 800072a:	4619      	mov	r1, r3
 800072c:	2030      	movs	r0, #48	@ 0x30
 800072e:	f7ff ffa1 	bl	8000674 <ADXL343_ReadRegister>

		if (tap_status & (1<<6)) {  // Tap for single tap
 8000732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800073c:	2b00      	cmp	r3, #0
 800073e:	d0f1      	beq.n	8000724 <ADXL343_Task+0x8>
			printf("Tap detected by Task!\r\n");
 8000740:	4805      	ldr	r0, [pc, #20]	@ (8000758 <ADXL343_Task+0x3c>)
 8000742:	f008 fd77 	bl	8009234 <puts>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000746:	2101      	movs	r1, #1
 8000748:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800074c:	f003 f83e 	bl	80037cc <HAL_GPIO_TogglePin>
			/******* Ajouter la tache pour changer d'état********/
			vTaskDelay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f007 fc1f 	bl	8007f94 <vTaskDelay>
	{
 8000756:	e7e5      	b.n	8000724 <ADXL343_Task+0x8>
 8000758:	08009e5c 	.word	0x08009e5c

0800075c <ADXL343_TaskCreate>:


}

void ADXL343_TaskCreate(void * unused)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af02      	add	r7, sp, #8
 8000762:	6078      	str	r0, [r7, #4]
	xTaskCreate(ADXL343_Task, "tache ADXL343", 128, NULL, 256, NULL);
 8000764:	2300      	movs	r3, #0
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2300      	movs	r3, #0
 8000770:	2280      	movs	r2, #128	@ 0x80
 8000772:	4904      	ldr	r1, [pc, #16]	@ (8000784 <ADXL343_TaskCreate+0x28>)
 8000774:	4804      	ldr	r0, [pc, #16]	@ (8000788 <ADXL343_TaskCreate+0x2c>)
 8000776:	f007 fad9 	bl	8007d2c <xTaskCreate>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	08009e74 	.word	0x08009e74
 8000788:	0800071d 	.word	0x0800071d

0800078c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	@ 0x30
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2220      	movs	r2, #32
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f008 fd4d 	bl	8009244 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000894 <MX_ADC1_Init+0x108>)
 80007ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007b2:	4b38      	ldr	r3, [pc, #224]	@ (8000894 <MX_ADC1_Init+0x108>)
 80007b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ba:	4b36      	ldr	r3, [pc, #216]	@ (8000894 <MX_ADC1_Init+0x108>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c0:	4b34      	ldr	r3, [pc, #208]	@ (8000894 <MX_ADC1_Init+0x108>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007c6:	4b33      	ldr	r3, [pc, #204]	@ (8000894 <MX_ADC1_Init+0x108>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007cc:	4b31      	ldr	r3, [pc, #196]	@ (8000894 <MX_ADC1_Init+0x108>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d2:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <MX_ADC1_Init+0x108>)
 80007d4:	2204      	movs	r2, #4
 80007d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000894 <MX_ADC1_Init+0x108>)
 80007da:	2200      	movs	r2, #0
 80007dc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007de:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <MX_ADC1_Init+0x108>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80007e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000894 <MX_ADC1_Init+0x108>)
 80007e6:	2202      	movs	r2, #2
 80007e8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <MX_ADC1_Init+0x108>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80007f2:	4b28      	ldr	r3, [pc, #160]	@ (8000894 <MX_ADC1_Init+0x108>)
 80007f4:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007fa:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <MX_ADC1_Init+0x108>)
 80007fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000800:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000802:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <MX_ADC1_Init+0x108>)
 8000804:	2201      	movs	r2, #1
 8000806:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800080a:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <MX_ADC1_Init+0x108>)
 800080c:	2200      	movs	r2, #0
 800080e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000810:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <MX_ADC1_Init+0x108>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000818:	481e      	ldr	r0, [pc, #120]	@ (8000894 <MX_ADC1_Init+0x108>)
 800081a:	f001 fd35 	bl	8002288 <HAL_ADC_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000824:	f000 fc54 	bl	80010d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800082c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000830:	4619      	mov	r1, r3
 8000832:	4818      	ldr	r0, [pc, #96]	@ (8000894 <MX_ADC1_Init+0x108>)
 8000834:	f002 fac2 	bl	8002dbc <HAL_ADCEx_MultiModeConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800083e:	f000 fc47 	bl	80010d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000842:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <MX_ADC1_Init+0x10c>)
 8000844:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000846:	2306      	movs	r3, #6
 8000848:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800084a:	2304      	movs	r3, #4
 800084c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800084e:	237f      	movs	r3, #127	@ 0x7f
 8000850:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000852:	2304      	movs	r3, #4
 8000854:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	4619      	mov	r1, r3
 800085e:	480d      	ldr	r0, [pc, #52]	@ (8000894 <MX_ADC1_Init+0x108>)
 8000860:	f001 fe96 	bl	8002590 <HAL_ADC_ConfigChannel>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800086a:	f000 fc31 	bl	80010d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_ADC1_Init+0x110>)
 8000870:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000872:	230c      	movs	r3, #12
 8000874:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <MX_ADC1_Init+0x108>)
 800087c:	f001 fe88 	bl	8002590 <HAL_ADC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000886:	f000 fc23 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	3730      	adds	r7, #48	@ 0x30
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000088 	.word	0x20000088
 8000898:	14f00020 	.word	0x14f00020
 800089c:	2e300800 	.word	0x2e300800

080008a0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a6:	463b      	mov	r3, r7
 80008a8:	2220      	movs	r2, #32
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f008 fcc9 	bl	8009244 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008b2:	4b33      	ldr	r3, [pc, #204]	@ (8000980 <MX_ADC2_Init+0xe0>)
 80008b4:	4a33      	ldr	r2, [pc, #204]	@ (8000984 <MX_ADC2_Init+0xe4>)
 80008b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008b8:	4b31      	ldr	r3, [pc, #196]	@ (8000980 <MX_ADC2_Init+0xe0>)
 80008ba:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008be:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000980 <MX_ADC2_Init+0xe0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000980 <MX_ADC2_Init+0xe0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80008cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000980 <MX_ADC2_Init+0xe0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000980 <MX_ADC2_Init+0xe0>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d8:	4b29      	ldr	r3, [pc, #164]	@ (8000980 <MX_ADC2_Init+0xe0>)
 80008da:	2204      	movs	r2, #4
 80008dc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008de:	4b28      	ldr	r3, [pc, #160]	@ (8000980 <MX_ADC2_Init+0xe0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008e4:	4b26      	ldr	r3, [pc, #152]	@ (8000980 <MX_ADC2_Init+0xe0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80008ea:	4b25      	ldr	r3, [pc, #148]	@ (8000980 <MX_ADC2_Init+0xe0>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008f0:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <MX_ADC2_Init+0xe0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80008f8:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <MX_ADC2_Init+0xe0>)
 80008fa:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80008fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000900:	4b1f      	ldr	r3, [pc, #124]	@ (8000980 <MX_ADC2_Init+0xe0>)
 8000902:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000906:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <MX_ADC2_Init+0xe0>)
 800090a:	2201      	movs	r2, #1
 800090c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000910:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <MX_ADC2_Init+0xe0>)
 8000912:	2200      	movs	r2, #0
 8000914:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_ADC2_Init+0xe0>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800091e:	4818      	ldr	r0, [pc, #96]	@ (8000980 <MX_ADC2_Init+0xe0>)
 8000920:	f001 fcb2 	bl	8002288 <HAL_ADC_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800092a:	f000 fbd1 	bl	80010d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800092e:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <MX_ADC2_Init+0xe8>)
 8000930:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000932:	2306      	movs	r3, #6
 8000934:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000936:	2304      	movs	r3, #4
 8000938:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800093a:	237f      	movs	r3, #127	@ 0x7f
 800093c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800093e:	2304      	movs	r3, #4
 8000940:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000946:	463b      	mov	r3, r7
 8000948:	4619      	mov	r1, r3
 800094a:	480d      	ldr	r0, [pc, #52]	@ (8000980 <MX_ADC2_Init+0xe0>)
 800094c:	f001 fe20 	bl	8002590 <HAL_ADC_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000956:	f000 fbbb 	bl	80010d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_ADC2_Init+0xec>)
 800095c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800095e:	230c      	movs	r3, #12
 8000960:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	4619      	mov	r1, r3
 8000966:	4806      	ldr	r0, [pc, #24]	@ (8000980 <MX_ADC2_Init+0xe0>)
 8000968:	f001 fe12 	bl	8002590 <HAL_ADC_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8000972:	f000 fbad 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3720      	adds	r7, #32
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000f4 	.word	0x200000f4
 8000984:	50000100 	.word	0x50000100
 8000988:	32601000 	.word	0x32601000
 800098c:	3ef08000 	.word	0x3ef08000

08000990 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b09c      	sub	sp, #112	@ 0x70
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a8:	f107 0318 	add.w	r3, r7, #24
 80009ac:	2244      	movs	r2, #68	@ 0x44
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f008 fc47 	bl	8009244 <memset>
  if(adcHandle->Instance==ADC1)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80009be:	d16a      	bne.n	8000a96 <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80009c6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80009ca:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009cc:	f107 0318 	add.w	r3, r7, #24
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 fe3d 	bl	8004650 <HAL_RCCEx_PeriphCLKConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009dc:	f000 fb78 	bl	80010d0 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80009e0:	4b66      	ldr	r3, [pc, #408]	@ (8000b7c <HAL_ADC_MspInit+0x1ec>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	3301      	adds	r3, #1
 80009e6:	4a65      	ldr	r2, [pc, #404]	@ (8000b7c <HAL_ADC_MspInit+0x1ec>)
 80009e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009ea:	4b64      	ldr	r3, [pc, #400]	@ (8000b7c <HAL_ADC_MspInit+0x1ec>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d10b      	bne.n	8000a0a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009f2:	4b63      	ldr	r3, [pc, #396]	@ (8000b80 <HAL_ADC_MspInit+0x1f0>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	4a62      	ldr	r2, [pc, #392]	@ (8000b80 <HAL_ADC_MspInit+0x1f0>)
 80009f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fe:	4b60      	ldr	r3, [pc, #384]	@ (8000b80 <HAL_ADC_MspInit+0x1f0>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b5d      	ldr	r3, [pc, #372]	@ (8000b80 <HAL_ADC_MspInit+0x1f0>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	4a5c      	ldr	r2, [pc, #368]	@ (8000b80 <HAL_ADC_MspInit+0x1f0>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a16:	4b5a      	ldr	r3, [pc, #360]	@ (8000b80 <HAL_ADC_MspInit+0x1f0>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CAPTEUR_DIST_N_Pin|CAPTEUR_DIST_W_Pin;
 8000a22:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000a26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a34:	4619      	mov	r1, r3
 8000a36:	4853      	ldr	r0, [pc, #332]	@ (8000b84 <HAL_ADC_MspInit+0x1f4>)
 8000a38:	f002 fd2e 	bl	8003498 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8000a3c:	4b52      	ldr	r3, [pc, #328]	@ (8000b88 <HAL_ADC_MspInit+0x1f8>)
 8000a3e:	4a53      	ldr	r2, [pc, #332]	@ (8000b8c <HAL_ADC_MspInit+0x1fc>)
 8000a40:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a42:	4b51      	ldr	r3, [pc, #324]	@ (8000b88 <HAL_ADC_MspInit+0x1f8>)
 8000a44:	2205      	movs	r2, #5
 8000a46:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a48:	4b4f      	ldr	r3, [pc, #316]	@ (8000b88 <HAL_ADC_MspInit+0x1f8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4e:	4b4e      	ldr	r3, [pc, #312]	@ (8000b88 <HAL_ADC_MspInit+0x1f8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a54:	4b4c      	ldr	r3, [pc, #304]	@ (8000b88 <HAL_ADC_MspInit+0x1f8>)
 8000a56:	2280      	movs	r2, #128	@ 0x80
 8000a58:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8000b88 <HAL_ADC_MspInit+0x1f8>)
 8000a5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a60:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a62:	4b49      	ldr	r3, [pc, #292]	@ (8000b88 <HAL_ADC_MspInit+0x1f8>)
 8000a64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a6a:	4b47      	ldr	r3, [pc, #284]	@ (8000b88 <HAL_ADC_MspInit+0x1f8>)
 8000a6c:	2220      	movs	r2, #32
 8000a6e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000a70:	4b45      	ldr	r3, [pc, #276]	@ (8000b88 <HAL_ADC_MspInit+0x1f8>)
 8000a72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a78:	4843      	ldr	r0, [pc, #268]	@ (8000b88 <HAL_ADC_MspInit+0x1f8>)
 8000a7a:	f002 fb53 	bl	8003124 <HAL_DMA_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000a84:	f000 fb24 	bl	80010d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a3f      	ldr	r2, [pc, #252]	@ (8000b88 <HAL_ADC_MspInit+0x1f8>)
 8000a8c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000a8e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b88 <HAL_ADC_MspInit+0x1f8>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000a94:	e06e      	b.n	8000b74 <HAL_ADC_MspInit+0x1e4>
  else if(adcHandle->Instance==ADC2)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a3d      	ldr	r2, [pc, #244]	@ (8000b90 <HAL_ADC_MspInit+0x200>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d169      	bne.n	8000b74 <HAL_ADC_MspInit+0x1e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000aa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000aa4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000aa6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000aaa:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aac:	f107 0318 	add.w	r3, r7, #24
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f003 fdcd 	bl	8004650 <HAL_RCCEx_PeriphCLKConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 8000abc:	f000 fb08 	bl	80010d0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b7c <HAL_ADC_MspInit+0x1ec>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	4a2d      	ldr	r2, [pc, #180]	@ (8000b7c <HAL_ADC_MspInit+0x1ec>)
 8000ac8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000aca:	4b2c      	ldr	r3, [pc, #176]	@ (8000b7c <HAL_ADC_MspInit+0x1ec>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d10b      	bne.n	8000aea <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b80 <HAL_ADC_MspInit+0x1f0>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8000b80 <HAL_ADC_MspInit+0x1f0>)
 8000ad8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ade:	4b28      	ldr	r3, [pc, #160]	@ (8000b80 <HAL_ADC_MspInit+0x1f0>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b25      	ldr	r3, [pc, #148]	@ (8000b80 <HAL_ADC_MspInit+0x1f0>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	4a24      	ldr	r2, [pc, #144]	@ (8000b80 <HAL_ADC_MspInit+0x1f0>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af6:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <HAL_ADC_MspInit+0x1f0>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CAPTEUR_DIST_S_Pin|CAPTEUR_DIST_E_Pin;
 8000b02:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000b06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b10:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b14:	4619      	mov	r1, r3
 8000b16:	481b      	ldr	r0, [pc, #108]	@ (8000b84 <HAL_ADC_MspInit+0x1f4>)
 8000b18:	f002 fcbe 	bl	8003498 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel1;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <HAL_ADC_MspInit+0x204>)
 8000b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000b98 <HAL_ADC_MspInit+0x208>)
 8000b20:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <HAL_ADC_MspInit+0x204>)
 8000b24:	2224      	movs	r2, #36	@ 0x24
 8000b26:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <HAL_ADC_MspInit+0x204>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <HAL_ADC_MspInit+0x204>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000b34:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <HAL_ADC_MspInit+0x204>)
 8000b36:	2280      	movs	r2, #128	@ 0x80
 8000b38:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <HAL_ADC_MspInit+0x204>)
 8000b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b40:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b42:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <HAL_ADC_MspInit+0x204>)
 8000b44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b48:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000b4a:	4b12      	ldr	r3, [pc, #72]	@ (8000b94 <HAL_ADC_MspInit+0x204>)
 8000b4c:	2220      	movs	r2, #32
 8000b4e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8000b50:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <HAL_ADC_MspInit+0x204>)
 8000b52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000b58:	480e      	ldr	r0, [pc, #56]	@ (8000b94 <HAL_ADC_MspInit+0x204>)
 8000b5a:	f002 fae3 	bl	8003124 <HAL_DMA_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_ADC_MspInit+0x1d8>
      Error_Handler();
 8000b64:	f000 fab4 	bl	80010d0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <HAL_ADC_MspInit+0x204>)
 8000b6c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000b6e:	4a09      	ldr	r2, [pc, #36]	@ (8000b94 <HAL_ADC_MspInit+0x204>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000b74:	bf00      	nop
 8000b76:	3770      	adds	r7, #112	@ 0x70
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000220 	.word	0x20000220
 8000b80:	40021000 	.word	0x40021000
 8000b84:	48000400 	.word	0x48000400
 8000b88:	20000160 	.word	0x20000160
 8000b8c:	4002001c 	.word	0x4002001c
 8000b90:	50000100 	.word	0x50000100
 8000b94:	200001c0 	.word	0x200001c0
 8000b98:	40020008 	.word	0x40020008

08000b9c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b9c:	b5b0      	push	{r4, r5, r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ba2:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <MX_FREERTOS_Init+0x2c>)
 8000ba4:	1d3c      	adds	r4, r7, #4
 8000ba6:	461d      	mov	r5, r3
 8000ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bac:	682b      	ldr	r3, [r5, #0]
 8000bae:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f006 ffca 	bl	8007b4e <osThreadCreate>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	4a03      	ldr	r2, [pc, #12]	@ (8000bcc <MX_FREERTOS_Init+0x30>)
 8000bbe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000bc0:	bf00      	nop
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8000bc8:	08009e90 	.word	0x08009e90
 8000bcc:	20000224 	.word	0x20000224

08000bd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f006 ffdf 	bl	8007b9c <osDelay>
 8000bde:	e7fb      	b.n	8000bd8 <StartDefaultTask+0x8>

08000be0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000be6:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <MX_DMA_Init+0x60>)
 8000be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bea:	4a15      	ldr	r2, [pc, #84]	@ (8000c40 <MX_DMA_Init+0x60>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <MX_DMA_Init+0x60>)
 8000bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bfe:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <MX_DMA_Init+0x60>)
 8000c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c02:	4a0f      	ldr	r2, [pc, #60]	@ (8000c40 <MX_DMA_Init+0x60>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c40 <MX_DMA_Init+0x60>)
 8000c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2105      	movs	r1, #5
 8000c1a:	200b      	movs	r0, #11
 8000c1c:	f002 fa4d 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c20:	200b      	movs	r0, #11
 8000c22:	f002 fa64 	bl	80030ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2105      	movs	r1, #5
 8000c2a:	200c      	movs	r0, #12
 8000c2c:	f002 fa45 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c30:	200c      	movs	r0, #12
 8000c32:	f002 fa5c 	bl	80030ee <HAL_NVIC_EnableIRQ>

}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	@ 0x28
 8000c48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	4b52      	ldr	r3, [pc, #328]	@ (8000da4 <MX_GPIO_Init+0x160>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5e:	4a51      	ldr	r2, [pc, #324]	@ (8000da4 <MX_GPIO_Init+0x160>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c66:	4b4f      	ldr	r3, [pc, #316]	@ (8000da4 <MX_GPIO_Init+0x160>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c72:	4b4c      	ldr	r3, [pc, #304]	@ (8000da4 <MX_GPIO_Init+0x160>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c76:	4a4b      	ldr	r2, [pc, #300]	@ (8000da4 <MX_GPIO_Init+0x160>)
 8000c78:	f043 0320 	orr.w	r3, r3, #32
 8000c7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c7e:	4b49      	ldr	r3, [pc, #292]	@ (8000da4 <MX_GPIO_Init+0x160>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	f003 0320 	and.w	r3, r3, #32
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b46      	ldr	r3, [pc, #280]	@ (8000da4 <MX_GPIO_Init+0x160>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	4a45      	ldr	r2, [pc, #276]	@ (8000da4 <MX_GPIO_Init+0x160>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c96:	4b43      	ldr	r3, [pc, #268]	@ (8000da4 <MX_GPIO_Init+0x160>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	4b40      	ldr	r3, [pc, #256]	@ (8000da4 <MX_GPIO_Init+0x160>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca6:	4a3f      	ldr	r2, [pc, #252]	@ (8000da4 <MX_GPIO_Init+0x160>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cae:	4b3d      	ldr	r3, [pc, #244]	@ (8000da4 <MX_GPIO_Init+0x160>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CHAT_Pin|LED_SOURIS_Pin|LIDAR_M_EN_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f246 0110 	movw	r1, #24592	@ 0x6010
 8000cc0:	4839      	ldr	r0, [pc, #228]	@ (8000da8 <MX_GPIO_Init+0x164>)
 8000cc2:	f002 fd6b 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_1_Pin|USER_LED_2_Pin|Accelerometer_NSS_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2113      	movs	r1, #19
 8000cca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cce:	f002 fd65 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIDAR_DEV_EN_GPIO_Port, LIDAR_DEV_EN_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4835      	ldr	r0, [pc, #212]	@ (8000dac <MX_GPIO_Init+0x168>)
 8000cd8:	f002 fd60 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_CHAT_Pin LED_SOURIS_Pin LIDAR_M_EN_Pin */
  GPIO_InitStruct.Pin = LED_CHAT_Pin|LED_SOURIS_Pin|LIDAR_M_EN_Pin;
 8000cdc:	f246 0310 	movw	r3, #24592	@ 0x6010
 8000ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	482c      	ldr	r0, [pc, #176]	@ (8000da8 <MX_GPIO_Init+0x164>)
 8000cf6:	f002 fbcf 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pin : BNT_CAT_MOUSE_Pin */
  GPIO_InitStruct.Pin = BNT_CAT_MOUSE_Pin;
 8000cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d00:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BNT_CAT_MOUSE_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4825      	ldr	r0, [pc, #148]	@ (8000da8 <MX_GPIO_Init+0x164>)
 8000d12:	f002 fbc1 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_1_Pin USER_LED_2_Pin Accelerometer_NSS_Pin */
  GPIO_InitStruct.Pin = USER_LED_1_Pin|USER_LED_2_Pin|Accelerometer_NSS_Pin;
 8000d16:	2313      	movs	r3, #19
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d30:	f002 fbb2 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pins : Accelerometer_INT1_Pin Accelerometer_INT2_Pin */
  GPIO_InitStruct.Pin = Accelerometer_INT1_Pin|Accelerometer_INT2_Pin;
 8000d34:	230c      	movs	r3, #12
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d38:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4c:	f002 fba4 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIDAR_DEV_EN_Pin */
  GPIO_InitStruct.Pin = LIDAR_DEV_EN_Pin;
 8000d50:	2301      	movs	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LIDAR_DEV_EN_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4811      	ldr	r0, [pc, #68]	@ (8000dac <MX_GPIO_Init+0x168>)
 8000d68:	f002 fb96 	bl	8003498 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2008      	movs	r0, #8
 8000d72:	f002 f9a2 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d76:	2008      	movs	r0, #8
 8000d78:	f002 f9b9 	bl	80030ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	2009      	movs	r0, #9
 8000d82:	f002 f99a 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d86:	2009      	movs	r0, #9
 8000d88:	f002 f9b1 	bl	80030ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2105      	movs	r1, #5
 8000d90:	2028      	movs	r0, #40	@ 0x28
 8000d92:	f002 f992 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d96:	2028      	movs	r0, #40	@ 0x28
 8000d98:	f002 f9a9 	bl	80030ee <HAL_NVIC_EnableIRQ>

}
 8000d9c:	bf00      	nop
 8000d9e:	3728      	adds	r7, #40	@ 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40021000 	.word	0x40021000
 8000da8:	48000800 	.word	0x48000800
 8000dac:	48000400 	.word	0x48000400

08000db0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000db6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e28 <MX_I2C1_Init+0x78>)
 8000db8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e2c <MX_I2C1_Init+0x7c>)
 8000dbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dc0:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dd2:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dea:	480e      	ldr	r0, [pc, #56]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000dec:	f002 fd20 	bl	8003830 <HAL_I2C_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000df6:	f000 f96b 	bl	80010d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4809      	ldr	r0, [pc, #36]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000dfe:	f002 fdb2 	bl	8003966 <HAL_I2CEx_ConfigAnalogFilter>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e08:	f000 f962 	bl	80010d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000e10:	f002 fdf4 	bl	80039fc <HAL_I2CEx_ConfigDigitalFilter>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e1a:	f000 f959 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000228 	.word	0x20000228
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	40621236 	.word	0x40621236

08000e30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b09c      	sub	sp, #112	@ 0x70
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e48:	f107 0318 	add.w	r3, r7, #24
 8000e4c:	2244      	movs	r2, #68	@ 0x44
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f008 f9f7 	bl	8009244 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a2e      	ldr	r2, [pc, #184]	@ (8000f14 <HAL_I2C_MspInit+0xe4>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d154      	bne.n	8000f0a <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e60:	2340      	movs	r3, #64	@ 0x40
 8000e62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e68:	f107 0318 	add.w	r3, r7, #24
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f003 fbef 	bl	8004650 <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e78:	f000 f92a 	bl	80010d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b26      	ldr	r3, [pc, #152]	@ (8000f18 <HAL_I2C_MspInit+0xe8>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e80:	4a25      	ldr	r2, [pc, #148]	@ (8000f18 <HAL_I2C_MspInit+0xe8>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e88:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <HAL_I2C_MspInit+0xe8>)
 8000e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e94:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <HAL_I2C_MspInit+0xe8>)
 8000e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e98:	4a1f      	ldr	r2, [pc, #124]	@ (8000f18 <HAL_I2C_MspInit+0xe8>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <HAL_I2C_MspInit+0xe8>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000eac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb2:	2312      	movs	r3, #18
 8000eb4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ecc:	f002 fae4 	bl	8003498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ed0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed6:	2312      	movs	r3, #18
 8000ed8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000eea:	4619      	mov	r1, r3
 8000eec:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <HAL_I2C_MspInit+0xec>)
 8000eee:	f002 fad3 	bl	8003498 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <HAL_I2C_MspInit+0xe8>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef6:	4a08      	ldr	r2, [pc, #32]	@ (8000f18 <HAL_I2C_MspInit+0xe8>)
 8000ef8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000efc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_I2C_MspInit+0xe8>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	3770      	adds	r7, #112	@ 0x70
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40005400 	.word	0x40005400
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	48000400 	.word	0x48000400

08000f20 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000f28:	1d39      	adds	r1, r7, #4
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <__io_putchar+0x20>)
 8000f32:	f005 ff71 	bl	8006e18 <HAL_UART_Transmit>
	return chr;
 8000f36:	687b      	ldr	r3, [r7, #4]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200004ac 	.word	0x200004ac

08000f44 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f48:	f000 ff35 	bl	8001db6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f4c:	f000 f844 	bl	8000fd8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f50:	f7ff fe78 	bl	8000c44 <MX_GPIO_Init>
	MX_DMA_Init();
 8000f54:	f7ff fe44 	bl	8000be0 <MX_DMA_Init>
	MX_UART4_Init();
 8000f58:	f000 fdce 	bl	8001af8 <MX_UART4_Init>
	MX_SPI1_Init();
 8000f5c:	f000 f8be 	bl	80010dc <MX_SPI1_Init>
	MX_TIM4_Init();
 8000f60:	f000 fbc0 	bl	80016e4 <MX_TIM4_Init>
	MX_ADC1_Init();
 8000f64:	f7ff fc12 	bl	800078c <MX_ADC1_Init>
	MX_ADC2_Init();
 8000f68:	f7ff fc9a 	bl	80008a0 <MX_ADC2_Init>
	MX_TIM1_Init();
 8000f6c:	f000 fa90 	bl	8001490 <MX_TIM1_Init>
	MX_TIM3_Init();
 8000f70:	f000 fb62 	bl	8001638 <MX_TIM3_Init>
	MX_USART3_UART_Init();
 8000f74:	f000 fe10 	bl	8001b98 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8000f78:	f7ff ff1a 	bl	8000db0 <MX_I2C1_Init>
	MX_TIM6_Init();
 8000f7c:	f000 fc08 	bl	8001790 <MX_TIM6_Init>
	MX_TIM7_Init();
 8000f80:	f000 fc3c 	bl	80017fc <MX_TIM7_Init>
	MX_TIM16_Init();
 8000f84:	f000 fc70 	bl	8001868 <MX_TIM16_Init>
	/* USER CODE BEGIN 2 */

	printf(" _____________________________\r\n");
 8000f88:	480f      	ldr	r0, [pc, #60]	@ (8000fc8 <main+0x84>)
 8000f8a:	f008 f953 	bl	8009234 <puts>
	printf("|                             |\r\n");
 8000f8e:	480f      	ldr	r0, [pc, #60]	@ (8000fcc <main+0x88>)
 8000f90:	f008 f950 	bl	8009234 <puts>
	printf("|                             |\r\n");
 8000f94:	480d      	ldr	r0, [pc, #52]	@ (8000fcc <main+0x88>)
 8000f96:	f008 f94d 	bl	8009234 <puts>
	printf("|  WELCOME ON TAGBOT PROJECT  |\r\n");
 8000f9a:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <main+0x8c>)
 8000f9c:	f008 f94a 	bl	8009234 <puts>
	printf("|                             |\r\n");
 8000fa0:	480a      	ldr	r0, [pc, #40]	@ (8000fcc <main+0x88>)
 8000fa2:	f008 f947 	bl	8009234 <puts>
	printf("|_____________________________|\r\n");
 8000fa6:	480b      	ldr	r0, [pc, #44]	@ (8000fd4 <main+0x90>)
 8000fa8:	f008 f944 	bl	8009234 <puts>
	//	printf("Démarrage du test des capteurs de distance...\r\n");
	//

	/* Code init l'accélérometre*/

	while(1 == ADXL343_Init()) {}
 8000fac:	bf00      	nop
 8000fae:	f7ff faff 	bl	80005b0 <ADXL343_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d0fa      	beq.n	8000fae <main+0x6a>
	ADXL343_Configure();
 8000fb8:	f7ff fb3a 	bl	8000630 <ADXL343_Configure>


	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8000fbc:	f7ff fdee 	bl	8000b9c <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000fc0:	f006 fdbe 	bl	8007b40 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <main+0x80>
 8000fc8:	08009ea4 	.word	0x08009ea4
 8000fcc:	08009ec4 	.word	0x08009ec4
 8000fd0:	08009ee8 	.word	0x08009ee8
 8000fd4:	08009f0c 	.word	0x08009f0c

08000fd8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b094      	sub	sp, #80	@ 0x50
 8000fdc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0318 	add.w	r3, r7, #24
 8000fe2:	2238      	movs	r2, #56	@ 0x38
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f008 f92c 	bl	8009244 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f002 fd4a 	bl	8003a94 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001000:	2301      	movs	r3, #1
 8001002:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001004:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001008:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100a:	2302      	movs	r3, #2
 800100c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100e:	2303      	movs	r3, #3
 8001010:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001012:	2304      	movs	r3, #4
 8001014:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001016:	2355      	movs	r3, #85	@ 0x55
 8001018:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800101a:	2302      	movs	r3, #2
 800101c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800101e:	2302      	movs	r3, #2
 8001020:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001022:	2302      	movs	r3, #2
 8001024:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001026:	f107 0318 	add.w	r3, r7, #24
 800102a:	4618      	mov	r0, r3
 800102c:	f002 fde6 	bl	8003bfc <HAL_RCC_OscConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x62>
	{
		Error_Handler();
 8001036:	f000 f84b 	bl	80010d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103a:	230f      	movs	r3, #15
 800103c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103e:	2303      	movs	r3, #3
 8001040:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2104      	movs	r1, #4
 8001052:	4618      	mov	r0, r3
 8001054:	f003 f8e4 	bl	8004220 <HAL_RCC_ClockConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 800105e:	f000 f837 	bl	80010d0 <Error_Handler>
	}
}
 8001062:	bf00      	nop
 8001064:	3750      	adds	r7, #80	@ 0x50
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
	//	ADXL343_DetectTap();
	if(GPIO_Pin == BNT_CAT_MOUSE_Pin){
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800107c:	d103      	bne.n	8001086 <HAL_GPIO_EXTI_Callback+0x1a>
		printf("Button pushed\r\n");
 800107e:	4811      	ldr	r0, [pc, #68]	@ (80010c4 <HAL_GPIO_EXTI_Callback+0x58>)
 8001080:	f008 f8d8 	bl	8009234 <puts>
	} else if(GPIO_Pin == Accelerometer_INT2_Pin){
		printf("Acc Int2\r\n");
		uint8_t tap_status;
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); 		//Renvoie la valeur du registre int_source
	}
}
 8001084:	e01a      	b.n	80010bc <HAL_GPIO_EXTI_Callback+0x50>
	} else if(GPIO_Pin == Accelerometer_INT1_Pin){
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	2b04      	cmp	r3, #4
 800108a:	d10a      	bne.n	80010a2 <HAL_GPIO_EXTI_Callback+0x36>
		printf("Acc Int1\r\n");
 800108c:	480e      	ldr	r0, [pc, #56]	@ (80010c8 <HAL_GPIO_EXTI_Callback+0x5c>)
 800108e:	f008 f8d1 	bl	8009234 <puts>
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); 		//Renvoie la valeur du registre int_source
 8001092:	f107 030f 	add.w	r3, r7, #15
 8001096:	2201      	movs	r2, #1
 8001098:	4619      	mov	r1, r3
 800109a:	2030      	movs	r0, #48	@ 0x30
 800109c:	f7ff faea 	bl	8000674 <ADXL343_ReadRegister>
}
 80010a0:	e00c      	b.n	80010bc <HAL_GPIO_EXTI_Callback+0x50>
	} else if(GPIO_Pin == Accelerometer_INT2_Pin){
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	2b08      	cmp	r3, #8
 80010a6:	d109      	bne.n	80010bc <HAL_GPIO_EXTI_Callback+0x50>
		printf("Acc Int2\r\n");
 80010a8:	4808      	ldr	r0, [pc, #32]	@ (80010cc <HAL_GPIO_EXTI_Callback+0x60>)
 80010aa:	f008 f8c3 	bl	8009234 <puts>
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); 		//Renvoie la valeur du registre int_source
 80010ae:	f107 030e 	add.w	r3, r7, #14
 80010b2:	2201      	movs	r2, #1
 80010b4:	4619      	mov	r1, r3
 80010b6:	2030      	movs	r0, #48	@ 0x30
 80010b8:	f7ff fadc 	bl	8000674 <ADXL343_ReadRegister>
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	08009f30 	.word	0x08009f30
 80010c8:	08009f40 	.word	0x08009f40
 80010cc:	08009f4c 	.word	0x08009f4c

080010d0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d4:	b672      	cpsid	i
}
 80010d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <Error_Handler+0x8>

080010dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001150 <MX_SPI1_Init+0x74>)
 80010e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001154 <MX_SPI1_Init+0x78>)
 80010e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <MX_SPI1_Init+0x74>)
 80010e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ee:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <MX_SPI1_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f4:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <MX_SPI1_Init+0x74>)
 80010f6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80010fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80010fc:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <MX_SPI1_Init+0x74>)
 80010fe:	2202      	movs	r2, #2
 8001100:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001102:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <MX_SPI1_Init+0x74>)
 8001104:	2201      	movs	r2, #1
 8001106:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001108:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <MX_SPI1_Init+0x74>)
 800110a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800110e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001110:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <MX_SPI1_Init+0x74>)
 8001112:	2230      	movs	r2, #48	@ 0x30
 8001114:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001116:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <MX_SPI1_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800111c:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <MX_SPI1_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001122:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <MX_SPI1_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001128:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <MX_SPI1_Init+0x74>)
 800112a:	2207      	movs	r2, #7
 800112c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <MX_SPI1_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <MX_SPI1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	@ (8001150 <MX_SPI1_Init+0x74>)
 800113c:	f003 fc78 	bl	8004a30 <HAL_SPI_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001146:	f7ff ffc3 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000027c 	.word	0x2000027c
 8001154:	40013000 	.word	0x40013000

08001158 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a17      	ldr	r2, [pc, #92]	@ (80011d4 <HAL_SPI_MspInit+0x7c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d128      	bne.n	80011cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800117a:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <HAL_SPI_MspInit+0x80>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800117e:	4a16      	ldr	r2, [pc, #88]	@ (80011d8 <HAL_SPI_MspInit+0x80>)
 8001180:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001184:	6613      	str	r3, [r2, #96]	@ 0x60
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <HAL_SPI_MspInit+0x80>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800118a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <HAL_SPI_MspInit+0x80>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a10      	ldr	r2, [pc, #64]	@ (80011d8 <HAL_SPI_MspInit+0x80>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <HAL_SPI_MspInit+0x80>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Accelerometer_SCK_Pin|Accelerometer_MISO_Pin|Accelerometer_MOSI_Pin;
 80011aa:	23e0      	movs	r3, #224	@ 0xe0
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ba:	2305      	movs	r3, #5
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c8:	f002 f966 	bl	8003498 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	@ 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40013000 	.word	0x40013000
 80011d8:	40021000 	.word	0x40021000

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_MspInit+0x50>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e6:	4a11      	ldr	r2, [pc, #68]	@ (800122c <HAL_MspInit+0x50>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ee:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <HAL_MspInit+0x50>)
 80011f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <HAL_MspInit+0x50>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fe:	4a0b      	ldr	r2, [pc, #44]	@ (800122c <HAL_MspInit+0x50>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001204:	6593      	str	r3, [r2, #88]	@ 0x58
 8001206:	4b09      	ldr	r3, [pc, #36]	@ (800122c <HAL_MspInit+0x50>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800120a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	210f      	movs	r1, #15
 8001216:	f06f 0001 	mvn.w	r0, #1
 800121a:	f001 ff4e 	bl	80030ba <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800121e:	f002 fcdd 	bl	8003bdc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <NMI_Handler+0x4>

08001238 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <MemManage_Handler+0x4>

08001248 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <UsageFault_Handler+0x4>

08001258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126a:	f000 fdf7 	bl	8001e5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800126e:	f007 f987 	bl	8008580 <xTaskGetSchedulerState>
 8001272:	4603      	mov	r3, r0
 8001274:	2b01      	cmp	r3, #1
 8001276:	d001      	beq.n	800127c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001278:	f007 fbc6 	bl	8008a08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
    // Read the INT_SOURCE register to clear the interrupt
    int8_t tap_status;
    ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1);
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	2201      	movs	r2, #1
 800128a:	4619      	mov	r1, r3
 800128c:	2030      	movs	r0, #48	@ 0x30
 800128e:	f7ff f9f1 	bl	8000674 <ADXL343_ReadRegister>

	if (tap_status & (1<<6)) {  // Tap for single tap
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00a      	beq.n	80012b6 <EXTI2_IRQHandler+0x36>
		printf("Tap detected!\r\n");
 80012a0:	4808      	ldr	r0, [pc, #32]	@ (80012c4 <EXTI2_IRQHandler+0x44>)
 80012a2:	f007 ffc7 	bl	8009234 <puts>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80012a6:	2101      	movs	r1, #1
 80012a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ac:	f002 fa8e 	bl	80037cc <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80012b0:	2064      	movs	r0, #100	@ 0x64
 80012b2:	f000 fdf1 	bl	8001e98 <HAL_Delay>
	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Accelerometer_INT1_Pin);
 80012b6:	2004      	movs	r0, #4
 80012b8:	f002 faa2 	bl	8003800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	08009f58 	.word	0x08009f58

080012c8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
//		printf("Tap detected!\r\n");
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
//		HAL_Delay(100);
//	}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Accelerometer_INT2_Pin);
 80012cc:	2008      	movs	r0, #8
 80012ce:	f002 fa97 	bl	8003800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80012dc:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <DMA1_Channel1_IRQHandler+0x10>)
 80012de:	f001 ffc9 	bl	8003274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200001c0 	.word	0x200001c0

080012ec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012f0:	4802      	ldr	r0, [pc, #8]	@ (80012fc <DMA1_Channel2_IRQHandler+0x10>)
 80012f2:	f001 ffbf 	bl	8003274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000160 	.word	0x20000160

08001300 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BNT_CAT_MOUSE_Pin);
 8001304:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001308:	f002 fa7a 	bl	8003800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <TIM6_DAC_IRQHandler+0x10>)
 8001316:	f004 fc1d 	bl	8005b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200003c8 	.word	0x200003c8

08001324 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	e00a      	b.n	800134c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001336:	f3af 8000 	nop.w
 800133a:	4601      	mov	r1, r0
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	60ba      	str	r2, [r7, #8]
 8001342:	b2ca      	uxtb	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3301      	adds	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	429a      	cmp	r2, r3
 8001352:	dbf0      	blt.n	8001336 <_read+0x12>
  }

  return len;
 8001354:	687b      	ldr	r3, [r7, #4]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	e009      	b.n	8001384 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	60ba      	str	r2, [r7, #8]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fdd1 	bl	8000f20 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3301      	adds	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	dbf1      	blt.n	8001370 <_write+0x12>
  }
  return len;
 800138c:	687b      	ldr	r3, [r7, #4]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_close>:

int _close(int file)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013be:	605a      	str	r2, [r3, #4]
  return 0;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <_isatty>:

int _isatty(int file)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001408:	4a14      	ldr	r2, [pc, #80]	@ (800145c <_sbrk+0x5c>)
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <_sbrk+0x60>)
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <_sbrk+0x64>)
 800141e:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <_sbrk+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d207      	bcs.n	8001440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001430:	f007 ff20 	bl	8009274 <__errno>
 8001434:	4603      	mov	r3, r0
 8001436:	220c      	movs	r2, #12
 8001438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800143e:	e009      	b.n	8001454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001446:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <_sbrk+0x64>)
 8001450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20008000 	.word	0x20008000
 8001460:	00000400 	.word	0x00000400
 8001464:	200002e0 	.word	0x200002e0
 8001468:	20001478 	.word	0x20001478

0800146c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <SystemInit+0x20>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001476:	4a05      	ldr	r2, [pc, #20]	@ (800148c <SystemInit+0x20>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b09c      	sub	sp, #112	@ 0x70
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001496:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	615a      	str	r2, [r3, #20]
 80014c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2234      	movs	r2, #52	@ 0x34
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f007 feba 	bl	8009244 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014d0:	4b57      	ldr	r3, [pc, #348]	@ (8001630 <MX_TIM1_Init+0x1a0>)
 80014d2:	4a58      	ldr	r2, [pc, #352]	@ (8001634 <MX_TIM1_Init+0x1a4>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014d6:	4b56      	ldr	r3, [pc, #344]	@ (8001630 <MX_TIM1_Init+0x1a0>)
 80014d8:	2200      	movs	r2, #0
 80014da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014dc:	4b54      	ldr	r3, [pc, #336]	@ (8001630 <MX_TIM1_Init+0x1a0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6799;
 80014e2:	4b53      	ldr	r3, [pc, #332]	@ (8001630 <MX_TIM1_Init+0x1a0>)
 80014e4:	f641 228f 	movw	r2, #6799	@ 0x1a8f
 80014e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ea:	4b51      	ldr	r3, [pc, #324]	@ (8001630 <MX_TIM1_Init+0x1a0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001630 <MX_TIM1_Init+0x1a0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001630 <MX_TIM1_Init+0x1a0>)
 80014f8:	2280      	movs	r2, #128	@ 0x80
 80014fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014fc:	484c      	ldr	r0, [pc, #304]	@ (8001630 <MX_TIM1_Init+0x1a0>)
 80014fe:	f004 f9cb 	bl	8005898 <HAL_TIM_Base_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001508:	f7ff fde2 	bl	80010d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001510:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001512:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001516:	4619      	mov	r1, r3
 8001518:	4845      	ldr	r0, [pc, #276]	@ (8001630 <MX_TIM1_Init+0x1a0>)
 800151a:	f004 fd7f 	bl	800601c <HAL_TIM_ConfigClockSource>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001524:	f7ff fdd4 	bl	80010d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001528:	4841      	ldr	r0, [pc, #260]	@ (8001630 <MX_TIM1_Init+0x1a0>)
 800152a:	f004 fa0c 	bl	8005946 <HAL_TIM_PWM_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001534:	f7ff fdcc 	bl	80010d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001538:	2300      	movs	r3, #0
 800153a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800153c:	2300      	movs	r3, #0
 800153e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001544:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001548:	4619      	mov	r1, r3
 800154a:	4839      	ldr	r0, [pc, #228]	@ (8001630 <MX_TIM1_Init+0x1a0>)
 800154c:	f005 fac0 	bl	8006ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001556:	f7ff fdbb 	bl	80010d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800155a:	2360      	movs	r3, #96	@ 0x60
 800155c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001562:	2300      	movs	r3, #0
 8001564:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001566:	2300      	movs	r3, #0
 8001568:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001576:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800157a:	2200      	movs	r2, #0
 800157c:	4619      	mov	r1, r3
 800157e:	482c      	ldr	r0, [pc, #176]	@ (8001630 <MX_TIM1_Init+0x1a0>)
 8001580:	f004 fc38 	bl	8005df4 <HAL_TIM_PWM_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800158a:	f7ff fda1 	bl	80010d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800158e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001592:	2204      	movs	r2, #4
 8001594:	4619      	mov	r1, r3
 8001596:	4826      	ldr	r0, [pc, #152]	@ (8001630 <MX_TIM1_Init+0x1a0>)
 8001598:	f004 fc2c 	bl	8005df4 <HAL_TIM_PWM_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80015a2:	f7ff fd95 	bl	80010d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015aa:	2208      	movs	r2, #8
 80015ac:	4619      	mov	r1, r3
 80015ae:	4820      	ldr	r0, [pc, #128]	@ (8001630 <MX_TIM1_Init+0x1a0>)
 80015b0:	f004 fc20 	bl	8005df4 <HAL_TIM_PWM_ConfigChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80015ba:	f7ff fd89 	bl	80010d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015c2:	220c      	movs	r2, #12
 80015c4:	4619      	mov	r1, r3
 80015c6:	481a      	ldr	r0, [pc, #104]	@ (8001630 <MX_TIM1_Init+0x1a0>)
 80015c8:	f004 fc14 	bl	8005df4 <HAL_TIM_PWM_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80015d2:	f7ff fd7d 	bl	80010d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001600:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001606:	2300      	movs	r3, #0
 8001608:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	4619      	mov	r1, r3
 8001612:	4807      	ldr	r0, [pc, #28]	@ (8001630 <MX_TIM1_Init+0x1a0>)
 8001614:	f005 fade 	bl	8006bd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 800161e:	f7ff fd57 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001622:	4803      	ldr	r0, [pc, #12]	@ (8001630 <MX_TIM1_Init+0x1a0>)
 8001624:	f000 fa1e 	bl	8001a64 <HAL_TIM_MspPostInit>

}
 8001628:	bf00      	nop
 800162a:	3770      	adds	r7, #112	@ 0x70
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200002e4 	.word	0x200002e4
 8001634:	40012c00 	.word	0x40012c00

08001638 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	@ 0x30
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	2224      	movs	r2, #36	@ 0x24
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f007 fdfc 	bl	8009244 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164c:	463b      	mov	r3, r7
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001656:	4b21      	ldr	r3, [pc, #132]	@ (80016dc <MX_TIM3_Init+0xa4>)
 8001658:	4a21      	ldr	r2, [pc, #132]	@ (80016e0 <MX_TIM3_Init+0xa8>)
 800165a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800165c:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <MX_TIM3_Init+0xa4>)
 800165e:	2200      	movs	r2, #0
 8001660:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001662:	4b1e      	ldr	r3, [pc, #120]	@ (80016dc <MX_TIM3_Init+0xa4>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001668:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <MX_TIM3_Init+0xa4>)
 800166a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800166e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001670:	4b1a      	ldr	r3, [pc, #104]	@ (80016dc <MX_TIM3_Init+0xa4>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001676:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <MX_TIM3_Init+0xa4>)
 8001678:	2280      	movs	r2, #128	@ 0x80
 800167a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800167c:	2301      	movs	r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001684:	2301      	movs	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001694:	2301      	movs	r3, #1
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	4619      	mov	r1, r3
 80016a6:	480d      	ldr	r0, [pc, #52]	@ (80016dc <MX_TIM3_Init+0xa4>)
 80016a8:	f004 f9ae 	bl	8005a08 <HAL_TIM_Encoder_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80016b2:	f7ff fd0d 	bl	80010d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016be:	463b      	mov	r3, r7
 80016c0:	4619      	mov	r1, r3
 80016c2:	4806      	ldr	r0, [pc, #24]	@ (80016dc <MX_TIM3_Init+0xa4>)
 80016c4:	f005 fa04 	bl	8006ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80016ce:	f7ff fcff 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	3730      	adds	r7, #48	@ 0x30
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000330 	.word	0x20000330
 80016e0:	40000400 	.word	0x40000400

080016e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	@ 0x30
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	2224      	movs	r2, #36	@ 0x24
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f007 fda6 	bl	8009244 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	463b      	mov	r3, r7
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001702:	4b21      	ldr	r3, [pc, #132]	@ (8001788 <MX_TIM4_Init+0xa4>)
 8001704:	4a21      	ldr	r2, [pc, #132]	@ (800178c <MX_TIM4_Init+0xa8>)
 8001706:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001708:	4b1f      	ldr	r3, [pc, #124]	@ (8001788 <MX_TIM4_Init+0xa4>)
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <MX_TIM4_Init+0xa4>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001714:	4b1c      	ldr	r3, [pc, #112]	@ (8001788 <MX_TIM4_Init+0xa4>)
 8001716:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800171a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171c:	4b1a      	ldr	r3, [pc, #104]	@ (8001788 <MX_TIM4_Init+0xa4>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001722:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <MX_TIM4_Init+0xa4>)
 8001724:	2280      	movs	r2, #128	@ 0x80
 8001726:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001728:	2301      	movs	r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001730:	2301      	movs	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001740:	2301      	movs	r3, #1
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	4619      	mov	r1, r3
 8001752:	480d      	ldr	r0, [pc, #52]	@ (8001788 <MX_TIM4_Init+0xa4>)
 8001754:	f004 f958 	bl	8005a08 <HAL_TIM_Encoder_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800175e:	f7ff fcb7 	bl	80010d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800176a:	463b      	mov	r3, r7
 800176c:	4619      	mov	r1, r3
 800176e:	4806      	ldr	r0, [pc, #24]	@ (8001788 <MX_TIM4_Init+0xa4>)
 8001770:	f005 f9ae 	bl	8006ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800177a:	f7ff fca9 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	3730      	adds	r7, #48	@ 0x30
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000037c 	.word	0x2000037c
 800178c:	40000800 	.word	0x40000800

08001790 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017a0:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <MX_TIM6_Init+0x64>)
 80017a2:	4a15      	ldr	r2, [pc, #84]	@ (80017f8 <MX_TIM6_Init+0x68>)
 80017a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 80017a6:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <MX_TIM6_Init+0x64>)
 80017a8:	22a9      	movs	r2, #169	@ 0xa9
 80017aa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <MX_TIM6_Init+0x64>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <MX_TIM6_Init+0x64>)
 80017b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017b8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <MX_TIM6_Init+0x64>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017c0:	480c      	ldr	r0, [pc, #48]	@ (80017f4 <MX_TIM6_Init+0x64>)
 80017c2:	f004 f869 	bl	8005898 <HAL_TIM_Base_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80017cc:	f7ff fc80 	bl	80010d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017d0:	2320      	movs	r3, #32
 80017d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <MX_TIM6_Init+0x64>)
 80017de:	f005 f977 	bl	8006ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80017e8:	f7ff fc72 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200003c8 	.word	0x200003c8
 80017f8:	40001000 	.word	0x40001000

080017fc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800180c:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <MX_TIM7_Init+0x64>)
 800180e:	4a15      	ldr	r2, [pc, #84]	@ (8001864 <MX_TIM7_Init+0x68>)
 8001810:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 8001812:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <MX_TIM7_Init+0x64>)
 8001814:	22a9      	movs	r2, #169	@ 0xa9
 8001816:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <MX_TIM7_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <MX_TIM7_Init+0x64>)
 8001820:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001824:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <MX_TIM7_Init+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800182c:	480c      	ldr	r0, [pc, #48]	@ (8001860 <MX_TIM7_Init+0x64>)
 800182e:	f004 f833 	bl	8005898 <HAL_TIM_Base_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001838:	f7ff fc4a 	bl	80010d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	@ (8001860 <MX_TIM7_Init+0x64>)
 800184a:	f005 f941 	bl	8006ad0 <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001854:	f7ff fc3c 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000414 	.word	0x20000414
 8001864:	40001400 	.word	0x40001400

08001868 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800186c:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <MX_TIM16_Init+0x48>)
 800186e:	4a11      	ldr	r2, [pc, #68]	@ (80018b4 <MX_TIM16_Init+0x4c>)
 8001870:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1699;
 8001872:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <MX_TIM16_Init+0x48>)
 8001874:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001878:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <MX_TIM16_Init+0x48>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8001880:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <MX_TIM16_Init+0x48>)
 8001882:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001886:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <MX_TIM16_Init+0x48>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800188e:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <MX_TIM16_Init+0x48>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <MX_TIM16_Init+0x48>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <MX_TIM16_Init+0x48>)
 800189c:	f003 fffc 	bl	8005898 <HAL_TIM_Base_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80018a6:	f7ff fc13 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000460 	.word	0x20000460
 80018b4:	40014400 	.word	0x40014400

080018b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a28      	ldr	r2, [pc, #160]	@ (8001968 <HAL_TIM_Base_MspInit+0xb0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d10c      	bne.n	80018e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ca:	4b28      	ldr	r3, [pc, #160]	@ (800196c <HAL_TIM_Base_MspInit+0xb4>)
 80018cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ce:	4a27      	ldr	r2, [pc, #156]	@ (800196c <HAL_TIM_Base_MspInit+0xb4>)
 80018d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80018d6:	4b25      	ldr	r3, [pc, #148]	@ (800196c <HAL_TIM_Base_MspInit+0xb4>)
 80018d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80018e2:	e03c      	b.n	800195e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM6)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a21      	ldr	r2, [pc, #132]	@ (8001970 <HAL_TIM_Base_MspInit+0xb8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d114      	bne.n	8001918 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018ee:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <HAL_TIM_Base_MspInit+0xb4>)
 80018f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f2:	4a1e      	ldr	r2, [pc, #120]	@ (800196c <HAL_TIM_Base_MspInit+0xb4>)
 80018f4:	f043 0310 	orr.w	r3, r3, #16
 80018f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018fa:	4b1c      	ldr	r3, [pc, #112]	@ (800196c <HAL_TIM_Base_MspInit+0xb4>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2105      	movs	r1, #5
 800190a:	2036      	movs	r0, #54	@ 0x36
 800190c:	f001 fbd5 	bl	80030ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001910:	2036      	movs	r0, #54	@ 0x36
 8001912:	f001 fbec 	bl	80030ee <HAL_NVIC_EnableIRQ>
}
 8001916:	e022      	b.n	800195e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM7)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a15      	ldr	r2, [pc, #84]	@ (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d10c      	bne.n	800193c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001922:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_TIM_Base_MspInit+0xb4>)
 8001924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001926:	4a11      	ldr	r2, [pc, #68]	@ (800196c <HAL_TIM_Base_MspInit+0xb4>)
 8001928:	f043 0320 	orr.w	r3, r3, #32
 800192c:	6593      	str	r3, [r2, #88]	@ 0x58
 800192e:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <HAL_TIM_Base_MspInit+0xb4>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001932:	f003 0320 	and.w	r3, r3, #32
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
}
 800193a:	e010      	b.n	800195e <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM16)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0d      	ldr	r2, [pc, #52]	@ (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d10b      	bne.n	800195e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <HAL_TIM_Base_MspInit+0xb4>)
 8001948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800194a:	4a08      	ldr	r2, [pc, #32]	@ (800196c <HAL_TIM_Base_MspInit+0xb4>)
 800194c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001950:	6613      	str	r3, [r2, #96]	@ 0x60
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_TIM_Base_MspInit+0xb4>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40012c00 	.word	0x40012c00
 800196c:	40021000 	.word	0x40021000
 8001970:	40001000 	.word	0x40001000
 8001974:	40001400 	.word	0x40001400
 8001978:	40014400 	.word	0x40014400

0800197c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08c      	sub	sp, #48	@ 0x30
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a2e      	ldr	r2, [pc, #184]	@ (8001a54 <HAL_TIM_Encoder_MspInit+0xd8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d128      	bne.n	80019f0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800199e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a58 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001a58 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001a58 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	4b28      	ldr	r3, [pc, #160]	@ (8001a58 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	4a27      	ldr	r2, [pc, #156]	@ (8001a58 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c2:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LIDAR_M_SCTR_Pin|ENCODER_RIGHT_A_Pin|ENCODER_RIGHT_B_Pin;
 80019ce:	2332      	movs	r3, #50	@ 0x32
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019de:	2302      	movs	r3, #2
 80019e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	481c      	ldr	r0, [pc, #112]	@ (8001a5c <HAL_TIM_Encoder_MspInit+0xe0>)
 80019ea:	f001 fd55 	bl	8003498 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80019ee:	e02c      	b.n	8001a4a <HAL_TIM_Encoder_MspInit+0xce>
  else if(tim_encoderHandle->Instance==TIM4)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a60 <HAL_TIM_Encoder_MspInit+0xe4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d127      	bne.n	8001a4a <HAL_TIM_Encoder_MspInit+0xce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019fa:	4b17      	ldr	r3, [pc, #92]	@ (8001a58 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fe:	4a16      	ldr	r2, [pc, #88]	@ (8001a58 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a06:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a16:	4a10      	ldr	r2, [pc, #64]	@ (8001a58 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_LEFT_A_Pin|ENCODER_LEFT_B_Pin;
 8001a2a:	23c0      	movs	r3, #192	@ 0xc0
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	@ (8001a5c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001a46:	f001 fd27 	bl	8003498 <HAL_GPIO_Init>
}
 8001a4a:	bf00      	nop
 8001a4c:	3730      	adds	r7, #48	@ 0x30
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40000400 	.word	0x40000400
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	48000400 	.word	0x48000400
 8001a60:	40000800 	.word	0x40000800

08001a64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1b      	ldr	r2, [pc, #108]	@ (8001af0 <HAL_TIM_MspPostInit+0x8c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d12f      	bne.n	8001ae6 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <HAL_TIM_MspPostInit+0x90>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001af4 <HAL_TIM_MspPostInit+0x90>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a92:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <HAL_TIM_MspPostInit+0x90>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = RIGHT_MOTOR_FWD_Pin|RIGHT_MOTOR_REV_Pin|LEFT_MOTOR_FWD_Pin;
 8001a9e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001aa2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ab0:	2306      	movs	r3, #6
 8001ab2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001abe:	f001 fceb 	bl	8003498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEFT_MOTOR_REV_Pin;
 8001ac2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ac6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8001ad4:	230b      	movs	r3, #11
 8001ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LEFT_MOTOR_REV_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	4619      	mov	r1, r3
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae2:	f001 fcd9 	bl	8003498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40012c00 	.word	0x40012c00
 8001af4:	40021000 	.word	0x40021000

08001af8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001afc:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <MX_UART4_Init+0x98>)
 8001afe:	4a25      	ldr	r2, [pc, #148]	@ (8001b94 <MX_UART4_Init+0x9c>)
 8001b00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001b02:	4b23      	ldr	r3, [pc, #140]	@ (8001b90 <MX_UART4_Init+0x98>)
 8001b04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <MX_UART4_Init+0x98>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <MX_UART4_Init+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <MX_UART4_Init+0x98>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <MX_UART4_Init+0x98>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <MX_UART4_Init+0x98>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <MX_UART4_Init+0x98>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <MX_UART4_Init+0x98>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b34:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <MX_UART4_Init+0x98>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <MX_UART4_Init+0x98>)
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001b40:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <MX_UART4_Init+0x98>)
 8001b42:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b46:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b48:	4811      	ldr	r0, [pc, #68]	@ (8001b90 <MX_UART4_Init+0x98>)
 8001b4a:	f005 f915 	bl	8006d78 <HAL_UART_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_UART4_Init+0x60>
  {
    Error_Handler();
 8001b54:	f7ff fabc 	bl	80010d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b58:	2100      	movs	r1, #0
 8001b5a:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <MX_UART4_Init+0x98>)
 8001b5c:	f005 ff0e 	bl	800797c <HAL_UARTEx_SetTxFifoThreshold>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8001b66:	f7ff fab3 	bl	80010d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4808      	ldr	r0, [pc, #32]	@ (8001b90 <MX_UART4_Init+0x98>)
 8001b6e:	f005 ff43 	bl	80079f8 <HAL_UARTEx_SetRxFifoThreshold>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_UART4_Init+0x84>
  {
    Error_Handler();
 8001b78:	f7ff faaa 	bl	80010d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001b7c:	4804      	ldr	r0, [pc, #16]	@ (8001b90 <MX_UART4_Init+0x98>)
 8001b7e:	f005 fec4 	bl	800790a <HAL_UARTEx_DisableFifoMode>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_UART4_Init+0x94>
  {
    Error_Handler();
 8001b88:	f7ff faa2 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	200004ac 	.word	0x200004ac
 8001b94:	40004c00 	.word	0x40004c00

08001b98 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b9c:	4b22      	ldr	r3, [pc, #136]	@ (8001c28 <MX_USART3_UART_Init+0x90>)
 8001b9e:	4a23      	ldr	r2, [pc, #140]	@ (8001c2c <MX_USART3_UART_Init+0x94>)
 8001ba0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 128000;
 8001ba2:	4b21      	ldr	r3, [pc, #132]	@ (8001c28 <MX_USART3_UART_Init+0x90>)
 8001ba4:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8001ba8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001baa:	4b1f      	ldr	r3, [pc, #124]	@ (8001c28 <MX_USART3_UART_Init+0x90>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c28 <MX_USART3_UART_Init+0x90>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <MX_USART3_UART_Init+0x90>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <MX_USART3_UART_Init+0x90>)
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc2:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <MX_USART3_UART_Init+0x90>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc8:	4b17      	ldr	r3, [pc, #92]	@ (8001c28 <MX_USART3_UART_Init+0x90>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bce:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <MX_USART3_UART_Init+0x90>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bd4:	4b14      	ldr	r3, [pc, #80]	@ (8001c28 <MX_USART3_UART_Init+0x90>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bda:	4b13      	ldr	r3, [pc, #76]	@ (8001c28 <MX_USART3_UART_Init+0x90>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001be0:	4811      	ldr	r0, [pc, #68]	@ (8001c28 <MX_USART3_UART_Init+0x90>)
 8001be2:	f005 f8c9 	bl	8006d78 <HAL_UART_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001bec:	f7ff fa70 	bl	80010d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	480d      	ldr	r0, [pc, #52]	@ (8001c28 <MX_USART3_UART_Init+0x90>)
 8001bf4:	f005 fec2 	bl	800797c <HAL_UARTEx_SetTxFifoThreshold>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001bfe:	f7ff fa67 	bl	80010d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c02:	2100      	movs	r1, #0
 8001c04:	4808      	ldr	r0, [pc, #32]	@ (8001c28 <MX_USART3_UART_Init+0x90>)
 8001c06:	f005 fef7 	bl	80079f8 <HAL_UARTEx_SetRxFifoThreshold>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c10:	f7ff fa5e 	bl	80010d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c14:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <MX_USART3_UART_Init+0x90>)
 8001c16:	f005 fe78 	bl	800790a <HAL_UARTEx_DisableFifoMode>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c20:	f7ff fa56 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000540 	.word	0x20000540
 8001c2c:	40004800 	.word	0x40004800

08001c30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b09c      	sub	sp, #112	@ 0x70
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c48:	f107 0318 	add.w	r3, r7, #24
 8001c4c:	2244      	movs	r2, #68	@ 0x44
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f007 faf7 	bl	8009244 <memset>
  if(uartHandle->Instance==UART4)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d50 <HAL_UART_MspInit+0x120>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d137      	bne.n	8001cd0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c60:	2308      	movs	r3, #8
 8001c62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c68:	f107 0318 	add.w	r3, r7, #24
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f002 fcef 	bl	8004650 <HAL_RCCEx_PeriphCLKConfig>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c78:	f7ff fa2a 	bl	80010d0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c7c:	4b35      	ldr	r3, [pc, #212]	@ (8001d54 <HAL_UART_MspInit+0x124>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c80:	4a34      	ldr	r2, [pc, #208]	@ (8001d54 <HAL_UART_MspInit+0x124>)
 8001c82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001c86:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c88:	4b32      	ldr	r3, [pc, #200]	@ (8001d54 <HAL_UART_MspInit+0x124>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c94:	4b2f      	ldr	r3, [pc, #188]	@ (8001d54 <HAL_UART_MspInit+0x124>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c98:	4a2e      	ldr	r2, [pc, #184]	@ (8001d54 <HAL_UART_MspInit+0x124>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ca0:	4b2c      	ldr	r3, [pc, #176]	@ (8001d54 <HAL_UART_MspInit+0x124>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001cac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001cbe:	2305      	movs	r3, #5
 8001cc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4823      	ldr	r0, [pc, #140]	@ (8001d58 <HAL_UART_MspInit+0x128>)
 8001cca:	f001 fbe5 	bl	8003498 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001cce:	e03b      	b.n	8001d48 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a21      	ldr	r2, [pc, #132]	@ (8001d5c <HAL_UART_MspInit+0x12c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d136      	bne.n	8001d48 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cda:	2304      	movs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce2:	f107 0318 	add.w	r3, r7, #24
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f002 fcb2 	bl	8004650 <HAL_RCCEx_PeriphCLKConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001cf2:	f7ff f9ed 	bl	80010d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cf6:	4b17      	ldr	r3, [pc, #92]	@ (8001d54 <HAL_UART_MspInit+0x124>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfa:	4a16      	ldr	r2, [pc, #88]	@ (8001d54 <HAL_UART_MspInit+0x124>)
 8001cfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d02:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <HAL_UART_MspInit+0x124>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <HAL_UART_MspInit+0x124>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d12:	4a10      	ldr	r2, [pc, #64]	@ (8001d54 <HAL_UART_MspInit+0x124>)
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <HAL_UART_MspInit+0x124>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_INPUT_Pin|LIDAR_OUTPUT_Pin;
 8001d26:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d38:	2307      	movs	r3, #7
 8001d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001d40:	4619      	mov	r1, r3
 8001d42:	4807      	ldr	r0, [pc, #28]	@ (8001d60 <HAL_UART_MspInit+0x130>)
 8001d44:	f001 fba8 	bl	8003498 <HAL_GPIO_Init>
}
 8001d48:	bf00      	nop
 8001d4a:	3770      	adds	r7, #112	@ 0x70
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40004c00 	.word	0x40004c00
 8001d54:	40021000 	.word	0x40021000
 8001d58:	48000800 	.word	0x48000800
 8001d5c:	40004800 	.word	0x40004800
 8001d60:	48000400 	.word	0x48000400

08001d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d64:	480d      	ldr	r0, [pc, #52]	@ (8001d9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d66:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d68:	f7ff fb80 	bl	800146c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d6c:	480c      	ldr	r0, [pc, #48]	@ (8001da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d6e:	490d      	ldr	r1, [pc, #52]	@ (8001da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d70:	4a0d      	ldr	r2, [pc, #52]	@ (8001da8 <LoopForever+0xe>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d74:	e002      	b.n	8001d7c <LoopCopyDataInit>

08001d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7a:	3304      	adds	r3, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d80:	d3f9      	bcc.n	8001d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d82:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d84:	4c0a      	ldr	r4, [pc, #40]	@ (8001db0 <LoopForever+0x16>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d88:	e001      	b.n	8001d8e <LoopFillZerobss>

08001d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d8c:	3204      	adds	r2, #4

08001d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d90:	d3fb      	bcc.n	8001d8a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001d92:	f007 fa75 	bl	8009280 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d96:	f7ff f8d5 	bl	8000f44 <main>

08001d9a <LoopForever>:

LoopForever:
    b LoopForever
 8001d9a:	e7fe      	b.n	8001d9a <LoopForever>
  ldr   r0, =_estack
 8001d9c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001da8:	08009ff4 	.word	0x08009ff4
  ldr r2, =_sbss
 8001dac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001db0:	20001478 	.word	0x20001478

08001db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC1_2_IRQHandler>

08001db6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	f001 f96f 	bl	80030a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dc6:	200f      	movs	r0, #15
 8001dc8:	f000 f80e 	bl	8001de8 <HAL_InitTick>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	71fb      	strb	r3, [r7, #7]
 8001dd6:	e001      	b.n	8001ddc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dd8:	f7ff fa00 	bl	80011dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ddc:	79fb      	ldrb	r3, [r7, #7]

}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001df4:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <HAL_InitTick+0x68>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d022      	beq.n	8001e42 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001dfc:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <HAL_InitTick+0x6c>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <HAL_InitTick+0x68>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e08:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e10:	4618      	mov	r0, r3
 8001e12:	f001 f97a 	bl	800310a <HAL_SYSTICK_Config>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10f      	bne.n	8001e3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b0f      	cmp	r3, #15
 8001e20:	d809      	bhi.n	8001e36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e22:	2200      	movs	r2, #0
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e2a:	f001 f946 	bl	80030ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <HAL_InitTick+0x70>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	e007      	b.n	8001e46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
 8001e3a:	e004      	b.n	8001e46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	e001      	b.n	8001e46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000008 	.word	0x20000008
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e60:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <HAL_IncTick+0x1c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <HAL_IncTick+0x20>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a03      	ldr	r2, [pc, #12]	@ (8001e78 <HAL_IncTick+0x1c>)
 8001e6c:	6013      	str	r3, [r2, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	200005d4 	.word	0x200005d4
 8001e7c:	20000008 	.word	0x20000008

08001e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return uwTick;
 8001e84:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <HAL_GetTick+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	200005d4 	.word	0x200005d4

08001e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea0:	f7ff ffee 	bl	8001e80 <HAL_GetTick>
 8001ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001eb0:	d004      	beq.n	8001ebc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eb2:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <HAL_Delay+0x40>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4413      	add	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ebc:	bf00      	nop
 8001ebe:	f7ff ffdf 	bl	8001e80 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d8f7      	bhi.n	8001ebe <HAL_Delay+0x26>
  {
  }
}
 8001ece:	bf00      	nop
 8001ed0:	bf00      	nop
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000008 	.word	0x20000008

08001edc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	3360      	adds	r3, #96	@ 0x60
 8001f56:	461a      	mov	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <LL_ADC_SetOffset+0x44>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f7c:	bf00      	nop
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	03fff000 	.word	0x03fff000

08001f8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3360      	adds	r3, #96	@ 0x60
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3360      	adds	r3, #96	@ 0x60
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fe2:	bf00      	nop
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b087      	sub	sp, #28
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3360      	adds	r3, #96	@ 0x60
 8001ffe:	461a      	mov	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	431a      	orrs	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002018:	bf00      	nop
 800201a:	371c      	adds	r7, #28
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3360      	adds	r3, #96	@ 0x60
 8002034:	461a      	mov	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	431a      	orrs	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800204e:	bf00      	nop
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	615a      	str	r2, [r3, #20]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3330      	adds	r3, #48	@ 0x30
 8002090:	461a      	mov	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	f003 030c 	and.w	r3, r3, #12
 800209c:	4413      	add	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	211f      	movs	r1, #31
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	401a      	ands	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	0e9b      	lsrs	r3, r3, #26
 80020b8:	f003 011f 	and.w	r1, r3, #31
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f003 031f 	and.w	r3, r3, #31
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	431a      	orrs	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020cc:	bf00      	nop
 80020ce:	371c      	adds	r7, #28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	3314      	adds	r3, #20
 80020e8:	461a      	mov	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	0e5b      	lsrs	r3, r3, #25
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	4413      	add	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	0d1b      	lsrs	r3, r3, #20
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	2107      	movs	r1, #7
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	401a      	ands	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	0d1b      	lsrs	r3, r3, #20
 8002112:	f003 031f 	and.w	r3, r3, #31
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	431a      	orrs	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002122:	bf00      	nop
 8002124:	371c      	adds	r7, #28
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002148:	43db      	mvns	r3, r3
 800214a:	401a      	ands	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0318 	and.w	r3, r3, #24
 8002152:	4908      	ldr	r1, [pc, #32]	@ (8002174 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002154:	40d9      	lsrs	r1, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	400b      	ands	r3, r1
 800215a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215e:	431a      	orrs	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	0007ffff 	.word	0x0007ffff

08002178 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002188:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6093      	str	r3, [r2, #8]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021b0:	d101      	bne.n	80021b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80021d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021d8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002200:	d101      	bne.n	8002206 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <LL_ADC_IsEnabled+0x18>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <LL_ADC_IsEnabled+0x1a>
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b04      	cmp	r3, #4
 800224c:	d101      	bne.n	8002252 <LL_ADC_REG_IsConversionOngoing+0x18>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b08      	cmp	r3, #8
 8002272:	d101      	bne.n	8002278 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b089      	sub	sp, #36	@ 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e167      	b.n	8002572 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7fe fb6d 	bl	8000990 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff67 	bl	800219c <LL_ADC_IsDeepPowerDownEnabled>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d004      	beq.n	80022de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff4d 	bl	8002178 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff ff82 	bl	80021ec <LL_ADC_IsInternalRegulatorEnabled>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d115      	bne.n	800231a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff66 	bl	80021c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022f8:	4ba0      	ldr	r3, [pc, #640]	@ (800257c <HAL_ADC_Init+0x2f4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	099b      	lsrs	r3, r3, #6
 80022fe:	4aa0      	ldr	r2, [pc, #640]	@ (8002580 <HAL_ADC_Init+0x2f8>)
 8002300:	fba2 2303 	umull	r2, r3, r2, r3
 8002304:	099b      	lsrs	r3, r3, #6
 8002306:	3301      	adds	r3, #1
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800230c:	e002      	b.n	8002314 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3b01      	subs	r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f9      	bne.n	800230e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ff64 	bl	80021ec <LL_ADC_IsInternalRegulatorEnabled>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10d      	bne.n	8002346 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232e:	f043 0210 	orr.w	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff75 	bl	800223a <LL_ADC_REG_IsConversionOngoing>
 8002350:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 8100 	bne.w	8002560 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f040 80fc 	bne.w	8002560 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002370:	f043 0202 	orr.w	r2, r3, #2
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff49 	bl	8002214 <LL_ADC_IsEnabled>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d111      	bne.n	80023ac <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002388:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800238c:	f7ff ff42 	bl	8002214 <LL_ADC_IsEnabled>
 8002390:	4604      	mov	r4, r0
 8002392:	487c      	ldr	r0, [pc, #496]	@ (8002584 <HAL_ADC_Init+0x2fc>)
 8002394:	f7ff ff3e 	bl	8002214 <LL_ADC_IsEnabled>
 8002398:	4603      	mov	r3, r0
 800239a:	4323      	orrs	r3, r4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4619      	mov	r1, r3
 80023a6:	4878      	ldr	r0, [pc, #480]	@ (8002588 <HAL_ADC_Init+0x300>)
 80023a8:	f7ff fd98 	bl	8001edc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7f5b      	ldrb	r3, [r3, #29]
 80023b0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023b6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80023bc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80023c2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023ca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d106      	bne.n	80023e8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023de:	3b01      	subs	r3, #1
 80023e0:	045b      	lsls	r3, r3, #17
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d009      	beq.n	8002404 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	4b60      	ldr	r3, [pc, #384]	@ (800258c <HAL_ADC_Init+0x304>)
 800240c:	4013      	ands	r3, r2
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	69b9      	ldr	r1, [r7, #24]
 8002414:	430b      	orrs	r3, r1
 8002416:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ff14 	bl	8002260 <LL_ADC_INJ_IsConversionOngoing>
 8002438:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d16d      	bne.n	800251c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d16a      	bne.n	800251c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800244a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002452:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002462:	f023 0302 	bic.w	r3, r3, #2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	69b9      	ldr	r1, [r7, #24]
 800246c:	430b      	orrs	r3, r1
 800246e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d017      	beq.n	80024a8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691a      	ldr	r2, [r3, #16]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002486:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002490:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002494:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6911      	ldr	r1, [r2, #16]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	430b      	orrs	r3, r1
 80024a2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80024a6:	e013      	b.n	80024d0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691a      	ldr	r2, [r3, #16]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80024b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80024c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024cc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d118      	bne.n	800250c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024f0:	4311      	orrs	r1, r2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80024f6:	4311      	orrs	r1, r2
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024fc:	430a      	orrs	r2, r1
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0201 	orr.w	r2, r2, #1
 8002508:	611a      	str	r2, [r3, #16]
 800250a:	e007      	b.n	800251c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d10c      	bne.n	800253e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f023 010f 	bic.w	r1, r3, #15
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	1e5a      	subs	r2, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	631a      	str	r2, [r3, #48]	@ 0x30
 800253c:	e007      	b.n	800254e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 020f 	bic.w	r2, r2, #15
 800254c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002552:	f023 0303 	bic.w	r3, r3, #3
 8002556:	f043 0201 	orr.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800255e:	e007      	b.n	8002570 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002564:	f043 0210 	orr.w	r2, r3, #16
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002570:	7ffb      	ldrb	r3, [r7, #31]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3724      	adds	r7, #36	@ 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd90      	pop	{r4, r7, pc}
 800257a:	bf00      	nop
 800257c:	20000000 	.word	0x20000000
 8002580:	053e2d63 	.word	0x053e2d63
 8002584:	50000100 	.word	0x50000100
 8002588:	50000300 	.word	0x50000300
 800258c:	fff04007 	.word	0xfff04007

08002590 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b0b6      	sub	sp, #216	@ 0xd8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x22>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e3c8      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x7b4>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fe3b 	bl	800223a <LL_ADC_REG_IsConversionOngoing>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f040 83ad 	bne.w	8002d26 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	f7ff fd51 	bl	8002080 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fe29 	bl	800223a <LL_ADC_REG_IsConversionOngoing>
 80025e8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fe35 	bl	8002260 <LL_ADC_INJ_IsConversionOngoing>
 80025f6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 81d9 	bne.w	80029b6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002604:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002608:	2b00      	cmp	r3, #0
 800260a:	f040 81d4 	bne.w	80029b6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002616:	d10f      	bne.n	8002638 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2200      	movs	r2, #0
 8002622:	4619      	mov	r1, r3
 8002624:	f7ff fd58 	bl	80020d8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fd12 	bl	800205a <LL_ADC_SetSamplingTimeCommonConfig>
 8002636:	e00e      	b.n	8002656 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6819      	ldr	r1, [r3, #0]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	461a      	mov	r2, r3
 8002646:	f7ff fd47 	bl	80020d8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fd02 	bl	800205a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	08db      	lsrs	r3, r3, #3
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b04      	cmp	r3, #4
 8002676:	d022      	beq.n	80026be <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6919      	ldr	r1, [r3, #16]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002688:	f7ff fc5c 	bl	8001f44 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	6919      	ldr	r1, [r3, #16]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	461a      	mov	r2, r3
 800269a:	f7ff fca8 	bl	8001fee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d102      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x124>
 80026ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026b2:	e000      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x126>
 80026b4:	2300      	movs	r3, #0
 80026b6:	461a      	mov	r2, r3
 80026b8:	f7ff fcb4 	bl	8002024 <LL_ADC_SetOffsetSaturation>
 80026bc:	e17b      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fc61 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10a      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x15a>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fc56 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	0e9b      	lsrs	r3, r3, #26
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	e01e      	b.n	8002728 <HAL_ADC_ConfigChannel+0x198>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fc4b 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002708:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800270c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002710:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002718:	2320      	movs	r3, #32
 800271a:	e004      	b.n	8002726 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800271c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002720:	fab3 f383 	clz	r3, r3
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002730:	2b00      	cmp	r3, #0
 8002732:	d105      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x1b0>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	0e9b      	lsrs	r3, r3, #26
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	e018      	b.n	8002772 <HAL_ADC_ConfigChannel+0x1e2>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002754:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002758:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800275c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002764:	2320      	movs	r3, #32
 8002766:	e004      	b.n	8002772 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002768:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002772:	429a      	cmp	r2, r3
 8002774:	d106      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2200      	movs	r2, #0
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fc1a 	bl	8001fb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2101      	movs	r1, #1
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fbfe 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002790:	4603      	mov	r3, r0
 8002792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10a      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x220>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2101      	movs	r1, #1
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fbf3 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 80027a6:	4603      	mov	r3, r0
 80027a8:	0e9b      	lsrs	r3, r3, #26
 80027aa:	f003 021f 	and.w	r2, r3, #31
 80027ae:	e01e      	b.n	80027ee <HAL_ADC_ConfigChannel+0x25e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2101      	movs	r1, #1
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fbe8 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 80027bc:	4603      	mov	r3, r0
 80027be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80027ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80027d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80027de:	2320      	movs	r3, #32
 80027e0:	e004      	b.n	80027ec <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80027e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d105      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x276>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	0e9b      	lsrs	r3, r3, #26
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	e018      	b.n	8002838 <HAL_ADC_ConfigChannel+0x2a8>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800281a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800281e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002822:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800282a:	2320      	movs	r3, #32
 800282c:	e004      	b.n	8002838 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800282e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002838:	429a      	cmp	r2, r3
 800283a:	d106      	bne.n	800284a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2200      	movs	r2, #0
 8002842:	2101      	movs	r1, #1
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fbb7 	bl	8001fb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2102      	movs	r1, #2
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fb9b 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002856:	4603      	mov	r3, r0
 8002858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10a      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x2e6>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2102      	movs	r1, #2
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fb90 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	0e9b      	lsrs	r3, r3, #26
 8002870:	f003 021f 	and.w	r2, r3, #31
 8002874:	e01e      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x324>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2102      	movs	r1, #2
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fb85 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002882:	4603      	mov	r3, r0
 8002884:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002894:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002898:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800289c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80028a4:	2320      	movs	r3, #32
 80028a6:	e004      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80028a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028ac:	fab3 f383 	clz	r3, r3
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x33c>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	0e9b      	lsrs	r3, r3, #26
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	e016      	b.n	80028fa <HAL_ADC_ConfigChannel+0x36a>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028d8:	fa93 f3a3 	rbit	r3, r3
 80028dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80028de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80028e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80028ec:	2320      	movs	r3, #32
 80028ee:	e004      	b.n	80028fa <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80028f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d106      	bne.n	800290c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2200      	movs	r2, #0
 8002904:	2102      	movs	r1, #2
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fb56 	bl	8001fb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2103      	movs	r1, #3
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fb3a 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002918:	4603      	mov	r3, r0
 800291a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10a      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x3a8>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2103      	movs	r1, #3
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fb2f 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	0e9b      	lsrs	r3, r3, #26
 8002932:	f003 021f 	and.w	r2, r3, #31
 8002936:	e017      	b.n	8002968 <HAL_ADC_ConfigChannel+0x3d8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2103      	movs	r1, #3
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fb24 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002944:	4603      	mov	r3, r0
 8002946:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002950:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002952:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002954:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800295a:	2320      	movs	r3, #32
 800295c:	e003      	b.n	8002966 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800295e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x3f0>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	0e9b      	lsrs	r3, r3, #26
 800297a:	f003 031f 	and.w	r3, r3, #31
 800297e:	e011      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x414>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800298e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002990:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002998:	2320      	movs	r3, #32
 800299a:	e003      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800299c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d106      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2200      	movs	r2, #0
 80029ae:	2103      	movs	r1, #3
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fb01 	bl	8001fb8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fc2a 	bl	8002214 <LL_ADC_IsEnabled>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f040 8140 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6819      	ldr	r1, [r3, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	461a      	mov	r2, r3
 80029d6:	f7ff fbab 	bl	8002130 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	4a8f      	ldr	r2, [pc, #572]	@ (8002c1c <HAL_ADC_ConfigChannel+0x68c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	f040 8131 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10b      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x47e>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	0e9b      	lsrs	r3, r3, #26
 80029fc:	3301      	adds	r3, #1
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	2b09      	cmp	r3, #9
 8002a04:	bf94      	ite	ls
 8002a06:	2301      	movls	r3, #1
 8002a08:	2300      	movhi	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	e019      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x4b2>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002a1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a1e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002a20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002a26:	2320      	movs	r3, #32
 8002a28:	e003      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002a2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	3301      	adds	r3, #1
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	2b09      	cmp	r3, #9
 8002a3a:	bf94      	ite	ls
 8002a3c:	2301      	movls	r3, #1
 8002a3e:	2300      	movhi	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d079      	beq.n	8002b3a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d107      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x4d2>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	0e9b      	lsrs	r3, r3, #26
 8002a58:	3301      	adds	r3, #1
 8002a5a:	069b      	lsls	r3, r3, #26
 8002a5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a60:	e015      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x4fe>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a6a:	fa93 f3a3 	rbit	r3, r3
 8002a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a72:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002a7a:	2320      	movs	r3, #32
 8002a7c:	e003      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	3301      	adds	r3, #1
 8002a88:	069b      	lsls	r3, r3, #26
 8002a8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x51e>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	0e9b      	lsrs	r3, r3, #26
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	e017      	b.n	8002ade <HAL_ADC_ConfigChannel+0x54e>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002abc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002abe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002ac6:	2320      	movs	r3, #32
 8002ac8:	e003      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	2101      	movs	r1, #1
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	ea42 0103 	orr.w	r1, r2, r3
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10a      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x574>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	0e9b      	lsrs	r3, r3, #26
 8002af4:	3301      	adds	r3, #1
 8002af6:	f003 021f 	and.w	r2, r3, #31
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	051b      	lsls	r3, r3, #20
 8002b02:	e018      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x5a6>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	e003      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	3301      	adds	r3, #1
 8002b2a:	f003 021f 	and.w	r2, r3, #31
 8002b2e:	4613      	mov	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b36:	430b      	orrs	r3, r1
 8002b38:	e081      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d107      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x5c6>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	0e9b      	lsrs	r3, r3, #26
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	069b      	lsls	r3, r3, #26
 8002b50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b54:	e015      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x5f2>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b66:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002b6e:	2320      	movs	r3, #32
 8002b70:	e003      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b74:	fab3 f383 	clz	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	069b      	lsls	r3, r3, #26
 8002b7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x612>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	0e9b      	lsrs	r3, r3, #26
 8002b94:	3301      	adds	r3, #1
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	e017      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x642>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	61fb      	str	r3, [r7, #28]
  return result;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002bba:	2320      	movs	r3, #32
 8002bbc:	e003      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	fab3 f383 	clz	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	ea42 0103 	orr.w	r1, r2, r3
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10d      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x66e>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	0e9b      	lsrs	r3, r3, #26
 8002be8:	3301      	adds	r3, #1
 8002bea:	f003 021f 	and.w	r2, r3, #31
 8002bee:	4613      	mov	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3b1e      	subs	r3, #30
 8002bf6:	051b      	lsls	r3, r3, #20
 8002bf8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bfc:	e01e      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x6ac>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	613b      	str	r3, [r7, #16]
  return result;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d104      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002c16:	2320      	movs	r3, #32
 8002c18:	e006      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x698>
 8002c1a:	bf00      	nop
 8002c1c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	3301      	adds	r3, #1
 8002c2a:	f003 021f 	and.w	r2, r3, #31
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	3b1e      	subs	r3, #30
 8002c36:	051b      	lsls	r3, r3, #20
 8002c38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c3c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c42:	4619      	mov	r1, r3
 8002c44:	f7ff fa48 	bl	80020d8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b3f      	ldr	r3, [pc, #252]	@ (8002d4c <HAL_ADC_ConfigChannel+0x7bc>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d071      	beq.n	8002d38 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c54:	483e      	ldr	r0, [pc, #248]	@ (8002d50 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c56:	f7ff f967 	bl	8001f28 <LL_ADC_GetCommonPathInternalCh>
 8002c5a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a3c      	ldr	r2, [pc, #240]	@ (8002d54 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d004      	beq.n	8002c72 <HAL_ADC_ConfigChannel+0x6e2>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a3a      	ldr	r2, [pc, #232]	@ (8002d58 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d127      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d121      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c86:	d157      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c90:	4619      	mov	r1, r3
 8002c92:	482f      	ldr	r0, [pc, #188]	@ (8002d50 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c94:	f7ff f935 	bl	8001f02 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c98:	4b30      	ldr	r3, [pc, #192]	@ (8002d5c <HAL_ADC_ConfigChannel+0x7cc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	099b      	lsrs	r3, r3, #6
 8002c9e:	4a30      	ldr	r2, [pc, #192]	@ (8002d60 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca4:	099b      	lsrs	r3, r3, #6
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	4613      	mov	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cb2:	e002      	b.n	8002cba <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f9      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cc0:	e03a      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a27      	ldr	r2, [pc, #156]	@ (8002d64 <HAL_ADC_ConfigChannel+0x7d4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d113      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ccc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10d      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a22      	ldr	r2, [pc, #136]	@ (8002d68 <HAL_ADC_ConfigChannel+0x7d8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d02a      	beq.n	8002d38 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cea:	4619      	mov	r1, r3
 8002cec:	4818      	ldr	r0, [pc, #96]	@ (8002d50 <HAL_ADC_ConfigChannel+0x7c0>)
 8002cee:	f7ff f908 	bl	8001f02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cf2:	e021      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d6c <HAL_ADC_ConfigChannel+0x7dc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d11c      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a16      	ldr	r2, [pc, #88]	@ (8002d68 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d011      	beq.n	8002d38 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	480c      	ldr	r0, [pc, #48]	@ (8002d50 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d20:	f7ff f8ef 	bl	8001f02 <LL_ADC_SetCommonPathInternalCh>
 8002d24:	e008      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2a:	f043 0220 	orr.w	r2, r3, #32
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d40:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	37d8      	adds	r7, #216	@ 0xd8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	80080000 	.word	0x80080000
 8002d50:	50000300 	.word	0x50000300
 8002d54:	c3210000 	.word	0xc3210000
 8002d58:	90c00010 	.word	0x90c00010
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	053e2d63 	.word	0x053e2d63
 8002d64:	c7520000 	.word	0xc7520000
 8002d68:	50000100 	.word	0x50000100
 8002d6c:	cb840000 	.word	0xcb840000

08002d70 <LL_ADC_IsEnabled>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <LL_ADC_IsEnabled+0x18>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <LL_ADC_IsEnabled+0x1a>
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d101      	bne.n	8002dae <LL_ADC_REG_IsConversionOngoing+0x18>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b0a1      	sub	sp, #132	@ 0x84
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e08b      	b.n	8002ef2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002de2:	2300      	movs	r3, #0
 8002de4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002de6:	2300      	movs	r3, #0
 8002de8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002df2:	d102      	bne.n	8002dfa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002df4:	4b41      	ldr	r3, [pc, #260]	@ (8002efc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	e001      	b.n	8002dfe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10b      	bne.n	8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e08:	f043 0220 	orr.w	r2, r3, #32
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e06a      	b.n	8002ef2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ffb9 	bl	8002d96 <LL_ADC_REG_IsConversionOngoing>
 8002e24:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff ffb3 	bl	8002d96 <LL_ADC_REG_IsConversionOngoing>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d14c      	bne.n	8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002e36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d149      	bne.n	8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e3c:	4b30      	ldr	r3, [pc, #192]	@ (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002e3e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d028      	beq.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e5a:	035b      	lsls	r3, r3, #13
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e62:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e68:	f7ff ff82 	bl	8002d70 <LL_ADC_IsEnabled>
 8002e6c:	4604      	mov	r4, r0
 8002e6e:	4823      	ldr	r0, [pc, #140]	@ (8002efc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e70:	f7ff ff7e 	bl	8002d70 <LL_ADC_IsEnabled>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4323      	orrs	r3, r4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d133      	bne.n	8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e84:	f023 030f 	bic.w	r3, r3, #15
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	6811      	ldr	r1, [r2, #0]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	6892      	ldr	r2, [r2, #8]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	431a      	orrs	r2, r3
 8002e94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e96:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e98:	e024      	b.n	8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ea2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ea4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ea6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002eaa:	f7ff ff61 	bl	8002d70 <LL_ADC_IsEnabled>
 8002eae:	4604      	mov	r4, r0
 8002eb0:	4812      	ldr	r0, [pc, #72]	@ (8002efc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002eb2:	f7ff ff5d 	bl	8002d70 <LL_ADC_IsEnabled>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4323      	orrs	r3, r4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d112      	bne.n	8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ebe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ec6:	f023 030f 	bic.w	r3, r3, #15
 8002eca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002ecc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ece:	e009      	b.n	8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed4:	f043 0220 	orr.w	r2, r3, #32
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002ee2:	e000      	b.n	8002ee6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ee4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002eee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3784      	adds	r7, #132	@ 0x84
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd90      	pop	{r4, r7, pc}
 8002efa:	bf00      	nop
 8002efc:	50000100 	.word	0x50000100
 8002f00:	50000300 	.word	0x50000300

08002f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f14:	4b0c      	ldr	r3, [pc, #48]	@ (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f20:	4013      	ands	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f36:	4a04      	ldr	r2, [pc, #16]	@ (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	60d3      	str	r3, [r2, #12]
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f50:	4b04      	ldr	r3, [pc, #16]	@ (8002f64 <__NVIC_GetPriorityGrouping+0x18>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	0a1b      	lsrs	r3, r3, #8
 8002f56:	f003 0307 	and.w	r3, r3, #7
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	db0b      	blt.n	8002f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	f003 021f 	and.w	r2, r3, #31
 8002f80:	4907      	ldr	r1, [pc, #28]	@ (8002fa0 <__NVIC_EnableIRQ+0x38>)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2001      	movs	r0, #1
 8002f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000e100 	.word	0xe000e100

08002fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	6039      	str	r1, [r7, #0]
 8002fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	db0a      	blt.n	8002fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	490c      	ldr	r1, [pc, #48]	@ (8002ff0 <__NVIC_SetPriority+0x4c>)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	0112      	lsls	r2, r2, #4
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fcc:	e00a      	b.n	8002fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4908      	ldr	r1, [pc, #32]	@ (8002ff4 <__NVIC_SetPriority+0x50>)
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	3b04      	subs	r3, #4
 8002fdc:	0112      	lsls	r2, r2, #4
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	761a      	strb	r2, [r3, #24]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000e100 	.word	0xe000e100
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	@ 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f1c3 0307 	rsb	r3, r3, #7
 8003012:	2b04      	cmp	r3, #4
 8003014:	bf28      	it	cs
 8003016:	2304      	movcs	r3, #4
 8003018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3304      	adds	r3, #4
 800301e:	2b06      	cmp	r3, #6
 8003020:	d902      	bls.n	8003028 <NVIC_EncodePriority+0x30>
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3b03      	subs	r3, #3
 8003026:	e000      	b.n	800302a <NVIC_EncodePriority+0x32>
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43da      	mvns	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	401a      	ands	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003040:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	43d9      	mvns	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	4313      	orrs	r3, r2
         );
}
 8003052:	4618      	mov	r0, r3
 8003054:	3724      	adds	r7, #36	@ 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003070:	d301      	bcc.n	8003076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003072:	2301      	movs	r3, #1
 8003074:	e00f      	b.n	8003096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003076:	4a0a      	ldr	r2, [pc, #40]	@ (80030a0 <SysTick_Config+0x40>)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3b01      	subs	r3, #1
 800307c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800307e:	210f      	movs	r1, #15
 8003080:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003084:	f7ff ff8e 	bl	8002fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003088:	4b05      	ldr	r3, [pc, #20]	@ (80030a0 <SysTick_Config+0x40>)
 800308a:	2200      	movs	r2, #0
 800308c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800308e:	4b04      	ldr	r3, [pc, #16]	@ (80030a0 <SysTick_Config+0x40>)
 8003090:	2207      	movs	r2, #7
 8003092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	e000e010 	.word	0xe000e010

080030a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff ff29 	bl	8002f04 <__NVIC_SetPriorityGrouping>
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b086      	sub	sp, #24
 80030be:	af00      	add	r7, sp, #0
 80030c0:	4603      	mov	r3, r0
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030c8:	f7ff ff40 	bl	8002f4c <__NVIC_GetPriorityGrouping>
 80030cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	6978      	ldr	r0, [r7, #20]
 80030d4:	f7ff ff90 	bl	8002ff8 <NVIC_EncodePriority>
 80030d8:	4602      	mov	r2, r0
 80030da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff5f 	bl	8002fa4 <__NVIC_SetPriority>
}
 80030e6:	bf00      	nop
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	4603      	mov	r3, r0
 80030f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff33 	bl	8002f68 <__NVIC_EnableIRQ>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff ffa4 	bl	8003060 <SysTick_Config>
 8003118:	4603      	mov	r3, r0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e08d      	b.n	8003252 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	4b47      	ldr	r3, [pc, #284]	@ (800325c <HAL_DMA_Init+0x138>)
 800313e:	429a      	cmp	r2, r3
 8003140:	d80f      	bhi.n	8003162 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	4b45      	ldr	r3, [pc, #276]	@ (8003260 <HAL_DMA_Init+0x13c>)
 800314a:	4413      	add	r3, r2
 800314c:	4a45      	ldr	r2, [pc, #276]	@ (8003264 <HAL_DMA_Init+0x140>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	091b      	lsrs	r3, r3, #4
 8003154:	009a      	lsls	r2, r3, #2
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a42      	ldr	r2, [pc, #264]	@ (8003268 <HAL_DMA_Init+0x144>)
 800315e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003160:	e00e      	b.n	8003180 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	4b40      	ldr	r3, [pc, #256]	@ (800326c <HAL_DMA_Init+0x148>)
 800316a:	4413      	add	r3, r2
 800316c:	4a3d      	ldr	r2, [pc, #244]	@ (8003264 <HAL_DMA_Init+0x140>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	009a      	lsls	r2, r3, #2
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a3c      	ldr	r2, [pc, #240]	@ (8003270 <HAL_DMA_Init+0x14c>)
 800317e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800319a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f8fe 	bl	80033d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031e0:	d102      	bne.n	80031e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031fc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d010      	beq.n	8003228 <HAL_DMA_Init+0x104>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b04      	cmp	r3, #4
 800320c:	d80c      	bhi.n	8003228 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f91e 	bl	8003450 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	e008      	b.n	800323a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40020407 	.word	0x40020407
 8003260:	bffdfff8 	.word	0xbffdfff8
 8003264:	cccccccd 	.word	0xcccccccd
 8003268:	40020000 	.word	0x40020000
 800326c:	bffdfbf8 	.word	0xbffdfbf8
 8003270:	40020400 	.word	0x40020400

08003274 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2204      	movs	r2, #4
 8003296:	409a      	lsls	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d026      	beq.n	80032ee <HAL_DMA_IRQHandler+0x7a>
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d021      	beq.n	80032ee <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d107      	bne.n	80032c8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0204 	bic.w	r2, r2, #4
 80032c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	2104      	movs	r1, #4
 80032d6:	fa01 f202 	lsl.w	r2, r1, r2
 80032da:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d071      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032ec:	e06c      	b.n	80033c8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2202      	movs	r2, #2
 80032f8:	409a      	lsls	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d02e      	beq.n	8003360 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d029      	beq.n	8003360 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 020a 	bic.w	r2, r2, #10
 8003328:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003336:	f003 021f 	and.w	r2, r3, #31
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	2102      	movs	r1, #2
 8003340:	fa01 f202 	lsl.w	r2, r1, r2
 8003344:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003352:	2b00      	cmp	r3, #0
 8003354:	d038      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800335e:	e033      	b.n	80033c8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	2208      	movs	r2, #8
 800336a:	409a      	lsls	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d02a      	beq.n	80033ca <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d025      	beq.n	80033ca <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 020e 	bic.w	r2, r2, #14
 800338c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003392:	f003 021f 	and.w	r2, r3, #31
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	2101      	movs	r1, #1
 800339c:	fa01 f202 	lsl.w	r2, r1, r2
 80033a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d004      	beq.n	80033ca <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
}
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	4b16      	ldr	r3, [pc, #88]	@ (800343c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d802      	bhi.n	80033ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80033e8:	4b15      	ldr	r3, [pc, #84]	@ (8003440 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	e001      	b.n	80033f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80033ee:	4b15      	ldr	r3, [pc, #84]	@ (8003444 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80033f0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	3b08      	subs	r3, #8
 80033fe:	4a12      	ldr	r2, [pc, #72]	@ (8003448 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003400:	fba2 2303 	umull	r2, r3, r2, r3
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340c:	089b      	lsrs	r3, r3, #2
 800340e:	009a      	lsls	r2, r3, #2
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4413      	add	r3, r2
 8003414:	461a      	mov	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a0b      	ldr	r2, [pc, #44]	@ (800344c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800341e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	2201      	movs	r2, #1
 8003428:	409a      	lsls	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800342e:	bf00      	nop
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40020407 	.word	0x40020407
 8003440:	40020800 	.word	0x40020800
 8003444:	40020820 	.word	0x40020820
 8003448:	cccccccd 	.word	0xcccccccd
 800344c:	40020880 	.word	0x40020880

08003450 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	461a      	mov	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a08      	ldr	r2, [pc, #32]	@ (8003494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003472:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3b01      	subs	r3, #1
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	2201      	movs	r2, #1
 800347e:	409a      	lsls	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	1000823f 	.word	0x1000823f
 8003494:	40020940 	.word	0x40020940

08003498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034a6:	e15a      	b.n	800375e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	2101      	movs	r1, #1
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	fa01 f303 	lsl.w	r3, r1, r3
 80034b4:	4013      	ands	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 814c 	beq.w	8003758 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d005      	beq.n	80034d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d130      	bne.n	800353a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	2203      	movs	r2, #3
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800350e:	2201      	movs	r2, #1
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4013      	ands	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	f003 0201 	and.w	r2, r3, #1
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	2b03      	cmp	r3, #3
 8003544:	d017      	beq.n	8003576 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	2203      	movs	r2, #3
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4013      	ands	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d123      	bne.n	80035ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	08da      	lsrs	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3208      	adds	r2, #8
 800358a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800358e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	220f      	movs	r2, #15
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43db      	mvns	r3, r3
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	691a      	ldr	r2, [r3, #16]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	08da      	lsrs	r2, r3, #3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3208      	adds	r2, #8
 80035c4:	6939      	ldr	r1, [r7, #16]
 80035c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	2203      	movs	r2, #3
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4013      	ands	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0203 	and.w	r2, r3, #3
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80a6 	beq.w	8003758 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360c:	4b5b      	ldr	r3, [pc, #364]	@ (800377c <HAL_GPIO_Init+0x2e4>)
 800360e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003610:	4a5a      	ldr	r2, [pc, #360]	@ (800377c <HAL_GPIO_Init+0x2e4>)
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	6613      	str	r3, [r2, #96]	@ 0x60
 8003618:	4b58      	ldr	r3, [pc, #352]	@ (800377c <HAL_GPIO_Init+0x2e4>)
 800361a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003624:	4a56      	ldr	r2, [pc, #344]	@ (8003780 <HAL_GPIO_Init+0x2e8>)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	089b      	lsrs	r3, r3, #2
 800362a:	3302      	adds	r3, #2
 800362c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003630:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	220f      	movs	r2, #15
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800364e:	d01f      	beq.n	8003690 <HAL_GPIO_Init+0x1f8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a4c      	ldr	r2, [pc, #304]	@ (8003784 <HAL_GPIO_Init+0x2ec>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d019      	beq.n	800368c <HAL_GPIO_Init+0x1f4>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a4b      	ldr	r2, [pc, #300]	@ (8003788 <HAL_GPIO_Init+0x2f0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d013      	beq.n	8003688 <HAL_GPIO_Init+0x1f0>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a4a      	ldr	r2, [pc, #296]	@ (800378c <HAL_GPIO_Init+0x2f4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00d      	beq.n	8003684 <HAL_GPIO_Init+0x1ec>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a49      	ldr	r2, [pc, #292]	@ (8003790 <HAL_GPIO_Init+0x2f8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d007      	beq.n	8003680 <HAL_GPIO_Init+0x1e8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a48      	ldr	r2, [pc, #288]	@ (8003794 <HAL_GPIO_Init+0x2fc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d101      	bne.n	800367c <HAL_GPIO_Init+0x1e4>
 8003678:	2305      	movs	r3, #5
 800367a:	e00a      	b.n	8003692 <HAL_GPIO_Init+0x1fa>
 800367c:	2306      	movs	r3, #6
 800367e:	e008      	b.n	8003692 <HAL_GPIO_Init+0x1fa>
 8003680:	2304      	movs	r3, #4
 8003682:	e006      	b.n	8003692 <HAL_GPIO_Init+0x1fa>
 8003684:	2303      	movs	r3, #3
 8003686:	e004      	b.n	8003692 <HAL_GPIO_Init+0x1fa>
 8003688:	2302      	movs	r3, #2
 800368a:	e002      	b.n	8003692 <HAL_GPIO_Init+0x1fa>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <HAL_GPIO_Init+0x1fa>
 8003690:	2300      	movs	r3, #0
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	f002 0203 	and.w	r2, r2, #3
 8003698:	0092      	lsls	r2, r2, #2
 800369a:	4093      	lsls	r3, r2
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036a2:	4937      	ldr	r1, [pc, #220]	@ (8003780 <HAL_GPIO_Init+0x2e8>)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	3302      	adds	r3, #2
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036b0:	4b39      	ldr	r3, [pc, #228]	@ (8003798 <HAL_GPIO_Init+0x300>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036d4:	4a30      	ldr	r2, [pc, #192]	@ (8003798 <HAL_GPIO_Init+0x300>)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036da:	4b2f      	ldr	r3, [pc, #188]	@ (8003798 <HAL_GPIO_Init+0x300>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	43db      	mvns	r3, r3
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036fe:	4a26      	ldr	r2, [pc, #152]	@ (8003798 <HAL_GPIO_Init+0x300>)
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003704:	4b24      	ldr	r3, [pc, #144]	@ (8003798 <HAL_GPIO_Init+0x300>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	43db      	mvns	r3, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003728:	4a1b      	ldr	r2, [pc, #108]	@ (8003798 <HAL_GPIO_Init+0x300>)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800372e:	4b1a      	ldr	r3, [pc, #104]	@ (8003798 <HAL_GPIO_Init+0x300>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	43db      	mvns	r3, r3
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003752:	4a11      	ldr	r2, [pc, #68]	@ (8003798 <HAL_GPIO_Init+0x300>)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	3301      	adds	r3, #1
 800375c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	f47f ae9d 	bne.w	80034a8 <HAL_GPIO_Init+0x10>
  }
}
 800376e:	bf00      	nop
 8003770:	bf00      	nop
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40021000 	.word	0x40021000
 8003780:	40010000 	.word	0x40010000
 8003784:	48000400 	.word	0x48000400
 8003788:	48000800 	.word	0x48000800
 800378c:	48000c00 	.word	0x48000c00
 8003790:	48001000 	.word	0x48001000
 8003794:	48001400 	.word	0x48001400
 8003798:	40010400 	.word	0x40010400

0800379c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	807b      	strh	r3, [r7, #2]
 80037a8:	4613      	mov	r3, r2
 80037aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037ac:	787b      	ldrb	r3, [r7, #1]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037b2:	887a      	ldrh	r2, [r7, #2]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037b8:	e002      	b.n	80037c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037ba:	887a      	ldrh	r2, [r7, #2]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037de:	887a      	ldrh	r2, [r7, #2]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4013      	ands	r3, r2
 80037e4:	041a      	lsls	r2, r3, #16
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	43d9      	mvns	r1, r3
 80037ea:	887b      	ldrh	r3, [r7, #2]
 80037ec:	400b      	ands	r3, r1
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	619a      	str	r2, [r3, #24]
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800380a:	4b08      	ldr	r3, [pc, #32]	@ (800382c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d006      	beq.n	8003824 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003816:	4a05      	ldr	r2, [pc, #20]	@ (800382c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd fc24 	bl	800106c <HAL_GPIO_EXTI_Callback>
  }
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40010400 	.word	0x40010400

08003830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e08d      	b.n	800395e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd faea 	bl	8000e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2224      	movs	r2, #36	@ 0x24
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003880:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003890:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d107      	bne.n	80038aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	e006      	b.n	80038b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80038b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d108      	bne.n	80038d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	e007      	b.n	80038e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80038f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003904:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69d9      	ldr	r1, [r3, #28]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1a      	ldr	r2, [r3, #32]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b20      	cmp	r3, #32
 800397a:	d138      	bne.n	80039ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003986:	2302      	movs	r3, #2
 8003988:	e032      	b.n	80039f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2224      	movs	r2, #36	@ 0x24
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0201 	bic.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6819      	ldr	r1, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0201 	orr.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
  }
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d139      	bne.n	8003a86 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e033      	b.n	8003a88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2224      	movs	r2, #36	@ 0x24
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0201 	bic.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a4e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0201 	orr.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	e000      	b.n	8003a88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a86:	2302      	movs	r3, #2
  }
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d141      	bne.n	8003b26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aae:	d131      	bne.n	8003b14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ab0:	4b47      	ldr	r3, [pc, #284]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ab6:	4a46      	ldr	r2, [pc, #280]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003abc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ac0:	4b43      	ldr	r3, [pc, #268]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ac8:	4a41      	ldr	r2, [pc, #260]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ace:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ad0:	4b40      	ldr	r3, [pc, #256]	@ (8003bd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2232      	movs	r2, #50	@ 0x32
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	4a3f      	ldr	r2, [pc, #252]	@ (8003bd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	0c9b      	lsrs	r3, r3, #18
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ae6:	e002      	b.n	8003aee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003aee:	4b38      	ldr	r3, [pc, #224]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003afa:	d102      	bne.n	8003b02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f2      	bne.n	8003ae8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b02:	4b33      	ldr	r3, [pc, #204]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b0e:	d158      	bne.n	8003bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e057      	b.n	8003bc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b14:	4b2e      	ldr	r3, [pc, #184]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b1a:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b24:	e04d      	b.n	8003bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b2c:	d141      	bne.n	8003bb2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b2e:	4b28      	ldr	r3, [pc, #160]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b3a:	d131      	bne.n	8003ba0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b3c:	4b24      	ldr	r3, [pc, #144]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b42:	4a23      	ldr	r2, [pc, #140]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b4c:	4b20      	ldr	r3, [pc, #128]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b54:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2232      	movs	r2, #50	@ 0x32
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b68:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6c:	0c9b      	lsrs	r3, r3, #18
 8003b6e:	3301      	adds	r3, #1
 8003b70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b72:	e002      	b.n	8003b7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b7a:	4b15      	ldr	r3, [pc, #84]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b86:	d102      	bne.n	8003b8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f2      	bne.n	8003b74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b8e:	4b10      	ldr	r3, [pc, #64]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b9a:	d112      	bne.n	8003bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e011      	b.n	8003bc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003bb0:	e007      	b.n	8003bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bb2:	4b07      	ldr	r3, [pc, #28]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bba:	4a05      	ldr	r2, [pc, #20]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bc0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	40007000 	.word	0x40007000
 8003bd4:	20000000 	.word	0x20000000
 8003bd8:	431bde83 	.word	0x431bde83

08003bdc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003be0:	4b05      	ldr	r3, [pc, #20]	@ (8003bf8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	4a04      	ldr	r2, [pc, #16]	@ (8003bf8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003be6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bea:	6093      	str	r3, [r2, #8]
}
 8003bec:	bf00      	nop
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40007000 	.word	0x40007000

08003bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e2fe      	b.n	800420c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d075      	beq.n	8003d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c1a:	4b97      	ldr	r3, [pc, #604]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c24:	4b94      	ldr	r3, [pc, #592]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b0c      	cmp	r3, #12
 8003c32:	d102      	bne.n	8003c3a <HAL_RCC_OscConfig+0x3e>
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d002      	beq.n	8003c40 <HAL_RCC_OscConfig+0x44>
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d10b      	bne.n	8003c58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c40:	4b8d      	ldr	r3, [pc, #564]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d05b      	beq.n	8003d04 <HAL_RCC_OscConfig+0x108>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d157      	bne.n	8003d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e2d9      	b.n	800420c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c60:	d106      	bne.n	8003c70 <HAL_RCC_OscConfig+0x74>
 8003c62:	4b85      	ldr	r3, [pc, #532]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a84      	ldr	r2, [pc, #528]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	e01d      	b.n	8003cac <HAL_RCC_OscConfig+0xb0>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c78:	d10c      	bne.n	8003c94 <HAL_RCC_OscConfig+0x98>
 8003c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	4b7c      	ldr	r3, [pc, #496]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a7b      	ldr	r2, [pc, #492]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	e00b      	b.n	8003cac <HAL_RCC_OscConfig+0xb0>
 8003c94:	4b78      	ldr	r3, [pc, #480]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a77      	ldr	r2, [pc, #476]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	4b75      	ldr	r3, [pc, #468]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a74      	ldr	r2, [pc, #464]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003ca6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d013      	beq.n	8003cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb4:	f7fe f8e4 	bl	8001e80 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cbc:	f7fe f8e0 	bl	8001e80 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b64      	cmp	r3, #100	@ 0x64
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e29e      	b.n	800420c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cce:	4b6a      	ldr	r3, [pc, #424]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0xc0>
 8003cda:	e014      	b.n	8003d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fe f8d0 	bl	8001e80 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce4:	f7fe f8cc 	bl	8001e80 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	@ 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e28a      	b.n	800420c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cf6:	4b60      	ldr	r3, [pc, #384]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0xe8>
 8003d02:	e000      	b.n	8003d06 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d075      	beq.n	8003dfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d12:	4b59      	ldr	r3, [pc, #356]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d1c:	4b56      	ldr	r3, [pc, #344]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b0c      	cmp	r3, #12
 8003d2a:	d102      	bne.n	8003d32 <HAL_RCC_OscConfig+0x136>
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d002      	beq.n	8003d38 <HAL_RCC_OscConfig+0x13c>
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d11f      	bne.n	8003d78 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d38:	4b4f      	ldr	r3, [pc, #316]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_RCC_OscConfig+0x154>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e25d      	b.n	800420c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d50:	4b49      	ldr	r3, [pc, #292]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	061b      	lsls	r3, r3, #24
 8003d5e:	4946      	ldr	r1, [pc, #280]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d64:	4b45      	ldr	r3, [pc, #276]	@ (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fe f83d 	bl	8001de8 <HAL_InitTick>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d043      	beq.n	8003dfc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e249      	b.n	800420c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d023      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d80:	4b3d      	ldr	r3, [pc, #244]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a3c      	ldr	r2, [pc, #240]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fe f878 	bl	8001e80 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d94:	f7fe f874 	bl	8001e80 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e232      	b.n	800420c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003da6:	4b34      	ldr	r3, [pc, #208]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db2:	4b31      	ldr	r3, [pc, #196]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	061b      	lsls	r3, r3, #24
 8003dc0:	492d      	ldr	r1, [pc, #180]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	604b      	str	r3, [r1, #4]
 8003dc6:	e01a      	b.n	8003dfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a2a      	ldr	r2, [pc, #168]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003dce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fe f854 	bl	8001e80 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ddc:	f7fe f850 	bl	8001e80 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e20e      	b.n	800420c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dee:	4b22      	ldr	r3, [pc, #136]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x1e0>
 8003dfa:	e000      	b.n	8003dfe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d041      	beq.n	8003e8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01c      	beq.n	8003e4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e12:	4b19      	ldr	r3, [pc, #100]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e18:	4a17      	ldr	r2, [pc, #92]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e22:	f7fe f82d 	bl	8001e80 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e2a:	f7fe f829 	bl	8001e80 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e1e7      	b.n	800420c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0ef      	beq.n	8003e2a <HAL_RCC_OscConfig+0x22e>
 8003e4a:	e020      	b.n	8003e8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e52:	4a09      	ldr	r2, [pc, #36]	@ (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5c:	f7fe f810 	bl	8001e80 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e62:	e00d      	b.n	8003e80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e64:	f7fe f80c 	bl	8001e80 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d906      	bls.n	8003e80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e1ca      	b.n	800420c <HAL_RCC_OscConfig+0x610>
 8003e76:	bf00      	nop
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e80:	4b8c      	ldr	r3, [pc, #560]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1ea      	bne.n	8003e64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 80a6 	beq.w	8003fe8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ea0:	4b84      	ldr	r3, [pc, #528]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x2b4>
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <HAL_RCC_OscConfig+0x2b6>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb6:	4b7f      	ldr	r3, [pc, #508]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eba:	4a7e      	ldr	r2, [pc, #504]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ec0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ec2:	4b7c      	ldr	r3, [pc, #496]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ed2:	4b79      	ldr	r3, [pc, #484]	@ (80040b8 <HAL_RCC_OscConfig+0x4bc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d118      	bne.n	8003f10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ede:	4b76      	ldr	r3, [pc, #472]	@ (80040b8 <HAL_RCC_OscConfig+0x4bc>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a75      	ldr	r2, [pc, #468]	@ (80040b8 <HAL_RCC_OscConfig+0x4bc>)
 8003ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eea:	f7fd ffc9 	bl	8001e80 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef2:	f7fd ffc5 	bl	8001e80 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e183      	b.n	800420c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f04:	4b6c      	ldr	r3, [pc, #432]	@ (80040b8 <HAL_RCC_OscConfig+0x4bc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d108      	bne.n	8003f2a <HAL_RCC_OscConfig+0x32e>
 8003f18:	4b66      	ldr	r3, [pc, #408]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1e:	4a65      	ldr	r2, [pc, #404]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f28:	e024      	b.n	8003f74 <HAL_RCC_OscConfig+0x378>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b05      	cmp	r3, #5
 8003f30:	d110      	bne.n	8003f54 <HAL_RCC_OscConfig+0x358>
 8003f32:	4b60      	ldr	r3, [pc, #384]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f38:	4a5e      	ldr	r2, [pc, #376]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003f3a:	f043 0304 	orr.w	r3, r3, #4
 8003f3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f42:	4b5c      	ldr	r3, [pc, #368]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f48:	4a5a      	ldr	r2, [pc, #360]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f52:	e00f      	b.n	8003f74 <HAL_RCC_OscConfig+0x378>
 8003f54:	4b57      	ldr	r3, [pc, #348]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5a:	4a56      	ldr	r2, [pc, #344]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f64:	4b53      	ldr	r3, [pc, #332]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6a:	4a52      	ldr	r2, [pc, #328]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003f6c:	f023 0304 	bic.w	r3, r3, #4
 8003f70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d016      	beq.n	8003faa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7c:	f7fd ff80 	bl	8001e80 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f84:	f7fd ff7c 	bl	8001e80 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e138      	b.n	800420c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f9a:	4b46      	ldr	r3, [pc, #280]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0ed      	beq.n	8003f84 <HAL_RCC_OscConfig+0x388>
 8003fa8:	e015      	b.n	8003fd6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003faa:	f7fd ff69 	bl	8001e80 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fb0:	e00a      	b.n	8003fc8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb2:	f7fd ff65 	bl	8001e80 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e121      	b.n	800420c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1ed      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fd6:	7ffb      	ldrb	r3, [r7, #31]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d105      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fdc:	4b35      	ldr	r3, [pc, #212]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe0:	4a34      	ldr	r2, [pc, #208]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003fe2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fe6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d03c      	beq.n	800406e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01c      	beq.n	8004036 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ffc:	4b2d      	ldr	r3, [pc, #180]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8003ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004002:	4a2c      	ldr	r2, [pc, #176]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400c:	f7fd ff38 	bl	8001e80 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004014:	f7fd ff34 	bl	8001e80 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e0f2      	b.n	800420c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004026:	4b23      	ldr	r3, [pc, #140]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8004028:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0ef      	beq.n	8004014 <HAL_RCC_OscConfig+0x418>
 8004034:	e01b      	b.n	800406e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004036:	4b1f      	ldr	r3, [pc, #124]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8004038:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800403c:	4a1d      	ldr	r2, [pc, #116]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004046:	f7fd ff1b 	bl	8001e80 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800404e:	f7fd ff17 	bl	8001e80 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e0d5      	b.n	800420c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004060:	4b14      	ldr	r3, [pc, #80]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8004062:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1ef      	bne.n	800404e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80c9 	beq.w	800420a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004078:	4b0e      	ldr	r3, [pc, #56]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b0c      	cmp	r3, #12
 8004082:	f000 8083 	beq.w	800418c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d15e      	bne.n	800414c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408e:	4b09      	ldr	r3, [pc, #36]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a08      	ldr	r2, [pc, #32]	@ (80040b4 <HAL_RCC_OscConfig+0x4b8>)
 8004094:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409a:	f7fd fef1 	bl	8001e80 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040a0:	e00c      	b.n	80040bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a2:	f7fd feed 	bl	8001e80 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d905      	bls.n	80040bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e0ab      	b.n	800420c <HAL_RCC_OscConfig+0x610>
 80040b4:	40021000 	.word	0x40021000
 80040b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040bc:	4b55      	ldr	r3, [pc, #340]	@ (8004214 <HAL_RCC_OscConfig+0x618>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1ec      	bne.n	80040a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040c8:	4b52      	ldr	r3, [pc, #328]	@ (8004214 <HAL_RCC_OscConfig+0x618>)
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	4b52      	ldr	r3, [pc, #328]	@ (8004218 <HAL_RCC_OscConfig+0x61c>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6a11      	ldr	r1, [r2, #32]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040d8:	3a01      	subs	r2, #1
 80040da:	0112      	lsls	r2, r2, #4
 80040dc:	4311      	orrs	r1, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80040e2:	0212      	lsls	r2, r2, #8
 80040e4:	4311      	orrs	r1, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80040ea:	0852      	lsrs	r2, r2, #1
 80040ec:	3a01      	subs	r2, #1
 80040ee:	0552      	lsls	r2, r2, #21
 80040f0:	4311      	orrs	r1, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040f6:	0852      	lsrs	r2, r2, #1
 80040f8:	3a01      	subs	r2, #1
 80040fa:	0652      	lsls	r2, r2, #25
 80040fc:	4311      	orrs	r1, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004102:	06d2      	lsls	r2, r2, #27
 8004104:	430a      	orrs	r2, r1
 8004106:	4943      	ldr	r1, [pc, #268]	@ (8004214 <HAL_RCC_OscConfig+0x618>)
 8004108:	4313      	orrs	r3, r2
 800410a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800410c:	4b41      	ldr	r3, [pc, #260]	@ (8004214 <HAL_RCC_OscConfig+0x618>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a40      	ldr	r2, [pc, #256]	@ (8004214 <HAL_RCC_OscConfig+0x618>)
 8004112:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004116:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004118:	4b3e      	ldr	r3, [pc, #248]	@ (8004214 <HAL_RCC_OscConfig+0x618>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4a3d      	ldr	r2, [pc, #244]	@ (8004214 <HAL_RCC_OscConfig+0x618>)
 800411e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004122:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004124:	f7fd feac 	bl	8001e80 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412c:	f7fd fea8 	bl	8001e80 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e066      	b.n	800420c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413e:	4b35      	ldr	r3, [pc, #212]	@ (8004214 <HAL_RCC_OscConfig+0x618>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0x530>
 800414a:	e05e      	b.n	800420a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414c:	4b31      	ldr	r3, [pc, #196]	@ (8004214 <HAL_RCC_OscConfig+0x618>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a30      	ldr	r2, [pc, #192]	@ (8004214 <HAL_RCC_OscConfig+0x618>)
 8004152:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fd fe92 	bl	8001e80 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004160:	f7fd fe8e 	bl	8001e80 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e04c      	b.n	800420c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004172:	4b28      	ldr	r3, [pc, #160]	@ (8004214 <HAL_RCC_OscConfig+0x618>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800417e:	4b25      	ldr	r3, [pc, #148]	@ (8004214 <HAL_RCC_OscConfig+0x618>)
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	4924      	ldr	r1, [pc, #144]	@ (8004214 <HAL_RCC_OscConfig+0x618>)
 8004184:	4b25      	ldr	r3, [pc, #148]	@ (800421c <HAL_RCC_OscConfig+0x620>)
 8004186:	4013      	ands	r3, r2
 8004188:	60cb      	str	r3, [r1, #12]
 800418a:	e03e      	b.n	800420a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e039      	b.n	800420c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004198:	4b1e      	ldr	r3, [pc, #120]	@ (8004214 <HAL_RCC_OscConfig+0x618>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f003 0203 	and.w	r2, r3, #3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d12c      	bne.n	8004206 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	3b01      	subs	r3, #1
 80041b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d123      	bne.n	8004206 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d11b      	bne.n	8004206 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d113      	bne.n	8004206 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e8:	085b      	lsrs	r3, r3, #1
 80041ea:	3b01      	subs	r3, #1
 80041ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d109      	bne.n	8004206 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fc:	085b      	lsrs	r3, r3, #1
 80041fe:	3b01      	subs	r3, #1
 8004200:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004202:	429a      	cmp	r2, r3
 8004204:	d001      	beq.n	800420a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3720      	adds	r7, #32
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40021000 	.word	0x40021000
 8004218:	019f800c 	.word	0x019f800c
 800421c:	feeefffc 	.word	0xfeeefffc

08004220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e11e      	b.n	8004476 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004238:	4b91      	ldr	r3, [pc, #580]	@ (8004480 <HAL_RCC_ClockConfig+0x260>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d910      	bls.n	8004268 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004246:	4b8e      	ldr	r3, [pc, #568]	@ (8004480 <HAL_RCC_ClockConfig+0x260>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 020f 	bic.w	r2, r3, #15
 800424e:	498c      	ldr	r1, [pc, #560]	@ (8004480 <HAL_RCC_ClockConfig+0x260>)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b8a      	ldr	r3, [pc, #552]	@ (8004480 <HAL_RCC_ClockConfig+0x260>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e106      	b.n	8004476 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d073      	beq.n	800435c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d129      	bne.n	80042d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800427c:	4b81      	ldr	r3, [pc, #516]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0f4      	b.n	8004476 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800428c:	f000 f99c 	bl	80045c8 <RCC_GetSysClockFreqFromPLLSource>
 8004290:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4a7c      	ldr	r2, [pc, #496]	@ (8004488 <HAL_RCC_ClockConfig+0x268>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d93f      	bls.n	800431a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800429a:	4b7a      	ldr	r3, [pc, #488]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d033      	beq.n	800431a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d12f      	bne.n	800431a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042ba:	4b72      	ldr	r3, [pc, #456]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042c2:	4a70      	ldr	r2, [pc, #448]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 80042c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042ca:	2380      	movs	r3, #128	@ 0x80
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	e024      	b.n	800431a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d109      	bne.n	80042f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0c6      	b.n	8004476 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042e8:	4b66      	ldr	r3, [pc, #408]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0be      	b.n	8004476 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80042f8:	f000 f8ce 	bl	8004498 <HAL_RCC_GetSysClockFreq>
 80042fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4a61      	ldr	r2, [pc, #388]	@ (8004488 <HAL_RCC_ClockConfig+0x268>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d909      	bls.n	800431a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004306:	4b5f      	ldr	r3, [pc, #380]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800430e:	4a5d      	ldr	r2, [pc, #372]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 8004310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004314:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004316:	2380      	movs	r3, #128	@ 0x80
 8004318:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800431a:	4b5a      	ldr	r3, [pc, #360]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f023 0203 	bic.w	r2, r3, #3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	4957      	ldr	r1, [pc, #348]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 8004328:	4313      	orrs	r3, r2
 800432a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800432c:	f7fd fda8 	bl	8001e80 <HAL_GetTick>
 8004330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004332:	e00a      	b.n	800434a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004334:	f7fd fda4 	bl	8001e80 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e095      	b.n	8004476 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434a:	4b4e      	ldr	r3, [pc, #312]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 020c 	and.w	r2, r3, #12
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	429a      	cmp	r2, r3
 800435a:	d1eb      	bne.n	8004334 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d023      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004374:	4b43      	ldr	r3, [pc, #268]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	4a42      	ldr	r2, [pc, #264]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 800437a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800437e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d007      	beq.n	800439c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800438c:	4b3d      	ldr	r3, [pc, #244]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004394:	4a3b      	ldr	r2, [pc, #236]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 8004396:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800439a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800439c:	4b39      	ldr	r3, [pc, #228]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	4936      	ldr	r1, [pc, #216]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	608b      	str	r3, [r1, #8]
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2b80      	cmp	r3, #128	@ 0x80
 80043b4:	d105      	bne.n	80043c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80043b6:	4b33      	ldr	r3, [pc, #204]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	4a32      	ldr	r2, [pc, #200]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 80043bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043c2:	4b2f      	ldr	r3, [pc, #188]	@ (8004480 <HAL_RCC_ClockConfig+0x260>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d21d      	bcs.n	800440c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004480 <HAL_RCC_ClockConfig+0x260>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f023 020f 	bic.w	r2, r3, #15
 80043d8:	4929      	ldr	r1, [pc, #164]	@ (8004480 <HAL_RCC_ClockConfig+0x260>)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	4313      	orrs	r3, r2
 80043de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043e0:	f7fd fd4e 	bl	8001e80 <HAL_GetTick>
 80043e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e6:	e00a      	b.n	80043fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e8:	f7fd fd4a 	bl	8001e80 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e03b      	b.n	8004476 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fe:	4b20      	ldr	r3, [pc, #128]	@ (8004480 <HAL_RCC_ClockConfig+0x260>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d1ed      	bne.n	80043e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d008      	beq.n	800442a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004418:	4b1a      	ldr	r3, [pc, #104]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4917      	ldr	r1, [pc, #92]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 8004426:	4313      	orrs	r3, r2
 8004428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004436:	4b13      	ldr	r3, [pc, #76]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	490f      	ldr	r1, [pc, #60]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800444a:	f000 f825 	bl	8004498 <HAL_RCC_GetSysClockFreq>
 800444e:	4602      	mov	r2, r0
 8004450:	4b0c      	ldr	r3, [pc, #48]	@ (8004484 <HAL_RCC_ClockConfig+0x264>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	091b      	lsrs	r3, r3, #4
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	490c      	ldr	r1, [pc, #48]	@ (800448c <HAL_RCC_ClockConfig+0x26c>)
 800445c:	5ccb      	ldrb	r3, [r1, r3]
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	fa22 f303 	lsr.w	r3, r2, r3
 8004466:	4a0a      	ldr	r2, [pc, #40]	@ (8004490 <HAL_RCC_ClockConfig+0x270>)
 8004468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800446a:	4b0a      	ldr	r3, [pc, #40]	@ (8004494 <HAL_RCC_ClockConfig+0x274>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f7fd fcba 	bl	8001de8 <HAL_InitTick>
 8004474:	4603      	mov	r3, r0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40022000 	.word	0x40022000
 8004484:	40021000 	.word	0x40021000
 8004488:	04c4b400 	.word	0x04c4b400
 800448c:	08009f70 	.word	0x08009f70
 8004490:	20000000 	.word	0x20000000
 8004494:	20000004 	.word	0x20000004

08004498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800449e:	4b2c      	ldr	r3, [pc, #176]	@ (8004550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d102      	bne.n	80044b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004554 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	e047      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044b0:	4b27      	ldr	r3, [pc, #156]	@ (8004550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 030c 	and.w	r3, r3, #12
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d102      	bne.n	80044c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044bc:	4b25      	ldr	r3, [pc, #148]	@ (8004554 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	e03e      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80044c2:	4b23      	ldr	r3, [pc, #140]	@ (8004550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b0c      	cmp	r3, #12
 80044cc:	d136      	bne.n	800453c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044ce:	4b20      	ldr	r3, [pc, #128]	@ (8004550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	091b      	lsrs	r3, r3, #4
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	3301      	adds	r3, #1
 80044e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d10c      	bne.n	8004506 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044ec:	4a19      	ldr	r2, [pc, #100]	@ (8004554 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	4a16      	ldr	r2, [pc, #88]	@ (8004550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044f6:	68d2      	ldr	r2, [r2, #12]
 80044f8:	0a12      	lsrs	r2, r2, #8
 80044fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044fe:	fb02 f303 	mul.w	r3, r2, r3
 8004502:	617b      	str	r3, [r7, #20]
      break;
 8004504:	e00c      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004506:	4a13      	ldr	r2, [pc, #76]	@ (8004554 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	fbb2 f3f3 	udiv	r3, r2, r3
 800450e:	4a10      	ldr	r2, [pc, #64]	@ (8004550 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004510:	68d2      	ldr	r2, [r2, #12]
 8004512:	0a12      	lsrs	r2, r2, #8
 8004514:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004518:	fb02 f303 	mul.w	r3, r2, r3
 800451c:	617b      	str	r3, [r7, #20]
      break;
 800451e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004520:	4b0b      	ldr	r3, [pc, #44]	@ (8004550 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	0e5b      	lsrs	r3, r3, #25
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	3301      	adds	r3, #1
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	fbb2 f3f3 	udiv	r3, r2, r3
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	e001      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004540:	693b      	ldr	r3, [r7, #16]
}
 8004542:	4618      	mov	r0, r3
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000
 8004554:	00f42400 	.word	0x00f42400

08004558 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800455c:	4b03      	ldr	r3, [pc, #12]	@ (800456c <HAL_RCC_GetHCLKFreq+0x14>)
 800455e:	681b      	ldr	r3, [r3, #0]
}
 8004560:	4618      	mov	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	20000000 	.word	0x20000000

08004570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004574:	f7ff fff0 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b06      	ldr	r3, [pc, #24]	@ (8004594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4904      	ldr	r1, [pc, #16]	@ (8004598 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004590:	4618      	mov	r0, r3
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40021000 	.word	0x40021000
 8004598:	08009f80 	.word	0x08009f80

0800459c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045a0:	f7ff ffda 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 80045a4:	4602      	mov	r2, r0
 80045a6:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	0adb      	lsrs	r3, r3, #11
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	4904      	ldr	r1, [pc, #16]	@ (80045c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045b2:	5ccb      	ldrb	r3, [r1, r3]
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40021000 	.word	0x40021000
 80045c4:	08009f80 	.word	0x08009f80

080045c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	091b      	lsrs	r3, r3, #4
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	3301      	adds	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d10c      	bne.n	8004606 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045ec:	4a17      	ldr	r2, [pc, #92]	@ (800464c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	4a14      	ldr	r2, [pc, #80]	@ (8004648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045f6:	68d2      	ldr	r2, [r2, #12]
 80045f8:	0a12      	lsrs	r2, r2, #8
 80045fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	617b      	str	r3, [r7, #20]
    break;
 8004604:	e00c      	b.n	8004620 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004606:	4a11      	ldr	r2, [pc, #68]	@ (800464c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	fbb2 f3f3 	udiv	r3, r2, r3
 800460e:	4a0e      	ldr	r2, [pc, #56]	@ (8004648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004610:	68d2      	ldr	r2, [r2, #12]
 8004612:	0a12      	lsrs	r2, r2, #8
 8004614:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004618:	fb02 f303 	mul.w	r3, r2, r3
 800461c:	617b      	str	r3, [r7, #20]
    break;
 800461e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004620:	4b09      	ldr	r3, [pc, #36]	@ (8004648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	0e5b      	lsrs	r3, r3, #25
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	3301      	adds	r3, #1
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800463a:	687b      	ldr	r3, [r7, #4]
}
 800463c:	4618      	mov	r0, r3
 800463e:	371c      	adds	r7, #28
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	40021000 	.word	0x40021000
 800464c:	00f42400 	.word	0x00f42400

08004650 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004658:	2300      	movs	r3, #0
 800465a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800465c:	2300      	movs	r3, #0
 800465e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 8098 	beq.w	800479e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800466e:	2300      	movs	r3, #0
 8004670:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004672:	4b43      	ldr	r3, [pc, #268]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10d      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800467e:	4b40      	ldr	r3, [pc, #256]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004682:	4a3f      	ldr	r2, [pc, #252]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004688:	6593      	str	r3, [r2, #88]	@ 0x58
 800468a:	4b3d      	ldr	r3, [pc, #244]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800468c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800468e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004692:	60bb      	str	r3, [r7, #8]
 8004694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004696:	2301      	movs	r3, #1
 8004698:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800469a:	4b3a      	ldr	r3, [pc, #232]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a39      	ldr	r2, [pc, #228]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046a6:	f7fd fbeb 	bl	8001e80 <HAL_GetTick>
 80046aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046ac:	e009      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ae:	f7fd fbe7 	bl	8001e80 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d902      	bls.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	74fb      	strb	r3, [r7, #19]
        break;
 80046c0:	e005      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046c2:	4b30      	ldr	r3, [pc, #192]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0ef      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d159      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d01e      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d019      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046f0:	4b23      	ldr	r3, [pc, #140]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046fc:	4b20      	ldr	r3, [pc, #128]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004702:	4a1f      	ldr	r2, [pc, #124]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800470c:	4b1c      	ldr	r3, [pc, #112]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004712:	4a1b      	ldr	r2, [pc, #108]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004714:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800471c:	4a18      	ldr	r2, [pc, #96]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d016      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472e:	f7fd fba7 	bl	8001e80 <HAL_GetTick>
 8004732:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004734:	e00b      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004736:	f7fd fba3 	bl	8001e80 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004744:	4293      	cmp	r3, r2
 8004746:	d902      	bls.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	74fb      	strb	r3, [r7, #19]
            break;
 800474c:	e006      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800474e:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0ec      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800475c:	7cfb      	ldrb	r3, [r7, #19]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10b      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004762:	4b07      	ldr	r3, [pc, #28]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004768:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004770:	4903      	ldr	r1, [pc, #12]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004778:	e008      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800477a:	7cfb      	ldrb	r3, [r7, #19]
 800477c:	74bb      	strb	r3, [r7, #18]
 800477e:	e005      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004780:	40021000 	.word	0x40021000
 8004784:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800478c:	7c7b      	ldrb	r3, [r7, #17]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d105      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004792:	4ba6      	ldr	r3, [pc, #664]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004796:	4aa5      	ldr	r2, [pc, #660]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004798:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800479c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047aa:	4ba0      	ldr	r3, [pc, #640]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b0:	f023 0203 	bic.w	r2, r3, #3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	499c      	ldr	r1, [pc, #624]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047cc:	4b97      	ldr	r3, [pc, #604]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d2:	f023 020c 	bic.w	r2, r3, #12
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	4994      	ldr	r1, [pc, #592]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047ee:	4b8f      	ldr	r3, [pc, #572]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	498b      	ldr	r1, [pc, #556]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004810:	4b86      	ldr	r3, [pc, #536]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004816:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	4983      	ldr	r1, [pc, #524]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004832:	4b7e      	ldr	r3, [pc, #504]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004838:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	497a      	ldr	r1, [pc, #488]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004854:	4b75      	ldr	r3, [pc, #468]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	4972      	ldr	r1, [pc, #456]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004876:	4b6d      	ldr	r3, [pc, #436]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800487c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	4969      	ldr	r1, [pc, #420]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004898:	4b64      	ldr	r3, [pc, #400]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	4961      	ldr	r1, [pc, #388]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ba:	4b5c      	ldr	r3, [pc, #368]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	4958      	ldr	r1, [pc, #352]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d015      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048dc:	4b53      	ldr	r3, [pc, #332]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ea:	4950      	ldr	r1, [pc, #320]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048fa:	d105      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048fc:	4b4b      	ldr	r3, [pc, #300]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a4a      	ldr	r2, [pc, #296]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004906:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004910:	2b00      	cmp	r3, #0
 8004912:	d015      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004914:	4b45      	ldr	r3, [pc, #276]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004922:	4942      	ldr	r1, [pc, #264]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004932:	d105      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004934:	4b3d      	ldr	r3, [pc, #244]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	4a3c      	ldr	r2, [pc, #240]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800493a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800493e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d015      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800494c:	4b37      	ldr	r3, [pc, #220]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004952:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495a:	4934      	ldr	r1, [pc, #208]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004966:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800496a:	d105      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800496c:	4b2f      	ldr	r3, [pc, #188]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	4a2e      	ldr	r2, [pc, #184]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004972:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004976:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d015      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004984:	4b29      	ldr	r3, [pc, #164]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004992:	4926      	ldr	r1, [pc, #152]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800499e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049a2:	d105      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049a4:	4b21      	ldr	r3, [pc, #132]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4a20      	ldr	r2, [pc, #128]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d015      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049bc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ca:	4918      	ldr	r1, [pc, #96]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049da:	d105      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049dc:	4b13      	ldr	r3, [pc, #76]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4a12      	ldr	r2, [pc, #72]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d015      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049f4:	4b0d      	ldr	r3, [pc, #52]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a02:	490a      	ldr	r1, [pc, #40]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a12:	d105      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a14:	4b05      	ldr	r3, [pc, #20]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	4a04      	ldr	r2, [pc, #16]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a20:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40021000 	.word	0x40021000

08004a30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e09d      	b.n	8004b7e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d108      	bne.n	8004a5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a52:	d009      	beq.n	8004a68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	61da      	str	r2, [r3, #28]
 8004a5a:	e005      	b.n	8004a68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc fb68 	bl	8001158 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004aa8:	d902      	bls.n	8004ab0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	e002      	b.n	8004ab6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ab4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004abe:	d007      	beq.n	8004ad0 <HAL_SPI_Init+0xa0>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ac8:	d002      	beq.n	8004ad0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b12:	ea42 0103 	orr.w	r1, r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	0c1b      	lsrs	r3, r3, #16
 8004b2c:	f003 0204 	and.w	r2, r3, #4
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004b4c:	ea42 0103 	orr.w	r1, r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69da      	ldr	r2, [r3, #28]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b088      	sub	sp, #32
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	603b      	str	r3, [r7, #0]
 8004b92:	4613      	mov	r3, r2
 8004b94:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b96:	f7fd f973 	bl	8001e80 <HAL_GetTick>
 8004b9a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004b9c:	88fb      	ldrh	r3, [r7, #6]
 8004b9e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d001      	beq.n	8004bb0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004bac:	2302      	movs	r3, #2
 8004bae:	e15c      	b.n	8004e6a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <HAL_SPI_Transmit+0x36>
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e154      	b.n	8004e6a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_SPI_Transmit+0x48>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e14d      	b.n	8004e6a <HAL_SPI_Transmit+0x2e4>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2203      	movs	r2, #3
 8004bda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	88fa      	ldrh	r2, [r7, #6]
 8004bee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c20:	d10f      	bne.n	8004c42 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4c:	2b40      	cmp	r3, #64	@ 0x40
 8004c4e:	d007      	beq.n	8004c60 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c68:	d952      	bls.n	8004d10 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <HAL_SPI_Transmit+0xf2>
 8004c72:	8b7b      	ldrh	r3, [r7, #26]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d145      	bne.n	8004d04 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7c:	881a      	ldrh	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c88:	1c9a      	adds	r2, r3, #2
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c9c:	e032      	b.n	8004d04 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d112      	bne.n	8004cd2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb0:	881a      	ldrh	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cbc:	1c9a      	adds	r2, r3, #2
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004cd0:	e018      	b.n	8004d04 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cd2:	f7fd f8d5 	bl	8001e80 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d803      	bhi.n	8004cea <HAL_SPI_Transmit+0x164>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ce8:	d102      	bne.n	8004cf0 <HAL_SPI_Transmit+0x16a>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d109      	bne.n	8004d04 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e0b2      	b.n	8004e6a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1c7      	bne.n	8004c9e <HAL_SPI_Transmit+0x118>
 8004d0e:	e083      	b.n	8004e18 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_SPI_Transmit+0x198>
 8004d18:	8b7b      	ldrh	r3, [r7, #26]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d177      	bne.n	8004e0e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d912      	bls.n	8004d4e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2c:	881a      	ldrh	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d38:	1c9a      	adds	r2, r3, #2
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b02      	subs	r3, #2
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d4c:	e05f      	b.n	8004e0e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	330c      	adds	r3, #12
 8004d58:	7812      	ldrb	r2, [r2, #0]
 8004d5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d74:	e04b      	b.n	8004e0e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d12b      	bne.n	8004ddc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d912      	bls.n	8004db4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d92:	881a      	ldrh	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9e:	1c9a      	adds	r2, r3, #2
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b02      	subs	r3, #2
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004db2:	e02c      	b.n	8004e0e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	7812      	ldrb	r2, [r2, #0]
 8004dc0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004dda:	e018      	b.n	8004e0e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ddc:	f7fd f850 	bl	8001e80 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d803      	bhi.n	8004df4 <HAL_SPI_Transmit+0x26e>
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004df2:	d102      	bne.n	8004dfa <HAL_SPI_Transmit+0x274>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e02d      	b.n	8004e6a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1ae      	bne.n	8004d76 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	6839      	ldr	r1, [r7, #0]
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 fcf5 	bl	800580c <SPI_EndRxTxTransaction>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10a      	bne.n	8004e4c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e36:	2300      	movs	r3, #0
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004e68:	2300      	movs	r3, #0
  }
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3720      	adds	r7, #32
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b088      	sub	sp, #32
 8004e76:	af02      	add	r7, sp, #8
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	603b      	str	r3, [r7, #0]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d001      	beq.n	8004e92 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e123      	b.n	80050da <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <HAL_SPI_Receive+0x2c>
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e11b      	b.n	80050da <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eaa:	d112      	bne.n	8004ed2 <HAL_SPI_Receive+0x60>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10e      	bne.n	8004ed2 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2204      	movs	r2, #4
 8004eb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ebc:	88fa      	ldrh	r2, [r7, #6]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	68b9      	ldr	r1, [r7, #8]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 f90a 	bl	80050e2 <HAL_SPI_TransmitReceive>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	e103      	b.n	80050da <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ed2:	f7fc ffd5 	bl	8001e80 <HAL_GetTick>
 8004ed6:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_SPI_Receive+0x74>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e0f9      	b.n	80050da <HAL_SPI_Receive+0x268>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	88fa      	ldrh	r2, [r7, #6]
 8004f06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	88fa      	ldrh	r2, [r7, #6]
 8004f0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f38:	d908      	bls.n	8004f4c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	e007      	b.n	8004f5c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f5a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f64:	d10f      	bne.n	8004f86 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f84:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f90:	2b40      	cmp	r3, #64	@ 0x40
 8004f92:	d007      	beq.n	8004fa4 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fa2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fac:	d875      	bhi.n	800509a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004fae:	e037      	b.n	8005020 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d117      	bne.n	8004fee <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f103 020c 	add.w	r2, r3, #12
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	7812      	ldrb	r2, [r2, #0]
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004fec:	e018      	b.n	8005020 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fee:	f7fc ff47 	bl	8001e80 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d803      	bhi.n	8005006 <HAL_SPI_Receive+0x194>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005004:	d102      	bne.n	800500c <HAL_SPI_Receive+0x19a>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d109      	bne.n	8005020 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e05c      	b.n	80050da <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1c1      	bne.n	8004fb0 <HAL_SPI_Receive+0x13e>
 800502c:	e03b      	b.n	80050a6 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b01      	cmp	r3, #1
 800503a:	d115      	bne.n	8005068 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005046:	b292      	uxth	r2, r2
 8005048:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504e:	1c9a      	adds	r2, r3, #2
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005066:	e018      	b.n	800509a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005068:	f7fc ff0a 	bl	8001e80 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d803      	bhi.n	8005080 <HAL_SPI_Receive+0x20e>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800507e:	d102      	bne.n	8005086 <HAL_SPI_Receive+0x214>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e01f      	b.n	80050da <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1c3      	bne.n	800502e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	6839      	ldr	r1, [r7, #0]
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 fb56 	bl	800575c <SPI_EndRxTransaction>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80050d8:	2300      	movs	r3, #0
  }
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b08a      	sub	sp, #40	@ 0x28
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	607a      	str	r2, [r7, #4]
 80050ee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050f0:	2301      	movs	r3, #1
 80050f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050f4:	f7fc fec4 	bl	8001e80 <HAL_GetTick>
 80050f8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005100:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005108:	887b      	ldrh	r3, [r7, #2]
 800510a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800510c:	887b      	ldrh	r3, [r7, #2]
 800510e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005110:	7ffb      	ldrb	r3, [r7, #31]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d00c      	beq.n	8005130 <HAL_SPI_TransmitReceive+0x4e>
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800511c:	d106      	bne.n	800512c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d102      	bne.n	800512c <HAL_SPI_TransmitReceive+0x4a>
 8005126:	7ffb      	ldrb	r3, [r7, #31]
 8005128:	2b04      	cmp	r3, #4
 800512a:	d001      	beq.n	8005130 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800512c:	2302      	movs	r3, #2
 800512e:	e1f3      	b.n	8005518 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d005      	beq.n	8005142 <HAL_SPI_TransmitReceive+0x60>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <HAL_SPI_TransmitReceive+0x60>
 800513c:	887b      	ldrh	r3, [r7, #2]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e1e8      	b.n	8005518 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_SPI_TransmitReceive+0x72>
 8005150:	2302      	movs	r3, #2
 8005152:	e1e1      	b.n	8005518 <HAL_SPI_TransmitReceive+0x436>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b04      	cmp	r3, #4
 8005166:	d003      	beq.n	8005170 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2205      	movs	r2, #5
 800516c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	887a      	ldrh	r2, [r7, #2]
 8005180:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	887a      	ldrh	r2, [r7, #2]
 8005188:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	887a      	ldrh	r2, [r7, #2]
 8005196:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	887a      	ldrh	r2, [r7, #2]
 800519c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051b2:	d802      	bhi.n	80051ba <HAL_SPI_TransmitReceive+0xd8>
 80051b4:	8abb      	ldrh	r3, [r7, #20]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d908      	bls.n	80051cc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80051c8:	605a      	str	r2, [r3, #4]
 80051ca:	e007      	b.n	80051dc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80051da:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e6:	2b40      	cmp	r3, #64	@ 0x40
 80051e8:	d007      	beq.n	80051fa <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005202:	f240 8083 	bls.w	800530c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <HAL_SPI_TransmitReceive+0x132>
 800520e:	8afb      	ldrh	r3, [r7, #22]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d16f      	bne.n	80052f4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005218:	881a      	ldrh	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005224:	1c9a      	adds	r2, r3, #2
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005238:	e05c      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b02      	cmp	r3, #2
 8005246:	d11b      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x19e>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d016      	beq.n	8005280 <HAL_SPI_TransmitReceive+0x19e>
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	2b01      	cmp	r3, #1
 8005256:	d113      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525c:	881a      	ldrh	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005268:	1c9a      	adds	r2, r3, #2
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b01      	cmp	r3, #1
 800528c:	d11c      	bne.n	80052c8 <HAL_SPI_TransmitReceive+0x1e6>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d016      	beq.n	80052c8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a4:	b292      	uxth	r2, r2
 80052a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ac:	1c9a      	adds	r2, r3, #2
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052c4:	2301      	movs	r3, #1
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052c8:	f7fc fdda 	bl	8001e80 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d80d      	bhi.n	80052f4 <HAL_SPI_TransmitReceive+0x212>
 80052d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052de:	d009      	beq.n	80052f4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e111      	b.n	8005518 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d19d      	bne.n	800523a <HAL_SPI_TransmitReceive+0x158>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d197      	bne.n	800523a <HAL_SPI_TransmitReceive+0x158>
 800530a:	e0e5      	b.n	80054d8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <HAL_SPI_TransmitReceive+0x23a>
 8005314:	8afb      	ldrh	r3, [r7, #22]
 8005316:	2b01      	cmp	r3, #1
 8005318:	f040 80d1 	bne.w	80054be <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b01      	cmp	r3, #1
 8005324:	d912      	bls.n	800534c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532a:	881a      	ldrh	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005336:	1c9a      	adds	r2, r3, #2
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005340:	b29b      	uxth	r3, r3
 8005342:	3b02      	subs	r3, #2
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800534a:	e0b8      	b.n	80054be <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	330c      	adds	r3, #12
 8005356:	7812      	ldrb	r2, [r2, #0]
 8005358:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005372:	e0a4      	b.n	80054be <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b02      	cmp	r3, #2
 8005380:	d134      	bne.n	80053ec <HAL_SPI_TransmitReceive+0x30a>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d02f      	beq.n	80053ec <HAL_SPI_TransmitReceive+0x30a>
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	2b01      	cmp	r3, #1
 8005390:	d12c      	bne.n	80053ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	d912      	bls.n	80053c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a0:	881a      	ldrh	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ac:	1c9a      	adds	r2, r3, #2
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b02      	subs	r3, #2
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053c0:	e012      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	330c      	adds	r3, #12
 80053cc:	7812      	ldrb	r2, [r2, #0]
 80053ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d148      	bne.n	800548c <HAL_SPI_TransmitReceive+0x3aa>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d042      	beq.n	800548c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b01      	cmp	r3, #1
 8005410:	d923      	bls.n	800545a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541c:	b292      	uxth	r2, r2
 800541e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005424:	1c9a      	adds	r2, r3, #2
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b02      	subs	r3, #2
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b01      	cmp	r3, #1
 8005446:	d81f      	bhi.n	8005488 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005456:	605a      	str	r2, [r3, #4]
 8005458:	e016      	b.n	8005488 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f103 020c 	add.w	r2, r3, #12
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005466:	7812      	ldrb	r2, [r2, #0]
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005488:	2301      	movs	r3, #1
 800548a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800548c:	f7fc fcf8 	bl	8001e80 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005498:	429a      	cmp	r2, r3
 800549a:	d803      	bhi.n	80054a4 <HAL_SPI_TransmitReceive+0x3c2>
 800549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054a2:	d102      	bne.n	80054aa <HAL_SPI_TransmitReceive+0x3c8>
 80054a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d109      	bne.n	80054be <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e02c      	b.n	8005518 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f47f af55 	bne.w	8005374 <HAL_SPI_TransmitReceive+0x292>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f47f af4e 	bne.w	8005374 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054d8:	6a3a      	ldr	r2, [r7, #32]
 80054da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f995 	bl	800580c <SPI_EndRxTxTransaction>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d008      	beq.n	80054fa <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e00e      	b.n	8005518 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005516:	2300      	movs	r3, #0
  }
}
 8005518:	4618      	mov	r0, r3
 800551a:	3728      	adds	r7, #40	@ 0x28
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	4613      	mov	r3, r2
 800552e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005530:	f7fc fca6 	bl	8001e80 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	4413      	add	r3, r2
 800553e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005540:	f7fc fc9e 	bl	8001e80 <HAL_GetTick>
 8005544:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005546:	4b39      	ldr	r3, [pc, #228]	@ (800562c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	015b      	lsls	r3, r3, #5
 800554c:	0d1b      	lsrs	r3, r3, #20
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	fb02 f303 	mul.w	r3, r2, r3
 8005554:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005556:	e054      	b.n	8005602 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800555e:	d050      	beq.n	8005602 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005560:	f7fc fc8e 	bl	8001e80 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	69fa      	ldr	r2, [r7, #28]
 800556c:	429a      	cmp	r2, r3
 800556e:	d902      	bls.n	8005576 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d13d      	bne.n	80055f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005584:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800558e:	d111      	bne.n	80055b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005598:	d004      	beq.n	80055a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055a2:	d107      	bne.n	80055b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055bc:	d10f      	bne.n	80055de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e017      	b.n	8005622 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	3b01      	subs	r3, #1
 8005600:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4013      	ands	r3, r2
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	429a      	cmp	r2, r3
 8005610:	bf0c      	ite	eq
 8005612:	2301      	moveq	r3, #1
 8005614:	2300      	movne	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	429a      	cmp	r2, r3
 800561e:	d19b      	bne.n	8005558 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	20000000 	.word	0x20000000

08005630 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	@ 0x28
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005642:	f7fc fc1d 	bl	8001e80 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564a:	1a9b      	subs	r3, r3, r2
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	4413      	add	r3, r2
 8005650:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005652:	f7fc fc15 	bl	8001e80 <HAL_GetTick>
 8005656:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005660:	4b3d      	ldr	r3, [pc, #244]	@ (8005758 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	00da      	lsls	r2, r3, #3
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	0d1b      	lsrs	r3, r3, #20
 8005670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005672:	fb02 f303 	mul.w	r3, r2, r3
 8005676:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005678:	e060      	b.n	800573c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005680:	d107      	bne.n	8005692 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d104      	bne.n	8005692 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005690:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005698:	d050      	beq.n	800573c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800569a:	f7fc fbf1 	bl	8001e80 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d902      	bls.n	80056b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d13d      	bne.n	800572c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056c8:	d111      	bne.n	80056ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056d2:	d004      	beq.n	80056de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056dc:	d107      	bne.n	80056ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056f6:	d10f      	bne.n	8005718 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005716:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e010      	b.n	800574e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	3b01      	subs	r3, #1
 800573a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	4013      	ands	r3, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	429a      	cmp	r2, r3
 800574a:	d196      	bne.n	800567a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3728      	adds	r7, #40	@ 0x28
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000000 	.word	0x20000000

0800575c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af02      	add	r7, sp, #8
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005770:	d111      	bne.n	8005796 <SPI_EndRxTransaction+0x3a>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800577a:	d004      	beq.n	8005786 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005784:	d107      	bne.n	8005796 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005794:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2200      	movs	r2, #0
 800579e:	2180      	movs	r1, #128	@ 0x80
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff febd 	bl	8005520 <SPI_WaitFlagStateUntilTimeout>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d007      	beq.n	80057bc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057b0:	f043 0220 	orr.w	r2, r3, #32
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e023      	b.n	8005804 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057c4:	d11d      	bne.n	8005802 <SPI_EndRxTransaction+0xa6>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057ce:	d004      	beq.n	80057da <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057d8:	d113      	bne.n	8005802 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f7ff ff22 	bl	8005630 <SPI_WaitFifoStateUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d007      	beq.n	8005802 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057f6:	f043 0220 	orr.w	r2, r3, #32
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e000      	b.n	8005804 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af02      	add	r7, sp, #8
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2200      	movs	r2, #0
 8005820:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f7ff ff03 	bl	8005630 <SPI_WaitFifoStateUntilTimeout>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d007      	beq.n	8005840 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005834:	f043 0220 	orr.w	r2, r3, #32
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e027      	b.n	8005890 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2200      	movs	r2, #0
 8005848:	2180      	movs	r1, #128	@ 0x80
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f7ff fe68 	bl	8005520 <SPI_WaitFlagStateUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d007      	beq.n	8005866 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800585a:	f043 0220 	orr.w	r2, r3, #32
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e014      	b.n	8005890 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2200      	movs	r2, #0
 800586e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f7ff fedc 	bl	8005630 <SPI_WaitFifoStateUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005882:	f043 0220 	orr.w	r2, r3, #32
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e000      	b.n	8005890 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e049      	b.n	800593e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fb fffa 	bl	80018b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3304      	adds	r3, #4
 80058d4:	4619      	mov	r1, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	f000 fccc 	bl	8006274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b082      	sub	sp, #8
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e049      	b.n	80059ec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d106      	bne.n	8005972 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f841 	bl	80059f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2202      	movs	r2, #2
 8005976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	3304      	adds	r3, #4
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f000 fc75 	bl	8006274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e097      	b.n	8005b4c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d106      	bne.n	8005a36 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7fb ffa3 	bl	800197c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2202      	movs	r2, #2
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6812      	ldr	r2, [r2, #0]
 8005a48:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005a4c:	f023 0307 	bic.w	r3, r3, #7
 8005a50:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	f000 fc09 	bl	8006274 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005aa8:	f023 030c 	bic.w	r3, r3, #12
 8005aac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ab4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ab8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	011a      	lsls	r2, r3, #4
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	031b      	lsls	r3, r3, #12
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005ae6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	4313      	orrs	r3, r2
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d020      	beq.n	8005bb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01b      	beq.n	8005bb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0202 	mvn.w	r2, #2
 8005b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fb4a 	bl	8006238 <HAL_TIM_IC_CaptureCallback>
 8005ba4:	e005      	b.n	8005bb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fb3c 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fb4d 	bl	800624c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d020      	beq.n	8005c04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01b      	beq.n	8005c04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f06f 0204 	mvn.w	r2, #4
 8005bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fb24 	bl	8006238 <HAL_TIM_IC_CaptureCallback>
 8005bf0:	e005      	b.n	8005bfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fb16 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fb27 	bl	800624c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d020      	beq.n	8005c50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01b      	beq.n	8005c50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f06f 0208 	mvn.w	r2, #8
 8005c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2204      	movs	r2, #4
 8005c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fafe 	bl	8006238 <HAL_TIM_IC_CaptureCallback>
 8005c3c:	e005      	b.n	8005c4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 faf0 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fb01 	bl	800624c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d020      	beq.n	8005c9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01b      	beq.n	8005c9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0210 	mvn.w	r2, #16
 8005c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2208      	movs	r2, #8
 8005c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fad8 	bl	8006238 <HAL_TIM_IC_CaptureCallback>
 8005c88:	e005      	b.n	8005c96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 faca 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fadb 	bl	800624c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00c      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d007      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0201 	mvn.w	r2, #1
 8005cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 faa8 	bl	8006210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d104      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00c      	beq.n	8005cee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f001 f809 	bl	8006d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00c      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f001 f801 	bl	8006d14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00c      	beq.n	8005d36 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d007      	beq.n	8005d36 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fa95 	bl	8006260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f003 0320 	and.w	r3, r3, #32
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00c      	beq.n	8005d5a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f003 0320 	and.w	r3, r3, #32
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f06f 0220 	mvn.w	r2, #32
 8005d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 ffc9 	bl	8006cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00c      	beq.n	8005d7e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d007      	beq.n	8005d7e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 ffd5 	bl	8006d28 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00c      	beq.n	8005da2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d007      	beq.n	8005da2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 ffcd 	bl	8006d3c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00c      	beq.n	8005dc6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d007      	beq.n	8005dc6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 ffc5 	bl	8006d50 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00c      	beq.n	8005dea <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d007      	beq.n	8005dea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 ffbd 	bl	8006d64 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e0ff      	b.n	8006012 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b14      	cmp	r3, #20
 8005e1e:	f200 80f0 	bhi.w	8006002 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e22:	a201      	add	r2, pc, #4	@ (adr r2, 8005e28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e28:	08005e7d 	.word	0x08005e7d
 8005e2c:	08006003 	.word	0x08006003
 8005e30:	08006003 	.word	0x08006003
 8005e34:	08006003 	.word	0x08006003
 8005e38:	08005ebd 	.word	0x08005ebd
 8005e3c:	08006003 	.word	0x08006003
 8005e40:	08006003 	.word	0x08006003
 8005e44:	08006003 	.word	0x08006003
 8005e48:	08005eff 	.word	0x08005eff
 8005e4c:	08006003 	.word	0x08006003
 8005e50:	08006003 	.word	0x08006003
 8005e54:	08006003 	.word	0x08006003
 8005e58:	08005f3f 	.word	0x08005f3f
 8005e5c:	08006003 	.word	0x08006003
 8005e60:	08006003 	.word	0x08006003
 8005e64:	08006003 	.word	0x08006003
 8005e68:	08005f81 	.word	0x08005f81
 8005e6c:	08006003 	.word	0x08006003
 8005e70:	08006003 	.word	0x08006003
 8005e74:	08006003 	.word	0x08006003
 8005e78:	08005fc1 	.word	0x08005fc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 fa92 	bl	80063ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699a      	ldr	r2, [r3, #24]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0208 	orr.w	r2, r2, #8
 8005e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0204 	bic.w	r2, r2, #4
 8005ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6999      	ldr	r1, [r3, #24]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	619a      	str	r2, [r3, #24]
      break;
 8005eba:	e0a5      	b.n	8006008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68b9      	ldr	r1, [r7, #8]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fb02 	bl	80064cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699a      	ldr	r2, [r3, #24]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6999      	ldr	r1, [r3, #24]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	021a      	lsls	r2, r3, #8
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	619a      	str	r2, [r3, #24]
      break;
 8005efc:	e084      	b.n	8006008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68b9      	ldr	r1, [r7, #8]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 fb6b 	bl	80065e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69da      	ldr	r2, [r3, #28]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f042 0208 	orr.w	r2, r2, #8
 8005f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69da      	ldr	r2, [r3, #28]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0204 	bic.w	r2, r2, #4
 8005f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69d9      	ldr	r1, [r3, #28]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	61da      	str	r2, [r3, #28]
      break;
 8005f3c:	e064      	b.n	8006008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68b9      	ldr	r1, [r7, #8]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 fbd3 	bl	80066f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69da      	ldr	r2, [r3, #28]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69da      	ldr	r2, [r3, #28]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69d9      	ldr	r1, [r3, #28]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	021a      	lsls	r2, r3, #8
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	61da      	str	r2, [r3, #28]
      break;
 8005f7e:	e043      	b.n	8006008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fc3c 	bl	8006804 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0208 	orr.w	r2, r2, #8
 8005f9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0204 	bic.w	r2, r2, #4
 8005faa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	691a      	ldr	r2, [r3, #16]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005fbe:	e023      	b.n	8006008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 fc80 	bl	80068cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fda:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	021a      	lsls	r2, r3, #8
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006000:	e002      	b.n	8006008 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	75fb      	strb	r3, [r7, #23]
      break;
 8006006:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006010:	7dfb      	ldrb	r3, [r7, #23]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop

0800601c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006030:	2b01      	cmp	r3, #1
 8006032:	d101      	bne.n	8006038 <HAL_TIM_ConfigClockSource+0x1c>
 8006034:	2302      	movs	r3, #2
 8006036:	e0de      	b.n	80061f6 <HAL_TIM_ConfigClockSource+0x1da>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006056:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800605a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006062:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a63      	ldr	r2, [pc, #396]	@ (8006200 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	f000 80a9 	beq.w	80061ca <HAL_TIM_ConfigClockSource+0x1ae>
 8006078:	4a61      	ldr	r2, [pc, #388]	@ (8006200 <HAL_TIM_ConfigClockSource+0x1e4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	f200 80ae 	bhi.w	80061dc <HAL_TIM_ConfigClockSource+0x1c0>
 8006080:	4a60      	ldr	r2, [pc, #384]	@ (8006204 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006082:	4293      	cmp	r3, r2
 8006084:	f000 80a1 	beq.w	80061ca <HAL_TIM_ConfigClockSource+0x1ae>
 8006088:	4a5e      	ldr	r2, [pc, #376]	@ (8006204 <HAL_TIM_ConfigClockSource+0x1e8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	f200 80a6 	bhi.w	80061dc <HAL_TIM_ConfigClockSource+0x1c0>
 8006090:	4a5d      	ldr	r2, [pc, #372]	@ (8006208 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006092:	4293      	cmp	r3, r2
 8006094:	f000 8099 	beq.w	80061ca <HAL_TIM_ConfigClockSource+0x1ae>
 8006098:	4a5b      	ldr	r2, [pc, #364]	@ (8006208 <HAL_TIM_ConfigClockSource+0x1ec>)
 800609a:	4293      	cmp	r3, r2
 800609c:	f200 809e 	bhi.w	80061dc <HAL_TIM_ConfigClockSource+0x1c0>
 80060a0:	4a5a      	ldr	r2, [pc, #360]	@ (800620c <HAL_TIM_ConfigClockSource+0x1f0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	f000 8091 	beq.w	80061ca <HAL_TIM_ConfigClockSource+0x1ae>
 80060a8:	4a58      	ldr	r2, [pc, #352]	@ (800620c <HAL_TIM_ConfigClockSource+0x1f0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	f200 8096 	bhi.w	80061dc <HAL_TIM_ConfigClockSource+0x1c0>
 80060b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80060b4:	f000 8089 	beq.w	80061ca <HAL_TIM_ConfigClockSource+0x1ae>
 80060b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80060bc:	f200 808e 	bhi.w	80061dc <HAL_TIM_ConfigClockSource+0x1c0>
 80060c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060c4:	d03e      	beq.n	8006144 <HAL_TIM_ConfigClockSource+0x128>
 80060c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ca:	f200 8087 	bhi.w	80061dc <HAL_TIM_ConfigClockSource+0x1c0>
 80060ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060d2:	f000 8086 	beq.w	80061e2 <HAL_TIM_ConfigClockSource+0x1c6>
 80060d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060da:	d87f      	bhi.n	80061dc <HAL_TIM_ConfigClockSource+0x1c0>
 80060dc:	2b70      	cmp	r3, #112	@ 0x70
 80060de:	d01a      	beq.n	8006116 <HAL_TIM_ConfigClockSource+0xfa>
 80060e0:	2b70      	cmp	r3, #112	@ 0x70
 80060e2:	d87b      	bhi.n	80061dc <HAL_TIM_ConfigClockSource+0x1c0>
 80060e4:	2b60      	cmp	r3, #96	@ 0x60
 80060e6:	d050      	beq.n	800618a <HAL_TIM_ConfigClockSource+0x16e>
 80060e8:	2b60      	cmp	r3, #96	@ 0x60
 80060ea:	d877      	bhi.n	80061dc <HAL_TIM_ConfigClockSource+0x1c0>
 80060ec:	2b50      	cmp	r3, #80	@ 0x50
 80060ee:	d03c      	beq.n	800616a <HAL_TIM_ConfigClockSource+0x14e>
 80060f0:	2b50      	cmp	r3, #80	@ 0x50
 80060f2:	d873      	bhi.n	80061dc <HAL_TIM_ConfigClockSource+0x1c0>
 80060f4:	2b40      	cmp	r3, #64	@ 0x40
 80060f6:	d058      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0x18e>
 80060f8:	2b40      	cmp	r3, #64	@ 0x40
 80060fa:	d86f      	bhi.n	80061dc <HAL_TIM_ConfigClockSource+0x1c0>
 80060fc:	2b30      	cmp	r3, #48	@ 0x30
 80060fe:	d064      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x1ae>
 8006100:	2b30      	cmp	r3, #48	@ 0x30
 8006102:	d86b      	bhi.n	80061dc <HAL_TIM_ConfigClockSource+0x1c0>
 8006104:	2b20      	cmp	r3, #32
 8006106:	d060      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x1ae>
 8006108:	2b20      	cmp	r3, #32
 800610a:	d867      	bhi.n	80061dc <HAL_TIM_ConfigClockSource+0x1c0>
 800610c:	2b00      	cmp	r3, #0
 800610e:	d05c      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x1ae>
 8006110:	2b10      	cmp	r3, #16
 8006112:	d05a      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x1ae>
 8006114:	e062      	b.n	80061dc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006126:	f000 fcb3 	bl	8006a90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	609a      	str	r2, [r3, #8]
      break;
 8006142:	e04f      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006154:	f000 fc9c 	bl	8006a90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006166:	609a      	str	r2, [r3, #8]
      break;
 8006168:	e03c      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006176:	461a      	mov	r2, r3
 8006178:	f000 fc0e 	bl	8006998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2150      	movs	r1, #80	@ 0x50
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fc67 	bl	8006a56 <TIM_ITRx_SetConfig>
      break;
 8006188:	e02c      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006196:	461a      	mov	r2, r3
 8006198:	f000 fc2d 	bl	80069f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2160      	movs	r1, #96	@ 0x60
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 fc57 	bl	8006a56 <TIM_ITRx_SetConfig>
      break;
 80061a8:	e01c      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b6:	461a      	mov	r2, r3
 80061b8:	f000 fbee 	bl	8006998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2140      	movs	r1, #64	@ 0x40
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fc47 	bl	8006a56 <TIM_ITRx_SetConfig>
      break;
 80061c8:	e00c      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4619      	mov	r1, r3
 80061d4:	4610      	mov	r0, r2
 80061d6:	f000 fc3e 	bl	8006a56 <TIM_ITRx_SetConfig>
      break;
 80061da:	e003      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	73fb      	strb	r3, [r7, #15]
      break;
 80061e0:	e000      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80061e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	00100070 	.word	0x00100070
 8006204:	00100040 	.word	0x00100040
 8006208:	00100030 	.word	0x00100030
 800620c:	00100020 	.word	0x00100020

08006210 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a42      	ldr	r2, [pc, #264]	@ (8006390 <TIM_Base_SetConfig+0x11c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00f      	beq.n	80062ac <TIM_Base_SetConfig+0x38>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006292:	d00b      	beq.n	80062ac <TIM_Base_SetConfig+0x38>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a3f      	ldr	r2, [pc, #252]	@ (8006394 <TIM_Base_SetConfig+0x120>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d007      	beq.n	80062ac <TIM_Base_SetConfig+0x38>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a3e      	ldr	r2, [pc, #248]	@ (8006398 <TIM_Base_SetConfig+0x124>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <TIM_Base_SetConfig+0x38>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a3d      	ldr	r2, [pc, #244]	@ (800639c <TIM_Base_SetConfig+0x128>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d108      	bne.n	80062be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a33      	ldr	r2, [pc, #204]	@ (8006390 <TIM_Base_SetConfig+0x11c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01b      	beq.n	80062fe <TIM_Base_SetConfig+0x8a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062cc:	d017      	beq.n	80062fe <TIM_Base_SetConfig+0x8a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a30      	ldr	r2, [pc, #192]	@ (8006394 <TIM_Base_SetConfig+0x120>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <TIM_Base_SetConfig+0x8a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2f      	ldr	r2, [pc, #188]	@ (8006398 <TIM_Base_SetConfig+0x124>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00f      	beq.n	80062fe <TIM_Base_SetConfig+0x8a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2e      	ldr	r2, [pc, #184]	@ (800639c <TIM_Base_SetConfig+0x128>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00b      	beq.n	80062fe <TIM_Base_SetConfig+0x8a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2d      	ldr	r2, [pc, #180]	@ (80063a0 <TIM_Base_SetConfig+0x12c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d007      	beq.n	80062fe <TIM_Base_SetConfig+0x8a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a2c      	ldr	r2, [pc, #176]	@ (80063a4 <TIM_Base_SetConfig+0x130>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d003      	beq.n	80062fe <TIM_Base_SetConfig+0x8a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a2b      	ldr	r2, [pc, #172]	@ (80063a8 <TIM_Base_SetConfig+0x134>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d108      	bne.n	8006310 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a16      	ldr	r2, [pc, #88]	@ (8006390 <TIM_Base_SetConfig+0x11c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00f      	beq.n	800635c <TIM_Base_SetConfig+0xe8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a17      	ldr	r2, [pc, #92]	@ (800639c <TIM_Base_SetConfig+0x128>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00b      	beq.n	800635c <TIM_Base_SetConfig+0xe8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a16      	ldr	r2, [pc, #88]	@ (80063a0 <TIM_Base_SetConfig+0x12c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d007      	beq.n	800635c <TIM_Base_SetConfig+0xe8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a15      	ldr	r2, [pc, #84]	@ (80063a4 <TIM_Base_SetConfig+0x130>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d003      	beq.n	800635c <TIM_Base_SetConfig+0xe8>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a14      	ldr	r2, [pc, #80]	@ (80063a8 <TIM_Base_SetConfig+0x134>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d103      	bne.n	8006364 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b01      	cmp	r3, #1
 8006374:	d105      	bne.n	8006382 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f023 0201 	bic.w	r2, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	611a      	str	r2, [r3, #16]
  }
}
 8006382:	bf00      	nop
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40012c00 	.word	0x40012c00
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800
 800639c:	40013400 	.word	0x40013400
 80063a0:	40014000 	.word	0x40014000
 80063a4:	40014400 	.word	0x40014400
 80063a8:	40014800 	.word	0x40014800

080063ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	f023 0201 	bic.w	r2, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 0303 	bic.w	r3, r3, #3
 80063e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f023 0302 	bic.w	r3, r3, #2
 80063f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a2c      	ldr	r2, [pc, #176]	@ (80064b8 <TIM_OC1_SetConfig+0x10c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00f      	beq.n	800642c <TIM_OC1_SetConfig+0x80>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a2b      	ldr	r2, [pc, #172]	@ (80064bc <TIM_OC1_SetConfig+0x110>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d00b      	beq.n	800642c <TIM_OC1_SetConfig+0x80>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a2a      	ldr	r2, [pc, #168]	@ (80064c0 <TIM_OC1_SetConfig+0x114>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d007      	beq.n	800642c <TIM_OC1_SetConfig+0x80>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a29      	ldr	r2, [pc, #164]	@ (80064c4 <TIM_OC1_SetConfig+0x118>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <TIM_OC1_SetConfig+0x80>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a28      	ldr	r2, [pc, #160]	@ (80064c8 <TIM_OC1_SetConfig+0x11c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d10c      	bne.n	8006446 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f023 0308 	bic.w	r3, r3, #8
 8006432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f023 0304 	bic.w	r3, r3, #4
 8006444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a1b      	ldr	r2, [pc, #108]	@ (80064b8 <TIM_OC1_SetConfig+0x10c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d00f      	beq.n	800646e <TIM_OC1_SetConfig+0xc2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a1a      	ldr	r2, [pc, #104]	@ (80064bc <TIM_OC1_SetConfig+0x110>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00b      	beq.n	800646e <TIM_OC1_SetConfig+0xc2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a19      	ldr	r2, [pc, #100]	@ (80064c0 <TIM_OC1_SetConfig+0x114>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d007      	beq.n	800646e <TIM_OC1_SetConfig+0xc2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a18      	ldr	r2, [pc, #96]	@ (80064c4 <TIM_OC1_SetConfig+0x118>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d003      	beq.n	800646e <TIM_OC1_SetConfig+0xc2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a17      	ldr	r2, [pc, #92]	@ (80064c8 <TIM_OC1_SetConfig+0x11c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d111      	bne.n	8006492 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800647c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	4313      	orrs	r3, r2
 8006490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	621a      	str	r2, [r3, #32]
}
 80064ac:	bf00      	nop
 80064ae:	371c      	adds	r7, #28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	40012c00 	.word	0x40012c00
 80064bc:	40013400 	.word	0x40013400
 80064c0:	40014000 	.word	0x40014000
 80064c4:	40014400 	.word	0x40014400
 80064c8:	40014800 	.word	0x40014800

080064cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	f023 0210 	bic.w	r2, r3, #16
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4313      	orrs	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f023 0320 	bic.w	r3, r3, #32
 800651a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a28      	ldr	r2, [pc, #160]	@ (80065cc <TIM_OC2_SetConfig+0x100>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d003      	beq.n	8006538 <TIM_OC2_SetConfig+0x6c>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a27      	ldr	r2, [pc, #156]	@ (80065d0 <TIM_OC2_SetConfig+0x104>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d10d      	bne.n	8006554 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800653e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006552:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a1d      	ldr	r2, [pc, #116]	@ (80065cc <TIM_OC2_SetConfig+0x100>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00f      	beq.n	800657c <TIM_OC2_SetConfig+0xb0>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a1c      	ldr	r2, [pc, #112]	@ (80065d0 <TIM_OC2_SetConfig+0x104>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00b      	beq.n	800657c <TIM_OC2_SetConfig+0xb0>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a1b      	ldr	r2, [pc, #108]	@ (80065d4 <TIM_OC2_SetConfig+0x108>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d007      	beq.n	800657c <TIM_OC2_SetConfig+0xb0>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a1a      	ldr	r2, [pc, #104]	@ (80065d8 <TIM_OC2_SetConfig+0x10c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <TIM_OC2_SetConfig+0xb0>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a19      	ldr	r2, [pc, #100]	@ (80065dc <TIM_OC2_SetConfig+0x110>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d113      	bne.n	80065a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006582:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800658a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	621a      	str	r2, [r3, #32]
}
 80065be:	bf00      	nop
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40013400 	.word	0x40013400
 80065d4:	40014000 	.word	0x40014000
 80065d8:	40014400 	.word	0x40014400
 80065dc:	40014800 	.word	0x40014800

080065e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800660e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0303 	bic.w	r3, r3, #3
 800661a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800662c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a27      	ldr	r2, [pc, #156]	@ (80066dc <TIM_OC3_SetConfig+0xfc>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d003      	beq.n	800664a <TIM_OC3_SetConfig+0x6a>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a26      	ldr	r2, [pc, #152]	@ (80066e0 <TIM_OC3_SetConfig+0x100>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d10d      	bne.n	8006666 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	021b      	lsls	r3, r3, #8
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a1c      	ldr	r2, [pc, #112]	@ (80066dc <TIM_OC3_SetConfig+0xfc>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00f      	beq.n	800668e <TIM_OC3_SetConfig+0xae>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a1b      	ldr	r2, [pc, #108]	@ (80066e0 <TIM_OC3_SetConfig+0x100>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00b      	beq.n	800668e <TIM_OC3_SetConfig+0xae>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a1a      	ldr	r2, [pc, #104]	@ (80066e4 <TIM_OC3_SetConfig+0x104>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d007      	beq.n	800668e <TIM_OC3_SetConfig+0xae>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a19      	ldr	r2, [pc, #100]	@ (80066e8 <TIM_OC3_SetConfig+0x108>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_OC3_SetConfig+0xae>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a18      	ldr	r2, [pc, #96]	@ (80066ec <TIM_OC3_SetConfig+0x10c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d113      	bne.n	80066b6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800669c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	011b      	lsls	r3, r3, #4
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	011b      	lsls	r3, r3, #4
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	621a      	str	r2, [r3, #32]
}
 80066d0:	bf00      	nop
 80066d2:	371c      	adds	r7, #28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	40012c00 	.word	0x40012c00
 80066e0:	40013400 	.word	0x40013400
 80066e4:	40014000 	.word	0x40014000
 80066e8:	40014400 	.word	0x40014400
 80066ec:	40014800 	.word	0x40014800

080066f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800671e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800672a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	021b      	lsls	r3, r3, #8
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	4313      	orrs	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800673e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	031b      	lsls	r3, r3, #12
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	4313      	orrs	r3, r2
 800674a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a28      	ldr	r2, [pc, #160]	@ (80067f0 <TIM_OC4_SetConfig+0x100>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d003      	beq.n	800675c <TIM_OC4_SetConfig+0x6c>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a27      	ldr	r2, [pc, #156]	@ (80067f4 <TIM_OC4_SetConfig+0x104>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d10d      	bne.n	8006778 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	031b      	lsls	r3, r3, #12
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006776:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a1d      	ldr	r2, [pc, #116]	@ (80067f0 <TIM_OC4_SetConfig+0x100>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00f      	beq.n	80067a0 <TIM_OC4_SetConfig+0xb0>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a1c      	ldr	r2, [pc, #112]	@ (80067f4 <TIM_OC4_SetConfig+0x104>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00b      	beq.n	80067a0 <TIM_OC4_SetConfig+0xb0>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a1b      	ldr	r2, [pc, #108]	@ (80067f8 <TIM_OC4_SetConfig+0x108>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d007      	beq.n	80067a0 <TIM_OC4_SetConfig+0xb0>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a1a      	ldr	r2, [pc, #104]	@ (80067fc <TIM_OC4_SetConfig+0x10c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d003      	beq.n	80067a0 <TIM_OC4_SetConfig+0xb0>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a19      	ldr	r2, [pc, #100]	@ (8006800 <TIM_OC4_SetConfig+0x110>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d113      	bne.n	80067c8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	019b      	lsls	r3, r3, #6
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	019b      	lsls	r3, r3, #6
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	621a      	str	r2, [r3, #32]
}
 80067e2:	bf00      	nop
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	40012c00 	.word	0x40012c00
 80067f4:	40013400 	.word	0x40013400
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800

08006804 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006804:	b480      	push	{r7}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a1b      	ldr	r3, [r3, #32]
 8006818:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006848:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	041b      	lsls	r3, r3, #16
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a17      	ldr	r2, [pc, #92]	@ (80068b8 <TIM_OC5_SetConfig+0xb4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d00f      	beq.n	800687e <TIM_OC5_SetConfig+0x7a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a16      	ldr	r2, [pc, #88]	@ (80068bc <TIM_OC5_SetConfig+0xb8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00b      	beq.n	800687e <TIM_OC5_SetConfig+0x7a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a15      	ldr	r2, [pc, #84]	@ (80068c0 <TIM_OC5_SetConfig+0xbc>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d007      	beq.n	800687e <TIM_OC5_SetConfig+0x7a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a14      	ldr	r2, [pc, #80]	@ (80068c4 <TIM_OC5_SetConfig+0xc0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d003      	beq.n	800687e <TIM_OC5_SetConfig+0x7a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a13      	ldr	r2, [pc, #76]	@ (80068c8 <TIM_OC5_SetConfig+0xc4>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d109      	bne.n	8006892 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006884:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	021b      	lsls	r3, r3, #8
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	4313      	orrs	r3, r2
 8006890:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	621a      	str	r2, [r3, #32]
}
 80068ac:	bf00      	nop
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	40012c00 	.word	0x40012c00
 80068bc:	40013400 	.word	0x40013400
 80068c0:	40014000 	.word	0x40014000
 80068c4:	40014400 	.word	0x40014400
 80068c8:	40014800 	.word	0x40014800

080068cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	021b      	lsls	r3, r3, #8
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	4313      	orrs	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	051b      	lsls	r3, r3, #20
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	4313      	orrs	r3, r2
 800691e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a18      	ldr	r2, [pc, #96]	@ (8006984 <TIM_OC6_SetConfig+0xb8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00f      	beq.n	8006948 <TIM_OC6_SetConfig+0x7c>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a17      	ldr	r2, [pc, #92]	@ (8006988 <TIM_OC6_SetConfig+0xbc>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d00b      	beq.n	8006948 <TIM_OC6_SetConfig+0x7c>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a16      	ldr	r2, [pc, #88]	@ (800698c <TIM_OC6_SetConfig+0xc0>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d007      	beq.n	8006948 <TIM_OC6_SetConfig+0x7c>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a15      	ldr	r2, [pc, #84]	@ (8006990 <TIM_OC6_SetConfig+0xc4>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d003      	beq.n	8006948 <TIM_OC6_SetConfig+0x7c>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a14      	ldr	r2, [pc, #80]	@ (8006994 <TIM_OC6_SetConfig+0xc8>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d109      	bne.n	800695c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800694e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	029b      	lsls	r3, r3, #10
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	4313      	orrs	r3, r2
 800695a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	621a      	str	r2, [r3, #32]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	40012c00 	.word	0x40012c00
 8006988:	40013400 	.word	0x40013400
 800698c:	40014000 	.word	0x40014000
 8006990:	40014400 	.word	0x40014400
 8006994:	40014800 	.word	0x40014800

08006998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	f023 0201 	bic.w	r2, r3, #1
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	011b      	lsls	r3, r3, #4
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f023 030a 	bic.w	r3, r3, #10
 80069d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	4313      	orrs	r3, r2
 80069dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	621a      	str	r2, [r3, #32]
}
 80069ea:	bf00      	nop
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b087      	sub	sp, #28
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	60f8      	str	r0, [r7, #12]
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	f023 0210 	bic.w	r2, r3, #16
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	031b      	lsls	r3, r3, #12
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	621a      	str	r2, [r3, #32]
}
 8006a4a:	bf00      	nop
 8006a4c:	371c      	adds	r7, #28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006a6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	f043 0307 	orr.w	r3, r3, #7
 8006a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	609a      	str	r2, [r3, #8]
}
 8006a84:	bf00      	nop
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
 8006a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	021a      	lsls	r2, r3, #8
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	609a      	str	r2, [r3, #8]
}
 8006ac4:	bf00      	nop
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d101      	bne.n	8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	e065      	b.n	8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2202      	movs	r2, #2
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a2c      	ldr	r2, [pc, #176]	@ (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d004      	beq.n	8006b1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a2b      	ldr	r2, [pc, #172]	@ (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d108      	bne.n	8006b2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d018      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b5e:	d013      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a18      	ldr	r2, [pc, #96]	@ (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00e      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a17      	ldr	r2, [pc, #92]	@ (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d009      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a12      	ldr	r2, [pc, #72]	@ (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d004      	beq.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a13      	ldr	r2, [pc, #76]	@ (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d10c      	bne.n	8006ba2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	40012c00 	.word	0x40012c00
 8006bc4:	40013400 	.word	0x40013400
 8006bc8:	40000400 	.word	0x40000400
 8006bcc:	40000800 	.word	0x40000800
 8006bd0:	40014000 	.word	0x40014000

08006bd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e073      	b.n	8006cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	041b      	lsls	r3, r3, #16
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a19      	ldr	r2, [pc, #100]	@ (8006ce4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d004      	beq.n	8006c8c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a18      	ldr	r2, [pc, #96]	@ (8006ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d11c      	bne.n	8006cc6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c96:	051b      	lsls	r3, r3, #20
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	40012c00 	.word	0x40012c00
 8006ce8:	40013400 	.word	0x40013400

08006cec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e042      	b.n	8006e10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d106      	bne.n	8006da2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7fa ff47 	bl	8001c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2224      	movs	r2, #36	@ 0x24
 8006da6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0201 	bic.w	r2, r2, #1
 8006db8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fb82 	bl	80074cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f8b3 	bl	8006f34 <UART_SetConfig>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d101      	bne.n	8006dd8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e01b      	b.n	8006e10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006de6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006df6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f042 0201 	orr.w	r2, r2, #1
 8006e06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fc01 	bl	8007610 <UART_CheckIdleState>
 8006e0e:	4603      	mov	r3, r0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08a      	sub	sp, #40	@ 0x28
 8006e1c:	af02      	add	r7, sp, #8
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	603b      	str	r3, [r7, #0]
 8006e24:	4613      	mov	r3, r2
 8006e26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d17b      	bne.n	8006f2a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <HAL_UART_Transmit+0x26>
 8006e38:	88fb      	ldrh	r3, [r7, #6]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e074      	b.n	8006f2c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2221      	movs	r2, #33	@ 0x21
 8006e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e52:	f7fb f815 	bl	8001e80 <HAL_GetTick>
 8006e56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	88fa      	ldrh	r2, [r7, #6]
 8006e5c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	88fa      	ldrh	r2, [r7, #6]
 8006e64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e70:	d108      	bne.n	8006e84 <HAL_UART_Transmit+0x6c>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d104      	bne.n	8006e84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	61bb      	str	r3, [r7, #24]
 8006e82:	e003      	b.n	8006e8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e8c:	e030      	b.n	8006ef0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2200      	movs	r2, #0
 8006e96:	2180      	movs	r1, #128	@ 0x80
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 fc63 	bl	8007764 <UART_WaitOnFlagUntilTimeout>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e03d      	b.n	8006f2c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10b      	bne.n	8006ece <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ec4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	3302      	adds	r3, #2
 8006eca:	61bb      	str	r3, [r7, #24]
 8006ecc:	e007      	b.n	8006ede <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	781a      	ldrb	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	3301      	adds	r3, #1
 8006edc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1c8      	bne.n	8006e8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2200      	movs	r2, #0
 8006f04:	2140      	movs	r1, #64	@ 0x40
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 fc2c 	bl	8007764 <UART_WaitOnFlagUntilTimeout>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2220      	movs	r2, #32
 8006f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e006      	b.n	8006f2c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	e000      	b.n	8006f2c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006f2a:	2302      	movs	r3, #2
  }
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3720      	adds	r7, #32
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f38:	b08c      	sub	sp, #48	@ 0x30
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4bab      	ldr	r3, [pc, #684]	@ (8007210 <UART_SetConfig+0x2dc>)
 8006f64:	4013      	ands	r3, r2
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	6812      	ldr	r2, [r2, #0]
 8006f6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4aa0      	ldr	r2, [pc, #640]	@ (8007214 <UART_SetConfig+0x2e0>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d004      	beq.n	8006fa0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006faa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	6812      	ldr	r2, [r2, #0]
 8006fb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fb4:	430b      	orrs	r3, r1
 8006fb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbe:	f023 010f 	bic.w	r1, r3, #15
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a91      	ldr	r2, [pc, #580]	@ (8007218 <UART_SetConfig+0x2e4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d125      	bne.n	8007024 <UART_SetConfig+0xf0>
 8006fd8:	4b90      	ldr	r3, [pc, #576]	@ (800721c <UART_SetConfig+0x2e8>)
 8006fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d81a      	bhi.n	800701c <UART_SetConfig+0xe8>
 8006fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fec <UART_SetConfig+0xb8>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08006ffd 	.word	0x08006ffd
 8006ff0:	0800700d 	.word	0x0800700d
 8006ff4:	08007005 	.word	0x08007005
 8006ff8:	08007015 	.word	0x08007015
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007002:	e0d6      	b.n	80071b2 <UART_SetConfig+0x27e>
 8007004:	2302      	movs	r3, #2
 8007006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800700a:	e0d2      	b.n	80071b2 <UART_SetConfig+0x27e>
 800700c:	2304      	movs	r3, #4
 800700e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007012:	e0ce      	b.n	80071b2 <UART_SetConfig+0x27e>
 8007014:	2308      	movs	r3, #8
 8007016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800701a:	e0ca      	b.n	80071b2 <UART_SetConfig+0x27e>
 800701c:	2310      	movs	r3, #16
 800701e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007022:	e0c6      	b.n	80071b2 <UART_SetConfig+0x27e>
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a7d      	ldr	r2, [pc, #500]	@ (8007220 <UART_SetConfig+0x2ec>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d138      	bne.n	80070a0 <UART_SetConfig+0x16c>
 800702e:	4b7b      	ldr	r3, [pc, #492]	@ (800721c <UART_SetConfig+0x2e8>)
 8007030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007034:	f003 030c 	and.w	r3, r3, #12
 8007038:	2b0c      	cmp	r3, #12
 800703a:	d82d      	bhi.n	8007098 <UART_SetConfig+0x164>
 800703c:	a201      	add	r2, pc, #4	@ (adr r2, 8007044 <UART_SetConfig+0x110>)
 800703e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007042:	bf00      	nop
 8007044:	08007079 	.word	0x08007079
 8007048:	08007099 	.word	0x08007099
 800704c:	08007099 	.word	0x08007099
 8007050:	08007099 	.word	0x08007099
 8007054:	08007089 	.word	0x08007089
 8007058:	08007099 	.word	0x08007099
 800705c:	08007099 	.word	0x08007099
 8007060:	08007099 	.word	0x08007099
 8007064:	08007081 	.word	0x08007081
 8007068:	08007099 	.word	0x08007099
 800706c:	08007099 	.word	0x08007099
 8007070:	08007099 	.word	0x08007099
 8007074:	08007091 	.word	0x08007091
 8007078:	2300      	movs	r3, #0
 800707a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800707e:	e098      	b.n	80071b2 <UART_SetConfig+0x27e>
 8007080:	2302      	movs	r3, #2
 8007082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007086:	e094      	b.n	80071b2 <UART_SetConfig+0x27e>
 8007088:	2304      	movs	r3, #4
 800708a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800708e:	e090      	b.n	80071b2 <UART_SetConfig+0x27e>
 8007090:	2308      	movs	r3, #8
 8007092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007096:	e08c      	b.n	80071b2 <UART_SetConfig+0x27e>
 8007098:	2310      	movs	r3, #16
 800709a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800709e:	e088      	b.n	80071b2 <UART_SetConfig+0x27e>
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a5f      	ldr	r2, [pc, #380]	@ (8007224 <UART_SetConfig+0x2f0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d125      	bne.n	80070f6 <UART_SetConfig+0x1c2>
 80070aa:	4b5c      	ldr	r3, [pc, #368]	@ (800721c <UART_SetConfig+0x2e8>)
 80070ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80070b4:	2b30      	cmp	r3, #48	@ 0x30
 80070b6:	d016      	beq.n	80070e6 <UART_SetConfig+0x1b2>
 80070b8:	2b30      	cmp	r3, #48	@ 0x30
 80070ba:	d818      	bhi.n	80070ee <UART_SetConfig+0x1ba>
 80070bc:	2b20      	cmp	r3, #32
 80070be:	d00a      	beq.n	80070d6 <UART_SetConfig+0x1a2>
 80070c0:	2b20      	cmp	r3, #32
 80070c2:	d814      	bhi.n	80070ee <UART_SetConfig+0x1ba>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <UART_SetConfig+0x19a>
 80070c8:	2b10      	cmp	r3, #16
 80070ca:	d008      	beq.n	80070de <UART_SetConfig+0x1aa>
 80070cc:	e00f      	b.n	80070ee <UART_SetConfig+0x1ba>
 80070ce:	2300      	movs	r3, #0
 80070d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070d4:	e06d      	b.n	80071b2 <UART_SetConfig+0x27e>
 80070d6:	2302      	movs	r3, #2
 80070d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070dc:	e069      	b.n	80071b2 <UART_SetConfig+0x27e>
 80070de:	2304      	movs	r3, #4
 80070e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070e4:	e065      	b.n	80071b2 <UART_SetConfig+0x27e>
 80070e6:	2308      	movs	r3, #8
 80070e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ec:	e061      	b.n	80071b2 <UART_SetConfig+0x27e>
 80070ee:	2310      	movs	r3, #16
 80070f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070f4:	e05d      	b.n	80071b2 <UART_SetConfig+0x27e>
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a4b      	ldr	r2, [pc, #300]	@ (8007228 <UART_SetConfig+0x2f4>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d125      	bne.n	800714c <UART_SetConfig+0x218>
 8007100:	4b46      	ldr	r3, [pc, #280]	@ (800721c <UART_SetConfig+0x2e8>)
 8007102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007106:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800710a:	2bc0      	cmp	r3, #192	@ 0xc0
 800710c:	d016      	beq.n	800713c <UART_SetConfig+0x208>
 800710e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007110:	d818      	bhi.n	8007144 <UART_SetConfig+0x210>
 8007112:	2b80      	cmp	r3, #128	@ 0x80
 8007114:	d00a      	beq.n	800712c <UART_SetConfig+0x1f8>
 8007116:	2b80      	cmp	r3, #128	@ 0x80
 8007118:	d814      	bhi.n	8007144 <UART_SetConfig+0x210>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <UART_SetConfig+0x1f0>
 800711e:	2b40      	cmp	r3, #64	@ 0x40
 8007120:	d008      	beq.n	8007134 <UART_SetConfig+0x200>
 8007122:	e00f      	b.n	8007144 <UART_SetConfig+0x210>
 8007124:	2300      	movs	r3, #0
 8007126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800712a:	e042      	b.n	80071b2 <UART_SetConfig+0x27e>
 800712c:	2302      	movs	r3, #2
 800712e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007132:	e03e      	b.n	80071b2 <UART_SetConfig+0x27e>
 8007134:	2304      	movs	r3, #4
 8007136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800713a:	e03a      	b.n	80071b2 <UART_SetConfig+0x27e>
 800713c:	2308      	movs	r3, #8
 800713e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007142:	e036      	b.n	80071b2 <UART_SetConfig+0x27e>
 8007144:	2310      	movs	r3, #16
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800714a:	e032      	b.n	80071b2 <UART_SetConfig+0x27e>
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a30      	ldr	r2, [pc, #192]	@ (8007214 <UART_SetConfig+0x2e0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d12a      	bne.n	80071ac <UART_SetConfig+0x278>
 8007156:	4b31      	ldr	r3, [pc, #196]	@ (800721c <UART_SetConfig+0x2e8>)
 8007158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800715c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007160:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007164:	d01a      	beq.n	800719c <UART_SetConfig+0x268>
 8007166:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800716a:	d81b      	bhi.n	80071a4 <UART_SetConfig+0x270>
 800716c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007170:	d00c      	beq.n	800718c <UART_SetConfig+0x258>
 8007172:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007176:	d815      	bhi.n	80071a4 <UART_SetConfig+0x270>
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <UART_SetConfig+0x250>
 800717c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007180:	d008      	beq.n	8007194 <UART_SetConfig+0x260>
 8007182:	e00f      	b.n	80071a4 <UART_SetConfig+0x270>
 8007184:	2300      	movs	r3, #0
 8007186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718a:	e012      	b.n	80071b2 <UART_SetConfig+0x27e>
 800718c:	2302      	movs	r3, #2
 800718e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007192:	e00e      	b.n	80071b2 <UART_SetConfig+0x27e>
 8007194:	2304      	movs	r3, #4
 8007196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800719a:	e00a      	b.n	80071b2 <UART_SetConfig+0x27e>
 800719c:	2308      	movs	r3, #8
 800719e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071a2:	e006      	b.n	80071b2 <UART_SetConfig+0x27e>
 80071a4:	2310      	movs	r3, #16
 80071a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071aa:	e002      	b.n	80071b2 <UART_SetConfig+0x27e>
 80071ac:	2310      	movs	r3, #16
 80071ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a17      	ldr	r2, [pc, #92]	@ (8007214 <UART_SetConfig+0x2e0>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	f040 80a8 	bne.w	800730e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	d834      	bhi.n	8007230 <UART_SetConfig+0x2fc>
 80071c6:	a201      	add	r2, pc, #4	@ (adr r2, 80071cc <UART_SetConfig+0x298>)
 80071c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071cc:	080071f1 	.word	0x080071f1
 80071d0:	08007231 	.word	0x08007231
 80071d4:	080071f9 	.word	0x080071f9
 80071d8:	08007231 	.word	0x08007231
 80071dc:	080071ff 	.word	0x080071ff
 80071e0:	08007231 	.word	0x08007231
 80071e4:	08007231 	.word	0x08007231
 80071e8:	08007231 	.word	0x08007231
 80071ec:	08007207 	.word	0x08007207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071f0:	f7fd f9be 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 80071f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071f6:	e021      	b.n	800723c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071f8:	4b0c      	ldr	r3, [pc, #48]	@ (800722c <UART_SetConfig+0x2f8>)
 80071fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071fc:	e01e      	b.n	800723c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071fe:	f7fd f94b 	bl	8004498 <HAL_RCC_GetSysClockFreq>
 8007202:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007204:	e01a      	b.n	800723c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800720a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800720c:	e016      	b.n	800723c <UART_SetConfig+0x308>
 800720e:	bf00      	nop
 8007210:	cfff69f3 	.word	0xcfff69f3
 8007214:	40008000 	.word	0x40008000
 8007218:	40013800 	.word	0x40013800
 800721c:	40021000 	.word	0x40021000
 8007220:	40004400 	.word	0x40004400
 8007224:	40004800 	.word	0x40004800
 8007228:	40004c00 	.word	0x40004c00
 800722c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800723a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800723c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 812a 	beq.w	8007498 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007248:	4a9e      	ldr	r2, [pc, #632]	@ (80074c4 <UART_SetConfig+0x590>)
 800724a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800724e:	461a      	mov	r2, r3
 8007250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007252:	fbb3 f3f2 	udiv	r3, r3, r2
 8007256:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	4613      	mov	r3, r2
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	4413      	add	r3, r2
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	429a      	cmp	r2, r3
 8007266:	d305      	bcc.n	8007274 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	429a      	cmp	r2, r3
 8007272:	d903      	bls.n	800727c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800727a:	e10d      	b.n	8007498 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800727c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727e:	2200      	movs	r2, #0
 8007280:	60bb      	str	r3, [r7, #8]
 8007282:	60fa      	str	r2, [r7, #12]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007288:	4a8e      	ldr	r2, [pc, #568]	@ (80074c4 <UART_SetConfig+0x590>)
 800728a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800728e:	b29b      	uxth	r3, r3
 8007290:	2200      	movs	r2, #0
 8007292:	603b      	str	r3, [r7, #0]
 8007294:	607a      	str	r2, [r7, #4]
 8007296:	e9d7 2300 	ldrd	r2, r3, [r7]
 800729a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800729e:	f7f9 f80f 	bl	80002c0 <__aeabi_uldivmod>
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	4610      	mov	r0, r2
 80072a8:	4619      	mov	r1, r3
 80072aa:	f04f 0200 	mov.w	r2, #0
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	020b      	lsls	r3, r1, #8
 80072b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072b8:	0202      	lsls	r2, r0, #8
 80072ba:	6979      	ldr	r1, [r7, #20]
 80072bc:	6849      	ldr	r1, [r1, #4]
 80072be:	0849      	lsrs	r1, r1, #1
 80072c0:	2000      	movs	r0, #0
 80072c2:	460c      	mov	r4, r1
 80072c4:	4605      	mov	r5, r0
 80072c6:	eb12 0804 	adds.w	r8, r2, r4
 80072ca:	eb43 0905 	adc.w	r9, r3, r5
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	469a      	mov	sl, r3
 80072d6:	4693      	mov	fp, r2
 80072d8:	4652      	mov	r2, sl
 80072da:	465b      	mov	r3, fp
 80072dc:	4640      	mov	r0, r8
 80072de:	4649      	mov	r1, r9
 80072e0:	f7f8 ffee 	bl	80002c0 <__aeabi_uldivmod>
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	4613      	mov	r3, r2
 80072ea:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072f2:	d308      	bcc.n	8007306 <UART_SetConfig+0x3d2>
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072fa:	d204      	bcs.n	8007306 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6a3a      	ldr	r2, [r7, #32]
 8007302:	60da      	str	r2, [r3, #12]
 8007304:	e0c8      	b.n	8007498 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800730c:	e0c4      	b.n	8007498 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007316:	d167      	bne.n	80073e8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007318:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800731c:	2b08      	cmp	r3, #8
 800731e:	d828      	bhi.n	8007372 <UART_SetConfig+0x43e>
 8007320:	a201      	add	r2, pc, #4	@ (adr r2, 8007328 <UART_SetConfig+0x3f4>)
 8007322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007326:	bf00      	nop
 8007328:	0800734d 	.word	0x0800734d
 800732c:	08007355 	.word	0x08007355
 8007330:	0800735d 	.word	0x0800735d
 8007334:	08007373 	.word	0x08007373
 8007338:	08007363 	.word	0x08007363
 800733c:	08007373 	.word	0x08007373
 8007340:	08007373 	.word	0x08007373
 8007344:	08007373 	.word	0x08007373
 8007348:	0800736b 	.word	0x0800736b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800734c:	f7fd f910 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8007350:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007352:	e014      	b.n	800737e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007354:	f7fd f922 	bl	800459c <HAL_RCC_GetPCLK2Freq>
 8007358:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800735a:	e010      	b.n	800737e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800735c:	4b5a      	ldr	r3, [pc, #360]	@ (80074c8 <UART_SetConfig+0x594>)
 800735e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007360:	e00d      	b.n	800737e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007362:	f7fd f899 	bl	8004498 <HAL_RCC_GetSysClockFreq>
 8007366:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007368:	e009      	b.n	800737e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800736a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800736e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007370:	e005      	b.n	800737e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800737c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 8089 	beq.w	8007498 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800738a:	4a4e      	ldr	r2, [pc, #312]	@ (80074c4 <UART_SetConfig+0x590>)
 800738c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007390:	461a      	mov	r2, r3
 8007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007394:	fbb3 f3f2 	udiv	r3, r3, r2
 8007398:	005a      	lsls	r2, r3, #1
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	085b      	lsrs	r3, r3, #1
 80073a0:	441a      	add	r2, r3
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	2b0f      	cmp	r3, #15
 80073b0:	d916      	bls.n	80073e0 <UART_SetConfig+0x4ac>
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073b8:	d212      	bcs.n	80073e0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	b29b      	uxth	r3, r3
 80073be:	f023 030f 	bic.w	r3, r3, #15
 80073c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	085b      	lsrs	r3, r3, #1
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	8bfb      	ldrh	r3, [r7, #30]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	8bfa      	ldrh	r2, [r7, #30]
 80073dc:	60da      	str	r2, [r3, #12]
 80073de:	e05b      	b.n	8007498 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073e6:	e057      	b.n	8007498 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073ec:	2b08      	cmp	r3, #8
 80073ee:	d828      	bhi.n	8007442 <UART_SetConfig+0x50e>
 80073f0:	a201      	add	r2, pc, #4	@ (adr r2, 80073f8 <UART_SetConfig+0x4c4>)
 80073f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f6:	bf00      	nop
 80073f8:	0800741d 	.word	0x0800741d
 80073fc:	08007425 	.word	0x08007425
 8007400:	0800742d 	.word	0x0800742d
 8007404:	08007443 	.word	0x08007443
 8007408:	08007433 	.word	0x08007433
 800740c:	08007443 	.word	0x08007443
 8007410:	08007443 	.word	0x08007443
 8007414:	08007443 	.word	0x08007443
 8007418:	0800743b 	.word	0x0800743b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800741c:	f7fd f8a8 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8007420:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007422:	e014      	b.n	800744e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007424:	f7fd f8ba 	bl	800459c <HAL_RCC_GetPCLK2Freq>
 8007428:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800742a:	e010      	b.n	800744e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800742c:	4b26      	ldr	r3, [pc, #152]	@ (80074c8 <UART_SetConfig+0x594>)
 800742e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007430:	e00d      	b.n	800744e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007432:	f7fd f831 	bl	8004498 <HAL_RCC_GetSysClockFreq>
 8007436:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007438:	e009      	b.n	800744e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800743a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800743e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007440:	e005      	b.n	800744e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800744c:	bf00      	nop
    }

    if (pclk != 0U)
 800744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007450:	2b00      	cmp	r3, #0
 8007452:	d021      	beq.n	8007498 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007458:	4a1a      	ldr	r2, [pc, #104]	@ (80074c4 <UART_SetConfig+0x590>)
 800745a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800745e:	461a      	mov	r2, r3
 8007460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007462:	fbb3 f2f2 	udiv	r2, r3, r2
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	085b      	lsrs	r3, r3, #1
 800746c:	441a      	add	r2, r3
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	fbb2 f3f3 	udiv	r3, r2, r3
 8007476:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	2b0f      	cmp	r3, #15
 800747c:	d909      	bls.n	8007492 <UART_SetConfig+0x55e>
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007484:	d205      	bcs.n	8007492 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	b29a      	uxth	r2, r3
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60da      	str	r2, [r3, #12]
 8007490:	e002      	b.n	8007498 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	2201      	movs	r2, #1
 800749c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2200      	movs	r2, #0
 80074ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2200      	movs	r2, #0
 80074b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80074b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3730      	adds	r7, #48	@ 0x30
 80074bc:	46bd      	mov	sp, r7
 80074be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074c2:	bf00      	nop
 80074c4:	08009f88 	.word	0x08009f88
 80074c8:	00f42400 	.word	0x00f42400

080074cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d8:	f003 0308 	and.w	r3, r3, #8
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00a      	beq.n	8007518 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753e:	f003 0304 	and.w	r3, r3, #4
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007560:	f003 0310 	and.w	r3, r3, #16
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007582:	f003 0320 	and.w	r3, r3, #32
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	430a      	orrs	r2, r1
 800759e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d01a      	beq.n	80075e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075ca:	d10a      	bne.n	80075e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	605a      	str	r2, [r3, #4]
  }
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b098      	sub	sp, #96	@ 0x60
 8007614:	af02      	add	r7, sp, #8
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007620:	f7fa fc2e 	bl	8001e80 <HAL_GetTick>
 8007624:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0308 	and.w	r3, r3, #8
 8007630:	2b08      	cmp	r3, #8
 8007632:	d12f      	bne.n	8007694 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007634:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800763c:	2200      	movs	r2, #0
 800763e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f88e 	bl	8007764 <UART_WaitOnFlagUntilTimeout>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d022      	beq.n	8007694 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007656:	e853 3f00 	ldrex	r3, [r3]
 800765a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800765c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800765e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007662:	653b      	str	r3, [r7, #80]	@ 0x50
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	461a      	mov	r2, r3
 800766a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800766c:	647b      	str	r3, [r7, #68]	@ 0x44
 800766e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007670:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007672:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007674:	e841 2300 	strex	r3, r2, [r1]
 8007678:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800767a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1e6      	bne.n	800764e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2220      	movs	r2, #32
 8007684:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e063      	b.n	800775c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0304 	and.w	r3, r3, #4
 800769e:	2b04      	cmp	r3, #4
 80076a0:	d149      	bne.n	8007736 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076aa:	2200      	movs	r2, #0
 80076ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f857 	bl	8007764 <UART_WaitOnFlagUntilTimeout>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d03c      	beq.n	8007736 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	623b      	str	r3, [r7, #32]
   return(result);
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076da:	633b      	str	r3, [r7, #48]	@ 0x30
 80076dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e6      	bne.n	80076bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3308      	adds	r3, #8
 80076f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f023 0301 	bic.w	r3, r3, #1
 8007704:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3308      	adds	r3, #8
 800770c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800770e:	61fa      	str	r2, [r7, #28]
 8007710:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	69b9      	ldr	r1, [r7, #24]
 8007714:	69fa      	ldr	r2, [r7, #28]
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	617b      	str	r3, [r7, #20]
   return(result);
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e5      	bne.n	80076ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2220      	movs	r2, #32
 8007726:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e012      	b.n	800775c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2220      	movs	r2, #32
 800773a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2220      	movs	r2, #32
 8007742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3758      	adds	r7, #88	@ 0x58
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	603b      	str	r3, [r7, #0]
 8007770:	4613      	mov	r3, r2
 8007772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007774:	e04f      	b.n	8007816 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800777c:	d04b      	beq.n	8007816 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800777e:	f7fa fb7f 	bl	8001e80 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	69ba      	ldr	r2, [r7, #24]
 800778a:	429a      	cmp	r2, r3
 800778c:	d302      	bcc.n	8007794 <UART_WaitOnFlagUntilTimeout+0x30>
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e04e      	b.n	8007836 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0304 	and.w	r3, r3, #4
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d037      	beq.n	8007816 <UART_WaitOnFlagUntilTimeout+0xb2>
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b80      	cmp	r3, #128	@ 0x80
 80077aa:	d034      	beq.n	8007816 <UART_WaitOnFlagUntilTimeout+0xb2>
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2b40      	cmp	r3, #64	@ 0x40
 80077b0:	d031      	beq.n	8007816 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	69db      	ldr	r3, [r3, #28]
 80077b8:	f003 0308 	and.w	r3, r3, #8
 80077bc:	2b08      	cmp	r3, #8
 80077be:	d110      	bne.n	80077e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2208      	movs	r2, #8
 80077c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 f838 	bl	800783e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2208      	movs	r2, #8
 80077d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e029      	b.n	8007836 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077f0:	d111      	bne.n	8007816 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 f81e 	bl	800783e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2220      	movs	r2, #32
 8007806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e00f      	b.n	8007836 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	69da      	ldr	r2, [r3, #28]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	4013      	ands	r3, r2
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	429a      	cmp	r2, r3
 8007824:	bf0c      	ite	eq
 8007826:	2301      	moveq	r3, #1
 8007828:	2300      	movne	r3, #0
 800782a:	b2db      	uxtb	r3, r3
 800782c:	461a      	mov	r2, r3
 800782e:	79fb      	ldrb	r3, [r7, #7]
 8007830:	429a      	cmp	r2, r3
 8007832:	d0a0      	beq.n	8007776 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800783e:	b480      	push	{r7}
 8007840:	b095      	sub	sp, #84	@ 0x54
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800784e:	e853 3f00 	ldrex	r3, [r3]
 8007852:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007856:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800785a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	461a      	mov	r2, r3
 8007862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007864:	643b      	str	r3, [r7, #64]	@ 0x40
 8007866:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007868:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800786a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800786c:	e841 2300 	strex	r3, r2, [r1]
 8007870:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e6      	bne.n	8007846 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3308      	adds	r3, #8
 800787e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	e853 3f00 	ldrex	r3, [r3]
 8007886:	61fb      	str	r3, [r7, #28]
   return(result);
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800788e:	f023 0301 	bic.w	r3, r3, #1
 8007892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3308      	adds	r3, #8
 800789a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800789c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800789e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e3      	bne.n	8007878 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d118      	bne.n	80078ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	e853 3f00 	ldrex	r3, [r3]
 80078c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	f023 0310 	bic.w	r3, r3, #16
 80078cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078d6:	61bb      	str	r3, [r7, #24]
 80078d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078da:	6979      	ldr	r1, [r7, #20]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	613b      	str	r3, [r7, #16]
   return(result);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1e6      	bne.n	80078b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80078fe:	bf00      	nop
 8007900:	3754      	adds	r7, #84	@ 0x54
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800790a:	b480      	push	{r7}
 800790c:	b085      	sub	sp, #20
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007918:	2b01      	cmp	r3, #1
 800791a:	d101      	bne.n	8007920 <HAL_UARTEx_DisableFifoMode+0x16>
 800791c:	2302      	movs	r3, #2
 800791e:	e027      	b.n	8007970 <HAL_UARTEx_DisableFifoMode+0x66>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2224      	movs	r2, #36	@ 0x24
 800792c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 0201 	bic.w	r2, r2, #1
 8007946:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800794e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007990:	2302      	movs	r3, #2
 8007992:	e02d      	b.n	80079f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2224      	movs	r2, #36	@ 0x24
 80079a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0201 	bic.w	r2, r2, #1
 80079ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f84f 	bl	8007a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d101      	bne.n	8007a10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	e02d      	b.n	8007a6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2224      	movs	r2, #36	@ 0x24
 8007a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 0201 	bic.w	r2, r2, #1
 8007a36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f811 	bl	8007a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d108      	bne.n	8007a96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a94:	e031      	b.n	8007afa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a96:	2308      	movs	r3, #8
 8007a98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a9a:	2308      	movs	r3, #8
 8007a9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	0e5b      	lsrs	r3, r3, #25
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	f003 0307 	and.w	r3, r3, #7
 8007aac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	0f5b      	lsrs	r3, r3, #29
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	7b3a      	ldrb	r2, [r7, #12]
 8007ac2:	4911      	ldr	r1, [pc, #68]	@ (8007b08 <UARTEx_SetNbDataToProcess+0x94>)
 8007ac4:	5c8a      	ldrb	r2, [r1, r2]
 8007ac6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007aca:	7b3a      	ldrb	r2, [r7, #12]
 8007acc:	490f      	ldr	r1, [pc, #60]	@ (8007b0c <UARTEx_SetNbDataToProcess+0x98>)
 8007ace:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ad0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
 8007ade:	7b7a      	ldrb	r2, [r7, #13]
 8007ae0:	4909      	ldr	r1, [pc, #36]	@ (8007b08 <UARTEx_SetNbDataToProcess+0x94>)
 8007ae2:	5c8a      	ldrb	r2, [r1, r2]
 8007ae4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ae8:	7b7a      	ldrb	r2, [r7, #13]
 8007aea:	4908      	ldr	r1, [pc, #32]	@ (8007b0c <UARTEx_SetNbDataToProcess+0x98>)
 8007aec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aee:	fb93 f3f2 	sdiv	r3, r3, r2
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007afa:	bf00      	nop
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	08009fa0 	.word	0x08009fa0
 8007b0c:	08009fa8 	.word	0x08009fa8

08007b10 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	4603      	mov	r3, r0
 8007b18:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b22:	2b84      	cmp	r3, #132	@ 0x84
 8007b24:	d005      	beq.n	8007b32 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007b26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	3303      	adds	r3, #3
 8007b30:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007b32:	68fb      	ldr	r3, [r7, #12]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007b44:	f000 fa5c 	bl	8008000 <vTaskStartScheduler>
  
  return osOK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b50:	b087      	sub	sp, #28
 8007b52:	af02      	add	r7, sp, #8
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685c      	ldr	r4, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b64:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7ff ffcf 	bl	8007b10 <makeFreeRtosPriority>
 8007b72:	4602      	mov	r2, r0
 8007b74:	f107 030c 	add.w	r3, r7, #12
 8007b78:	9301      	str	r3, [sp, #4]
 8007b7a:	9200      	str	r2, [sp, #0]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	4632      	mov	r2, r6
 8007b80:	4629      	mov	r1, r5
 8007b82:	4620      	mov	r0, r4
 8007b84:	f000 f8d2 	bl	8007d2c <xTaskCreate>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d001      	beq.n	8007b92 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e000      	b.n	8007b94 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007b92:	68fb      	ldr	r3, [r7, #12]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b9c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <osDelay+0x16>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	e000      	b.n	8007bb4 <osDelay+0x18>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 f9ed 	bl	8007f94 <vTaskDelay>
  
  return osOK;
 8007bba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f103 0208 	add.w	r2, r3, #8
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007bdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f103 0208 	add.w	r2, r3, #8
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f103 0208 	add.w	r2, r3, #8
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c12:	bf00      	nop
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	689a      	ldr	r2, [r3, #8]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	1c5a      	adds	r2, r3, #1
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	601a      	str	r2, [r3, #0]
}
 8007c5a:	bf00      	nop
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c66:	b480      	push	{r7}
 8007c68:	b085      	sub	sp, #20
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c7c:	d103      	bne.n	8007c86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	e00c      	b.n	8007ca0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	3308      	adds	r3, #8
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	e002      	b.n	8007c94 <vListInsert+0x2e>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d2f6      	bcs.n	8007c8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	601a      	str	r2, [r3, #0]
}
 8007ccc:	bf00      	nop
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	6892      	ldr	r2, [r2, #8]
 8007cee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	6852      	ldr	r2, [r2, #4]
 8007cf8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d103      	bne.n	8007d0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689a      	ldr	r2, [r3, #8]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	1e5a      	subs	r2, r3, #1
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08c      	sub	sp, #48	@ 0x30
 8007d30:	af04      	add	r7, sp, #16
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d3c:	88fb      	ldrh	r3, [r7, #6]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 feb1 	bl	8008aa8 <pvPortMalloc>
 8007d46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00e      	beq.n	8007d6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d4e:	2054      	movs	r0, #84	@ 0x54
 8007d50:	f000 feaa 	bl	8008aa8 <pvPortMalloc>
 8007d54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d003      	beq.n	8007d64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d62:	e005      	b.n	8007d70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d64:	6978      	ldr	r0, [r7, #20]
 8007d66:	f000 ff6d 	bl	8008c44 <vPortFree>
 8007d6a:	e001      	b.n	8007d70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d013      	beq.n	8007d9e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d76:	88fa      	ldrh	r2, [r7, #6]
 8007d78:	2300      	movs	r3, #0
 8007d7a:	9303      	str	r3, [sp, #12]
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	9302      	str	r3, [sp, #8]
 8007d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	68b9      	ldr	r1, [r7, #8]
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 f80e 	bl	8007dae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d92:	69f8      	ldr	r0, [r7, #28]
 8007d94:	f000 f894 	bl	8007ec0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	61bb      	str	r3, [r7, #24]
 8007d9c:	e002      	b.n	8007da4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007da2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007da4:	69bb      	ldr	r3, [r7, #24]
	}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3720      	adds	r7, #32
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b088      	sub	sp, #32
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	607a      	str	r2, [r7, #4]
 8007dba:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4413      	add	r3, r2
 8007dcc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	f023 0307 	bic.w	r3, r3, #7
 8007dd4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	f003 0307 	and.w	r3, r3, #7
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00b      	beq.n	8007df8 <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007df2:	bf00      	nop
 8007df4:	bf00      	nop
 8007df6:	e7fd      	b.n	8007df4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d01f      	beq.n	8007e3e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007dfe:	2300      	movs	r3, #0
 8007e00:	61fb      	str	r3, [r7, #28]
 8007e02:	e012      	b.n	8007e2a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	4413      	add	r3, r2
 8007e0a:	7819      	ldrb	r1, [r3, #0]
 8007e0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	4413      	add	r3, r2
 8007e12:	3334      	adds	r3, #52	@ 0x34
 8007e14:	460a      	mov	r2, r1
 8007e16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d006      	beq.n	8007e32 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	3301      	adds	r3, #1
 8007e28:	61fb      	str	r3, [r7, #28]
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	2b0f      	cmp	r3, #15
 8007e2e:	d9e9      	bls.n	8007e04 <prvInitialiseNewTask+0x56>
 8007e30:	e000      	b.n	8007e34 <prvInitialiseNewTask+0x86>
			{
				break;
 8007e32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e3c:	e003      	b.n	8007e46 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e48:	2b06      	cmp	r3, #6
 8007e4a:	d901      	bls.n	8007e50 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e4c:	2306      	movs	r3, #6
 8007e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e54:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e5a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5e:	2200      	movs	r2, #0
 8007e60:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e64:	3304      	adds	r3, #4
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7ff fecc 	bl	8007c04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6e:	3318      	adds	r3, #24
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff fec7 	bl	8007c04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7e:	f1c3 0207 	rsb	r2, r3, #7
 8007e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e8a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8e:	2200      	movs	r2, #0
 8007e90:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	68f9      	ldr	r1, [r7, #12]
 8007e9e:	69b8      	ldr	r0, [r7, #24]
 8007ea0:	f000 fbf2 	bl	8008688 <pxPortInitialiseStack>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007eb6:	bf00      	nop
 8007eb8:	3720      	adds	r7, #32
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ec8:	f000 fd0e 	bl	80088e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8007f78 <prvAddNewTaskToReadyList+0xb8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	4a29      	ldr	r2, [pc, #164]	@ (8007f78 <prvAddNewTaskToReadyList+0xb8>)
 8007ed4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ed6:	4b29      	ldr	r3, [pc, #164]	@ (8007f7c <prvAddNewTaskToReadyList+0xbc>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d109      	bne.n	8007ef2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ede:	4a27      	ldr	r2, [pc, #156]	@ (8007f7c <prvAddNewTaskToReadyList+0xbc>)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ee4:	4b24      	ldr	r3, [pc, #144]	@ (8007f78 <prvAddNewTaskToReadyList+0xb8>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d110      	bne.n	8007f0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007eec:	f000 faaa 	bl	8008444 <prvInitialiseTaskLists>
 8007ef0:	e00d      	b.n	8007f0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ef2:	4b23      	ldr	r3, [pc, #140]	@ (8007f80 <prvAddNewTaskToReadyList+0xc0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d109      	bne.n	8007f0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007efa:	4b20      	ldr	r3, [pc, #128]	@ (8007f7c <prvAddNewTaskToReadyList+0xbc>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d802      	bhi.n	8007f0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f08:	4a1c      	ldr	r2, [pc, #112]	@ (8007f7c <prvAddNewTaskToReadyList+0xbc>)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8007f84 <prvAddNewTaskToReadyList+0xc4>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3301      	adds	r3, #1
 8007f14:	4a1b      	ldr	r2, [pc, #108]	@ (8007f84 <prvAddNewTaskToReadyList+0xc4>)
 8007f16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	409a      	lsls	r2, r3
 8007f20:	4b19      	ldr	r3, [pc, #100]	@ (8007f88 <prvAddNewTaskToReadyList+0xc8>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	4a18      	ldr	r2, [pc, #96]	@ (8007f88 <prvAddNewTaskToReadyList+0xc8>)
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f2e:	4613      	mov	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4a15      	ldr	r2, [pc, #84]	@ (8007f8c <prvAddNewTaskToReadyList+0xcc>)
 8007f38:	441a      	add	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4610      	mov	r0, r2
 8007f42:	f7ff fe6c 	bl	8007c1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f46:	f000 fd01 	bl	800894c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f80 <prvAddNewTaskToReadyList+0xc0>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00e      	beq.n	8007f70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f52:	4b0a      	ldr	r3, [pc, #40]	@ (8007f7c <prvAddNewTaskToReadyList+0xbc>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d207      	bcs.n	8007f70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f60:	4b0b      	ldr	r3, [pc, #44]	@ (8007f90 <prvAddNewTaskToReadyList+0xd0>)
 8007f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	200006d8 	.word	0x200006d8
 8007f7c:	200005d8 	.word	0x200005d8
 8007f80:	200006e4 	.word	0x200006e4
 8007f84:	200006f4 	.word	0x200006f4
 8007f88:	200006e0 	.word	0x200006e0
 8007f8c:	200005dc 	.word	0x200005dc
 8007f90:	e000ed04 	.word	0xe000ed04

08007f94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d018      	beq.n	8007fd8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007fa6:	4b14      	ldr	r3, [pc, #80]	@ (8007ff8 <vTaskDelay+0x64>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00b      	beq.n	8007fc6 <vTaskDelay+0x32>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	60bb      	str	r3, [r7, #8]
}
 8007fc0:	bf00      	nop
 8007fc2:	bf00      	nop
 8007fc4:	e7fd      	b.n	8007fc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007fc6:	f000 f863 	bl	8008090 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007fca:	2100      	movs	r1, #0
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 faf5 	bl	80085bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007fd2:	f000 f86b 	bl	80080ac <xTaskResumeAll>
 8007fd6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d107      	bne.n	8007fee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007fde:	4b07      	ldr	r3, [pc, #28]	@ (8007ffc <vTaskDelay+0x68>)
 8007fe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fee:	bf00      	nop
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20000700 	.word	0x20000700
 8007ffc:	e000ed04 	.word	0xe000ed04

08008000 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008006:	4b1c      	ldr	r3, [pc, #112]	@ (8008078 <vTaskStartScheduler+0x78>)
 8008008:	9301      	str	r3, [sp, #4]
 800800a:	2300      	movs	r3, #0
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	2300      	movs	r3, #0
 8008010:	2280      	movs	r2, #128	@ 0x80
 8008012:	491a      	ldr	r1, [pc, #104]	@ (800807c <vTaskStartScheduler+0x7c>)
 8008014:	481a      	ldr	r0, [pc, #104]	@ (8008080 <vTaskStartScheduler+0x80>)
 8008016:	f7ff fe89 	bl	8007d2c <xTaskCreate>
 800801a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d116      	bne.n	8008050 <vTaskStartScheduler+0x50>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	60bb      	str	r3, [r7, #8]
}
 8008034:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008036:	4b13      	ldr	r3, [pc, #76]	@ (8008084 <vTaskStartScheduler+0x84>)
 8008038:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800803c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800803e:	4b12      	ldr	r3, [pc, #72]	@ (8008088 <vTaskStartScheduler+0x88>)
 8008040:	2201      	movs	r2, #1
 8008042:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008044:	4b11      	ldr	r3, [pc, #68]	@ (800808c <vTaskStartScheduler+0x8c>)
 8008046:	2200      	movs	r2, #0
 8008048:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800804a:	f000 fba9 	bl	80087a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800804e:	e00f      	b.n	8008070 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008056:	d10b      	bne.n	8008070 <vTaskStartScheduler+0x70>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	607b      	str	r3, [r7, #4]
}
 800806a:	bf00      	nop
 800806c:	bf00      	nop
 800806e:	e7fd      	b.n	800806c <vTaskStartScheduler+0x6c>
}
 8008070:	bf00      	nop
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	200006fc 	.word	0x200006fc
 800807c:	08009f68 	.word	0x08009f68
 8008080:	08008415 	.word	0x08008415
 8008084:	200006f8 	.word	0x200006f8
 8008088:	200006e4 	.word	0x200006e4
 800808c:	200006dc 	.word	0x200006dc

08008090 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008090:	b480      	push	{r7}
 8008092:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008094:	4b04      	ldr	r3, [pc, #16]	@ (80080a8 <vTaskSuspendAll+0x18>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3301      	adds	r3, #1
 800809a:	4a03      	ldr	r2, [pc, #12]	@ (80080a8 <vTaskSuspendAll+0x18>)
 800809c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800809e:	bf00      	nop
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	20000700 	.word	0x20000700

080080ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080b6:	2300      	movs	r3, #0
 80080b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080ba:	4b42      	ldr	r3, [pc, #264]	@ (80081c4 <xTaskResumeAll+0x118>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10b      	bne.n	80080da <xTaskResumeAll+0x2e>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	603b      	str	r3, [r7, #0]
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop
 80080d8:	e7fd      	b.n	80080d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080da:	f000 fc05 	bl	80088e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080de:	4b39      	ldr	r3, [pc, #228]	@ (80081c4 <xTaskResumeAll+0x118>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	4a37      	ldr	r2, [pc, #220]	@ (80081c4 <xTaskResumeAll+0x118>)
 80080e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080e8:	4b36      	ldr	r3, [pc, #216]	@ (80081c4 <xTaskResumeAll+0x118>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d161      	bne.n	80081b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080f0:	4b35      	ldr	r3, [pc, #212]	@ (80081c8 <xTaskResumeAll+0x11c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d05d      	beq.n	80081b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080f8:	e02e      	b.n	8008158 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080fa:	4b34      	ldr	r3, [pc, #208]	@ (80081cc <xTaskResumeAll+0x120>)
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3318      	adds	r3, #24
 8008106:	4618      	mov	r0, r3
 8008108:	f7ff fde6 	bl	8007cd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	3304      	adds	r3, #4
 8008110:	4618      	mov	r0, r3
 8008112:	f7ff fde1 	bl	8007cd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811a:	2201      	movs	r2, #1
 800811c:	409a      	lsls	r2, r3
 800811e:	4b2c      	ldr	r3, [pc, #176]	@ (80081d0 <xTaskResumeAll+0x124>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4313      	orrs	r3, r2
 8008124:	4a2a      	ldr	r2, [pc, #168]	@ (80081d0 <xTaskResumeAll+0x124>)
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800812c:	4613      	mov	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4a27      	ldr	r2, [pc, #156]	@ (80081d4 <xTaskResumeAll+0x128>)
 8008136:	441a      	add	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	3304      	adds	r3, #4
 800813c:	4619      	mov	r1, r3
 800813e:	4610      	mov	r0, r2
 8008140:	f7ff fd6d 	bl	8007c1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008148:	4b23      	ldr	r3, [pc, #140]	@ (80081d8 <xTaskResumeAll+0x12c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814e:	429a      	cmp	r2, r3
 8008150:	d302      	bcc.n	8008158 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008152:	4b22      	ldr	r3, [pc, #136]	@ (80081dc <xTaskResumeAll+0x130>)
 8008154:	2201      	movs	r2, #1
 8008156:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008158:	4b1c      	ldr	r3, [pc, #112]	@ (80081cc <xTaskResumeAll+0x120>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1cc      	bne.n	80080fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008166:	f000 f9eb 	bl	8008540 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800816a:	4b1d      	ldr	r3, [pc, #116]	@ (80081e0 <xTaskResumeAll+0x134>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d010      	beq.n	8008198 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008176:	f000 f837 	bl	80081e8 <xTaskIncrementTick>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008180:	4b16      	ldr	r3, [pc, #88]	@ (80081dc <xTaskResumeAll+0x130>)
 8008182:	2201      	movs	r2, #1
 8008184:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	3b01      	subs	r3, #1
 800818a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1f1      	bne.n	8008176 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008192:	4b13      	ldr	r3, [pc, #76]	@ (80081e0 <xTaskResumeAll+0x134>)
 8008194:	2200      	movs	r2, #0
 8008196:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008198:	4b10      	ldr	r3, [pc, #64]	@ (80081dc <xTaskResumeAll+0x130>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d009      	beq.n	80081b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081a0:	2301      	movs	r3, #1
 80081a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081a4:	4b0f      	ldr	r3, [pc, #60]	@ (80081e4 <xTaskResumeAll+0x138>)
 80081a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081aa:	601a      	str	r2, [r3, #0]
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081b4:	f000 fbca 	bl	800894c <vPortExitCritical>

	return xAlreadyYielded;
 80081b8:	68bb      	ldr	r3, [r7, #8]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20000700 	.word	0x20000700
 80081c8:	200006d8 	.word	0x200006d8
 80081cc:	20000698 	.word	0x20000698
 80081d0:	200006e0 	.word	0x200006e0
 80081d4:	200005dc 	.word	0x200005dc
 80081d8:	200005d8 	.word	0x200005d8
 80081dc:	200006ec 	.word	0x200006ec
 80081e0:	200006e8 	.word	0x200006e8
 80081e4:	e000ed04 	.word	0xe000ed04

080081e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081ee:	2300      	movs	r3, #0
 80081f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081f2:	4b4f      	ldr	r3, [pc, #316]	@ (8008330 <xTaskIncrementTick+0x148>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f040 808f 	bne.w	800831a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081fc:	4b4d      	ldr	r3, [pc, #308]	@ (8008334 <xTaskIncrementTick+0x14c>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3301      	adds	r3, #1
 8008202:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008204:	4a4b      	ldr	r2, [pc, #300]	@ (8008334 <xTaskIncrementTick+0x14c>)
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d121      	bne.n	8008254 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008210:	4b49      	ldr	r3, [pc, #292]	@ (8008338 <xTaskIncrementTick+0x150>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00b      	beq.n	8008232 <xTaskIncrementTick+0x4a>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	603b      	str	r3, [r7, #0]
}
 800822c:	bf00      	nop
 800822e:	bf00      	nop
 8008230:	e7fd      	b.n	800822e <xTaskIncrementTick+0x46>
 8008232:	4b41      	ldr	r3, [pc, #260]	@ (8008338 <xTaskIncrementTick+0x150>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	4b40      	ldr	r3, [pc, #256]	@ (800833c <xTaskIncrementTick+0x154>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a3e      	ldr	r2, [pc, #248]	@ (8008338 <xTaskIncrementTick+0x150>)
 800823e:	6013      	str	r3, [r2, #0]
 8008240:	4a3e      	ldr	r2, [pc, #248]	@ (800833c <xTaskIncrementTick+0x154>)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	4b3e      	ldr	r3, [pc, #248]	@ (8008340 <xTaskIncrementTick+0x158>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3301      	adds	r3, #1
 800824c:	4a3c      	ldr	r2, [pc, #240]	@ (8008340 <xTaskIncrementTick+0x158>)
 800824e:	6013      	str	r3, [r2, #0]
 8008250:	f000 f976 	bl	8008540 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008254:	4b3b      	ldr	r3, [pc, #236]	@ (8008344 <xTaskIncrementTick+0x15c>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	429a      	cmp	r2, r3
 800825c:	d348      	bcc.n	80082f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800825e:	4b36      	ldr	r3, [pc, #216]	@ (8008338 <xTaskIncrementTick+0x150>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d104      	bne.n	8008272 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008268:	4b36      	ldr	r3, [pc, #216]	@ (8008344 <xTaskIncrementTick+0x15c>)
 800826a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800826e:	601a      	str	r2, [r3, #0]
					break;
 8008270:	e03e      	b.n	80082f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008272:	4b31      	ldr	r3, [pc, #196]	@ (8008338 <xTaskIncrementTick+0x150>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	429a      	cmp	r2, r3
 8008288:	d203      	bcs.n	8008292 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800828a:	4a2e      	ldr	r2, [pc, #184]	@ (8008344 <xTaskIncrementTick+0x15c>)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008290:	e02e      	b.n	80082f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	3304      	adds	r3, #4
 8008296:	4618      	mov	r0, r3
 8008298:	f7ff fd1e 	bl	8007cd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d004      	beq.n	80082ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	3318      	adds	r3, #24
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7ff fd15 	bl	8007cd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b2:	2201      	movs	r2, #1
 80082b4:	409a      	lsls	r2, r3
 80082b6:	4b24      	ldr	r3, [pc, #144]	@ (8008348 <xTaskIncrementTick+0x160>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	4a22      	ldr	r2, [pc, #136]	@ (8008348 <xTaskIncrementTick+0x160>)
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082c4:	4613      	mov	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4a1f      	ldr	r2, [pc, #124]	@ (800834c <xTaskIncrementTick+0x164>)
 80082ce:	441a      	add	r2, r3
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4619      	mov	r1, r3
 80082d6:	4610      	mov	r0, r2
 80082d8:	f7ff fca1 	bl	8007c1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082e0:	4b1b      	ldr	r3, [pc, #108]	@ (8008350 <xTaskIncrementTick+0x168>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d3b9      	bcc.n	800825e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80082ea:	2301      	movs	r3, #1
 80082ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082ee:	e7b6      	b.n	800825e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082f0:	4b17      	ldr	r3, [pc, #92]	@ (8008350 <xTaskIncrementTick+0x168>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082f6:	4915      	ldr	r1, [pc, #84]	@ (800834c <xTaskIncrementTick+0x164>)
 80082f8:	4613      	mov	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	440b      	add	r3, r1
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d901      	bls.n	800830c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008308:	2301      	movs	r3, #1
 800830a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800830c:	4b11      	ldr	r3, [pc, #68]	@ (8008354 <xTaskIncrementTick+0x16c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d007      	beq.n	8008324 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008314:	2301      	movs	r3, #1
 8008316:	617b      	str	r3, [r7, #20]
 8008318:	e004      	b.n	8008324 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800831a:	4b0f      	ldr	r3, [pc, #60]	@ (8008358 <xTaskIncrementTick+0x170>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	3301      	adds	r3, #1
 8008320:	4a0d      	ldr	r2, [pc, #52]	@ (8008358 <xTaskIncrementTick+0x170>)
 8008322:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008324:	697b      	ldr	r3, [r7, #20]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	20000700 	.word	0x20000700
 8008334:	200006dc 	.word	0x200006dc
 8008338:	20000690 	.word	0x20000690
 800833c:	20000694 	.word	0x20000694
 8008340:	200006f0 	.word	0x200006f0
 8008344:	200006f8 	.word	0x200006f8
 8008348:	200006e0 	.word	0x200006e0
 800834c:	200005dc 	.word	0x200005dc
 8008350:	200005d8 	.word	0x200005d8
 8008354:	200006ec 	.word	0x200006ec
 8008358:	200006e8 	.word	0x200006e8

0800835c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800835c:	b480      	push	{r7}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008362:	4b27      	ldr	r3, [pc, #156]	@ (8008400 <vTaskSwitchContext+0xa4>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800836a:	4b26      	ldr	r3, [pc, #152]	@ (8008404 <vTaskSwitchContext+0xa8>)
 800836c:	2201      	movs	r2, #1
 800836e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008370:	e040      	b.n	80083f4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008372:	4b24      	ldr	r3, [pc, #144]	@ (8008404 <vTaskSwitchContext+0xa8>)
 8008374:	2200      	movs	r2, #0
 8008376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008378:	4b23      	ldr	r3, [pc, #140]	@ (8008408 <vTaskSwitchContext+0xac>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	fab3 f383 	clz	r3, r3
 8008384:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008386:	7afb      	ldrb	r3, [r7, #11]
 8008388:	f1c3 031f 	rsb	r3, r3, #31
 800838c:	617b      	str	r3, [r7, #20]
 800838e:	491f      	ldr	r1, [pc, #124]	@ (800840c <vTaskSwitchContext+0xb0>)
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	4613      	mov	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	440b      	add	r3, r1
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10b      	bne.n	80083ba <vTaskSwitchContext+0x5e>
	__asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	607b      	str	r3, [r7, #4]
}
 80083b4:	bf00      	nop
 80083b6:	bf00      	nop
 80083b8:	e7fd      	b.n	80083b6 <vTaskSwitchContext+0x5a>
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4a11      	ldr	r2, [pc, #68]	@ (800840c <vTaskSwitchContext+0xb0>)
 80083c6:	4413      	add	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	605a      	str	r2, [r3, #4]
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	3308      	adds	r3, #8
 80083dc:	429a      	cmp	r2, r3
 80083de:	d104      	bne.n	80083ea <vTaskSwitchContext+0x8e>
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	605a      	str	r2, [r3, #4]
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	4a07      	ldr	r2, [pc, #28]	@ (8008410 <vTaskSwitchContext+0xb4>)
 80083f2:	6013      	str	r3, [r2, #0]
}
 80083f4:	bf00      	nop
 80083f6:	371c      	adds	r7, #28
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr
 8008400:	20000700 	.word	0x20000700
 8008404:	200006ec 	.word	0x200006ec
 8008408:	200006e0 	.word	0x200006e0
 800840c:	200005dc 	.word	0x200005dc
 8008410:	200005d8 	.word	0x200005d8

08008414 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800841c:	f000 f852 	bl	80084c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008420:	4b06      	ldr	r3, [pc, #24]	@ (800843c <prvIdleTask+0x28>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d9f9      	bls.n	800841c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008428:	4b05      	ldr	r3, [pc, #20]	@ (8008440 <prvIdleTask+0x2c>)
 800842a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800842e:	601a      	str	r2, [r3, #0]
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008438:	e7f0      	b.n	800841c <prvIdleTask+0x8>
 800843a:	bf00      	nop
 800843c:	200005dc 	.word	0x200005dc
 8008440:	e000ed04 	.word	0xe000ed04

08008444 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800844a:	2300      	movs	r3, #0
 800844c:	607b      	str	r3, [r7, #4]
 800844e:	e00c      	b.n	800846a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	4613      	mov	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4a12      	ldr	r2, [pc, #72]	@ (80084a4 <prvInitialiseTaskLists+0x60>)
 800845c:	4413      	add	r3, r2
 800845e:	4618      	mov	r0, r3
 8008460:	f7ff fbb0 	bl	8007bc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3301      	adds	r3, #1
 8008468:	607b      	str	r3, [r7, #4]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b06      	cmp	r3, #6
 800846e:	d9ef      	bls.n	8008450 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008470:	480d      	ldr	r0, [pc, #52]	@ (80084a8 <prvInitialiseTaskLists+0x64>)
 8008472:	f7ff fba7 	bl	8007bc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008476:	480d      	ldr	r0, [pc, #52]	@ (80084ac <prvInitialiseTaskLists+0x68>)
 8008478:	f7ff fba4 	bl	8007bc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800847c:	480c      	ldr	r0, [pc, #48]	@ (80084b0 <prvInitialiseTaskLists+0x6c>)
 800847e:	f7ff fba1 	bl	8007bc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008482:	480c      	ldr	r0, [pc, #48]	@ (80084b4 <prvInitialiseTaskLists+0x70>)
 8008484:	f7ff fb9e 	bl	8007bc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008488:	480b      	ldr	r0, [pc, #44]	@ (80084b8 <prvInitialiseTaskLists+0x74>)
 800848a:	f7ff fb9b 	bl	8007bc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800848e:	4b0b      	ldr	r3, [pc, #44]	@ (80084bc <prvInitialiseTaskLists+0x78>)
 8008490:	4a05      	ldr	r2, [pc, #20]	@ (80084a8 <prvInitialiseTaskLists+0x64>)
 8008492:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008494:	4b0a      	ldr	r3, [pc, #40]	@ (80084c0 <prvInitialiseTaskLists+0x7c>)
 8008496:	4a05      	ldr	r2, [pc, #20]	@ (80084ac <prvInitialiseTaskLists+0x68>)
 8008498:	601a      	str	r2, [r3, #0]
}
 800849a:	bf00      	nop
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	200005dc 	.word	0x200005dc
 80084a8:	20000668 	.word	0x20000668
 80084ac:	2000067c 	.word	0x2000067c
 80084b0:	20000698 	.word	0x20000698
 80084b4:	200006ac 	.word	0x200006ac
 80084b8:	200006c4 	.word	0x200006c4
 80084bc:	20000690 	.word	0x20000690
 80084c0:	20000694 	.word	0x20000694

080084c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084ca:	e019      	b.n	8008500 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084cc:	f000 fa0c 	bl	80088e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084d0:	4b10      	ldr	r3, [pc, #64]	@ (8008514 <prvCheckTasksWaitingTermination+0x50>)
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	3304      	adds	r3, #4
 80084dc:	4618      	mov	r0, r3
 80084de:	f7ff fbfb 	bl	8007cd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008518 <prvCheckTasksWaitingTermination+0x54>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	4a0b      	ldr	r2, [pc, #44]	@ (8008518 <prvCheckTasksWaitingTermination+0x54>)
 80084ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80084ec:	4b0b      	ldr	r3, [pc, #44]	@ (800851c <prvCheckTasksWaitingTermination+0x58>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	4a0a      	ldr	r2, [pc, #40]	@ (800851c <prvCheckTasksWaitingTermination+0x58>)
 80084f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80084f6:	f000 fa29 	bl	800894c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f810 	bl	8008520 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008500:	4b06      	ldr	r3, [pc, #24]	@ (800851c <prvCheckTasksWaitingTermination+0x58>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e1      	bne.n	80084cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008508:	bf00      	nop
 800850a:	bf00      	nop
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	200006ac 	.word	0x200006ac
 8008518:	200006d8 	.word	0x200006d8
 800851c:	200006c0 	.word	0x200006c0

08008520 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800852c:	4618      	mov	r0, r3
 800852e:	f000 fb89 	bl	8008c44 <vPortFree>
			vPortFree( pxTCB );
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fb86 	bl	8008c44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008538:	bf00      	nop
 800853a:	3708      	adds	r7, #8
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008546:	4b0c      	ldr	r3, [pc, #48]	@ (8008578 <prvResetNextTaskUnblockTime+0x38>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d104      	bne.n	800855a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008550:	4b0a      	ldr	r3, [pc, #40]	@ (800857c <prvResetNextTaskUnblockTime+0x3c>)
 8008552:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008556:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008558:	e008      	b.n	800856c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800855a:	4b07      	ldr	r3, [pc, #28]	@ (8008578 <prvResetNextTaskUnblockTime+0x38>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	4a04      	ldr	r2, [pc, #16]	@ (800857c <prvResetNextTaskUnblockTime+0x3c>)
 800856a:	6013      	str	r3, [r2, #0]
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	20000690 	.word	0x20000690
 800857c:	200006f8 	.word	0x200006f8

08008580 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008586:	4b0b      	ldr	r3, [pc, #44]	@ (80085b4 <xTaskGetSchedulerState+0x34>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d102      	bne.n	8008594 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800858e:	2301      	movs	r3, #1
 8008590:	607b      	str	r3, [r7, #4]
 8008592:	e008      	b.n	80085a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008594:	4b08      	ldr	r3, [pc, #32]	@ (80085b8 <xTaskGetSchedulerState+0x38>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d102      	bne.n	80085a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800859c:	2302      	movs	r3, #2
 800859e:	607b      	str	r3, [r7, #4]
 80085a0:	e001      	b.n	80085a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085a2:	2300      	movs	r3, #0
 80085a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80085a6:	687b      	ldr	r3, [r7, #4]
	}
 80085a8:	4618      	mov	r0, r3
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	200006e4 	.word	0x200006e4
 80085b8:	20000700 	.word	0x20000700

080085bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085c6:	4b29      	ldr	r3, [pc, #164]	@ (800866c <prvAddCurrentTaskToDelayedList+0xb0>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085cc:	4b28      	ldr	r3, [pc, #160]	@ (8008670 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3304      	adds	r3, #4
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7ff fb80 	bl	8007cd8 <uxListRemove>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10b      	bne.n	80085f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80085de:	4b24      	ldr	r3, [pc, #144]	@ (8008670 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e4:	2201      	movs	r2, #1
 80085e6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ea:	43da      	mvns	r2, r3
 80085ec:	4b21      	ldr	r3, [pc, #132]	@ (8008674 <prvAddCurrentTaskToDelayedList+0xb8>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4013      	ands	r3, r2
 80085f2:	4a20      	ldr	r2, [pc, #128]	@ (8008674 <prvAddCurrentTaskToDelayedList+0xb8>)
 80085f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085fc:	d10a      	bne.n	8008614 <prvAddCurrentTaskToDelayedList+0x58>
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d007      	beq.n	8008614 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008604:	4b1a      	ldr	r3, [pc, #104]	@ (8008670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3304      	adds	r3, #4
 800860a:	4619      	mov	r1, r3
 800860c:	481a      	ldr	r0, [pc, #104]	@ (8008678 <prvAddCurrentTaskToDelayedList+0xbc>)
 800860e:	f7ff fb06 	bl	8007c1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008612:	e026      	b.n	8008662 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4413      	add	r3, r2
 800861a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800861c:	4b14      	ldr	r3, [pc, #80]	@ (8008670 <prvAddCurrentTaskToDelayedList+0xb4>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	429a      	cmp	r2, r3
 800862a:	d209      	bcs.n	8008640 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800862c:	4b13      	ldr	r3, [pc, #76]	@ (800867c <prvAddCurrentTaskToDelayedList+0xc0>)
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	4b0f      	ldr	r3, [pc, #60]	@ (8008670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3304      	adds	r3, #4
 8008636:	4619      	mov	r1, r3
 8008638:	4610      	mov	r0, r2
 800863a:	f7ff fb14 	bl	8007c66 <vListInsert>
}
 800863e:	e010      	b.n	8008662 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008640:	4b0f      	ldr	r3, [pc, #60]	@ (8008680 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	4b0a      	ldr	r3, [pc, #40]	@ (8008670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3304      	adds	r3, #4
 800864a:	4619      	mov	r1, r3
 800864c:	4610      	mov	r0, r2
 800864e:	f7ff fb0a 	bl	8007c66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008652:	4b0c      	ldr	r3, [pc, #48]	@ (8008684 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68ba      	ldr	r2, [r7, #8]
 8008658:	429a      	cmp	r2, r3
 800865a:	d202      	bcs.n	8008662 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800865c:	4a09      	ldr	r2, [pc, #36]	@ (8008684 <prvAddCurrentTaskToDelayedList+0xc8>)
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	6013      	str	r3, [r2, #0]
}
 8008662:	bf00      	nop
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	200006dc 	.word	0x200006dc
 8008670:	200005d8 	.word	0x200005d8
 8008674:	200006e0 	.word	0x200006e0
 8008678:	200006c4 	.word	0x200006c4
 800867c:	20000694 	.word	0x20000694
 8008680:	20000690 	.word	0x20000690
 8008684:	200006f8 	.word	0x200006f8

08008688 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3b04      	subs	r3, #4
 8008698:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80086a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3b04      	subs	r3, #4
 80086a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f023 0201 	bic.w	r2, r3, #1
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3b04      	subs	r3, #4
 80086b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086b8:	4a0c      	ldr	r2, [pc, #48]	@ (80086ec <pxPortInitialiseStack+0x64>)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3b14      	subs	r3, #20
 80086c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3b04      	subs	r3, #4
 80086ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f06f 0202 	mvn.w	r2, #2
 80086d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	3b20      	subs	r3, #32
 80086dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086de:	68fb      	ldr	r3, [r7, #12]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	080086f1 	.word	0x080086f1

080086f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086fa:	4b13      	ldr	r3, [pc, #76]	@ (8008748 <prvTaskExitError+0x58>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008702:	d00b      	beq.n	800871c <prvTaskExitError+0x2c>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	60fb      	str	r3, [r7, #12]
}
 8008716:	bf00      	nop
 8008718:	bf00      	nop
 800871a:	e7fd      	b.n	8008718 <prvTaskExitError+0x28>
	__asm volatile
 800871c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	60bb      	str	r3, [r7, #8]
}
 800872e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008730:	bf00      	nop
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0fc      	beq.n	8008732 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008738:	bf00      	nop
 800873a:	bf00      	nop
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	2000000c 	.word	0x2000000c
 800874c:	00000000 	.word	0x00000000

08008750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008750:	4b07      	ldr	r3, [pc, #28]	@ (8008770 <pxCurrentTCBConst2>)
 8008752:	6819      	ldr	r1, [r3, #0]
 8008754:	6808      	ldr	r0, [r1, #0]
 8008756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875a:	f380 8809 	msr	PSP, r0
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f04f 0000 	mov.w	r0, #0
 8008766:	f380 8811 	msr	BASEPRI, r0
 800876a:	4770      	bx	lr
 800876c:	f3af 8000 	nop.w

08008770 <pxCurrentTCBConst2>:
 8008770:	200005d8 	.word	0x200005d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008774:	bf00      	nop
 8008776:	bf00      	nop

08008778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008778:	4808      	ldr	r0, [pc, #32]	@ (800879c <prvPortStartFirstTask+0x24>)
 800877a:	6800      	ldr	r0, [r0, #0]
 800877c:	6800      	ldr	r0, [r0, #0]
 800877e:	f380 8808 	msr	MSP, r0
 8008782:	f04f 0000 	mov.w	r0, #0
 8008786:	f380 8814 	msr	CONTROL, r0
 800878a:	b662      	cpsie	i
 800878c:	b661      	cpsie	f
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	df00      	svc	0
 8008798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800879a:	bf00      	nop
 800879c:	e000ed08 	.word	0xe000ed08

080087a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80087a6:	4b47      	ldr	r3, [pc, #284]	@ (80088c4 <xPortStartScheduler+0x124>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a47      	ldr	r2, [pc, #284]	@ (80088c8 <xPortStartScheduler+0x128>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d10b      	bne.n	80087c8 <xPortStartScheduler+0x28>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	613b      	str	r3, [r7, #16]
}
 80087c2:	bf00      	nop
 80087c4:	bf00      	nop
 80087c6:	e7fd      	b.n	80087c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087c8:	4b3e      	ldr	r3, [pc, #248]	@ (80088c4 <xPortStartScheduler+0x124>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a3f      	ldr	r2, [pc, #252]	@ (80088cc <xPortStartScheduler+0x12c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d10b      	bne.n	80087ea <xPortStartScheduler+0x4a>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	60fb      	str	r3, [r7, #12]
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop
 80087e8:	e7fd      	b.n	80087e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087ea:	4b39      	ldr	r3, [pc, #228]	@ (80088d0 <xPortStartScheduler+0x130>)
 80087ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	22ff      	movs	r2, #255	@ 0xff
 80087fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	b2db      	uxtb	r3, r3
 8008802:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008804:	78fb      	ldrb	r3, [r7, #3]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800880c:	b2da      	uxtb	r2, r3
 800880e:	4b31      	ldr	r3, [pc, #196]	@ (80088d4 <xPortStartScheduler+0x134>)
 8008810:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008812:	4b31      	ldr	r3, [pc, #196]	@ (80088d8 <xPortStartScheduler+0x138>)
 8008814:	2207      	movs	r2, #7
 8008816:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008818:	e009      	b.n	800882e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800881a:	4b2f      	ldr	r3, [pc, #188]	@ (80088d8 <xPortStartScheduler+0x138>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3b01      	subs	r3, #1
 8008820:	4a2d      	ldr	r2, [pc, #180]	@ (80088d8 <xPortStartScheduler+0x138>)
 8008822:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008824:	78fb      	ldrb	r3, [r7, #3]
 8008826:	b2db      	uxtb	r3, r3
 8008828:	005b      	lsls	r3, r3, #1
 800882a:	b2db      	uxtb	r3, r3
 800882c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800882e:	78fb      	ldrb	r3, [r7, #3]
 8008830:	b2db      	uxtb	r3, r3
 8008832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008836:	2b80      	cmp	r3, #128	@ 0x80
 8008838:	d0ef      	beq.n	800881a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800883a:	4b27      	ldr	r3, [pc, #156]	@ (80088d8 <xPortStartScheduler+0x138>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f1c3 0307 	rsb	r3, r3, #7
 8008842:	2b04      	cmp	r3, #4
 8008844:	d00b      	beq.n	800885e <xPortStartScheduler+0xbe>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	60bb      	str	r3, [r7, #8]
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	e7fd      	b.n	800885a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800885e:	4b1e      	ldr	r3, [pc, #120]	@ (80088d8 <xPortStartScheduler+0x138>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	021b      	lsls	r3, r3, #8
 8008864:	4a1c      	ldr	r2, [pc, #112]	@ (80088d8 <xPortStartScheduler+0x138>)
 8008866:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008868:	4b1b      	ldr	r3, [pc, #108]	@ (80088d8 <xPortStartScheduler+0x138>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008870:	4a19      	ldr	r2, [pc, #100]	@ (80088d8 <xPortStartScheduler+0x138>)
 8008872:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	b2da      	uxtb	r2, r3
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800887c:	4b17      	ldr	r3, [pc, #92]	@ (80088dc <xPortStartScheduler+0x13c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a16      	ldr	r2, [pc, #88]	@ (80088dc <xPortStartScheduler+0x13c>)
 8008882:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008886:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008888:	4b14      	ldr	r3, [pc, #80]	@ (80088dc <xPortStartScheduler+0x13c>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a13      	ldr	r2, [pc, #76]	@ (80088dc <xPortStartScheduler+0x13c>)
 800888e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008892:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008894:	f000 f8da 	bl	8008a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008898:	4b11      	ldr	r3, [pc, #68]	@ (80088e0 <xPortStartScheduler+0x140>)
 800889a:	2200      	movs	r2, #0
 800889c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800889e:	f000 f8f9 	bl	8008a94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80088a2:	4b10      	ldr	r3, [pc, #64]	@ (80088e4 <xPortStartScheduler+0x144>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a0f      	ldr	r2, [pc, #60]	@ (80088e4 <xPortStartScheduler+0x144>)
 80088a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80088ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088ae:	f7ff ff63 	bl	8008778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088b2:	f7ff fd53 	bl	800835c <vTaskSwitchContext>
	prvTaskExitError();
 80088b6:	f7ff ff1b 	bl	80086f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	e000ed00 	.word	0xe000ed00
 80088c8:	410fc271 	.word	0x410fc271
 80088cc:	410fc270 	.word	0x410fc270
 80088d0:	e000e400 	.word	0xe000e400
 80088d4:	20000704 	.word	0x20000704
 80088d8:	20000708 	.word	0x20000708
 80088dc:	e000ed20 	.word	0xe000ed20
 80088e0:	2000000c 	.word	0x2000000c
 80088e4:	e000ef34 	.word	0xe000ef34

080088e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	607b      	str	r3, [r7, #4]
}
 8008900:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008902:	4b10      	ldr	r3, [pc, #64]	@ (8008944 <vPortEnterCritical+0x5c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3301      	adds	r3, #1
 8008908:	4a0e      	ldr	r2, [pc, #56]	@ (8008944 <vPortEnterCritical+0x5c>)
 800890a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800890c:	4b0d      	ldr	r3, [pc, #52]	@ (8008944 <vPortEnterCritical+0x5c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d110      	bne.n	8008936 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008914:	4b0c      	ldr	r3, [pc, #48]	@ (8008948 <vPortEnterCritical+0x60>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00b      	beq.n	8008936 <vPortEnterCritical+0x4e>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	603b      	str	r3, [r7, #0]
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	e7fd      	b.n	8008932 <vPortEnterCritical+0x4a>
	}
}
 8008936:	bf00      	nop
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	2000000c 	.word	0x2000000c
 8008948:	e000ed04 	.word	0xe000ed04

0800894c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008952:	4b12      	ldr	r3, [pc, #72]	@ (800899c <vPortExitCritical+0x50>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10b      	bne.n	8008972 <vPortExitCritical+0x26>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	607b      	str	r3, [r7, #4]
}
 800896c:	bf00      	nop
 800896e:	bf00      	nop
 8008970:	e7fd      	b.n	800896e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008972:	4b0a      	ldr	r3, [pc, #40]	@ (800899c <vPortExitCritical+0x50>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3b01      	subs	r3, #1
 8008978:	4a08      	ldr	r2, [pc, #32]	@ (800899c <vPortExitCritical+0x50>)
 800897a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800897c:	4b07      	ldr	r3, [pc, #28]	@ (800899c <vPortExitCritical+0x50>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d105      	bne.n	8008990 <vPortExitCritical+0x44>
 8008984:	2300      	movs	r3, #0
 8008986:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800898e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	2000000c 	.word	0x2000000c

080089a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089a0:	f3ef 8009 	mrs	r0, PSP
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	4b15      	ldr	r3, [pc, #84]	@ (8008a00 <pxCurrentTCBConst>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	f01e 0f10 	tst.w	lr, #16
 80089b0:	bf08      	it	eq
 80089b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ba:	6010      	str	r0, [r2, #0]
 80089bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80089c4:	f380 8811 	msr	BASEPRI, r0
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f7ff fcc4 	bl	800835c <vTaskSwitchContext>
 80089d4:	f04f 0000 	mov.w	r0, #0
 80089d8:	f380 8811 	msr	BASEPRI, r0
 80089dc:	bc09      	pop	{r0, r3}
 80089de:	6819      	ldr	r1, [r3, #0]
 80089e0:	6808      	ldr	r0, [r1, #0]
 80089e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e6:	f01e 0f10 	tst.w	lr, #16
 80089ea:	bf08      	it	eq
 80089ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089f0:	f380 8809 	msr	PSP, r0
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	f3af 8000 	nop.w

08008a00 <pxCurrentTCBConst>:
 8008a00:	200005d8 	.word	0x200005d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop

08008a08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	607b      	str	r3, [r7, #4]
}
 8008a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a22:	f7ff fbe1 	bl	80081e8 <xTaskIncrementTick>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d003      	beq.n	8008a34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a2c:	4b06      	ldr	r3, [pc, #24]	@ (8008a48 <xPortSysTickHandler+0x40>)
 8008a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	2300      	movs	r3, #0
 8008a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	f383 8811 	msr	BASEPRI, r3
}
 8008a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a40:	bf00      	nop
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	e000ed04 	.word	0xe000ed04

08008a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a50:	4b0b      	ldr	r3, [pc, #44]	@ (8008a80 <vPortSetupTimerInterrupt+0x34>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a56:	4b0b      	ldr	r3, [pc, #44]	@ (8008a84 <vPortSetupTimerInterrupt+0x38>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a88 <vPortSetupTimerInterrupt+0x3c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a0a      	ldr	r2, [pc, #40]	@ (8008a8c <vPortSetupTimerInterrupt+0x40>)
 8008a62:	fba2 2303 	umull	r2, r3, r2, r3
 8008a66:	099b      	lsrs	r3, r3, #6
 8008a68:	4a09      	ldr	r2, [pc, #36]	@ (8008a90 <vPortSetupTimerInterrupt+0x44>)
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a6e:	4b04      	ldr	r3, [pc, #16]	@ (8008a80 <vPortSetupTimerInterrupt+0x34>)
 8008a70:	2207      	movs	r2, #7
 8008a72:	601a      	str	r2, [r3, #0]
}
 8008a74:	bf00      	nop
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	e000e010 	.word	0xe000e010
 8008a84:	e000e018 	.word	0xe000e018
 8008a88:	20000000 	.word	0x20000000
 8008a8c:	10624dd3 	.word	0x10624dd3
 8008a90:	e000e014 	.word	0xe000e014

08008a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008aa4 <vPortEnableVFP+0x10>
 8008a98:	6801      	ldr	r1, [r0, #0]
 8008a9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008a9e:	6001      	str	r1, [r0, #0]
 8008aa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008aa2:	bf00      	nop
 8008aa4:	e000ed88 	.word	0xe000ed88

08008aa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b08a      	sub	sp, #40	@ 0x28
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ab4:	f7ff faec 	bl	8008090 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ab8:	4b5c      	ldr	r3, [pc, #368]	@ (8008c2c <pvPortMalloc+0x184>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ac0:	f000 f924 	bl	8008d0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ac4:	4b5a      	ldr	r3, [pc, #360]	@ (8008c30 <pvPortMalloc+0x188>)
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4013      	ands	r3, r2
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f040 8095 	bne.w	8008bfc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d01e      	beq.n	8008b16 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008ad8:	2208      	movs	r2, #8
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4413      	add	r3, r2
 8008ade:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f003 0307 	and.w	r3, r3, #7
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d015      	beq.n	8008b16 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f023 0307 	bic.w	r3, r3, #7
 8008af0:	3308      	adds	r3, #8
 8008af2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f003 0307 	and.w	r3, r3, #7
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00b      	beq.n	8008b16 <pvPortMalloc+0x6e>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	617b      	str	r3, [r7, #20]
}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	e7fd      	b.n	8008b12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d06f      	beq.n	8008bfc <pvPortMalloc+0x154>
 8008b1c:	4b45      	ldr	r3, [pc, #276]	@ (8008c34 <pvPortMalloc+0x18c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d86a      	bhi.n	8008bfc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b26:	4b44      	ldr	r3, [pc, #272]	@ (8008c38 <pvPortMalloc+0x190>)
 8008b28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b2a:	4b43      	ldr	r3, [pc, #268]	@ (8008c38 <pvPortMalloc+0x190>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b30:	e004      	b.n	8008b3c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d903      	bls.n	8008b4e <pvPortMalloc+0xa6>
 8008b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1f1      	bne.n	8008b32 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b4e:	4b37      	ldr	r3, [pc, #220]	@ (8008c2c <pvPortMalloc+0x184>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d051      	beq.n	8008bfc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2208      	movs	r2, #8
 8008b5e:	4413      	add	r3, r2
 8008b60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	1ad2      	subs	r2, r2, r3
 8008b72:	2308      	movs	r3, #8
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d920      	bls.n	8008bbc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4413      	add	r3, r2
 8008b80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	f003 0307 	and.w	r3, r3, #7
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00b      	beq.n	8008ba4 <pvPortMalloc+0xfc>
	__asm volatile
 8008b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	613b      	str	r3, [r7, #16]
}
 8008b9e:	bf00      	nop
 8008ba0:	bf00      	nop
 8008ba2:	e7fd      	b.n	8008ba0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba6:	685a      	ldr	r2, [r3, #4]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	1ad2      	subs	r2, r2, r3
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bb6:	69b8      	ldr	r0, [r7, #24]
 8008bb8:	f000 f90a 	bl	8008dd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8008c34 <pvPortMalloc+0x18c>)
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8008c34 <pvPortMalloc+0x18c>)
 8008bc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bca:	4b1a      	ldr	r3, [pc, #104]	@ (8008c34 <pvPortMalloc+0x18c>)
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	4b1b      	ldr	r3, [pc, #108]	@ (8008c3c <pvPortMalloc+0x194>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d203      	bcs.n	8008bde <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008bd6:	4b17      	ldr	r3, [pc, #92]	@ (8008c34 <pvPortMalloc+0x18c>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a18      	ldr	r2, [pc, #96]	@ (8008c3c <pvPortMalloc+0x194>)
 8008bdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	4b13      	ldr	r3, [pc, #76]	@ (8008c30 <pvPortMalloc+0x188>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	431a      	orrs	r2, r3
 8008be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bee:	2200      	movs	r2, #0
 8008bf0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008bf2:	4b13      	ldr	r3, [pc, #76]	@ (8008c40 <pvPortMalloc+0x198>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	4a11      	ldr	r2, [pc, #68]	@ (8008c40 <pvPortMalloc+0x198>)
 8008bfa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008bfc:	f7ff fa56 	bl	80080ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	f003 0307 	and.w	r3, r3, #7
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00b      	beq.n	8008c22 <pvPortMalloc+0x17a>
	__asm volatile
 8008c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	60fb      	str	r3, [r7, #12]
}
 8008c1c:	bf00      	nop
 8008c1e:	bf00      	nop
 8008c20:	e7fd      	b.n	8008c1e <pvPortMalloc+0x176>
	return pvReturn;
 8008c22:	69fb      	ldr	r3, [r7, #28]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3728      	adds	r7, #40	@ 0x28
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	20001314 	.word	0x20001314
 8008c30:	20001328 	.word	0x20001328
 8008c34:	20001318 	.word	0x20001318
 8008c38:	2000130c 	.word	0x2000130c
 8008c3c:	2000131c 	.word	0x2000131c
 8008c40:	20001320 	.word	0x20001320

08008c44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d04f      	beq.n	8008cf6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c56:	2308      	movs	r3, #8
 8008c58:	425b      	negs	r3, r3
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	4b25      	ldr	r3, [pc, #148]	@ (8008d00 <vPortFree+0xbc>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10b      	bne.n	8008c8a <vPortFree+0x46>
	__asm volatile
 8008c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c76:	f383 8811 	msr	BASEPRI, r3
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	60fb      	str	r3, [r7, #12]
}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop
 8008c88:	e7fd      	b.n	8008c86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00b      	beq.n	8008caa <vPortFree+0x66>
	__asm volatile
 8008c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	60bb      	str	r3, [r7, #8]
}
 8008ca4:	bf00      	nop
 8008ca6:	bf00      	nop
 8008ca8:	e7fd      	b.n	8008ca6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	4b14      	ldr	r3, [pc, #80]	@ (8008d00 <vPortFree+0xbc>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d01e      	beq.n	8008cf6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d11a      	bne.n	8008cf6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8008d00 <vPortFree+0xbc>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	43db      	mvns	r3, r3
 8008cca:	401a      	ands	r2, r3
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008cd0:	f7ff f9de 	bl	8008090 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8008d04 <vPortFree+0xc0>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4413      	add	r3, r2
 8008cde:	4a09      	ldr	r2, [pc, #36]	@ (8008d04 <vPortFree+0xc0>)
 8008ce0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ce2:	6938      	ldr	r0, [r7, #16]
 8008ce4:	f000 f874 	bl	8008dd0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008ce8:	4b07      	ldr	r3, [pc, #28]	@ (8008d08 <vPortFree+0xc4>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	3301      	adds	r3, #1
 8008cee:	4a06      	ldr	r2, [pc, #24]	@ (8008d08 <vPortFree+0xc4>)
 8008cf0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008cf2:	f7ff f9db 	bl	80080ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008cf6:	bf00      	nop
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20001328 	.word	0x20001328
 8008d04:	20001318 	.word	0x20001318
 8008d08:	20001324 	.word	0x20001324

08008d0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d12:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008d16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d18:	4b27      	ldr	r3, [pc, #156]	@ (8008db8 <prvHeapInit+0xac>)
 8008d1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f003 0307 	and.w	r3, r3, #7
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00c      	beq.n	8008d40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	3307      	adds	r3, #7
 8008d2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f023 0307 	bic.w	r3, r3, #7
 8008d32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8008db8 <prvHeapInit+0xac>)
 8008d3c:	4413      	add	r3, r2
 8008d3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d44:	4a1d      	ldr	r2, [pc, #116]	@ (8008dbc <prvHeapInit+0xb0>)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8008dbc <prvHeapInit+0xb0>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	4413      	add	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d58:	2208      	movs	r2, #8
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	1a9b      	subs	r3, r3, r2
 8008d5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f023 0307 	bic.w	r3, r3, #7
 8008d66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4a15      	ldr	r2, [pc, #84]	@ (8008dc0 <prvHeapInit+0xb4>)
 8008d6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d6e:	4b14      	ldr	r3, [pc, #80]	@ (8008dc0 <prvHeapInit+0xb4>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2200      	movs	r2, #0
 8008d74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d76:	4b12      	ldr	r3, [pc, #72]	@ (8008dc0 <prvHeapInit+0xb4>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	1ad2      	subs	r2, r2, r3
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8008dc0 <prvHeapInit+0xb4>)
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	4a0a      	ldr	r2, [pc, #40]	@ (8008dc4 <prvHeapInit+0xb8>)
 8008d9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	4a09      	ldr	r2, [pc, #36]	@ (8008dc8 <prvHeapInit+0xbc>)
 8008da2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008da4:	4b09      	ldr	r3, [pc, #36]	@ (8008dcc <prvHeapInit+0xc0>)
 8008da6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008daa:	601a      	str	r2, [r3, #0]
}
 8008dac:	bf00      	nop
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	2000070c 	.word	0x2000070c
 8008dbc:	2000130c 	.word	0x2000130c
 8008dc0:	20001314 	.word	0x20001314
 8008dc4:	2000131c 	.word	0x2000131c
 8008dc8:	20001318 	.word	0x20001318
 8008dcc:	20001328 	.word	0x20001328

08008dd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008dd8:	4b28      	ldr	r3, [pc, #160]	@ (8008e7c <prvInsertBlockIntoFreeList+0xac>)
 8008dda:	60fb      	str	r3, [r7, #12]
 8008ddc:	e002      	b.n	8008de4 <prvInsertBlockIntoFreeList+0x14>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60fb      	str	r3, [r7, #12]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d8f7      	bhi.n	8008dde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	4413      	add	r3, r2
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d108      	bne.n	8008e12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	441a      	add	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	441a      	add	r2, r3
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d118      	bne.n	8008e58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	4b15      	ldr	r3, [pc, #84]	@ (8008e80 <prvInsertBlockIntoFreeList+0xb0>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d00d      	beq.n	8008e4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	441a      	add	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	e008      	b.n	8008e60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8008e80 <prvInsertBlockIntoFreeList+0xb0>)
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	e003      	b.n	8008e60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d002      	beq.n	8008e6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e6e:	bf00      	nop
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	2000130c 	.word	0x2000130c
 8008e80:	20001314 	.word	0x20001314

08008e84 <sbrk_aligned>:
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	4e0f      	ldr	r6, [pc, #60]	@ (8008ec4 <sbrk_aligned+0x40>)
 8008e88:	460c      	mov	r4, r1
 8008e8a:	6831      	ldr	r1, [r6, #0]
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	b911      	cbnz	r1, 8008e96 <sbrk_aligned+0x12>
 8008e90:	f000 f9e0 	bl	8009254 <_sbrk_r>
 8008e94:	6030      	str	r0, [r6, #0]
 8008e96:	4621      	mov	r1, r4
 8008e98:	4628      	mov	r0, r5
 8008e9a:	f000 f9db 	bl	8009254 <_sbrk_r>
 8008e9e:	1c43      	adds	r3, r0, #1
 8008ea0:	d103      	bne.n	8008eaa <sbrk_aligned+0x26>
 8008ea2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	bd70      	pop	{r4, r5, r6, pc}
 8008eaa:	1cc4      	adds	r4, r0, #3
 8008eac:	f024 0403 	bic.w	r4, r4, #3
 8008eb0:	42a0      	cmp	r0, r4
 8008eb2:	d0f8      	beq.n	8008ea6 <sbrk_aligned+0x22>
 8008eb4:	1a21      	subs	r1, r4, r0
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f000 f9cc 	bl	8009254 <_sbrk_r>
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	d1f2      	bne.n	8008ea6 <sbrk_aligned+0x22>
 8008ec0:	e7ef      	b.n	8008ea2 <sbrk_aligned+0x1e>
 8008ec2:	bf00      	nop
 8008ec4:	2000132c 	.word	0x2000132c

08008ec8 <_malloc_r>:
 8008ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ecc:	1ccd      	adds	r5, r1, #3
 8008ece:	f025 0503 	bic.w	r5, r5, #3
 8008ed2:	3508      	adds	r5, #8
 8008ed4:	2d0c      	cmp	r5, #12
 8008ed6:	bf38      	it	cc
 8008ed8:	250c      	movcc	r5, #12
 8008eda:	2d00      	cmp	r5, #0
 8008edc:	4606      	mov	r6, r0
 8008ede:	db01      	blt.n	8008ee4 <_malloc_r+0x1c>
 8008ee0:	42a9      	cmp	r1, r5
 8008ee2:	d904      	bls.n	8008eee <_malloc_r+0x26>
 8008ee4:	230c      	movs	r3, #12
 8008ee6:	6033      	str	r3, [r6, #0]
 8008ee8:	2000      	movs	r0, #0
 8008eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008fc4 <_malloc_r+0xfc>
 8008ef2:	f000 f869 	bl	8008fc8 <__malloc_lock>
 8008ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8008efa:	461c      	mov	r4, r3
 8008efc:	bb44      	cbnz	r4, 8008f50 <_malloc_r+0x88>
 8008efe:	4629      	mov	r1, r5
 8008f00:	4630      	mov	r0, r6
 8008f02:	f7ff ffbf 	bl	8008e84 <sbrk_aligned>
 8008f06:	1c43      	adds	r3, r0, #1
 8008f08:	4604      	mov	r4, r0
 8008f0a:	d158      	bne.n	8008fbe <_malloc_r+0xf6>
 8008f0c:	f8d8 4000 	ldr.w	r4, [r8]
 8008f10:	4627      	mov	r7, r4
 8008f12:	2f00      	cmp	r7, #0
 8008f14:	d143      	bne.n	8008f9e <_malloc_r+0xd6>
 8008f16:	2c00      	cmp	r4, #0
 8008f18:	d04b      	beq.n	8008fb2 <_malloc_r+0xea>
 8008f1a:	6823      	ldr	r3, [r4, #0]
 8008f1c:	4639      	mov	r1, r7
 8008f1e:	4630      	mov	r0, r6
 8008f20:	eb04 0903 	add.w	r9, r4, r3
 8008f24:	f000 f996 	bl	8009254 <_sbrk_r>
 8008f28:	4581      	cmp	r9, r0
 8008f2a:	d142      	bne.n	8008fb2 <_malloc_r+0xea>
 8008f2c:	6821      	ldr	r1, [r4, #0]
 8008f2e:	1a6d      	subs	r5, r5, r1
 8008f30:	4629      	mov	r1, r5
 8008f32:	4630      	mov	r0, r6
 8008f34:	f7ff ffa6 	bl	8008e84 <sbrk_aligned>
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d03a      	beq.n	8008fb2 <_malloc_r+0xea>
 8008f3c:	6823      	ldr	r3, [r4, #0]
 8008f3e:	442b      	add	r3, r5
 8008f40:	6023      	str	r3, [r4, #0]
 8008f42:	f8d8 3000 	ldr.w	r3, [r8]
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	bb62      	cbnz	r2, 8008fa4 <_malloc_r+0xdc>
 8008f4a:	f8c8 7000 	str.w	r7, [r8]
 8008f4e:	e00f      	b.n	8008f70 <_malloc_r+0xa8>
 8008f50:	6822      	ldr	r2, [r4, #0]
 8008f52:	1b52      	subs	r2, r2, r5
 8008f54:	d420      	bmi.n	8008f98 <_malloc_r+0xd0>
 8008f56:	2a0b      	cmp	r2, #11
 8008f58:	d917      	bls.n	8008f8a <_malloc_r+0xc2>
 8008f5a:	1961      	adds	r1, r4, r5
 8008f5c:	42a3      	cmp	r3, r4
 8008f5e:	6025      	str	r5, [r4, #0]
 8008f60:	bf18      	it	ne
 8008f62:	6059      	strne	r1, [r3, #4]
 8008f64:	6863      	ldr	r3, [r4, #4]
 8008f66:	bf08      	it	eq
 8008f68:	f8c8 1000 	streq.w	r1, [r8]
 8008f6c:	5162      	str	r2, [r4, r5]
 8008f6e:	604b      	str	r3, [r1, #4]
 8008f70:	4630      	mov	r0, r6
 8008f72:	f000 f82f 	bl	8008fd4 <__malloc_unlock>
 8008f76:	f104 000b 	add.w	r0, r4, #11
 8008f7a:	1d23      	adds	r3, r4, #4
 8008f7c:	f020 0007 	bic.w	r0, r0, #7
 8008f80:	1ac2      	subs	r2, r0, r3
 8008f82:	bf1c      	itt	ne
 8008f84:	1a1b      	subne	r3, r3, r0
 8008f86:	50a3      	strne	r3, [r4, r2]
 8008f88:	e7af      	b.n	8008eea <_malloc_r+0x22>
 8008f8a:	6862      	ldr	r2, [r4, #4]
 8008f8c:	42a3      	cmp	r3, r4
 8008f8e:	bf0c      	ite	eq
 8008f90:	f8c8 2000 	streq.w	r2, [r8]
 8008f94:	605a      	strne	r2, [r3, #4]
 8008f96:	e7eb      	b.n	8008f70 <_malloc_r+0xa8>
 8008f98:	4623      	mov	r3, r4
 8008f9a:	6864      	ldr	r4, [r4, #4]
 8008f9c:	e7ae      	b.n	8008efc <_malloc_r+0x34>
 8008f9e:	463c      	mov	r4, r7
 8008fa0:	687f      	ldr	r7, [r7, #4]
 8008fa2:	e7b6      	b.n	8008f12 <_malloc_r+0x4a>
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	42a3      	cmp	r3, r4
 8008faa:	d1fb      	bne.n	8008fa4 <_malloc_r+0xdc>
 8008fac:	2300      	movs	r3, #0
 8008fae:	6053      	str	r3, [r2, #4]
 8008fb0:	e7de      	b.n	8008f70 <_malloc_r+0xa8>
 8008fb2:	230c      	movs	r3, #12
 8008fb4:	6033      	str	r3, [r6, #0]
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f000 f80c 	bl	8008fd4 <__malloc_unlock>
 8008fbc:	e794      	b.n	8008ee8 <_malloc_r+0x20>
 8008fbe:	6005      	str	r5, [r0, #0]
 8008fc0:	e7d6      	b.n	8008f70 <_malloc_r+0xa8>
 8008fc2:	bf00      	nop
 8008fc4:	20001330 	.word	0x20001330

08008fc8 <__malloc_lock>:
 8008fc8:	4801      	ldr	r0, [pc, #4]	@ (8008fd0 <__malloc_lock+0x8>)
 8008fca:	f000 b97e 	b.w	80092ca <__retarget_lock_acquire_recursive>
 8008fce:	bf00      	nop
 8008fd0:	20001470 	.word	0x20001470

08008fd4 <__malloc_unlock>:
 8008fd4:	4801      	ldr	r0, [pc, #4]	@ (8008fdc <__malloc_unlock+0x8>)
 8008fd6:	f000 b979 	b.w	80092cc <__retarget_lock_release_recursive>
 8008fda:	bf00      	nop
 8008fdc:	20001470 	.word	0x20001470

08008fe0 <std>:
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	b510      	push	{r4, lr}
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8008fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fee:	6083      	str	r3, [r0, #8]
 8008ff0:	8181      	strh	r1, [r0, #12]
 8008ff2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ff4:	81c2      	strh	r2, [r0, #14]
 8008ff6:	6183      	str	r3, [r0, #24]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	2208      	movs	r2, #8
 8008ffc:	305c      	adds	r0, #92	@ 0x5c
 8008ffe:	f000 f921 	bl	8009244 <memset>
 8009002:	4b0d      	ldr	r3, [pc, #52]	@ (8009038 <std+0x58>)
 8009004:	6263      	str	r3, [r4, #36]	@ 0x24
 8009006:	4b0d      	ldr	r3, [pc, #52]	@ (800903c <std+0x5c>)
 8009008:	62a3      	str	r3, [r4, #40]	@ 0x28
 800900a:	4b0d      	ldr	r3, [pc, #52]	@ (8009040 <std+0x60>)
 800900c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800900e:	4b0d      	ldr	r3, [pc, #52]	@ (8009044 <std+0x64>)
 8009010:	6323      	str	r3, [r4, #48]	@ 0x30
 8009012:	4b0d      	ldr	r3, [pc, #52]	@ (8009048 <std+0x68>)
 8009014:	6224      	str	r4, [r4, #32]
 8009016:	429c      	cmp	r4, r3
 8009018:	d006      	beq.n	8009028 <std+0x48>
 800901a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800901e:	4294      	cmp	r4, r2
 8009020:	d002      	beq.n	8009028 <std+0x48>
 8009022:	33d0      	adds	r3, #208	@ 0xd0
 8009024:	429c      	cmp	r4, r3
 8009026:	d105      	bne.n	8009034 <std+0x54>
 8009028:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800902c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009030:	f000 b94a 	b.w	80092c8 <__retarget_lock_init_recursive>
 8009034:	bd10      	pop	{r4, pc}
 8009036:	bf00      	nop
 8009038:	08009a5d 	.word	0x08009a5d
 800903c:	08009a7f 	.word	0x08009a7f
 8009040:	08009ab7 	.word	0x08009ab7
 8009044:	08009adb 	.word	0x08009adb
 8009048:	20001334 	.word	0x20001334

0800904c <stdio_exit_handler>:
 800904c:	4a02      	ldr	r2, [pc, #8]	@ (8009058 <stdio_exit_handler+0xc>)
 800904e:	4903      	ldr	r1, [pc, #12]	@ (800905c <stdio_exit_handler+0x10>)
 8009050:	4803      	ldr	r0, [pc, #12]	@ (8009060 <stdio_exit_handler+0x14>)
 8009052:	f000 b869 	b.w	8009128 <_fwalk_sglue>
 8009056:	bf00      	nop
 8009058:	20000010 	.word	0x20000010
 800905c:	08009a0d 	.word	0x08009a0d
 8009060:	20000020 	.word	0x20000020

08009064 <cleanup_stdio>:
 8009064:	6841      	ldr	r1, [r0, #4]
 8009066:	4b0c      	ldr	r3, [pc, #48]	@ (8009098 <cleanup_stdio+0x34>)
 8009068:	4299      	cmp	r1, r3
 800906a:	b510      	push	{r4, lr}
 800906c:	4604      	mov	r4, r0
 800906e:	d001      	beq.n	8009074 <cleanup_stdio+0x10>
 8009070:	f000 fccc 	bl	8009a0c <_fflush_r>
 8009074:	68a1      	ldr	r1, [r4, #8]
 8009076:	4b09      	ldr	r3, [pc, #36]	@ (800909c <cleanup_stdio+0x38>)
 8009078:	4299      	cmp	r1, r3
 800907a:	d002      	beq.n	8009082 <cleanup_stdio+0x1e>
 800907c:	4620      	mov	r0, r4
 800907e:	f000 fcc5 	bl	8009a0c <_fflush_r>
 8009082:	68e1      	ldr	r1, [r4, #12]
 8009084:	4b06      	ldr	r3, [pc, #24]	@ (80090a0 <cleanup_stdio+0x3c>)
 8009086:	4299      	cmp	r1, r3
 8009088:	d004      	beq.n	8009094 <cleanup_stdio+0x30>
 800908a:	4620      	mov	r0, r4
 800908c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009090:	f000 bcbc 	b.w	8009a0c <_fflush_r>
 8009094:	bd10      	pop	{r4, pc}
 8009096:	bf00      	nop
 8009098:	20001334 	.word	0x20001334
 800909c:	2000139c 	.word	0x2000139c
 80090a0:	20001404 	.word	0x20001404

080090a4 <global_stdio_init.part.0>:
 80090a4:	b510      	push	{r4, lr}
 80090a6:	4b0b      	ldr	r3, [pc, #44]	@ (80090d4 <global_stdio_init.part.0+0x30>)
 80090a8:	4c0b      	ldr	r4, [pc, #44]	@ (80090d8 <global_stdio_init.part.0+0x34>)
 80090aa:	4a0c      	ldr	r2, [pc, #48]	@ (80090dc <global_stdio_init.part.0+0x38>)
 80090ac:	601a      	str	r2, [r3, #0]
 80090ae:	4620      	mov	r0, r4
 80090b0:	2200      	movs	r2, #0
 80090b2:	2104      	movs	r1, #4
 80090b4:	f7ff ff94 	bl	8008fe0 <std>
 80090b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80090bc:	2201      	movs	r2, #1
 80090be:	2109      	movs	r1, #9
 80090c0:	f7ff ff8e 	bl	8008fe0 <std>
 80090c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80090c8:	2202      	movs	r2, #2
 80090ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090ce:	2112      	movs	r1, #18
 80090d0:	f7ff bf86 	b.w	8008fe0 <std>
 80090d4:	2000146c 	.word	0x2000146c
 80090d8:	20001334 	.word	0x20001334
 80090dc:	0800904d 	.word	0x0800904d

080090e0 <__sfp_lock_acquire>:
 80090e0:	4801      	ldr	r0, [pc, #4]	@ (80090e8 <__sfp_lock_acquire+0x8>)
 80090e2:	f000 b8f2 	b.w	80092ca <__retarget_lock_acquire_recursive>
 80090e6:	bf00      	nop
 80090e8:	20001471 	.word	0x20001471

080090ec <__sfp_lock_release>:
 80090ec:	4801      	ldr	r0, [pc, #4]	@ (80090f4 <__sfp_lock_release+0x8>)
 80090ee:	f000 b8ed 	b.w	80092cc <__retarget_lock_release_recursive>
 80090f2:	bf00      	nop
 80090f4:	20001471 	.word	0x20001471

080090f8 <__sinit>:
 80090f8:	b510      	push	{r4, lr}
 80090fa:	4604      	mov	r4, r0
 80090fc:	f7ff fff0 	bl	80090e0 <__sfp_lock_acquire>
 8009100:	6a23      	ldr	r3, [r4, #32]
 8009102:	b11b      	cbz	r3, 800910c <__sinit+0x14>
 8009104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009108:	f7ff bff0 	b.w	80090ec <__sfp_lock_release>
 800910c:	4b04      	ldr	r3, [pc, #16]	@ (8009120 <__sinit+0x28>)
 800910e:	6223      	str	r3, [r4, #32]
 8009110:	4b04      	ldr	r3, [pc, #16]	@ (8009124 <__sinit+0x2c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1f5      	bne.n	8009104 <__sinit+0xc>
 8009118:	f7ff ffc4 	bl	80090a4 <global_stdio_init.part.0>
 800911c:	e7f2      	b.n	8009104 <__sinit+0xc>
 800911e:	bf00      	nop
 8009120:	08009065 	.word	0x08009065
 8009124:	2000146c 	.word	0x2000146c

08009128 <_fwalk_sglue>:
 8009128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800912c:	4607      	mov	r7, r0
 800912e:	4688      	mov	r8, r1
 8009130:	4614      	mov	r4, r2
 8009132:	2600      	movs	r6, #0
 8009134:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009138:	f1b9 0901 	subs.w	r9, r9, #1
 800913c:	d505      	bpl.n	800914a <_fwalk_sglue+0x22>
 800913e:	6824      	ldr	r4, [r4, #0]
 8009140:	2c00      	cmp	r4, #0
 8009142:	d1f7      	bne.n	8009134 <_fwalk_sglue+0xc>
 8009144:	4630      	mov	r0, r6
 8009146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800914a:	89ab      	ldrh	r3, [r5, #12]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d907      	bls.n	8009160 <_fwalk_sglue+0x38>
 8009150:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009154:	3301      	adds	r3, #1
 8009156:	d003      	beq.n	8009160 <_fwalk_sglue+0x38>
 8009158:	4629      	mov	r1, r5
 800915a:	4638      	mov	r0, r7
 800915c:	47c0      	blx	r8
 800915e:	4306      	orrs	r6, r0
 8009160:	3568      	adds	r5, #104	@ 0x68
 8009162:	e7e9      	b.n	8009138 <_fwalk_sglue+0x10>

08009164 <iprintf>:
 8009164:	b40f      	push	{r0, r1, r2, r3}
 8009166:	b507      	push	{r0, r1, r2, lr}
 8009168:	4906      	ldr	r1, [pc, #24]	@ (8009184 <iprintf+0x20>)
 800916a:	ab04      	add	r3, sp, #16
 800916c:	6808      	ldr	r0, [r1, #0]
 800916e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009172:	6881      	ldr	r1, [r0, #8]
 8009174:	9301      	str	r3, [sp, #4]
 8009176:	f000 f91f 	bl	80093b8 <_vfiprintf_r>
 800917a:	b003      	add	sp, #12
 800917c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009180:	b004      	add	sp, #16
 8009182:	4770      	bx	lr
 8009184:	2000001c 	.word	0x2000001c

08009188 <_puts_r>:
 8009188:	6a03      	ldr	r3, [r0, #32]
 800918a:	b570      	push	{r4, r5, r6, lr}
 800918c:	6884      	ldr	r4, [r0, #8]
 800918e:	4605      	mov	r5, r0
 8009190:	460e      	mov	r6, r1
 8009192:	b90b      	cbnz	r3, 8009198 <_puts_r+0x10>
 8009194:	f7ff ffb0 	bl	80090f8 <__sinit>
 8009198:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800919a:	07db      	lsls	r3, r3, #31
 800919c:	d405      	bmi.n	80091aa <_puts_r+0x22>
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	0598      	lsls	r0, r3, #22
 80091a2:	d402      	bmi.n	80091aa <_puts_r+0x22>
 80091a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091a6:	f000 f890 	bl	80092ca <__retarget_lock_acquire_recursive>
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	0719      	lsls	r1, r3, #28
 80091ae:	d502      	bpl.n	80091b6 <_puts_r+0x2e>
 80091b0:	6923      	ldr	r3, [r4, #16]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d135      	bne.n	8009222 <_puts_r+0x9a>
 80091b6:	4621      	mov	r1, r4
 80091b8:	4628      	mov	r0, r5
 80091ba:	f000 fcd1 	bl	8009b60 <__swsetup_r>
 80091be:	b380      	cbz	r0, 8009222 <_puts_r+0x9a>
 80091c0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80091c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091c6:	07da      	lsls	r2, r3, #31
 80091c8:	d405      	bmi.n	80091d6 <_puts_r+0x4e>
 80091ca:	89a3      	ldrh	r3, [r4, #12]
 80091cc:	059b      	lsls	r3, r3, #22
 80091ce:	d402      	bmi.n	80091d6 <_puts_r+0x4e>
 80091d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091d2:	f000 f87b 	bl	80092cc <__retarget_lock_release_recursive>
 80091d6:	4628      	mov	r0, r5
 80091d8:	bd70      	pop	{r4, r5, r6, pc}
 80091da:	2b00      	cmp	r3, #0
 80091dc:	da04      	bge.n	80091e8 <_puts_r+0x60>
 80091de:	69a2      	ldr	r2, [r4, #24]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	dc17      	bgt.n	8009214 <_puts_r+0x8c>
 80091e4:	290a      	cmp	r1, #10
 80091e6:	d015      	beq.n	8009214 <_puts_r+0x8c>
 80091e8:	6823      	ldr	r3, [r4, #0]
 80091ea:	1c5a      	adds	r2, r3, #1
 80091ec:	6022      	str	r2, [r4, #0]
 80091ee:	7019      	strb	r1, [r3, #0]
 80091f0:	68a3      	ldr	r3, [r4, #8]
 80091f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80091f6:	3b01      	subs	r3, #1
 80091f8:	60a3      	str	r3, [r4, #8]
 80091fa:	2900      	cmp	r1, #0
 80091fc:	d1ed      	bne.n	80091da <_puts_r+0x52>
 80091fe:	2b00      	cmp	r3, #0
 8009200:	da11      	bge.n	8009226 <_puts_r+0x9e>
 8009202:	4622      	mov	r2, r4
 8009204:	210a      	movs	r1, #10
 8009206:	4628      	mov	r0, r5
 8009208:	f000 fc6b 	bl	8009ae2 <__swbuf_r>
 800920c:	3001      	adds	r0, #1
 800920e:	d0d7      	beq.n	80091c0 <_puts_r+0x38>
 8009210:	250a      	movs	r5, #10
 8009212:	e7d7      	b.n	80091c4 <_puts_r+0x3c>
 8009214:	4622      	mov	r2, r4
 8009216:	4628      	mov	r0, r5
 8009218:	f000 fc63 	bl	8009ae2 <__swbuf_r>
 800921c:	3001      	adds	r0, #1
 800921e:	d1e7      	bne.n	80091f0 <_puts_r+0x68>
 8009220:	e7ce      	b.n	80091c0 <_puts_r+0x38>
 8009222:	3e01      	subs	r6, #1
 8009224:	e7e4      	b.n	80091f0 <_puts_r+0x68>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	1c5a      	adds	r2, r3, #1
 800922a:	6022      	str	r2, [r4, #0]
 800922c:	220a      	movs	r2, #10
 800922e:	701a      	strb	r2, [r3, #0]
 8009230:	e7ee      	b.n	8009210 <_puts_r+0x88>
	...

08009234 <puts>:
 8009234:	4b02      	ldr	r3, [pc, #8]	@ (8009240 <puts+0xc>)
 8009236:	4601      	mov	r1, r0
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	f7ff bfa5 	b.w	8009188 <_puts_r>
 800923e:	bf00      	nop
 8009240:	2000001c 	.word	0x2000001c

08009244 <memset>:
 8009244:	4402      	add	r2, r0
 8009246:	4603      	mov	r3, r0
 8009248:	4293      	cmp	r3, r2
 800924a:	d100      	bne.n	800924e <memset+0xa>
 800924c:	4770      	bx	lr
 800924e:	f803 1b01 	strb.w	r1, [r3], #1
 8009252:	e7f9      	b.n	8009248 <memset+0x4>

08009254 <_sbrk_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4d06      	ldr	r5, [pc, #24]	@ (8009270 <_sbrk_r+0x1c>)
 8009258:	2300      	movs	r3, #0
 800925a:	4604      	mov	r4, r0
 800925c:	4608      	mov	r0, r1
 800925e:	602b      	str	r3, [r5, #0]
 8009260:	f7f8 f8ce 	bl	8001400 <_sbrk>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	d102      	bne.n	800926e <_sbrk_r+0x1a>
 8009268:	682b      	ldr	r3, [r5, #0]
 800926a:	b103      	cbz	r3, 800926e <_sbrk_r+0x1a>
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	20001474 	.word	0x20001474

08009274 <__errno>:
 8009274:	4b01      	ldr	r3, [pc, #4]	@ (800927c <__errno+0x8>)
 8009276:	6818      	ldr	r0, [r3, #0]
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	2000001c 	.word	0x2000001c

08009280 <__libc_init_array>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	4d0d      	ldr	r5, [pc, #52]	@ (80092b8 <__libc_init_array+0x38>)
 8009284:	4c0d      	ldr	r4, [pc, #52]	@ (80092bc <__libc_init_array+0x3c>)
 8009286:	1b64      	subs	r4, r4, r5
 8009288:	10a4      	asrs	r4, r4, #2
 800928a:	2600      	movs	r6, #0
 800928c:	42a6      	cmp	r6, r4
 800928e:	d109      	bne.n	80092a4 <__libc_init_array+0x24>
 8009290:	4d0b      	ldr	r5, [pc, #44]	@ (80092c0 <__libc_init_array+0x40>)
 8009292:	4c0c      	ldr	r4, [pc, #48]	@ (80092c4 <__libc_init_array+0x44>)
 8009294:	f000 fd84 	bl	8009da0 <_init>
 8009298:	1b64      	subs	r4, r4, r5
 800929a:	10a4      	asrs	r4, r4, #2
 800929c:	2600      	movs	r6, #0
 800929e:	42a6      	cmp	r6, r4
 80092a0:	d105      	bne.n	80092ae <__libc_init_array+0x2e>
 80092a2:	bd70      	pop	{r4, r5, r6, pc}
 80092a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a8:	4798      	blx	r3
 80092aa:	3601      	adds	r6, #1
 80092ac:	e7ee      	b.n	800928c <__libc_init_array+0xc>
 80092ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80092b2:	4798      	blx	r3
 80092b4:	3601      	adds	r6, #1
 80092b6:	e7f2      	b.n	800929e <__libc_init_array+0x1e>
 80092b8:	08009fec 	.word	0x08009fec
 80092bc:	08009fec 	.word	0x08009fec
 80092c0:	08009fec 	.word	0x08009fec
 80092c4:	08009ff0 	.word	0x08009ff0

080092c8 <__retarget_lock_init_recursive>:
 80092c8:	4770      	bx	lr

080092ca <__retarget_lock_acquire_recursive>:
 80092ca:	4770      	bx	lr

080092cc <__retarget_lock_release_recursive>:
 80092cc:	4770      	bx	lr
	...

080092d0 <_free_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4605      	mov	r5, r0
 80092d4:	2900      	cmp	r1, #0
 80092d6:	d041      	beq.n	800935c <_free_r+0x8c>
 80092d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092dc:	1f0c      	subs	r4, r1, #4
 80092de:	2b00      	cmp	r3, #0
 80092e0:	bfb8      	it	lt
 80092e2:	18e4      	addlt	r4, r4, r3
 80092e4:	f7ff fe70 	bl	8008fc8 <__malloc_lock>
 80092e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009360 <_free_r+0x90>)
 80092ea:	6813      	ldr	r3, [r2, #0]
 80092ec:	b933      	cbnz	r3, 80092fc <_free_r+0x2c>
 80092ee:	6063      	str	r3, [r4, #4]
 80092f0:	6014      	str	r4, [r2, #0]
 80092f2:	4628      	mov	r0, r5
 80092f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092f8:	f7ff be6c 	b.w	8008fd4 <__malloc_unlock>
 80092fc:	42a3      	cmp	r3, r4
 80092fe:	d908      	bls.n	8009312 <_free_r+0x42>
 8009300:	6820      	ldr	r0, [r4, #0]
 8009302:	1821      	adds	r1, r4, r0
 8009304:	428b      	cmp	r3, r1
 8009306:	bf01      	itttt	eq
 8009308:	6819      	ldreq	r1, [r3, #0]
 800930a:	685b      	ldreq	r3, [r3, #4]
 800930c:	1809      	addeq	r1, r1, r0
 800930e:	6021      	streq	r1, [r4, #0]
 8009310:	e7ed      	b.n	80092ee <_free_r+0x1e>
 8009312:	461a      	mov	r2, r3
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	b10b      	cbz	r3, 800931c <_free_r+0x4c>
 8009318:	42a3      	cmp	r3, r4
 800931a:	d9fa      	bls.n	8009312 <_free_r+0x42>
 800931c:	6811      	ldr	r1, [r2, #0]
 800931e:	1850      	adds	r0, r2, r1
 8009320:	42a0      	cmp	r0, r4
 8009322:	d10b      	bne.n	800933c <_free_r+0x6c>
 8009324:	6820      	ldr	r0, [r4, #0]
 8009326:	4401      	add	r1, r0
 8009328:	1850      	adds	r0, r2, r1
 800932a:	4283      	cmp	r3, r0
 800932c:	6011      	str	r1, [r2, #0]
 800932e:	d1e0      	bne.n	80092f2 <_free_r+0x22>
 8009330:	6818      	ldr	r0, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	6053      	str	r3, [r2, #4]
 8009336:	4408      	add	r0, r1
 8009338:	6010      	str	r0, [r2, #0]
 800933a:	e7da      	b.n	80092f2 <_free_r+0x22>
 800933c:	d902      	bls.n	8009344 <_free_r+0x74>
 800933e:	230c      	movs	r3, #12
 8009340:	602b      	str	r3, [r5, #0]
 8009342:	e7d6      	b.n	80092f2 <_free_r+0x22>
 8009344:	6820      	ldr	r0, [r4, #0]
 8009346:	1821      	adds	r1, r4, r0
 8009348:	428b      	cmp	r3, r1
 800934a:	bf04      	itt	eq
 800934c:	6819      	ldreq	r1, [r3, #0]
 800934e:	685b      	ldreq	r3, [r3, #4]
 8009350:	6063      	str	r3, [r4, #4]
 8009352:	bf04      	itt	eq
 8009354:	1809      	addeq	r1, r1, r0
 8009356:	6021      	streq	r1, [r4, #0]
 8009358:	6054      	str	r4, [r2, #4]
 800935a:	e7ca      	b.n	80092f2 <_free_r+0x22>
 800935c:	bd38      	pop	{r3, r4, r5, pc}
 800935e:	bf00      	nop
 8009360:	20001330 	.word	0x20001330

08009364 <__sfputc_r>:
 8009364:	6893      	ldr	r3, [r2, #8]
 8009366:	3b01      	subs	r3, #1
 8009368:	2b00      	cmp	r3, #0
 800936a:	b410      	push	{r4}
 800936c:	6093      	str	r3, [r2, #8]
 800936e:	da08      	bge.n	8009382 <__sfputc_r+0x1e>
 8009370:	6994      	ldr	r4, [r2, #24]
 8009372:	42a3      	cmp	r3, r4
 8009374:	db01      	blt.n	800937a <__sfputc_r+0x16>
 8009376:	290a      	cmp	r1, #10
 8009378:	d103      	bne.n	8009382 <__sfputc_r+0x1e>
 800937a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800937e:	f000 bbb0 	b.w	8009ae2 <__swbuf_r>
 8009382:	6813      	ldr	r3, [r2, #0]
 8009384:	1c58      	adds	r0, r3, #1
 8009386:	6010      	str	r0, [r2, #0]
 8009388:	7019      	strb	r1, [r3, #0]
 800938a:	4608      	mov	r0, r1
 800938c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009390:	4770      	bx	lr

08009392 <__sfputs_r>:
 8009392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009394:	4606      	mov	r6, r0
 8009396:	460f      	mov	r7, r1
 8009398:	4614      	mov	r4, r2
 800939a:	18d5      	adds	r5, r2, r3
 800939c:	42ac      	cmp	r4, r5
 800939e:	d101      	bne.n	80093a4 <__sfputs_r+0x12>
 80093a0:	2000      	movs	r0, #0
 80093a2:	e007      	b.n	80093b4 <__sfputs_r+0x22>
 80093a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a8:	463a      	mov	r2, r7
 80093aa:	4630      	mov	r0, r6
 80093ac:	f7ff ffda 	bl	8009364 <__sfputc_r>
 80093b0:	1c43      	adds	r3, r0, #1
 80093b2:	d1f3      	bne.n	800939c <__sfputs_r+0xa>
 80093b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080093b8 <_vfiprintf_r>:
 80093b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093bc:	460d      	mov	r5, r1
 80093be:	b09d      	sub	sp, #116	@ 0x74
 80093c0:	4614      	mov	r4, r2
 80093c2:	4698      	mov	r8, r3
 80093c4:	4606      	mov	r6, r0
 80093c6:	b118      	cbz	r0, 80093d0 <_vfiprintf_r+0x18>
 80093c8:	6a03      	ldr	r3, [r0, #32]
 80093ca:	b90b      	cbnz	r3, 80093d0 <_vfiprintf_r+0x18>
 80093cc:	f7ff fe94 	bl	80090f8 <__sinit>
 80093d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093d2:	07d9      	lsls	r1, r3, #31
 80093d4:	d405      	bmi.n	80093e2 <_vfiprintf_r+0x2a>
 80093d6:	89ab      	ldrh	r3, [r5, #12]
 80093d8:	059a      	lsls	r2, r3, #22
 80093da:	d402      	bmi.n	80093e2 <_vfiprintf_r+0x2a>
 80093dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093de:	f7ff ff74 	bl	80092ca <__retarget_lock_acquire_recursive>
 80093e2:	89ab      	ldrh	r3, [r5, #12]
 80093e4:	071b      	lsls	r3, r3, #28
 80093e6:	d501      	bpl.n	80093ec <_vfiprintf_r+0x34>
 80093e8:	692b      	ldr	r3, [r5, #16]
 80093ea:	b99b      	cbnz	r3, 8009414 <_vfiprintf_r+0x5c>
 80093ec:	4629      	mov	r1, r5
 80093ee:	4630      	mov	r0, r6
 80093f0:	f000 fbb6 	bl	8009b60 <__swsetup_r>
 80093f4:	b170      	cbz	r0, 8009414 <_vfiprintf_r+0x5c>
 80093f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093f8:	07dc      	lsls	r4, r3, #31
 80093fa:	d504      	bpl.n	8009406 <_vfiprintf_r+0x4e>
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009400:	b01d      	add	sp, #116	@ 0x74
 8009402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009406:	89ab      	ldrh	r3, [r5, #12]
 8009408:	0598      	lsls	r0, r3, #22
 800940a:	d4f7      	bmi.n	80093fc <_vfiprintf_r+0x44>
 800940c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800940e:	f7ff ff5d 	bl	80092cc <__retarget_lock_release_recursive>
 8009412:	e7f3      	b.n	80093fc <_vfiprintf_r+0x44>
 8009414:	2300      	movs	r3, #0
 8009416:	9309      	str	r3, [sp, #36]	@ 0x24
 8009418:	2320      	movs	r3, #32
 800941a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800941e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009422:	2330      	movs	r3, #48	@ 0x30
 8009424:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80095d4 <_vfiprintf_r+0x21c>
 8009428:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800942c:	f04f 0901 	mov.w	r9, #1
 8009430:	4623      	mov	r3, r4
 8009432:	469a      	mov	sl, r3
 8009434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009438:	b10a      	cbz	r2, 800943e <_vfiprintf_r+0x86>
 800943a:	2a25      	cmp	r2, #37	@ 0x25
 800943c:	d1f9      	bne.n	8009432 <_vfiprintf_r+0x7a>
 800943e:	ebba 0b04 	subs.w	fp, sl, r4
 8009442:	d00b      	beq.n	800945c <_vfiprintf_r+0xa4>
 8009444:	465b      	mov	r3, fp
 8009446:	4622      	mov	r2, r4
 8009448:	4629      	mov	r1, r5
 800944a:	4630      	mov	r0, r6
 800944c:	f7ff ffa1 	bl	8009392 <__sfputs_r>
 8009450:	3001      	adds	r0, #1
 8009452:	f000 80a7 	beq.w	80095a4 <_vfiprintf_r+0x1ec>
 8009456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009458:	445a      	add	r2, fp
 800945a:	9209      	str	r2, [sp, #36]	@ 0x24
 800945c:	f89a 3000 	ldrb.w	r3, [sl]
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 809f 	beq.w	80095a4 <_vfiprintf_r+0x1ec>
 8009466:	2300      	movs	r3, #0
 8009468:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800946c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009470:	f10a 0a01 	add.w	sl, sl, #1
 8009474:	9304      	str	r3, [sp, #16]
 8009476:	9307      	str	r3, [sp, #28]
 8009478:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800947c:	931a      	str	r3, [sp, #104]	@ 0x68
 800947e:	4654      	mov	r4, sl
 8009480:	2205      	movs	r2, #5
 8009482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009486:	4853      	ldr	r0, [pc, #332]	@ (80095d4 <_vfiprintf_r+0x21c>)
 8009488:	f7f6 feca 	bl	8000220 <memchr>
 800948c:	9a04      	ldr	r2, [sp, #16]
 800948e:	b9d8      	cbnz	r0, 80094c8 <_vfiprintf_r+0x110>
 8009490:	06d1      	lsls	r1, r2, #27
 8009492:	bf44      	itt	mi
 8009494:	2320      	movmi	r3, #32
 8009496:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800949a:	0713      	lsls	r3, r2, #28
 800949c:	bf44      	itt	mi
 800949e:	232b      	movmi	r3, #43	@ 0x2b
 80094a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094a4:	f89a 3000 	ldrb.w	r3, [sl]
 80094a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80094aa:	d015      	beq.n	80094d8 <_vfiprintf_r+0x120>
 80094ac:	9a07      	ldr	r2, [sp, #28]
 80094ae:	4654      	mov	r4, sl
 80094b0:	2000      	movs	r0, #0
 80094b2:	f04f 0c0a 	mov.w	ip, #10
 80094b6:	4621      	mov	r1, r4
 80094b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094bc:	3b30      	subs	r3, #48	@ 0x30
 80094be:	2b09      	cmp	r3, #9
 80094c0:	d94b      	bls.n	800955a <_vfiprintf_r+0x1a2>
 80094c2:	b1b0      	cbz	r0, 80094f2 <_vfiprintf_r+0x13a>
 80094c4:	9207      	str	r2, [sp, #28]
 80094c6:	e014      	b.n	80094f2 <_vfiprintf_r+0x13a>
 80094c8:	eba0 0308 	sub.w	r3, r0, r8
 80094cc:	fa09 f303 	lsl.w	r3, r9, r3
 80094d0:	4313      	orrs	r3, r2
 80094d2:	9304      	str	r3, [sp, #16]
 80094d4:	46a2      	mov	sl, r4
 80094d6:	e7d2      	b.n	800947e <_vfiprintf_r+0xc6>
 80094d8:	9b03      	ldr	r3, [sp, #12]
 80094da:	1d19      	adds	r1, r3, #4
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	9103      	str	r1, [sp, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	bfbb      	ittet	lt
 80094e4:	425b      	neglt	r3, r3
 80094e6:	f042 0202 	orrlt.w	r2, r2, #2
 80094ea:	9307      	strge	r3, [sp, #28]
 80094ec:	9307      	strlt	r3, [sp, #28]
 80094ee:	bfb8      	it	lt
 80094f0:	9204      	strlt	r2, [sp, #16]
 80094f2:	7823      	ldrb	r3, [r4, #0]
 80094f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80094f6:	d10a      	bne.n	800950e <_vfiprintf_r+0x156>
 80094f8:	7863      	ldrb	r3, [r4, #1]
 80094fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80094fc:	d132      	bne.n	8009564 <_vfiprintf_r+0x1ac>
 80094fe:	9b03      	ldr	r3, [sp, #12]
 8009500:	1d1a      	adds	r2, r3, #4
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	9203      	str	r2, [sp, #12]
 8009506:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800950a:	3402      	adds	r4, #2
 800950c:	9305      	str	r3, [sp, #20]
 800950e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80095e4 <_vfiprintf_r+0x22c>
 8009512:	7821      	ldrb	r1, [r4, #0]
 8009514:	2203      	movs	r2, #3
 8009516:	4650      	mov	r0, sl
 8009518:	f7f6 fe82 	bl	8000220 <memchr>
 800951c:	b138      	cbz	r0, 800952e <_vfiprintf_r+0x176>
 800951e:	9b04      	ldr	r3, [sp, #16]
 8009520:	eba0 000a 	sub.w	r0, r0, sl
 8009524:	2240      	movs	r2, #64	@ 0x40
 8009526:	4082      	lsls	r2, r0
 8009528:	4313      	orrs	r3, r2
 800952a:	3401      	adds	r4, #1
 800952c:	9304      	str	r3, [sp, #16]
 800952e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009532:	4829      	ldr	r0, [pc, #164]	@ (80095d8 <_vfiprintf_r+0x220>)
 8009534:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009538:	2206      	movs	r2, #6
 800953a:	f7f6 fe71 	bl	8000220 <memchr>
 800953e:	2800      	cmp	r0, #0
 8009540:	d03f      	beq.n	80095c2 <_vfiprintf_r+0x20a>
 8009542:	4b26      	ldr	r3, [pc, #152]	@ (80095dc <_vfiprintf_r+0x224>)
 8009544:	bb1b      	cbnz	r3, 800958e <_vfiprintf_r+0x1d6>
 8009546:	9b03      	ldr	r3, [sp, #12]
 8009548:	3307      	adds	r3, #7
 800954a:	f023 0307 	bic.w	r3, r3, #7
 800954e:	3308      	adds	r3, #8
 8009550:	9303      	str	r3, [sp, #12]
 8009552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009554:	443b      	add	r3, r7
 8009556:	9309      	str	r3, [sp, #36]	@ 0x24
 8009558:	e76a      	b.n	8009430 <_vfiprintf_r+0x78>
 800955a:	fb0c 3202 	mla	r2, ip, r2, r3
 800955e:	460c      	mov	r4, r1
 8009560:	2001      	movs	r0, #1
 8009562:	e7a8      	b.n	80094b6 <_vfiprintf_r+0xfe>
 8009564:	2300      	movs	r3, #0
 8009566:	3401      	adds	r4, #1
 8009568:	9305      	str	r3, [sp, #20]
 800956a:	4619      	mov	r1, r3
 800956c:	f04f 0c0a 	mov.w	ip, #10
 8009570:	4620      	mov	r0, r4
 8009572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009576:	3a30      	subs	r2, #48	@ 0x30
 8009578:	2a09      	cmp	r2, #9
 800957a:	d903      	bls.n	8009584 <_vfiprintf_r+0x1cc>
 800957c:	2b00      	cmp	r3, #0
 800957e:	d0c6      	beq.n	800950e <_vfiprintf_r+0x156>
 8009580:	9105      	str	r1, [sp, #20]
 8009582:	e7c4      	b.n	800950e <_vfiprintf_r+0x156>
 8009584:	fb0c 2101 	mla	r1, ip, r1, r2
 8009588:	4604      	mov	r4, r0
 800958a:	2301      	movs	r3, #1
 800958c:	e7f0      	b.n	8009570 <_vfiprintf_r+0x1b8>
 800958e:	ab03      	add	r3, sp, #12
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	462a      	mov	r2, r5
 8009594:	4b12      	ldr	r3, [pc, #72]	@ (80095e0 <_vfiprintf_r+0x228>)
 8009596:	a904      	add	r1, sp, #16
 8009598:	4630      	mov	r0, r6
 800959a:	f3af 8000 	nop.w
 800959e:	4607      	mov	r7, r0
 80095a0:	1c78      	adds	r0, r7, #1
 80095a2:	d1d6      	bne.n	8009552 <_vfiprintf_r+0x19a>
 80095a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095a6:	07d9      	lsls	r1, r3, #31
 80095a8:	d405      	bmi.n	80095b6 <_vfiprintf_r+0x1fe>
 80095aa:	89ab      	ldrh	r3, [r5, #12]
 80095ac:	059a      	lsls	r2, r3, #22
 80095ae:	d402      	bmi.n	80095b6 <_vfiprintf_r+0x1fe>
 80095b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095b2:	f7ff fe8b 	bl	80092cc <__retarget_lock_release_recursive>
 80095b6:	89ab      	ldrh	r3, [r5, #12]
 80095b8:	065b      	lsls	r3, r3, #25
 80095ba:	f53f af1f 	bmi.w	80093fc <_vfiprintf_r+0x44>
 80095be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095c0:	e71e      	b.n	8009400 <_vfiprintf_r+0x48>
 80095c2:	ab03      	add	r3, sp, #12
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	462a      	mov	r2, r5
 80095c8:	4b05      	ldr	r3, [pc, #20]	@ (80095e0 <_vfiprintf_r+0x228>)
 80095ca:	a904      	add	r1, sp, #16
 80095cc:	4630      	mov	r0, r6
 80095ce:	f000 f879 	bl	80096c4 <_printf_i>
 80095d2:	e7e4      	b.n	800959e <_vfiprintf_r+0x1e6>
 80095d4:	08009fb0 	.word	0x08009fb0
 80095d8:	08009fba 	.word	0x08009fba
 80095dc:	00000000 	.word	0x00000000
 80095e0:	08009393 	.word	0x08009393
 80095e4:	08009fb6 	.word	0x08009fb6

080095e8 <_printf_common>:
 80095e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095ec:	4616      	mov	r6, r2
 80095ee:	4698      	mov	r8, r3
 80095f0:	688a      	ldr	r2, [r1, #8]
 80095f2:	690b      	ldr	r3, [r1, #16]
 80095f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80095f8:	4293      	cmp	r3, r2
 80095fa:	bfb8      	it	lt
 80095fc:	4613      	movlt	r3, r2
 80095fe:	6033      	str	r3, [r6, #0]
 8009600:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009604:	4607      	mov	r7, r0
 8009606:	460c      	mov	r4, r1
 8009608:	b10a      	cbz	r2, 800960e <_printf_common+0x26>
 800960a:	3301      	adds	r3, #1
 800960c:	6033      	str	r3, [r6, #0]
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	0699      	lsls	r1, r3, #26
 8009612:	bf42      	ittt	mi
 8009614:	6833      	ldrmi	r3, [r6, #0]
 8009616:	3302      	addmi	r3, #2
 8009618:	6033      	strmi	r3, [r6, #0]
 800961a:	6825      	ldr	r5, [r4, #0]
 800961c:	f015 0506 	ands.w	r5, r5, #6
 8009620:	d106      	bne.n	8009630 <_printf_common+0x48>
 8009622:	f104 0a19 	add.w	sl, r4, #25
 8009626:	68e3      	ldr	r3, [r4, #12]
 8009628:	6832      	ldr	r2, [r6, #0]
 800962a:	1a9b      	subs	r3, r3, r2
 800962c:	42ab      	cmp	r3, r5
 800962e:	dc26      	bgt.n	800967e <_printf_common+0x96>
 8009630:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009634:	6822      	ldr	r2, [r4, #0]
 8009636:	3b00      	subs	r3, #0
 8009638:	bf18      	it	ne
 800963a:	2301      	movne	r3, #1
 800963c:	0692      	lsls	r2, r2, #26
 800963e:	d42b      	bmi.n	8009698 <_printf_common+0xb0>
 8009640:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009644:	4641      	mov	r1, r8
 8009646:	4638      	mov	r0, r7
 8009648:	47c8      	blx	r9
 800964a:	3001      	adds	r0, #1
 800964c:	d01e      	beq.n	800968c <_printf_common+0xa4>
 800964e:	6823      	ldr	r3, [r4, #0]
 8009650:	6922      	ldr	r2, [r4, #16]
 8009652:	f003 0306 	and.w	r3, r3, #6
 8009656:	2b04      	cmp	r3, #4
 8009658:	bf02      	ittt	eq
 800965a:	68e5      	ldreq	r5, [r4, #12]
 800965c:	6833      	ldreq	r3, [r6, #0]
 800965e:	1aed      	subeq	r5, r5, r3
 8009660:	68a3      	ldr	r3, [r4, #8]
 8009662:	bf0c      	ite	eq
 8009664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009668:	2500      	movne	r5, #0
 800966a:	4293      	cmp	r3, r2
 800966c:	bfc4      	itt	gt
 800966e:	1a9b      	subgt	r3, r3, r2
 8009670:	18ed      	addgt	r5, r5, r3
 8009672:	2600      	movs	r6, #0
 8009674:	341a      	adds	r4, #26
 8009676:	42b5      	cmp	r5, r6
 8009678:	d11a      	bne.n	80096b0 <_printf_common+0xc8>
 800967a:	2000      	movs	r0, #0
 800967c:	e008      	b.n	8009690 <_printf_common+0xa8>
 800967e:	2301      	movs	r3, #1
 8009680:	4652      	mov	r2, sl
 8009682:	4641      	mov	r1, r8
 8009684:	4638      	mov	r0, r7
 8009686:	47c8      	blx	r9
 8009688:	3001      	adds	r0, #1
 800968a:	d103      	bne.n	8009694 <_printf_common+0xac>
 800968c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009694:	3501      	adds	r5, #1
 8009696:	e7c6      	b.n	8009626 <_printf_common+0x3e>
 8009698:	18e1      	adds	r1, r4, r3
 800969a:	1c5a      	adds	r2, r3, #1
 800969c:	2030      	movs	r0, #48	@ 0x30
 800969e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80096a2:	4422      	add	r2, r4
 80096a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80096a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80096ac:	3302      	adds	r3, #2
 80096ae:	e7c7      	b.n	8009640 <_printf_common+0x58>
 80096b0:	2301      	movs	r3, #1
 80096b2:	4622      	mov	r2, r4
 80096b4:	4641      	mov	r1, r8
 80096b6:	4638      	mov	r0, r7
 80096b8:	47c8      	blx	r9
 80096ba:	3001      	adds	r0, #1
 80096bc:	d0e6      	beq.n	800968c <_printf_common+0xa4>
 80096be:	3601      	adds	r6, #1
 80096c0:	e7d9      	b.n	8009676 <_printf_common+0x8e>
	...

080096c4 <_printf_i>:
 80096c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096c8:	7e0f      	ldrb	r7, [r1, #24]
 80096ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80096cc:	2f78      	cmp	r7, #120	@ 0x78
 80096ce:	4691      	mov	r9, r2
 80096d0:	4680      	mov	r8, r0
 80096d2:	460c      	mov	r4, r1
 80096d4:	469a      	mov	sl, r3
 80096d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80096da:	d807      	bhi.n	80096ec <_printf_i+0x28>
 80096dc:	2f62      	cmp	r7, #98	@ 0x62
 80096de:	d80a      	bhi.n	80096f6 <_printf_i+0x32>
 80096e0:	2f00      	cmp	r7, #0
 80096e2:	f000 80d2 	beq.w	800988a <_printf_i+0x1c6>
 80096e6:	2f58      	cmp	r7, #88	@ 0x58
 80096e8:	f000 80b9 	beq.w	800985e <_printf_i+0x19a>
 80096ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80096f4:	e03a      	b.n	800976c <_printf_i+0xa8>
 80096f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80096fa:	2b15      	cmp	r3, #21
 80096fc:	d8f6      	bhi.n	80096ec <_printf_i+0x28>
 80096fe:	a101      	add	r1, pc, #4	@ (adr r1, 8009704 <_printf_i+0x40>)
 8009700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009704:	0800975d 	.word	0x0800975d
 8009708:	08009771 	.word	0x08009771
 800970c:	080096ed 	.word	0x080096ed
 8009710:	080096ed 	.word	0x080096ed
 8009714:	080096ed 	.word	0x080096ed
 8009718:	080096ed 	.word	0x080096ed
 800971c:	08009771 	.word	0x08009771
 8009720:	080096ed 	.word	0x080096ed
 8009724:	080096ed 	.word	0x080096ed
 8009728:	080096ed 	.word	0x080096ed
 800972c:	080096ed 	.word	0x080096ed
 8009730:	08009871 	.word	0x08009871
 8009734:	0800979b 	.word	0x0800979b
 8009738:	0800982b 	.word	0x0800982b
 800973c:	080096ed 	.word	0x080096ed
 8009740:	080096ed 	.word	0x080096ed
 8009744:	08009893 	.word	0x08009893
 8009748:	080096ed 	.word	0x080096ed
 800974c:	0800979b 	.word	0x0800979b
 8009750:	080096ed 	.word	0x080096ed
 8009754:	080096ed 	.word	0x080096ed
 8009758:	08009833 	.word	0x08009833
 800975c:	6833      	ldr	r3, [r6, #0]
 800975e:	1d1a      	adds	r2, r3, #4
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6032      	str	r2, [r6, #0]
 8009764:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009768:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800976c:	2301      	movs	r3, #1
 800976e:	e09d      	b.n	80098ac <_printf_i+0x1e8>
 8009770:	6833      	ldr	r3, [r6, #0]
 8009772:	6820      	ldr	r0, [r4, #0]
 8009774:	1d19      	adds	r1, r3, #4
 8009776:	6031      	str	r1, [r6, #0]
 8009778:	0606      	lsls	r6, r0, #24
 800977a:	d501      	bpl.n	8009780 <_printf_i+0xbc>
 800977c:	681d      	ldr	r5, [r3, #0]
 800977e:	e003      	b.n	8009788 <_printf_i+0xc4>
 8009780:	0645      	lsls	r5, r0, #25
 8009782:	d5fb      	bpl.n	800977c <_printf_i+0xb8>
 8009784:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009788:	2d00      	cmp	r5, #0
 800978a:	da03      	bge.n	8009794 <_printf_i+0xd0>
 800978c:	232d      	movs	r3, #45	@ 0x2d
 800978e:	426d      	negs	r5, r5
 8009790:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009794:	4859      	ldr	r0, [pc, #356]	@ (80098fc <_printf_i+0x238>)
 8009796:	230a      	movs	r3, #10
 8009798:	e011      	b.n	80097be <_printf_i+0xfa>
 800979a:	6821      	ldr	r1, [r4, #0]
 800979c:	6833      	ldr	r3, [r6, #0]
 800979e:	0608      	lsls	r0, r1, #24
 80097a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80097a4:	d402      	bmi.n	80097ac <_printf_i+0xe8>
 80097a6:	0649      	lsls	r1, r1, #25
 80097a8:	bf48      	it	mi
 80097aa:	b2ad      	uxthmi	r5, r5
 80097ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80097ae:	4853      	ldr	r0, [pc, #332]	@ (80098fc <_printf_i+0x238>)
 80097b0:	6033      	str	r3, [r6, #0]
 80097b2:	bf14      	ite	ne
 80097b4:	230a      	movne	r3, #10
 80097b6:	2308      	moveq	r3, #8
 80097b8:	2100      	movs	r1, #0
 80097ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80097be:	6866      	ldr	r6, [r4, #4]
 80097c0:	60a6      	str	r6, [r4, #8]
 80097c2:	2e00      	cmp	r6, #0
 80097c4:	bfa2      	ittt	ge
 80097c6:	6821      	ldrge	r1, [r4, #0]
 80097c8:	f021 0104 	bicge.w	r1, r1, #4
 80097cc:	6021      	strge	r1, [r4, #0]
 80097ce:	b90d      	cbnz	r5, 80097d4 <_printf_i+0x110>
 80097d0:	2e00      	cmp	r6, #0
 80097d2:	d04b      	beq.n	800986c <_printf_i+0x1a8>
 80097d4:	4616      	mov	r6, r2
 80097d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80097da:	fb03 5711 	mls	r7, r3, r1, r5
 80097de:	5dc7      	ldrb	r7, [r0, r7]
 80097e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80097e4:	462f      	mov	r7, r5
 80097e6:	42bb      	cmp	r3, r7
 80097e8:	460d      	mov	r5, r1
 80097ea:	d9f4      	bls.n	80097d6 <_printf_i+0x112>
 80097ec:	2b08      	cmp	r3, #8
 80097ee:	d10b      	bne.n	8009808 <_printf_i+0x144>
 80097f0:	6823      	ldr	r3, [r4, #0]
 80097f2:	07df      	lsls	r7, r3, #31
 80097f4:	d508      	bpl.n	8009808 <_printf_i+0x144>
 80097f6:	6923      	ldr	r3, [r4, #16]
 80097f8:	6861      	ldr	r1, [r4, #4]
 80097fa:	4299      	cmp	r1, r3
 80097fc:	bfde      	ittt	le
 80097fe:	2330      	movle	r3, #48	@ 0x30
 8009800:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009804:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009808:	1b92      	subs	r2, r2, r6
 800980a:	6122      	str	r2, [r4, #16]
 800980c:	f8cd a000 	str.w	sl, [sp]
 8009810:	464b      	mov	r3, r9
 8009812:	aa03      	add	r2, sp, #12
 8009814:	4621      	mov	r1, r4
 8009816:	4640      	mov	r0, r8
 8009818:	f7ff fee6 	bl	80095e8 <_printf_common>
 800981c:	3001      	adds	r0, #1
 800981e:	d14a      	bne.n	80098b6 <_printf_i+0x1f2>
 8009820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009824:	b004      	add	sp, #16
 8009826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800982a:	6823      	ldr	r3, [r4, #0]
 800982c:	f043 0320 	orr.w	r3, r3, #32
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	4833      	ldr	r0, [pc, #204]	@ (8009900 <_printf_i+0x23c>)
 8009834:	2778      	movs	r7, #120	@ 0x78
 8009836:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	6831      	ldr	r1, [r6, #0]
 800983e:	061f      	lsls	r7, r3, #24
 8009840:	f851 5b04 	ldr.w	r5, [r1], #4
 8009844:	d402      	bmi.n	800984c <_printf_i+0x188>
 8009846:	065f      	lsls	r7, r3, #25
 8009848:	bf48      	it	mi
 800984a:	b2ad      	uxthmi	r5, r5
 800984c:	6031      	str	r1, [r6, #0]
 800984e:	07d9      	lsls	r1, r3, #31
 8009850:	bf44      	itt	mi
 8009852:	f043 0320 	orrmi.w	r3, r3, #32
 8009856:	6023      	strmi	r3, [r4, #0]
 8009858:	b11d      	cbz	r5, 8009862 <_printf_i+0x19e>
 800985a:	2310      	movs	r3, #16
 800985c:	e7ac      	b.n	80097b8 <_printf_i+0xf4>
 800985e:	4827      	ldr	r0, [pc, #156]	@ (80098fc <_printf_i+0x238>)
 8009860:	e7e9      	b.n	8009836 <_printf_i+0x172>
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	f023 0320 	bic.w	r3, r3, #32
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	e7f6      	b.n	800985a <_printf_i+0x196>
 800986c:	4616      	mov	r6, r2
 800986e:	e7bd      	b.n	80097ec <_printf_i+0x128>
 8009870:	6833      	ldr	r3, [r6, #0]
 8009872:	6825      	ldr	r5, [r4, #0]
 8009874:	6961      	ldr	r1, [r4, #20]
 8009876:	1d18      	adds	r0, r3, #4
 8009878:	6030      	str	r0, [r6, #0]
 800987a:	062e      	lsls	r6, r5, #24
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	d501      	bpl.n	8009884 <_printf_i+0x1c0>
 8009880:	6019      	str	r1, [r3, #0]
 8009882:	e002      	b.n	800988a <_printf_i+0x1c6>
 8009884:	0668      	lsls	r0, r5, #25
 8009886:	d5fb      	bpl.n	8009880 <_printf_i+0x1bc>
 8009888:	8019      	strh	r1, [r3, #0]
 800988a:	2300      	movs	r3, #0
 800988c:	6123      	str	r3, [r4, #16]
 800988e:	4616      	mov	r6, r2
 8009890:	e7bc      	b.n	800980c <_printf_i+0x148>
 8009892:	6833      	ldr	r3, [r6, #0]
 8009894:	1d1a      	adds	r2, r3, #4
 8009896:	6032      	str	r2, [r6, #0]
 8009898:	681e      	ldr	r6, [r3, #0]
 800989a:	6862      	ldr	r2, [r4, #4]
 800989c:	2100      	movs	r1, #0
 800989e:	4630      	mov	r0, r6
 80098a0:	f7f6 fcbe 	bl	8000220 <memchr>
 80098a4:	b108      	cbz	r0, 80098aa <_printf_i+0x1e6>
 80098a6:	1b80      	subs	r0, r0, r6
 80098a8:	6060      	str	r0, [r4, #4]
 80098aa:	6863      	ldr	r3, [r4, #4]
 80098ac:	6123      	str	r3, [r4, #16]
 80098ae:	2300      	movs	r3, #0
 80098b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098b4:	e7aa      	b.n	800980c <_printf_i+0x148>
 80098b6:	6923      	ldr	r3, [r4, #16]
 80098b8:	4632      	mov	r2, r6
 80098ba:	4649      	mov	r1, r9
 80098bc:	4640      	mov	r0, r8
 80098be:	47d0      	blx	sl
 80098c0:	3001      	adds	r0, #1
 80098c2:	d0ad      	beq.n	8009820 <_printf_i+0x15c>
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	079b      	lsls	r3, r3, #30
 80098c8:	d413      	bmi.n	80098f2 <_printf_i+0x22e>
 80098ca:	68e0      	ldr	r0, [r4, #12]
 80098cc:	9b03      	ldr	r3, [sp, #12]
 80098ce:	4298      	cmp	r0, r3
 80098d0:	bfb8      	it	lt
 80098d2:	4618      	movlt	r0, r3
 80098d4:	e7a6      	b.n	8009824 <_printf_i+0x160>
 80098d6:	2301      	movs	r3, #1
 80098d8:	4632      	mov	r2, r6
 80098da:	4649      	mov	r1, r9
 80098dc:	4640      	mov	r0, r8
 80098de:	47d0      	blx	sl
 80098e0:	3001      	adds	r0, #1
 80098e2:	d09d      	beq.n	8009820 <_printf_i+0x15c>
 80098e4:	3501      	adds	r5, #1
 80098e6:	68e3      	ldr	r3, [r4, #12]
 80098e8:	9903      	ldr	r1, [sp, #12]
 80098ea:	1a5b      	subs	r3, r3, r1
 80098ec:	42ab      	cmp	r3, r5
 80098ee:	dcf2      	bgt.n	80098d6 <_printf_i+0x212>
 80098f0:	e7eb      	b.n	80098ca <_printf_i+0x206>
 80098f2:	2500      	movs	r5, #0
 80098f4:	f104 0619 	add.w	r6, r4, #25
 80098f8:	e7f5      	b.n	80098e6 <_printf_i+0x222>
 80098fa:	bf00      	nop
 80098fc:	08009fc1 	.word	0x08009fc1
 8009900:	08009fd2 	.word	0x08009fd2

08009904 <__sflush_r>:
 8009904:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990c:	0716      	lsls	r6, r2, #28
 800990e:	4605      	mov	r5, r0
 8009910:	460c      	mov	r4, r1
 8009912:	d454      	bmi.n	80099be <__sflush_r+0xba>
 8009914:	684b      	ldr	r3, [r1, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	dc02      	bgt.n	8009920 <__sflush_r+0x1c>
 800991a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800991c:	2b00      	cmp	r3, #0
 800991e:	dd48      	ble.n	80099b2 <__sflush_r+0xae>
 8009920:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009922:	2e00      	cmp	r6, #0
 8009924:	d045      	beq.n	80099b2 <__sflush_r+0xae>
 8009926:	2300      	movs	r3, #0
 8009928:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800992c:	682f      	ldr	r7, [r5, #0]
 800992e:	6a21      	ldr	r1, [r4, #32]
 8009930:	602b      	str	r3, [r5, #0]
 8009932:	d030      	beq.n	8009996 <__sflush_r+0x92>
 8009934:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009936:	89a3      	ldrh	r3, [r4, #12]
 8009938:	0759      	lsls	r1, r3, #29
 800993a:	d505      	bpl.n	8009948 <__sflush_r+0x44>
 800993c:	6863      	ldr	r3, [r4, #4]
 800993e:	1ad2      	subs	r2, r2, r3
 8009940:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009942:	b10b      	cbz	r3, 8009948 <__sflush_r+0x44>
 8009944:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009946:	1ad2      	subs	r2, r2, r3
 8009948:	2300      	movs	r3, #0
 800994a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800994c:	6a21      	ldr	r1, [r4, #32]
 800994e:	4628      	mov	r0, r5
 8009950:	47b0      	blx	r6
 8009952:	1c43      	adds	r3, r0, #1
 8009954:	89a3      	ldrh	r3, [r4, #12]
 8009956:	d106      	bne.n	8009966 <__sflush_r+0x62>
 8009958:	6829      	ldr	r1, [r5, #0]
 800995a:	291d      	cmp	r1, #29
 800995c:	d82b      	bhi.n	80099b6 <__sflush_r+0xb2>
 800995e:	4a2a      	ldr	r2, [pc, #168]	@ (8009a08 <__sflush_r+0x104>)
 8009960:	410a      	asrs	r2, r1
 8009962:	07d6      	lsls	r6, r2, #31
 8009964:	d427      	bmi.n	80099b6 <__sflush_r+0xb2>
 8009966:	2200      	movs	r2, #0
 8009968:	6062      	str	r2, [r4, #4]
 800996a:	04d9      	lsls	r1, r3, #19
 800996c:	6922      	ldr	r2, [r4, #16]
 800996e:	6022      	str	r2, [r4, #0]
 8009970:	d504      	bpl.n	800997c <__sflush_r+0x78>
 8009972:	1c42      	adds	r2, r0, #1
 8009974:	d101      	bne.n	800997a <__sflush_r+0x76>
 8009976:	682b      	ldr	r3, [r5, #0]
 8009978:	b903      	cbnz	r3, 800997c <__sflush_r+0x78>
 800997a:	6560      	str	r0, [r4, #84]	@ 0x54
 800997c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800997e:	602f      	str	r7, [r5, #0]
 8009980:	b1b9      	cbz	r1, 80099b2 <__sflush_r+0xae>
 8009982:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009986:	4299      	cmp	r1, r3
 8009988:	d002      	beq.n	8009990 <__sflush_r+0x8c>
 800998a:	4628      	mov	r0, r5
 800998c:	f7ff fca0 	bl	80092d0 <_free_r>
 8009990:	2300      	movs	r3, #0
 8009992:	6363      	str	r3, [r4, #52]	@ 0x34
 8009994:	e00d      	b.n	80099b2 <__sflush_r+0xae>
 8009996:	2301      	movs	r3, #1
 8009998:	4628      	mov	r0, r5
 800999a:	47b0      	blx	r6
 800999c:	4602      	mov	r2, r0
 800999e:	1c50      	adds	r0, r2, #1
 80099a0:	d1c9      	bne.n	8009936 <__sflush_r+0x32>
 80099a2:	682b      	ldr	r3, [r5, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d0c6      	beq.n	8009936 <__sflush_r+0x32>
 80099a8:	2b1d      	cmp	r3, #29
 80099aa:	d001      	beq.n	80099b0 <__sflush_r+0xac>
 80099ac:	2b16      	cmp	r3, #22
 80099ae:	d11e      	bne.n	80099ee <__sflush_r+0xea>
 80099b0:	602f      	str	r7, [r5, #0]
 80099b2:	2000      	movs	r0, #0
 80099b4:	e022      	b.n	80099fc <__sflush_r+0xf8>
 80099b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099ba:	b21b      	sxth	r3, r3
 80099bc:	e01b      	b.n	80099f6 <__sflush_r+0xf2>
 80099be:	690f      	ldr	r7, [r1, #16]
 80099c0:	2f00      	cmp	r7, #0
 80099c2:	d0f6      	beq.n	80099b2 <__sflush_r+0xae>
 80099c4:	0793      	lsls	r3, r2, #30
 80099c6:	680e      	ldr	r6, [r1, #0]
 80099c8:	bf08      	it	eq
 80099ca:	694b      	ldreq	r3, [r1, #20]
 80099cc:	600f      	str	r7, [r1, #0]
 80099ce:	bf18      	it	ne
 80099d0:	2300      	movne	r3, #0
 80099d2:	eba6 0807 	sub.w	r8, r6, r7
 80099d6:	608b      	str	r3, [r1, #8]
 80099d8:	f1b8 0f00 	cmp.w	r8, #0
 80099dc:	dde9      	ble.n	80099b2 <__sflush_r+0xae>
 80099de:	6a21      	ldr	r1, [r4, #32]
 80099e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80099e2:	4643      	mov	r3, r8
 80099e4:	463a      	mov	r2, r7
 80099e6:	4628      	mov	r0, r5
 80099e8:	47b0      	blx	r6
 80099ea:	2800      	cmp	r0, #0
 80099ec:	dc08      	bgt.n	8009a00 <__sflush_r+0xfc>
 80099ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099f6:	81a3      	strh	r3, [r4, #12]
 80099f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a00:	4407      	add	r7, r0
 8009a02:	eba8 0800 	sub.w	r8, r8, r0
 8009a06:	e7e7      	b.n	80099d8 <__sflush_r+0xd4>
 8009a08:	dfbffffe 	.word	0xdfbffffe

08009a0c <_fflush_r>:
 8009a0c:	b538      	push	{r3, r4, r5, lr}
 8009a0e:	690b      	ldr	r3, [r1, #16]
 8009a10:	4605      	mov	r5, r0
 8009a12:	460c      	mov	r4, r1
 8009a14:	b913      	cbnz	r3, 8009a1c <_fflush_r+0x10>
 8009a16:	2500      	movs	r5, #0
 8009a18:	4628      	mov	r0, r5
 8009a1a:	bd38      	pop	{r3, r4, r5, pc}
 8009a1c:	b118      	cbz	r0, 8009a26 <_fflush_r+0x1a>
 8009a1e:	6a03      	ldr	r3, [r0, #32]
 8009a20:	b90b      	cbnz	r3, 8009a26 <_fflush_r+0x1a>
 8009a22:	f7ff fb69 	bl	80090f8 <__sinit>
 8009a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d0f3      	beq.n	8009a16 <_fflush_r+0xa>
 8009a2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a30:	07d0      	lsls	r0, r2, #31
 8009a32:	d404      	bmi.n	8009a3e <_fflush_r+0x32>
 8009a34:	0599      	lsls	r1, r3, #22
 8009a36:	d402      	bmi.n	8009a3e <_fflush_r+0x32>
 8009a38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a3a:	f7ff fc46 	bl	80092ca <__retarget_lock_acquire_recursive>
 8009a3e:	4628      	mov	r0, r5
 8009a40:	4621      	mov	r1, r4
 8009a42:	f7ff ff5f 	bl	8009904 <__sflush_r>
 8009a46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a48:	07da      	lsls	r2, r3, #31
 8009a4a:	4605      	mov	r5, r0
 8009a4c:	d4e4      	bmi.n	8009a18 <_fflush_r+0xc>
 8009a4e:	89a3      	ldrh	r3, [r4, #12]
 8009a50:	059b      	lsls	r3, r3, #22
 8009a52:	d4e1      	bmi.n	8009a18 <_fflush_r+0xc>
 8009a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a56:	f7ff fc39 	bl	80092cc <__retarget_lock_release_recursive>
 8009a5a:	e7dd      	b.n	8009a18 <_fflush_r+0xc>

08009a5c <__sread>:
 8009a5c:	b510      	push	{r4, lr}
 8009a5e:	460c      	mov	r4, r1
 8009a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a64:	f000 f978 	bl	8009d58 <_read_r>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	bfab      	itete	ge
 8009a6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a6e:	89a3      	ldrhlt	r3, [r4, #12]
 8009a70:	181b      	addge	r3, r3, r0
 8009a72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a76:	bfac      	ite	ge
 8009a78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a7a:	81a3      	strhlt	r3, [r4, #12]
 8009a7c:	bd10      	pop	{r4, pc}

08009a7e <__swrite>:
 8009a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a82:	461f      	mov	r7, r3
 8009a84:	898b      	ldrh	r3, [r1, #12]
 8009a86:	05db      	lsls	r3, r3, #23
 8009a88:	4605      	mov	r5, r0
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	4616      	mov	r6, r2
 8009a8e:	d505      	bpl.n	8009a9c <__swrite+0x1e>
 8009a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a94:	2302      	movs	r3, #2
 8009a96:	2200      	movs	r2, #0
 8009a98:	f000 f94c 	bl	8009d34 <_lseek_r>
 8009a9c:	89a3      	ldrh	r3, [r4, #12]
 8009a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009aa6:	81a3      	strh	r3, [r4, #12]
 8009aa8:	4632      	mov	r2, r6
 8009aaa:	463b      	mov	r3, r7
 8009aac:	4628      	mov	r0, r5
 8009aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab2:	f000 b963 	b.w	8009d7c <_write_r>

08009ab6 <__sseek>:
 8009ab6:	b510      	push	{r4, lr}
 8009ab8:	460c      	mov	r4, r1
 8009aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009abe:	f000 f939 	bl	8009d34 <_lseek_r>
 8009ac2:	1c43      	adds	r3, r0, #1
 8009ac4:	89a3      	ldrh	r3, [r4, #12]
 8009ac6:	bf15      	itete	ne
 8009ac8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009aca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009ace:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009ad2:	81a3      	strheq	r3, [r4, #12]
 8009ad4:	bf18      	it	ne
 8009ad6:	81a3      	strhne	r3, [r4, #12]
 8009ad8:	bd10      	pop	{r4, pc}

08009ada <__sclose>:
 8009ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ade:	f000 b8f7 	b.w	8009cd0 <_close_r>

08009ae2 <__swbuf_r>:
 8009ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae4:	460e      	mov	r6, r1
 8009ae6:	4614      	mov	r4, r2
 8009ae8:	4605      	mov	r5, r0
 8009aea:	b118      	cbz	r0, 8009af4 <__swbuf_r+0x12>
 8009aec:	6a03      	ldr	r3, [r0, #32]
 8009aee:	b90b      	cbnz	r3, 8009af4 <__swbuf_r+0x12>
 8009af0:	f7ff fb02 	bl	80090f8 <__sinit>
 8009af4:	69a3      	ldr	r3, [r4, #24]
 8009af6:	60a3      	str	r3, [r4, #8]
 8009af8:	89a3      	ldrh	r3, [r4, #12]
 8009afa:	071a      	lsls	r2, r3, #28
 8009afc:	d501      	bpl.n	8009b02 <__swbuf_r+0x20>
 8009afe:	6923      	ldr	r3, [r4, #16]
 8009b00:	b943      	cbnz	r3, 8009b14 <__swbuf_r+0x32>
 8009b02:	4621      	mov	r1, r4
 8009b04:	4628      	mov	r0, r5
 8009b06:	f000 f82b 	bl	8009b60 <__swsetup_r>
 8009b0a:	b118      	cbz	r0, 8009b14 <__swbuf_r+0x32>
 8009b0c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009b10:	4638      	mov	r0, r7
 8009b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b14:	6823      	ldr	r3, [r4, #0]
 8009b16:	6922      	ldr	r2, [r4, #16]
 8009b18:	1a98      	subs	r0, r3, r2
 8009b1a:	6963      	ldr	r3, [r4, #20]
 8009b1c:	b2f6      	uxtb	r6, r6
 8009b1e:	4283      	cmp	r3, r0
 8009b20:	4637      	mov	r7, r6
 8009b22:	dc05      	bgt.n	8009b30 <__swbuf_r+0x4e>
 8009b24:	4621      	mov	r1, r4
 8009b26:	4628      	mov	r0, r5
 8009b28:	f7ff ff70 	bl	8009a0c <_fflush_r>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d1ed      	bne.n	8009b0c <__swbuf_r+0x2a>
 8009b30:	68a3      	ldr	r3, [r4, #8]
 8009b32:	3b01      	subs	r3, #1
 8009b34:	60a3      	str	r3, [r4, #8]
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	1c5a      	adds	r2, r3, #1
 8009b3a:	6022      	str	r2, [r4, #0]
 8009b3c:	701e      	strb	r6, [r3, #0]
 8009b3e:	6962      	ldr	r2, [r4, #20]
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d004      	beq.n	8009b50 <__swbuf_r+0x6e>
 8009b46:	89a3      	ldrh	r3, [r4, #12]
 8009b48:	07db      	lsls	r3, r3, #31
 8009b4a:	d5e1      	bpl.n	8009b10 <__swbuf_r+0x2e>
 8009b4c:	2e0a      	cmp	r6, #10
 8009b4e:	d1df      	bne.n	8009b10 <__swbuf_r+0x2e>
 8009b50:	4621      	mov	r1, r4
 8009b52:	4628      	mov	r0, r5
 8009b54:	f7ff ff5a 	bl	8009a0c <_fflush_r>
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d0d9      	beq.n	8009b10 <__swbuf_r+0x2e>
 8009b5c:	e7d6      	b.n	8009b0c <__swbuf_r+0x2a>
	...

08009b60 <__swsetup_r>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4b29      	ldr	r3, [pc, #164]	@ (8009c08 <__swsetup_r+0xa8>)
 8009b64:	4605      	mov	r5, r0
 8009b66:	6818      	ldr	r0, [r3, #0]
 8009b68:	460c      	mov	r4, r1
 8009b6a:	b118      	cbz	r0, 8009b74 <__swsetup_r+0x14>
 8009b6c:	6a03      	ldr	r3, [r0, #32]
 8009b6e:	b90b      	cbnz	r3, 8009b74 <__swsetup_r+0x14>
 8009b70:	f7ff fac2 	bl	80090f8 <__sinit>
 8009b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b78:	0719      	lsls	r1, r3, #28
 8009b7a:	d422      	bmi.n	8009bc2 <__swsetup_r+0x62>
 8009b7c:	06da      	lsls	r2, r3, #27
 8009b7e:	d407      	bmi.n	8009b90 <__swsetup_r+0x30>
 8009b80:	2209      	movs	r2, #9
 8009b82:	602a      	str	r2, [r5, #0]
 8009b84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b88:	81a3      	strh	r3, [r4, #12]
 8009b8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b8e:	e033      	b.n	8009bf8 <__swsetup_r+0x98>
 8009b90:	0758      	lsls	r0, r3, #29
 8009b92:	d512      	bpl.n	8009bba <__swsetup_r+0x5a>
 8009b94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b96:	b141      	cbz	r1, 8009baa <__swsetup_r+0x4a>
 8009b98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b9c:	4299      	cmp	r1, r3
 8009b9e:	d002      	beq.n	8009ba6 <__swsetup_r+0x46>
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	f7ff fb95 	bl	80092d0 <_free_r>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009baa:	89a3      	ldrh	r3, [r4, #12]
 8009bac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009bb0:	81a3      	strh	r3, [r4, #12]
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	6063      	str	r3, [r4, #4]
 8009bb6:	6923      	ldr	r3, [r4, #16]
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	f043 0308 	orr.w	r3, r3, #8
 8009bc0:	81a3      	strh	r3, [r4, #12]
 8009bc2:	6923      	ldr	r3, [r4, #16]
 8009bc4:	b94b      	cbnz	r3, 8009bda <__swsetup_r+0x7a>
 8009bc6:	89a3      	ldrh	r3, [r4, #12]
 8009bc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bd0:	d003      	beq.n	8009bda <__swsetup_r+0x7a>
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	f000 f83f 	bl	8009c58 <__smakebuf_r>
 8009bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bde:	f013 0201 	ands.w	r2, r3, #1
 8009be2:	d00a      	beq.n	8009bfa <__swsetup_r+0x9a>
 8009be4:	2200      	movs	r2, #0
 8009be6:	60a2      	str	r2, [r4, #8]
 8009be8:	6962      	ldr	r2, [r4, #20]
 8009bea:	4252      	negs	r2, r2
 8009bec:	61a2      	str	r2, [r4, #24]
 8009bee:	6922      	ldr	r2, [r4, #16]
 8009bf0:	b942      	cbnz	r2, 8009c04 <__swsetup_r+0xa4>
 8009bf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009bf6:	d1c5      	bne.n	8009b84 <__swsetup_r+0x24>
 8009bf8:	bd38      	pop	{r3, r4, r5, pc}
 8009bfa:	0799      	lsls	r1, r3, #30
 8009bfc:	bf58      	it	pl
 8009bfe:	6962      	ldrpl	r2, [r4, #20]
 8009c00:	60a2      	str	r2, [r4, #8]
 8009c02:	e7f4      	b.n	8009bee <__swsetup_r+0x8e>
 8009c04:	2000      	movs	r0, #0
 8009c06:	e7f7      	b.n	8009bf8 <__swsetup_r+0x98>
 8009c08:	2000001c 	.word	0x2000001c

08009c0c <__swhatbuf_r>:
 8009c0c:	b570      	push	{r4, r5, r6, lr}
 8009c0e:	460c      	mov	r4, r1
 8009c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c14:	2900      	cmp	r1, #0
 8009c16:	b096      	sub	sp, #88	@ 0x58
 8009c18:	4615      	mov	r5, r2
 8009c1a:	461e      	mov	r6, r3
 8009c1c:	da0d      	bge.n	8009c3a <__swhatbuf_r+0x2e>
 8009c1e:	89a3      	ldrh	r3, [r4, #12]
 8009c20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c24:	f04f 0100 	mov.w	r1, #0
 8009c28:	bf14      	ite	ne
 8009c2a:	2340      	movne	r3, #64	@ 0x40
 8009c2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c30:	2000      	movs	r0, #0
 8009c32:	6031      	str	r1, [r6, #0]
 8009c34:	602b      	str	r3, [r5, #0]
 8009c36:	b016      	add	sp, #88	@ 0x58
 8009c38:	bd70      	pop	{r4, r5, r6, pc}
 8009c3a:	466a      	mov	r2, sp
 8009c3c:	f000 f858 	bl	8009cf0 <_fstat_r>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	dbec      	blt.n	8009c1e <__swhatbuf_r+0x12>
 8009c44:	9901      	ldr	r1, [sp, #4]
 8009c46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c4e:	4259      	negs	r1, r3
 8009c50:	4159      	adcs	r1, r3
 8009c52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c56:	e7eb      	b.n	8009c30 <__swhatbuf_r+0x24>

08009c58 <__smakebuf_r>:
 8009c58:	898b      	ldrh	r3, [r1, #12]
 8009c5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c5c:	079d      	lsls	r5, r3, #30
 8009c5e:	4606      	mov	r6, r0
 8009c60:	460c      	mov	r4, r1
 8009c62:	d507      	bpl.n	8009c74 <__smakebuf_r+0x1c>
 8009c64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	6123      	str	r3, [r4, #16]
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	6163      	str	r3, [r4, #20]
 8009c70:	b003      	add	sp, #12
 8009c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c74:	ab01      	add	r3, sp, #4
 8009c76:	466a      	mov	r2, sp
 8009c78:	f7ff ffc8 	bl	8009c0c <__swhatbuf_r>
 8009c7c:	9f00      	ldr	r7, [sp, #0]
 8009c7e:	4605      	mov	r5, r0
 8009c80:	4639      	mov	r1, r7
 8009c82:	4630      	mov	r0, r6
 8009c84:	f7ff f920 	bl	8008ec8 <_malloc_r>
 8009c88:	b948      	cbnz	r0, 8009c9e <__smakebuf_r+0x46>
 8009c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c8e:	059a      	lsls	r2, r3, #22
 8009c90:	d4ee      	bmi.n	8009c70 <__smakebuf_r+0x18>
 8009c92:	f023 0303 	bic.w	r3, r3, #3
 8009c96:	f043 0302 	orr.w	r3, r3, #2
 8009c9a:	81a3      	strh	r3, [r4, #12]
 8009c9c:	e7e2      	b.n	8009c64 <__smakebuf_r+0xc>
 8009c9e:	89a3      	ldrh	r3, [r4, #12]
 8009ca0:	6020      	str	r0, [r4, #0]
 8009ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ca6:	81a3      	strh	r3, [r4, #12]
 8009ca8:	9b01      	ldr	r3, [sp, #4]
 8009caa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009cae:	b15b      	cbz	r3, 8009cc8 <__smakebuf_r+0x70>
 8009cb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f000 f82d 	bl	8009d14 <_isatty_r>
 8009cba:	b128      	cbz	r0, 8009cc8 <__smakebuf_r+0x70>
 8009cbc:	89a3      	ldrh	r3, [r4, #12]
 8009cbe:	f023 0303 	bic.w	r3, r3, #3
 8009cc2:	f043 0301 	orr.w	r3, r3, #1
 8009cc6:	81a3      	strh	r3, [r4, #12]
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	431d      	orrs	r5, r3
 8009ccc:	81a5      	strh	r5, [r4, #12]
 8009cce:	e7cf      	b.n	8009c70 <__smakebuf_r+0x18>

08009cd0 <_close_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	4d06      	ldr	r5, [pc, #24]	@ (8009cec <_close_r+0x1c>)
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	4608      	mov	r0, r1
 8009cda:	602b      	str	r3, [r5, #0]
 8009cdc:	f7f7 fb5b 	bl	8001396 <_close>
 8009ce0:	1c43      	adds	r3, r0, #1
 8009ce2:	d102      	bne.n	8009cea <_close_r+0x1a>
 8009ce4:	682b      	ldr	r3, [r5, #0]
 8009ce6:	b103      	cbz	r3, 8009cea <_close_r+0x1a>
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	bd38      	pop	{r3, r4, r5, pc}
 8009cec:	20001474 	.word	0x20001474

08009cf0 <_fstat_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4d07      	ldr	r5, [pc, #28]	@ (8009d10 <_fstat_r+0x20>)
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	4608      	mov	r0, r1
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	602b      	str	r3, [r5, #0]
 8009cfe:	f7f7 fb56 	bl	80013ae <_fstat>
 8009d02:	1c43      	adds	r3, r0, #1
 8009d04:	d102      	bne.n	8009d0c <_fstat_r+0x1c>
 8009d06:	682b      	ldr	r3, [r5, #0]
 8009d08:	b103      	cbz	r3, 8009d0c <_fstat_r+0x1c>
 8009d0a:	6023      	str	r3, [r4, #0]
 8009d0c:	bd38      	pop	{r3, r4, r5, pc}
 8009d0e:	bf00      	nop
 8009d10:	20001474 	.word	0x20001474

08009d14 <_isatty_r>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	4d06      	ldr	r5, [pc, #24]	@ (8009d30 <_isatty_r+0x1c>)
 8009d18:	2300      	movs	r3, #0
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	4608      	mov	r0, r1
 8009d1e:	602b      	str	r3, [r5, #0]
 8009d20:	f7f7 fb55 	bl	80013ce <_isatty>
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	d102      	bne.n	8009d2e <_isatty_r+0x1a>
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	b103      	cbz	r3, 8009d2e <_isatty_r+0x1a>
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}
 8009d30:	20001474 	.word	0x20001474

08009d34 <_lseek_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	4d07      	ldr	r5, [pc, #28]	@ (8009d54 <_lseek_r+0x20>)
 8009d38:	4604      	mov	r4, r0
 8009d3a:	4608      	mov	r0, r1
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	2200      	movs	r2, #0
 8009d40:	602a      	str	r2, [r5, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	f7f7 fb4e 	bl	80013e4 <_lseek>
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	d102      	bne.n	8009d52 <_lseek_r+0x1e>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	b103      	cbz	r3, 8009d52 <_lseek_r+0x1e>
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	bd38      	pop	{r3, r4, r5, pc}
 8009d54:	20001474 	.word	0x20001474

08009d58 <_read_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	4d07      	ldr	r5, [pc, #28]	@ (8009d78 <_read_r+0x20>)
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	4608      	mov	r0, r1
 8009d60:	4611      	mov	r1, r2
 8009d62:	2200      	movs	r2, #0
 8009d64:	602a      	str	r2, [r5, #0]
 8009d66:	461a      	mov	r2, r3
 8009d68:	f7f7 fadc 	bl	8001324 <_read>
 8009d6c:	1c43      	adds	r3, r0, #1
 8009d6e:	d102      	bne.n	8009d76 <_read_r+0x1e>
 8009d70:	682b      	ldr	r3, [r5, #0]
 8009d72:	b103      	cbz	r3, 8009d76 <_read_r+0x1e>
 8009d74:	6023      	str	r3, [r4, #0]
 8009d76:	bd38      	pop	{r3, r4, r5, pc}
 8009d78:	20001474 	.word	0x20001474

08009d7c <_write_r>:
 8009d7c:	b538      	push	{r3, r4, r5, lr}
 8009d7e:	4d07      	ldr	r5, [pc, #28]	@ (8009d9c <_write_r+0x20>)
 8009d80:	4604      	mov	r4, r0
 8009d82:	4608      	mov	r0, r1
 8009d84:	4611      	mov	r1, r2
 8009d86:	2200      	movs	r2, #0
 8009d88:	602a      	str	r2, [r5, #0]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	f7f7 fae7 	bl	800135e <_write>
 8009d90:	1c43      	adds	r3, r0, #1
 8009d92:	d102      	bne.n	8009d9a <_write_r+0x1e>
 8009d94:	682b      	ldr	r3, [r5, #0]
 8009d96:	b103      	cbz	r3, 8009d9a <_write_r+0x1e>
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	bd38      	pop	{r3, r4, r5, pc}
 8009d9c:	20001474 	.word	0x20001474

08009da0 <_init>:
 8009da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da2:	bf00      	nop
 8009da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009da6:	bc08      	pop	{r3}
 8009da8:	469e      	mov	lr, r3
 8009daa:	4770      	bx	lr

08009dac <_fini>:
 8009dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dae:	bf00      	nop
 8009db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009db2:	bc08      	pop	{r3}
 8009db4:	469e      	mov	lr, r3
 8009db6:	4770      	bx	lr
