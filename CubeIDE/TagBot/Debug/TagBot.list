
TagBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b934  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800bb14  0800bb14  0000cb14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdbc  0800bdbc  0000d06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdbc  0800bdbc  0000cdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdc4  0800bdc4  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdc4  0800bdc4  0000cdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bdc8  0800bdc8  0000cdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800bdcc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014ac  2000006c  0800be38  0000d06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001518  0800be38  0000d518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002701e  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005827  00000000  00000000  000340ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002270  00000000  00000000  000398e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001aad  00000000  00000000  0003bb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f13  00000000  00000000  0003d605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a3e9  00000000  00000000  00063518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec344  00000000  00000000  0008d901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179c45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000990c  00000000  00000000  00179c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00183594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bafc 	.word	0x0800bafc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	0800bafc 	.word	0x0800bafc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ADXL343_Init>:
#define TAP_LATENT 0xC8 											// taping latency 250ms


//Function to initialize the accelerometer

int ADXL343_Init(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	uint8_t id = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71fb      	strb	r3, [r7, #7]

	// read the id of peripherique and check if is equal 0xE5
	ADXL343_ReadRegister(ADXL343_REG_DEVID, &id, 1);
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	2201      	movs	r2, #1
 80005be:	4619      	mov	r1, r3
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 f857 	bl	8000674 <ADXL343_ReadRegister>

	if (id != 0xE5) {
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2be5      	cmp	r3, #229	@ 0xe5
 80005ca:	d006      	beq.n	80005da <ADXL343_Init+0x2a>

		printf("ADXL343 no detected ! ID: %02X\r\n", id);
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	4619      	mov	r1, r3
 80005d0:	4815      	ldr	r0, [pc, #84]	@ (8000628 <ADXL343_Init+0x78>)
 80005d2:	f00a fc11 	bl	800adf8 <iprintf>
		return 1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	e022      	b.n	8000620 <ADXL343_Init+0x70>
	}
	/* Tasks creations */
	ADXL343_TaskCreate(NULL);
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 f8ba 	bl	8000754 <ADXL343_TaskCreate>

	/* Configuration of registers */

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2110      	movs	r1, #16
 80005e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e8:	f003 fca4 	bl	8003f34 <HAL_GPIO_WritePin>
	ADXL343_WriteRegister(ADXL343_REG_POWER_CTL, 0x04); 			// init the power control (sleep)
 80005ec:	2104      	movs	r1, #4
 80005ee:	202d      	movs	r0, #45	@ 0x2d
 80005f0:	f000 f86e 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_DATA_FORMAT, 0x08);  			// establish format for data :full resolution and ±2g ->0x08, 16g ->0x0B
 80005f4:	2108      	movs	r1, #8
 80005f6:	2031      	movs	r0, #49	@ 0x31
 80005f8:	f000 f86a 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_BW_RATE, 0X0B);
 80005fc:	210b      	movs	r1, #11
 80005fe:	202c      	movs	r0, #44	@ 0x2c
 8000600:	f000 f866 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_POWER_CTL, 0x08);  			// measurement mode of power control (active)
 8000604:	2108      	movs	r1, #8
 8000606:	202d      	movs	r0, #45	@ 0x2d
 8000608:	f000 f862 	bl	80006d0 <ADXL343_WriteRegister>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); 			// Desactiver NSS
 800060c:	2201      	movs	r2, #1
 800060e:	2110      	movs	r1, #16
 8000610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000614:	f003 fc8e 	bl	8003f34 <HAL_GPIO_WritePin>


	printf("Initialization done\r\n");
 8000618:	4804      	ldr	r0, [pc, #16]	@ (800062c <ADXL343_Init+0x7c>)
 800061a:	f00a fc55 	bl	800aec8 <puts>
	return 0;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	0800bb14 	.word	0x0800bb14
 800062c:	0800bb38 	.word	0x0800bb38

08000630 <ADXL343_Configure>:

//Function to configure the accelerometer
void ADXL343_Configure(void){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	ADXL343_WriteRegister(ADXL343_REG_THRESH_TAP, TAP_THRESHOLD);  	// Set tap threshold : 2g ou 16g
 8000634:	21ff      	movs	r1, #255	@ 0xff
 8000636:	201d      	movs	r0, #29
 8000638:	f000 f84a 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_DUR, TAP_DURATION);         	// Set tap duration : 10ms
 800063c:	2110      	movs	r1, #16
 800063e:	2021      	movs	r0, #33	@ 0x21
 8000640:	f000 f846 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_LATENT, TAP_LATENT);
 8000644:	21c8      	movs	r1, #200	@ 0xc8
 8000646:	2022      	movs	r0, #34	@ 0x22
 8000648:	f000 f842 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_TAP_AXES, 0x07);				// Enable axe X Y Z for tap
 800064c:	2107      	movs	r1, #7
 800064e:	202a      	movs	r0, #42	@ 0x2a
 8000650:	f000 f83e 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_INT_ENABLE, 0x40);			// Enable interruption for single tap
 8000654:	2140      	movs	r1, #64	@ 0x40
 8000656:	202e      	movs	r0, #46	@ 0x2e
 8000658:	f000 f83a 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_INT_MAP, 0x40);				// Enable interruption on pin INT1
 800065c:	2140      	movs	r1, #64	@ 0x40
 800065e:	202f      	movs	r0, #47	@ 0x2f
 8000660:	f000 f836 	bl	80006d0 <ADXL343_WriteRegister>
	printf("Configuration done\r\n");
 8000664:	4802      	ldr	r0, [pc, #8]	@ (8000670 <ADXL343_Configure+0x40>)
 8000666:	f00a fc2f 	bl	800aec8 <puts>

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	0800bb50 	.word	0x0800bb50

08000674 <ADXL343_ReadRegister>:

// Function to read from a register
void ADXL343_ReadRegister(uint8_t reg, int8_t* rx_data, size_t length) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	73fb      	strb	r3, [r7, #15]

	uint8_t tx_data = reg | 0x80; // MSB = 1 pour la lecture
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000688:	b2db      	uxtb	r3, r3
 800068a:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); 			// Activer NSS
 800068c:	2200      	movs	r2, #0
 800068e:	2110      	movs	r1, #16
 8000690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000694:	f003 fc4e 	bl	8003f34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &tx_data, 1, HAL_MAX_DELAY); 			// Envoyer l'adresse
 8000698:	f107 0117 	add.w	r1, r7, #23
 800069c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006a0:	2201      	movs	r2, #1
 80006a2:	480a      	ldr	r0, [pc, #40]	@ (80006cc <ADXL343_ReadRegister+0x58>)
 80006a4:	f004 fe3b 	bl	800531e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)rx_data, 1, HAL_MAX_DELAY);  	// Lire la donnée
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006ac:	2201      	movs	r2, #1
 80006ae:	68b9      	ldr	r1, [r7, #8]
 80006b0:	4806      	ldr	r0, [pc, #24]	@ (80006cc <ADXL343_ReadRegister+0x58>)
 80006b2:	f004 ffaa 	bl	800560a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   			// Désactiver NSS
 80006b6:	2201      	movs	r2, #1
 80006b8:	2110      	movs	r1, #16
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006be:	f003 fc39 	bl	8003f34 <HAL_GPIO_WritePin>


	//HAL_SPI_TransmitReceive(hspi, pTxData, pRxData, Size, Timeout); // a utiliser quand NSS hardware ioc enable
}
 80006c2:	bf00      	nop
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200002a0 	.word	0x200002a0

080006d0 <ADXL343_WriteRegister>:


//Function to write in the register
void ADXL343_WriteRegister(uint8_t reg, uint8_t data) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = reg;	//register
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	733b      	strb	r3, [r7, #12]
	buffer[1] = data;	//data
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); 			// enable NSS (PA4)
 80006e8:	2200      	movs	r2, #0
 80006ea:	2110      	movs	r1, #16
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f0:	f003 fc20 	bl	8003f34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, buffer, 2, HAL_MAX_DELAY); 			// Send data thanks to SPI
 80006f4:	f107 010c 	add.w	r1, r7, #12
 80006f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006fc:	2202      	movs	r2, #2
 80006fe:	4806      	ldr	r0, [pc, #24]	@ (8000718 <ADXL343_WriteRegister+0x48>)
 8000700:	f004 fe0d 	bl	800531e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); 			// disable NSS (PA4)
 8000704:	2201      	movs	r2, #1
 8000706:	2110      	movs	r1, #16
 8000708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070c:	f003 fc12 	bl	8003f34 <HAL_GPIO_WritePin>
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200002a0 	.word	0x200002a0

0800071c <ADXL343_Task>:

	printf("calibration done offset x : %i, y : %i, z :%i\r\n", offsetx, offsety, offsetz);
}

void ADXL343_Task(void*unused )
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		int8_t tap_status;
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); //Renvoie la valeur du registre int_source
 8000724:	f107 030f 	add.w	r3, r7, #15
 8000728:	2201      	movs	r2, #1
 800072a:	4619      	mov	r1, r3
 800072c:	2030      	movs	r0, #48	@ 0x30
 800072e:	f7ff ffa1 	bl	8000674 <ADXL343_ReadRegister>

		if (tap_status & (1<<6)) {  // Tap for single tap
 8000732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800073c:	2b00      	cmp	r3, #0
 800073e:	d0f1      	beq.n	8000724 <ADXL343_Task+0x8>
			printf("Tap detected by Task!\r\n");
 8000740:	4803      	ldr	r0, [pc, #12]	@ (8000750 <ADXL343_Task+0x34>)
 8000742:	f00a fbc1 	bl	800aec8 <puts>
			/******* Ajouter la tache pour changer d'état********/
			vTaskDelay(1);
 8000746:	2001      	movs	r0, #1
 8000748:	f008 fd1a 	bl	8009180 <vTaskDelay>
	{
 800074c:	e7ea      	b.n	8000724 <ADXL343_Task+0x8>
 800074e:	bf00      	nop
 8000750:	0800bbb8 	.word	0x0800bbb8

08000754 <ADXL343_TaskCreate>:


}

void ADXL343_TaskCreate(void * unused)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af02      	add	r7, sp, #8
 800075a:	6078      	str	r0, [r7, #4]
	xTaskCreate(ADXL343_Task, "tache ADXL343", 128, NULL, 256, NULL);
 800075c:	2300      	movs	r3, #0
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2300      	movs	r3, #0
 8000768:	2280      	movs	r2, #128	@ 0x80
 800076a:	4904      	ldr	r1, [pc, #16]	@ (800077c <ADXL343_TaskCreate+0x28>)
 800076c:	4804      	ldr	r0, [pc, #16]	@ (8000780 <ADXL343_TaskCreate+0x2c>)
 800076e:	f008 fbbb 	bl	8008ee8 <xTaskCreate>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	0800bbd0 	.word	0x0800bbd0
 8000780:	0800071d 	.word	0x0800071d

08000784 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	@ 0x30
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800078a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2220      	movs	r2, #32
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f00a fb9b 	bl	800aed8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007a2:	4b3a      	ldr	r3, [pc, #232]	@ (800088c <MX_ADC1_Init+0x108>)
 80007a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007aa:	4b38      	ldr	r3, [pc, #224]	@ (800088c <MX_ADC1_Init+0x108>)
 80007ac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b2:	4b36      	ldr	r3, [pc, #216]	@ (800088c <MX_ADC1_Init+0x108>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b8:	4b34      	ldr	r3, [pc, #208]	@ (800088c <MX_ADC1_Init+0x108>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007be:	4b33      	ldr	r3, [pc, #204]	@ (800088c <MX_ADC1_Init+0x108>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007c4:	4b31      	ldr	r3, [pc, #196]	@ (800088c <MX_ADC1_Init+0x108>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ca:	4b30      	ldr	r3, [pc, #192]	@ (800088c <MX_ADC1_Init+0x108>)
 80007cc:	2204      	movs	r2, #4
 80007ce:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007d0:	4b2e      	ldr	r3, [pc, #184]	@ (800088c <MX_ADC1_Init+0x108>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d6:	4b2d      	ldr	r3, [pc, #180]	@ (800088c <MX_ADC1_Init+0x108>)
 80007d8:	2200      	movs	r2, #0
 80007da:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80007dc:	4b2b      	ldr	r3, [pc, #172]	@ (800088c <MX_ADC1_Init+0x108>)
 80007de:	2202      	movs	r2, #2
 80007e0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e2:	4b2a      	ldr	r3, [pc, #168]	@ (800088c <MX_ADC1_Init+0x108>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80007ea:	4b28      	ldr	r3, [pc, #160]	@ (800088c <MX_ADC1_Init+0x108>)
 80007ec:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80007f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007f2:	4b26      	ldr	r3, [pc, #152]	@ (800088c <MX_ADC1_Init+0x108>)
 80007f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007fa:	4b24      	ldr	r3, [pc, #144]	@ (800088c <MX_ADC1_Init+0x108>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000802:	4b22      	ldr	r3, [pc, #136]	@ (800088c <MX_ADC1_Init+0x108>)
 8000804:	2200      	movs	r2, #0
 8000806:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000808:	4b20      	ldr	r3, [pc, #128]	@ (800088c <MX_ADC1_Init+0x108>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000810:	481e      	ldr	r0, [pc, #120]	@ (800088c <MX_ADC1_Init+0x108>)
 8000812:	f001 fe6b 	bl	80024ec <HAL_ADC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800081c:	f000 fd42 	bl	80012a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000828:	4619      	mov	r1, r3
 800082a:	4818      	ldr	r0, [pc, #96]	@ (800088c <MX_ADC1_Init+0x108>)
 800082c:	f002 fdda 	bl	80033e4 <HAL_ADCEx_MultiModeConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000836:	f000 fd35 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <MX_ADC1_Init+0x10c>)
 800083c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800083e:	2306      	movs	r3, #6
 8000840:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000842:	2304      	movs	r3, #4
 8000844:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000846:	237f      	movs	r3, #127	@ 0x7f
 8000848:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800084a:	2304      	movs	r3, #4
 800084c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	480d      	ldr	r0, [pc, #52]	@ (800088c <MX_ADC1_Init+0x108>)
 8000858:	f002 f894 	bl	8002984 <HAL_ADC_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000862:	f000 fd1f 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <MX_ADC1_Init+0x110>)
 8000868:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800086a:	230c      	movs	r3, #12
 800086c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4619      	mov	r1, r3
 8000872:	4806      	ldr	r0, [pc, #24]	@ (800088c <MX_ADC1_Init+0x108>)
 8000874:	f002 f886 	bl	8002984 <HAL_ADC_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800087e:	f000 fd11 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	3730      	adds	r7, #48	@ 0x30
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000088 	.word	0x20000088
 8000890:	14f00020 	.word	0x14f00020
 8000894:	2e300800 	.word	0x2e300800

08000898 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089e:	463b      	mov	r3, r7
 80008a0:	2220      	movs	r2, #32
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f00a fb17 	bl	800aed8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008aa:	4b33      	ldr	r3, [pc, #204]	@ (8000978 <MX_ADC2_Init+0xe0>)
 80008ac:	4a33      	ldr	r2, [pc, #204]	@ (800097c <MX_ADC2_Init+0xe4>)
 80008ae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008b0:	4b31      	ldr	r3, [pc, #196]	@ (8000978 <MX_ADC2_Init+0xe0>)
 80008b2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008b6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008b8:	4b2f      	ldr	r3, [pc, #188]	@ (8000978 <MX_ADC2_Init+0xe0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008be:	4b2e      	ldr	r3, [pc, #184]	@ (8000978 <MX_ADC2_Init+0xe0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80008c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000978 <MX_ADC2_Init+0xe0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000978 <MX_ADC2_Init+0xe0>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d0:	4b29      	ldr	r3, [pc, #164]	@ (8000978 <MX_ADC2_Init+0xe0>)
 80008d2:	2204      	movs	r2, #4
 80008d4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008d6:	4b28      	ldr	r3, [pc, #160]	@ (8000978 <MX_ADC2_Init+0xe0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008dc:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <MX_ADC2_Init+0xe0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80008e2:	4b25      	ldr	r3, [pc, #148]	@ (8000978 <MX_ADC2_Init+0xe0>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008e8:	4b23      	ldr	r3, [pc, #140]	@ (8000978 <MX_ADC2_Init+0xe0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80008f0:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <MX_ADC2_Init+0xe0>)
 80008f2:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80008f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <MX_ADC2_Init+0xe0>)
 80008fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000900:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <MX_ADC2_Init+0xe0>)
 8000902:	2201      	movs	r2, #1
 8000904:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <MX_ADC2_Init+0xe0>)
 800090a:	2200      	movs	r2, #0
 800090c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_ADC2_Init+0xe0>)
 8000910:	2200      	movs	r2, #0
 8000912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000916:	4818      	ldr	r0, [pc, #96]	@ (8000978 <MX_ADC2_Init+0xe0>)
 8000918:	f001 fde8 	bl	80024ec <HAL_ADC_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000922:	f000 fcbf 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000926:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <MX_ADC2_Init+0xe8>)
 8000928:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800092a:	2306      	movs	r3, #6
 800092c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800092e:	2304      	movs	r3, #4
 8000930:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000932:	237f      	movs	r3, #127	@ 0x7f
 8000934:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000936:	2304      	movs	r3, #4
 8000938:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800093e:	463b      	mov	r3, r7
 8000940:	4619      	mov	r1, r3
 8000942:	480d      	ldr	r0, [pc, #52]	@ (8000978 <MX_ADC2_Init+0xe0>)
 8000944:	f002 f81e 	bl	8002984 <HAL_ADC_ConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800094e:	f000 fca9 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000952:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <MX_ADC2_Init+0xec>)
 8000954:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000956:	230c      	movs	r3, #12
 8000958:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800095a:	463b      	mov	r3, r7
 800095c:	4619      	mov	r1, r3
 800095e:	4806      	ldr	r0, [pc, #24]	@ (8000978 <MX_ADC2_Init+0xe0>)
 8000960:	f002 f810 	bl	8002984 <HAL_ADC_ConfigChannel>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 800096a:	f000 fc9b 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	3720      	adds	r7, #32
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000f4 	.word	0x200000f4
 800097c:	50000100 	.word	0x50000100
 8000980:	32601000 	.word	0x32601000
 8000984:	3ef08000 	.word	0x3ef08000

08000988 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b09c      	sub	sp, #112	@ 0x70
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	f107 0318 	add.w	r3, r7, #24
 80009a4:	2244      	movs	r2, #68	@ 0x44
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f00a fa95 	bl	800aed8 <memset>
  if(adcHandle->Instance==ADC1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80009b6:	d16a      	bne.n	8000a8e <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80009be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80009c2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c4:	f107 0318 	add.w	r3, r7, #24
 80009c8:	4618      	mov	r0, r3
 80009ca:	f004 fa0d 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009d4:	f000 fc66 	bl	80012a4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80009d8:	4b66      	ldr	r3, [pc, #408]	@ (8000b74 <HAL_ADC_MspInit+0x1ec>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	4a65      	ldr	r2, [pc, #404]	@ (8000b74 <HAL_ADC_MspInit+0x1ec>)
 80009e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009e2:	4b64      	ldr	r3, [pc, #400]	@ (8000b74 <HAL_ADC_MspInit+0x1ec>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d10b      	bne.n	8000a02 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009ea:	4b63      	ldr	r3, [pc, #396]	@ (8000b78 <HAL_ADC_MspInit+0x1f0>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	4a62      	ldr	r2, [pc, #392]	@ (8000b78 <HAL_ADC_MspInit+0x1f0>)
 80009f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f6:	4b60      	ldr	r3, [pc, #384]	@ (8000b78 <HAL_ADC_MspInit+0x1f0>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b5d      	ldr	r3, [pc, #372]	@ (8000b78 <HAL_ADC_MspInit+0x1f0>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	4a5c      	ldr	r2, [pc, #368]	@ (8000b78 <HAL_ADC_MspInit+0x1f0>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0e:	4b5a      	ldr	r3, [pc, #360]	@ (8000b78 <HAL_ADC_MspInit+0x1f0>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CAPTEUR_DIST_N_Pin|CAPTEUR_DIST_W_Pin;
 8000a1a:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000a1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a20:	2303      	movs	r3, #3
 8000a22:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4853      	ldr	r0, [pc, #332]	@ (8000b7c <HAL_ADC_MspInit+0x1f4>)
 8000a30:	f003 f8fe 	bl	8003c30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8000a34:	4b52      	ldr	r3, [pc, #328]	@ (8000b80 <HAL_ADC_MspInit+0x1f8>)
 8000a36:	4a53      	ldr	r2, [pc, #332]	@ (8000b84 <HAL_ADC_MspInit+0x1fc>)
 8000a38:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a3a:	4b51      	ldr	r3, [pc, #324]	@ (8000b80 <HAL_ADC_MspInit+0x1f8>)
 8000a3c:	2205      	movs	r2, #5
 8000a3e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a40:	4b4f      	ldr	r3, [pc, #316]	@ (8000b80 <HAL_ADC_MspInit+0x1f8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a46:	4b4e      	ldr	r3, [pc, #312]	@ (8000b80 <HAL_ADC_MspInit+0x1f8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a4c:	4b4c      	ldr	r3, [pc, #304]	@ (8000b80 <HAL_ADC_MspInit+0x1f8>)
 8000a4e:	2280      	movs	r2, #128	@ 0x80
 8000a50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a52:	4b4b      	ldr	r3, [pc, #300]	@ (8000b80 <HAL_ADC_MspInit+0x1f8>)
 8000a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a5a:	4b49      	ldr	r3, [pc, #292]	@ (8000b80 <HAL_ADC_MspInit+0x1f8>)
 8000a5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a62:	4b47      	ldr	r3, [pc, #284]	@ (8000b80 <HAL_ADC_MspInit+0x1f8>)
 8000a64:	2220      	movs	r2, #32
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000a68:	4b45      	ldr	r3, [pc, #276]	@ (8000b80 <HAL_ADC_MspInit+0x1f8>)
 8000a6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a70:	4843      	ldr	r0, [pc, #268]	@ (8000b80 <HAL_ADC_MspInit+0x1f8>)
 8000a72:	f002 fe6b 	bl	800374c <HAL_DMA_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000a7c:	f000 fc12 	bl	80012a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a3f      	ldr	r2, [pc, #252]	@ (8000b80 <HAL_ADC_MspInit+0x1f8>)
 8000a84:	655a      	str	r2, [r3, #84]	@ 0x54
 8000a86:	4a3e      	ldr	r2, [pc, #248]	@ (8000b80 <HAL_ADC_MspInit+0x1f8>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000a8c:	e06e      	b.n	8000b6c <HAL_ADC_MspInit+0x1e4>
  else if(adcHandle->Instance==ADC2)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a3d      	ldr	r2, [pc, #244]	@ (8000b88 <HAL_ADC_MspInit+0x200>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d169      	bne.n	8000b6c <HAL_ADC_MspInit+0x1e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a9c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a9e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000aa2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f004 f99d 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 8000ab4:	f000 fbf6 	bl	80012a4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b74 <HAL_ADC_MspInit+0x1ec>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	4a2d      	ldr	r2, [pc, #180]	@ (8000b74 <HAL_ADC_MspInit+0x1ec>)
 8000ac0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b74 <HAL_ADC_MspInit+0x1ec>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d10b      	bne.n	8000ae2 <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000aca:	4b2b      	ldr	r3, [pc, #172]	@ (8000b78 <HAL_ADC_MspInit+0x1f0>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	4a2a      	ldr	r2, [pc, #168]	@ (8000b78 <HAL_ADC_MspInit+0x1f0>)
 8000ad0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad6:	4b28      	ldr	r3, [pc, #160]	@ (8000b78 <HAL_ADC_MspInit+0x1f0>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ada:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	4b25      	ldr	r3, [pc, #148]	@ (8000b78 <HAL_ADC_MspInit+0x1f0>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae6:	4a24      	ldr	r2, [pc, #144]	@ (8000b78 <HAL_ADC_MspInit+0x1f0>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aee:	4b22      	ldr	r3, [pc, #136]	@ (8000b78 <HAL_ADC_MspInit+0x1f0>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CAPTEUR_DIST_S_Pin|CAPTEUR_DIST_E_Pin;
 8000afa:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000afe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b00:	2303      	movs	r3, #3
 8000b02:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	481b      	ldr	r0, [pc, #108]	@ (8000b7c <HAL_ADC_MspInit+0x1f4>)
 8000b10:	f003 f88e 	bl	8003c30 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel1;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	@ (8000b8c <HAL_ADC_MspInit+0x204>)
 8000b16:	4a1e      	ldr	r2, [pc, #120]	@ (8000b90 <HAL_ADC_MspInit+0x208>)
 8000b18:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <HAL_ADC_MspInit+0x204>)
 8000b1c:	2224      	movs	r2, #36	@ 0x24
 8000b1e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <HAL_ADC_MspInit+0x204>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b26:	4b19      	ldr	r3, [pc, #100]	@ (8000b8c <HAL_ADC_MspInit+0x204>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <HAL_ADC_MspInit+0x204>)
 8000b2e:	2280      	movs	r2, #128	@ 0x80
 8000b30:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b32:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <HAL_ADC_MspInit+0x204>)
 8000b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b38:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <HAL_ADC_MspInit+0x204>)
 8000b3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b40:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000b42:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <HAL_ADC_MspInit+0x204>)
 8000b44:	2220      	movs	r2, #32
 8000b46:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8000b48:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <HAL_ADC_MspInit+0x204>)
 8000b4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000b50:	480e      	ldr	r0, [pc, #56]	@ (8000b8c <HAL_ADC_MspInit+0x204>)
 8000b52:	f002 fdfb 	bl	800374c <HAL_DMA_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_ADC_MspInit+0x1d8>
      Error_Handler();
 8000b5c:	f000 fba2 	bl	80012a4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <HAL_ADC_MspInit+0x204>)
 8000b64:	655a      	str	r2, [r3, #84]	@ 0x54
 8000b66:	4a09      	ldr	r2, [pc, #36]	@ (8000b8c <HAL_ADC_MspInit+0x204>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000b6c:	bf00      	nop
 8000b6e:	3770      	adds	r7, #112	@ 0x70
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000220 	.word	0x20000220
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	48000400 	.word	0x48000400
 8000b80:	20000160 	.word	0x20000160
 8000b84:	4002001c 	.word	0x4002001c
 8000b88:	50000100 	.word	0x50000100
 8000b8c:	200001c0 	.word	0x200001c0
 8000b90:	40020008 	.word	0x40020008

08000b94 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b94:	b5b0      	push	{r4, r5, r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_FREERTOS_Init+0x2c>)
 8000b9c:	1d3c      	adds	r4, r7, #4
 8000b9e:	461d      	mov	r5, r3
 8000ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba4:	682b      	ldr	r3, [r5, #0]
 8000ba6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f007 fbfc 	bl	80083aa <osThreadCreate>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a03      	ldr	r2, [pc, #12]	@ (8000bc4 <MX_FREERTOS_Init+0x30>)
 8000bb6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000bb8:	bf00      	nop
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8000bc0:	0800bbec 	.word	0x0800bbec
 8000bc4:	20000224 	.word	0x20000224

08000bc8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f007 fc11 	bl	80083f8 <osDelay>
 8000bd6:	e7fb      	b.n	8000bd0 <StartDefaultTask+0x8>

08000bd8 <distSensor_initADC_DMA>:
uint32_t value_sud; 				// Valeur de sud (ADC2 Channel 12)


// function to init ADC1 and ADC2 (DMA)
void distSensor_initADC_DMA(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	distSensor_TaskCreate(NULL);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f000 f8cb 	bl	8000d78 <distSensor_TaskCreate>


	//HAL_ADC_Start_DMA(&hadc1, adc1_dma_buffer, ADC1_CHANNEL_COUNT);
	HAL_ADC_Start_DMA(&hadc2, adc2_dma_buffer, ADC2_CHANNEL_COUNT);
 8000be2:	2202      	movs	r2, #2
 8000be4:	4904      	ldr	r1, [pc, #16]	@ (8000bf8 <distSensor_initADC_DMA+0x20>)
 8000be6:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <distSensor_initADC_DMA+0x24>)
 8000be8:	f001 fe04 	bl	80027f4 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim6);
 8000bec:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <distSensor_initADC_DMA+0x28>)
 8000bee:	f005 fa77 	bl	80060e0 <HAL_TIM_Base_Start>


}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000234 	.word	0x20000234
 8000bfc:	200000f4 	.word	0x200000f4
 8000c00:	200003ec 	.word	0x200003ec

08000c04 <distSensor_ReadADC_DMA>:
	return adc_value;   // Return the ADC value
}

// Function to read value on ADC1 and ADC2 (DMA)
uint32_t distSensor_ReadADC_DMA(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
	value_west = adc1_dma_buffer[0];    		// Valeur de west (ADC1 Channel 5)
 8000c08:	4b20      	ldr	r3, [pc, #128]	@ (8000c8c <distSensor_ReadADC_DMA+0x88>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a20      	ldr	r2, [pc, #128]	@ (8000c90 <distSensor_ReadADC_DMA+0x8c>)
 8000c0e:	6013      	str	r3, [r2, #0]
	value_nord = adc1_dma_buffer[1];   			// Valeur de nord (ADC1 Channel 11)
 8000c10:	4b1e      	ldr	r3, [pc, #120]	@ (8000c8c <distSensor_ReadADC_DMA+0x88>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	4a1f      	ldr	r2, [pc, #124]	@ (8000c94 <distSensor_ReadADC_DMA+0x90>)
 8000c16:	6013      	str	r3, [r2, #0]
	value_est = adc2_dma_buffer[0];   			// Valeur de est (ADC2 Channel 15)
 8000c18:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <distSensor_ReadADC_DMA+0x94>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8000c9c <distSensor_ReadADC_DMA+0x98>)
 8000c1e:	6013      	str	r3, [r2, #0]
	value_sud = adc2_dma_buffer[1];   			// Valeur de sud (ADC2 Channel 12)
 8000c20:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <distSensor_ReadADC_DMA+0x94>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	4a1e      	ldr	r2, [pc, #120]	@ (8000ca0 <distSensor_ReadADC_DMA+0x9c>)
 8000c26:	6013      	str	r3, [r2, #0]

	if (adc_ready_adc1_west == 1)
 8000c28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca4 <distSensor_ReadADC_DMA+0xa0>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d105      	bne.n	8000c3e <distSensor_ReadADC_DMA+0x3a>
	{
		adc_ready_adc1_west = 0;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <distSensor_ReadADC_DMA+0xa0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
		return value_est;
 8000c38:	4b18      	ldr	r3, [pc, #96]	@ (8000c9c <distSensor_ReadADC_DMA+0x98>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	e021      	b.n	8000c82 <distSensor_ReadADC_DMA+0x7e>
	}

	else if (adc_ready_adc1_nord == 1)
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <distSensor_ReadADC_DMA+0xa4>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d105      	bne.n	8000c54 <distSensor_ReadADC_DMA+0x50>
	{
		adc_ready_adc1_nord = 0;
 8000c48:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <distSensor_ReadADC_DMA+0xa4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
		return value_nord;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <distSensor_ReadADC_DMA+0x90>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	e016      	b.n	8000c82 <distSensor_ReadADC_DMA+0x7e>
	}

	if (adc_ready_adc2_est == 1)
 8000c54:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <distSensor_ReadADC_DMA+0xa8>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d105      	bne.n	8000c6a <distSensor_ReadADC_DMA+0x66>
	{
		adc_ready_adc2_est = 0;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <distSensor_ReadADC_DMA+0xa8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
		return value_est;
 8000c64:	4b0d      	ldr	r3, [pc, #52]	@ (8000c9c <distSensor_ReadADC_DMA+0x98>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	e00b      	b.n	8000c82 <distSensor_ReadADC_DMA+0x7e>
	}

	if (adc_ready_adc2_sud == 1)
 8000c6a:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <distSensor_ReadADC_DMA+0xac>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d105      	bne.n	8000c80 <distSensor_ReadADC_DMA+0x7c>
	{
		adc_ready_adc2_sud = 0;
 8000c74:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <distSensor_ReadADC_DMA+0xac>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
		return value_sud;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <distSensor_ReadADC_DMA+0x9c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	e000      	b.n	8000c82 <distSensor_ReadADC_DMA+0x7e>
	}

	else{
		return 1;
 8000c80:	2301      	movs	r3, #1
	}




}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	2000022c 	.word	0x2000022c
 8000c90:	2000023c 	.word	0x2000023c
 8000c94:	20000240 	.word	0x20000240
 8000c98:	20000234 	.word	0x20000234
 8000c9c:	20000244 	.word	0x20000244
 8000ca0:	20000248 	.word	0x20000248
 8000ca4:	20000228 	.word	0x20000228
 8000ca8:	20000229 	.word	0x20000229
 8000cac:	2000022b 	.word	0x2000022b
 8000cb0:	2000022a 	.word	0x2000022a

08000cb4 <HAL_ADC_ConvCpltCallback>:



//Call Back for ADC1 and ADC2
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cc4:	d110      	bne.n	8000ce8 <HAL_ADC_ConvCpltCallback+0x34>
	{

		if (value_west < 1000 )
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000cce:	d203      	bcs.n	8000cd8 <HAL_ADC_ConvCpltCallback+0x24>
		{
			adc_ready_adc1_west = 1;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <HAL_ADC_ConvCpltCallback+0x70>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	e007      	b.n	8000ce8 <HAL_ADC_ConvCpltCallback+0x34>
		}
		else if (value_nord <1000)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <HAL_ADC_ConvCpltCallback+0x74>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ce0:	d202      	bcs.n	8000ce8 <HAL_ADC_ConvCpltCallback+0x34>
		{
			adc_ready_adc1_nord = 1;
 8000ce2:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <HAL_ADC_ConvCpltCallback+0x78>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
		}

	}

	if (hadc->Instance == ADC2)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a10      	ldr	r2, [pc, #64]	@ (8000d30 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d110      	bne.n	8000d14 <HAL_ADC_ConvCpltCallback+0x60>
	{
		if (value_sud < 1000 )
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <HAL_ADC_ConvCpltCallback+0x80>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000cfa:	d203      	bcs.n	8000d04 <HAL_ADC_ConvCpltCallback+0x50>
		{
			adc_ready_adc2_sud = 1;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <HAL_ADC_ConvCpltCallback+0x84>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
		{
			adc_ready_adc2_est = 1;
		}

	}
}
 8000d02:	e007      	b.n	8000d14 <HAL_ADC_ConvCpltCallback+0x60>
		else if (value_est <1000)
 8000d04:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <HAL_ADC_ConvCpltCallback+0x88>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d0c:	d202      	bcs.n	8000d14 <HAL_ADC_ConvCpltCallback+0x60>
			adc_ready_adc2_est = 1;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	2000023c 	.word	0x2000023c
 8000d24:	20000228 	.word	0x20000228
 8000d28:	20000240 	.word	0x20000240
 8000d2c:	20000229 	.word	0x20000229
 8000d30:	50000100 	.word	0x50000100
 8000d34:	20000248 	.word	0x20000248
 8000d38:	2000022a 	.word	0x2000022a
 8000d3c:	20000244 	.word	0x20000244
 8000d40:	2000022b 	.word	0x2000022b

08000d44 <distSensor_Task>:



//
void distSensor_Task(void *unused){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	for (;;){
		uint32_t distance = distSensor_ReadADC_DMA();
 8000d4c:	f7ff ff5a 	bl	8000c04 <distSensor_ReadADC_DMA>
 8000d50:	60f8      	str	r0, [r7, #12]

		if (distance == 1){
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d103      	bne.n	8000d60 <distSensor_Task+0x1c>
			printf("error\r\n");
 8000d58:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <distSensor_Task+0x2c>)
 8000d5a:	f00a f8b5 	bl	800aec8 <puts>
 8000d5e:	e003      	b.n	8000d68 <distSensor_Task+0x24>
		}
		else {

			printf("Tache Capteur detect vide, %lu\r\n",distance );
 8000d60:	68f9      	ldr	r1, [r7, #12]
 8000d62:	4804      	ldr	r0, [pc, #16]	@ (8000d74 <distSensor_Task+0x30>)
 8000d64:	f00a f848 	bl	800adf8 <iprintf>
		}
		vTaskDelay(100);
 8000d68:	2064      	movs	r0, #100	@ 0x64
 8000d6a:	f008 fa09 	bl	8009180 <vTaskDelay>
	for (;;){
 8000d6e:	e7ed      	b.n	8000d4c <distSensor_Task+0x8>
 8000d70:	0800bc00 	.word	0x0800bc00
 8000d74:	0800bc08 	.word	0x0800bc08

08000d78 <distSensor_TaskCreate>:


	}
}

void distSensor_TaskCreate(void*unused){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af02      	add	r7, sp, #8
 8000d7e:	6078      	str	r0, [r7, #4]
	xTaskCreate(distSensor_Task, "distSensor_task", 128, NULL, 23, NULL);
 8000d80:	2300      	movs	r3, #0
 8000d82:	9301      	str	r3, [sp, #4]
 8000d84:	2317      	movs	r3, #23
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	2280      	movs	r2, #128	@ 0x80
 8000d8c:	4903      	ldr	r1, [pc, #12]	@ (8000d9c <distSensor_TaskCreate+0x24>)
 8000d8e:	4804      	ldr	r0, [pc, #16]	@ (8000da0 <distSensor_TaskCreate+0x28>)
 8000d90:	f008 f8aa 	bl	8008ee8 <xTaskCreate>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	0800bc2c 	.word	0x0800bc2c
 8000da0:	08000d45 	.word	0x08000d45

08000da4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000daa:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <MX_DMA_Init+0x60>)
 8000dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dae:	4a15      	ldr	r2, [pc, #84]	@ (8000e04 <MX_DMA_Init+0x60>)
 8000db0:	f043 0304 	orr.w	r3, r3, #4
 8000db4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000db6:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <MX_DMA_Init+0x60>)
 8000db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <MX_DMA_Init+0x60>)
 8000dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e04 <MX_DMA_Init+0x60>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000dce:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <MX_DMA_Init+0x60>)
 8000dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2105      	movs	r1, #5
 8000dde:	200b      	movs	r0, #11
 8000de0:	f002 fc7f 	bl	80036e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000de4:	200b      	movs	r0, #11
 8000de6:	f002 fc96 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2105      	movs	r1, #5
 8000dee:	200c      	movs	r0, #12
 8000df0:	f002 fc77 	bl	80036e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000df4:	200c      	movs	r0, #12
 8000df6:	f002 fc8e 	bl	8003716 <HAL_NVIC_EnableIRQ>

}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000

08000e08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	4b52      	ldr	r3, [pc, #328]	@ (8000f68 <MX_GPIO_Init+0x160>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e22:	4a51      	ldr	r2, [pc, #324]	@ (8000f68 <MX_GPIO_Init+0x160>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8000f68 <MX_GPIO_Init+0x160>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e36:	4b4c      	ldr	r3, [pc, #304]	@ (8000f68 <MX_GPIO_Init+0x160>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3a:	4a4b      	ldr	r2, [pc, #300]	@ (8000f68 <MX_GPIO_Init+0x160>)
 8000e3c:	f043 0320 	orr.w	r3, r3, #32
 8000e40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e42:	4b49      	ldr	r3, [pc, #292]	@ (8000f68 <MX_GPIO_Init+0x160>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e46:	f003 0320 	and.w	r3, r3, #32
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b46      	ldr	r3, [pc, #280]	@ (8000f68 <MX_GPIO_Init+0x160>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e52:	4a45      	ldr	r2, [pc, #276]	@ (8000f68 <MX_GPIO_Init+0x160>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5a:	4b43      	ldr	r3, [pc, #268]	@ (8000f68 <MX_GPIO_Init+0x160>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	4b40      	ldr	r3, [pc, #256]	@ (8000f68 <MX_GPIO_Init+0x160>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6a:	4a3f      	ldr	r2, [pc, #252]	@ (8000f68 <MX_GPIO_Init+0x160>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e72:	4b3d      	ldr	r3, [pc, #244]	@ (8000f68 <MX_GPIO_Init+0x160>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CHAT_Pin|LED_SOURIS_Pin|LIDAR_M_EN_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f246 0110 	movw	r1, #24592	@ 0x6010
 8000e84:	4839      	ldr	r0, [pc, #228]	@ (8000f6c <MX_GPIO_Init+0x164>)
 8000e86:	f003 f855 	bl	8003f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_1_Pin|USER_LED_2_Pin|Accelerometer_NSS_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2113      	movs	r1, #19
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e92:	f003 f84f 	bl	8003f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIDAR_DEV_EN_GPIO_Port, LIDAR_DEV_EN_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2101      	movs	r1, #1
 8000e9a:	4835      	ldr	r0, [pc, #212]	@ (8000f70 <MX_GPIO_Init+0x168>)
 8000e9c:	f003 f84a 	bl	8003f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_CHAT_Pin LED_SOURIS_Pin LIDAR_M_EN_Pin */
  GPIO_InitStruct.Pin = LED_CHAT_Pin|LED_SOURIS_Pin|LIDAR_M_EN_Pin;
 8000ea0:	f246 0310 	movw	r3, #24592	@ 0x6010
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	482c      	ldr	r0, [pc, #176]	@ (8000f6c <MX_GPIO_Init+0x164>)
 8000eba:	f002 feb9 	bl	8003c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BNT_CAT_MOUSE_Pin */
  GPIO_InitStruct.Pin = BNT_CAT_MOUSE_Pin;
 8000ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ec4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BNT_CAT_MOUSE_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4825      	ldr	r0, [pc, #148]	@ (8000f6c <MX_GPIO_Init+0x164>)
 8000ed6:	f002 feab 	bl	8003c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_1_Pin USER_LED_2_Pin Accelerometer_NSS_Pin */
  GPIO_InitStruct.Pin = USER_LED_1_Pin|USER_LED_2_Pin|Accelerometer_NSS_Pin;
 8000eda:	2313      	movs	r3, #19
 8000edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef4:	f002 fe9c 	bl	8003c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : Accelerometer_INT1_Pin Accelerometer_INT2_Pin */
  GPIO_InitStruct.Pin = Accelerometer_INT1_Pin|Accelerometer_INT2_Pin;
 8000ef8:	230c      	movs	r3, #12
 8000efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000efc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f10:	f002 fe8e 	bl	8003c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIDAR_DEV_EN_Pin */
  GPIO_InitStruct.Pin = LIDAR_DEV_EN_Pin;
 8000f14:	2301      	movs	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LIDAR_DEV_EN_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4811      	ldr	r0, [pc, #68]	@ (8000f70 <MX_GPIO_Init+0x168>)
 8000f2c:	f002 fe80 	bl	8003c30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2105      	movs	r1, #5
 8000f34:	2008      	movs	r0, #8
 8000f36:	f002 fbd4 	bl	80036e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f3a:	2008      	movs	r0, #8
 8000f3c:	f002 fbeb 	bl	8003716 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2105      	movs	r1, #5
 8000f44:	2009      	movs	r0, #9
 8000f46:	f002 fbcc 	bl	80036e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f4a:	2009      	movs	r0, #9
 8000f4c:	f002 fbe3 	bl	8003716 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2105      	movs	r1, #5
 8000f54:	2028      	movs	r0, #40	@ 0x28
 8000f56:	f002 fbc4 	bl	80036e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f5a:	2028      	movs	r0, #40	@ 0x28
 8000f5c:	f002 fbdb 	bl	8003716 <HAL_NVIC_EnableIRQ>

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	@ 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	48000800 	.word	0x48000800
 8000f70:	48000400 	.word	0x48000400

08000f74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe8 <MX_I2C1_Init+0x74>)
 8000f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fec <MX_I2C1_Init+0x78>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe8 <MX_I2C1_Init+0x74>)
 8000f80:	4a1b      	ldr	r2, [pc, #108]	@ (8000ff0 <MX_I2C1_Init+0x7c>)
 8000f82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f84:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <MX_I2C1_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <MX_I2C1_Init+0x74>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <MX_I2C1_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f96:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <MX_I2C1_Init+0x74>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <MX_I2C1_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <MX_I2C1_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <MX_I2C1_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fae:	480e      	ldr	r0, [pc, #56]	@ (8000fe8 <MX_I2C1_Init+0x74>)
 8000fb0:	f003 f80a 	bl	8003fc8 <HAL_I2C_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fba:	f000 f973 	bl	80012a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4809      	ldr	r0, [pc, #36]	@ (8000fe8 <MX_I2C1_Init+0x74>)
 8000fc2:	f003 f89c 	bl	80040fe <HAL_I2CEx_ConfigAnalogFilter>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fcc:	f000 f96a 	bl	80012a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <MX_I2C1_Init+0x74>)
 8000fd4:	f003 f8de 	bl	8004194 <HAL_I2CEx_ConfigDigitalFilter>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fde:	f000 f961 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2000024c 	.word	0x2000024c
 8000fec:	40005400 	.word	0x40005400
 8000ff0:	40621236 	.word	0x40621236

08000ff4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09c      	sub	sp, #112	@ 0x70
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800100c:	f107 0318 	add.w	r3, r7, #24
 8001010:	2244      	movs	r2, #68	@ 0x44
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f009 ff5f 	bl	800aed8 <memset>
  if(i2cHandle->Instance==I2C1)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a2e      	ldr	r2, [pc, #184]	@ (80010d8 <HAL_I2C_MspInit+0xe4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d154      	bne.n	80010ce <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001024:	2340      	movs	r3, #64	@ 0x40
 8001026:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001028:	2300      	movs	r3, #0
 800102a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102c:	f107 0318 	add.w	r3, r7, #24
 8001030:	4618      	mov	r0, r3
 8001032:	f003 fed9 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800103c:	f000 f932 	bl	80012a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	4b26      	ldr	r3, [pc, #152]	@ (80010dc <HAL_I2C_MspInit+0xe8>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001044:	4a25      	ldr	r2, [pc, #148]	@ (80010dc <HAL_I2C_MspInit+0xe8>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800104c:	4b23      	ldr	r3, [pc, #140]	@ (80010dc <HAL_I2C_MspInit+0xe8>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001058:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <HAL_I2C_MspInit+0xe8>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105c:	4a1f      	ldr	r2, [pc, #124]	@ (80010dc <HAL_I2C_MspInit+0xe8>)
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001064:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <HAL_I2C_MspInit+0xe8>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001070:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001074:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001076:	2312      	movs	r3, #18
 8001078:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001082:	2304      	movs	r3, #4
 8001084:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800108a:	4619      	mov	r1, r3
 800108c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001090:	f002 fdce 	bl	8003c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001094:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001098:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109a:	2312      	movs	r3, #18
 800109c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a6:	2304      	movs	r3, #4
 80010a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010ae:	4619      	mov	r1, r3
 80010b0:	480b      	ldr	r0, [pc, #44]	@ (80010e0 <HAL_I2C_MspInit+0xec>)
 80010b2:	f002 fdbd 	bl	8003c30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b6:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <HAL_I2C_MspInit+0xe8>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ba:	4a08      	ldr	r2, [pc, #32]	@ (80010dc <HAL_I2C_MspInit+0xe8>)
 80010bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010c2:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_I2C_MspInit+0xe8>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010ce:	bf00      	nop
 80010d0:	3770      	adds	r7, #112	@ 0x70
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40005400 	.word	0x40005400
 80010dc:	40021000 	.word	0x40021000
 80010e0:	48000400 	.word	0x48000400

080010e4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80010ec:	1d39      	adds	r1, r7, #4
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010f2:	2201      	movs	r2, #1
 80010f4:	4803      	ldr	r0, [pc, #12]	@ (8001104 <__io_putchar+0x20>)
 80010f6:	f006 fabd 	bl	8007674 <HAL_UART_Transmit>
	return chr;
 80010fa:	687b      	ldr	r3, [r7, #4]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200004d0 	.word	0x200004d0

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110c:	f000 ff3d 	bl	8001f8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001110:	f000 f84c 	bl	80011ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001114:	f7ff fe78 	bl	8000e08 <MX_GPIO_Init>
  MX_DMA_Init();
 8001118:	f7ff fe44 	bl	8000da4 <MX_DMA_Init>
  MX_UART4_Init();
 800111c:	f000 fdd6 	bl	8001ccc <MX_UART4_Init>
  MX_SPI1_Init();
 8001120:	f000 f8c6 	bl	80012b0 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001124:	f000 fbc8 	bl	80018b8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001128:	f7ff fb2c 	bl	8000784 <MX_ADC1_Init>
  MX_ADC2_Init();
 800112c:	f7ff fbb4 	bl	8000898 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001130:	f000 fa98 	bl	8001664 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001134:	f000 fb6a 	bl	800180c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001138:	f000 fe18 	bl	8001d6c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800113c:	f7ff ff1a 	bl	8000f74 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001140:	f000 fc10 	bl	8001964 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001144:	f000 fc44 	bl	80019d0 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001148:	f000 fc78 	bl	8001a3c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	printf(" _____________________________\r\n");
 800114c:	4812      	ldr	r0, [pc, #72]	@ (8001198 <main+0x90>)
 800114e:	f009 febb 	bl	800aec8 <puts>
	printf("|                             |\r\n");
 8001152:	4812      	ldr	r0, [pc, #72]	@ (800119c <main+0x94>)
 8001154:	f009 feb8 	bl	800aec8 <puts>
	printf("|                             |\r\n");
 8001158:	4810      	ldr	r0, [pc, #64]	@ (800119c <main+0x94>)
 800115a:	f009 feb5 	bl	800aec8 <puts>
	printf("|  WELCOME ON TAGBOT PROJECT  |\r\n");
 800115e:	4810      	ldr	r0, [pc, #64]	@ (80011a0 <main+0x98>)
 8001160:	f009 feb2 	bl	800aec8 <puts>
	printf("|                             |\r\n");
 8001164:	480d      	ldr	r0, [pc, #52]	@ (800119c <main+0x94>)
 8001166:	f009 feaf 	bl	800aec8 <puts>
	printf("|_____________________________|\r\n");
 800116a:	480e      	ldr	r0, [pc, #56]	@ (80011a4 <main+0x9c>)
 800116c:	f009 feac 	bl	800aec8 <puts>

	/* Ce code initialise l'adc en dma*/
	distSensor_initADC_DMA();
 8001170:	f7ff fd32 	bl	8000bd8 <distSensor_initADC_DMA>
	printf("Démarrage du test des capteurs de distance...\r\n");
 8001174:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <main+0xa0>)
 8001176:	f009 fea7 	bl	800aec8 <puts>


	/* Code init l'accélérometre*/

	while(1 == ADXL343_Init()) {}
 800117a:	bf00      	nop
 800117c:	f7ff fa18 	bl	80005b0 <ADXL343_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b01      	cmp	r3, #1
 8001184:	d0fa      	beq.n	800117c <main+0x74>
	ADXL343_Configure();
 8001186:	f7ff fa53 	bl	8000630 <ADXL343_Configure>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800118a:	f7ff fd03 	bl	8000b94 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800118e:	f007 f905 	bl	800839c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001192:	bf00      	nop
 8001194:	e7fd      	b.n	8001192 <main+0x8a>
 8001196:	bf00      	nop
 8001198:	0800bc3c 	.word	0x0800bc3c
 800119c:	0800bc5c 	.word	0x0800bc5c
 80011a0:	0800bc80 	.word	0x0800bc80
 80011a4:	0800bca4 	.word	0x0800bca4
 80011a8:	0800bcc8 	.word	0x0800bcc8

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b094      	sub	sp, #80	@ 0x50
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 0318 	add.w	r3, r7, #24
 80011b6:	2238      	movs	r2, #56	@ 0x38
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f009 fe8c 	bl	800aed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f003 f82c 	bl	800422c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011dc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011de:	2302      	movs	r3, #2
 80011e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e2:	2303      	movs	r3, #3
 80011e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80011e6:	2304      	movs	r3, #4
 80011e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80011ea:	2355      	movs	r3, #85	@ 0x55
 80011ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011f2:	2302      	movs	r3, #2
 80011f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 f8c8 	bl	8004394 <HAL_RCC_OscConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800120a:	f000 f84b 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120e:	230f      	movs	r3, #15
 8001210:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001212:	2303      	movs	r3, #3
 8001214:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2104      	movs	r1, #4
 8001226:	4618      	mov	r0, r3
 8001228:	f003 fbc6 	bl	80049b8 <HAL_RCC_ClockConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001232:	f000 f837 	bl	80012a4 <Error_Handler>
  }
}
 8001236:	bf00      	nop
 8001238:	3750      	adds	r7, #80	@ 0x50
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
	//	ADXL343_DetectTap();
	if(GPIO_Pin == BNT_CAT_MOUSE_Pin){
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001250:	d103      	bne.n	800125a <HAL_GPIO_EXTI_Callback+0x1a>
		printf("Button pushed\r\n");
 8001252:	4811      	ldr	r0, [pc, #68]	@ (8001298 <HAL_GPIO_EXTI_Callback+0x58>)
 8001254:	f009 fe38 	bl	800aec8 <puts>
	} else if(GPIO_Pin == Accelerometer_INT2_Pin){
		printf("Acc Int2\r\n");
		uint8_t tap_status;
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); 		//Renvoie la valeur du registre int_source
	}
}
 8001258:	e01a      	b.n	8001290 <HAL_GPIO_EXTI_Callback+0x50>
	} else if(GPIO_Pin == Accelerometer_INT1_Pin){
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	2b04      	cmp	r3, #4
 800125e:	d10a      	bne.n	8001276 <HAL_GPIO_EXTI_Callback+0x36>
		printf("Acc Int1\r\n");
 8001260:	480e      	ldr	r0, [pc, #56]	@ (800129c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001262:	f009 fe31 	bl	800aec8 <puts>
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); 		//Renvoie la valeur du registre int_source
 8001266:	f107 030f 	add.w	r3, r7, #15
 800126a:	2201      	movs	r2, #1
 800126c:	4619      	mov	r1, r3
 800126e:	2030      	movs	r0, #48	@ 0x30
 8001270:	f7ff fa00 	bl	8000674 <ADXL343_ReadRegister>
}
 8001274:	e00c      	b.n	8001290 <HAL_GPIO_EXTI_Callback+0x50>
	} else if(GPIO_Pin == Accelerometer_INT2_Pin){
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d109      	bne.n	8001290 <HAL_GPIO_EXTI_Callback+0x50>
		printf("Acc Int2\r\n");
 800127c:	4808      	ldr	r0, [pc, #32]	@ (80012a0 <HAL_GPIO_EXTI_Callback+0x60>)
 800127e:	f009 fe23 	bl	800aec8 <puts>
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); 		//Renvoie la valeur du registre int_source
 8001282:	f107 030e 	add.w	r3, r7, #14
 8001286:	2201      	movs	r2, #1
 8001288:	4619      	mov	r1, r3
 800128a:	2030      	movs	r0, #48	@ 0x30
 800128c:	f7ff f9f2 	bl	8000674 <ADXL343_ReadRegister>
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	0800bcf8 	.word	0x0800bcf8
 800129c:	0800bd08 	.word	0x0800bd08
 80012a0:	0800bd14 	.word	0x0800bd14

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <Error_Handler+0x8>

080012b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <MX_SPI1_Init+0x74>)
 80012b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001328 <MX_SPI1_Init+0x78>)
 80012b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_SPI1_Init+0x74>)
 80012bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012c2:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <MX_SPI1_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c8:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <MX_SPI1_Init+0x74>)
 80012ca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <MX_SPI1_Init+0x74>)
 80012d2:	2202      	movs	r2, #2
 80012d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012d6:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <MX_SPI1_Init+0x74>)
 80012d8:	2201      	movs	r2, #1
 80012da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <MX_SPI1_Init+0x74>)
 80012de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <MX_SPI1_Init+0x74>)
 80012e6:	2230      	movs	r2, #48	@ 0x30
 80012e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <MX_SPI1_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <MX_SPI1_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <MX_SPI1_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012fc:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <MX_SPI1_Init+0x74>)
 80012fe:	2207      	movs	r2, #7
 8001300:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001302:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <MX_SPI1_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <MX_SPI1_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	@ (8001324 <MX_SPI1_Init+0x74>)
 8001310:	f003 ff5a 	bl	80051c8 <HAL_SPI_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800131a:	f7ff ffc3 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200002a0 	.word	0x200002a0
 8001328:	40013000 	.word	0x40013000

0800132c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	@ 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a17      	ldr	r2, [pc, #92]	@ (80013a8 <HAL_SPI_MspInit+0x7c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d128      	bne.n	80013a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800134e:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <HAL_SPI_MspInit+0x80>)
 8001350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001352:	4a16      	ldr	r2, [pc, #88]	@ (80013ac <HAL_SPI_MspInit+0x80>)
 8001354:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001358:	6613      	str	r3, [r2, #96]	@ 0x60
 800135a:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <HAL_SPI_MspInit+0x80>)
 800135c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800135e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <HAL_SPI_MspInit+0x80>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a10      	ldr	r2, [pc, #64]	@ (80013ac <HAL_SPI_MspInit+0x80>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <HAL_SPI_MspInit+0x80>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Accelerometer_SCK_Pin|Accelerometer_MISO_Pin|Accelerometer_MOSI_Pin;
 800137e:	23e0      	movs	r3, #224	@ 0xe0
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800138e:	2305      	movs	r3, #5
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800139c:	f002 fc48 	bl	8003c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	@ 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40013000 	.word	0x40013000
 80013ac:	40021000 	.word	0x40021000

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <HAL_MspInit+0x50>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ba:	4a11      	ldr	r2, [pc, #68]	@ (8001400 <HAL_MspInit+0x50>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <HAL_MspInit+0x50>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <HAL_MspInit+0x50>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001400 <HAL_MspInit+0x50>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <HAL_MspInit+0x50>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	210f      	movs	r1, #15
 80013ea:	f06f 0001 	mvn.w	r0, #1
 80013ee:	f002 f978 	bl	80036e2 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013f2:	f002 ffbf 	bl	8004374 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <NMI_Handler+0x4>

0800140c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <MemManage_Handler+0x4>

0800141c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <UsageFault_Handler+0x4>

0800142c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143e:	f000 fdf7 	bl	8002030 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001442:	f008 fafd 	bl	8009a40 <xTaskGetSchedulerState>
 8001446:	4603      	mov	r3, r0
 8001448:	2b01      	cmp	r3, #1
 800144a:	d001      	beq.n	8001450 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800144c:	f009 f8e4 	bl	800a618 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}

08001454 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
    // Read the INT_SOURCE register to clear the interrupt
    int8_t tap_status;
    ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1);
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	2201      	movs	r2, #1
 800145e:	4619      	mov	r1, r3
 8001460:	2030      	movs	r0, #48	@ 0x30
 8001462:	f7ff f907 	bl	8000674 <ADXL343_ReadRegister>

	if (tap_status & (1<<6)) {  // Tap for single tap
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00a      	beq.n	800148a <EXTI2_IRQHandler+0x36>
		printf("Tap detected!\r\n");
 8001474:	4808      	ldr	r0, [pc, #32]	@ (8001498 <EXTI2_IRQHandler+0x44>)
 8001476:	f009 fd27 	bl	800aec8 <puts>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800147a:	2101      	movs	r1, #1
 800147c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001480:	f002 fd70 	bl	8003f64 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001484:	2064      	movs	r0, #100	@ 0x64
 8001486:	f000 fdf1 	bl	800206c <HAL_Delay>
	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Accelerometer_INT1_Pin);
 800148a:	2004      	movs	r0, #4
 800148c:	f002 fd84 	bl	8003f98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	0800bd20 	.word	0x0800bd20

0800149c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
//		printf("Tap detected!\r\n");
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
//		HAL_Delay(100);
//	}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Accelerometer_INT2_Pin);
 80014a0:	2008      	movs	r0, #8
 80014a2:	f002 fd79 	bl	8003f98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80014b0:	4802      	ldr	r0, [pc, #8]	@ (80014bc <DMA1_Channel1_IRQHandler+0x10>)
 80014b2:	f002 fa6e 	bl	8003992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200001c0 	.word	0x200001c0

080014c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014c4:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <DMA1_Channel2_IRQHandler+0x10>)
 80014c6:	f002 fa64 	bl	8003992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000160 	.word	0x20000160

080014d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BNT_CAT_MOUSE_Pin);
 80014d8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80014dc:	f002 fd5c 	bl	8003f98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <TIM6_DAC_IRQHandler+0x10>)
 80014ea:	f004 ff62 	bl	80063b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200003ec 	.word	0x200003ec

080014f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e00a      	b.n	8001520 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800150a:	f3af 8000 	nop.w
 800150e:	4601      	mov	r1, r0
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	60ba      	str	r2, [r7, #8]
 8001516:	b2ca      	uxtb	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbf0      	blt.n	800150a <_read+0x12>
  }

  return len;
 8001528:	687b      	ldr	r3, [r7, #4]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	e009      	b.n	8001558 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	60ba      	str	r2, [r7, #8]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fdc9 	bl	80010e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3301      	adds	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	429a      	cmp	r2, r3
 800155e:	dbf1      	blt.n	8001544 <_write+0x12>
  }
  return len;
 8001560:	687b      	ldr	r3, [r7, #4]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <_close>:

int _close(int file)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001592:	605a      	str	r2, [r3, #4]
  return 0;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <_isatty>:

int _isatty(int file)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015dc:	4a14      	ldr	r2, [pc, #80]	@ (8001630 <_sbrk+0x5c>)
 80015de:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <_sbrk+0x60>)
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e8:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <_sbrk+0x64>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	@ (800163c <_sbrk+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f6:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	429a      	cmp	r2, r3
 8001602:	d207      	bcs.n	8001614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001604:	f009 fcd6 	bl	800afb4 <__errno>
 8001608:	4603      	mov	r3, r0
 800160a:	220c      	movs	r2, #12
 800160c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001612:	e009      	b.n	8001628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001614:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161a:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	4a05      	ldr	r2, [pc, #20]	@ (8001638 <_sbrk+0x64>)
 8001624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20008000 	.word	0x20008000
 8001634:	00000400 	.word	0x00000400
 8001638:	20000304 	.word	0x20000304
 800163c:	20001518 	.word	0x20001518

08001640 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	@ (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b09c      	sub	sp, #112	@ 0x70
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001684:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
 8001694:	615a      	str	r2, [r3, #20]
 8001696:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2234      	movs	r2, #52	@ 0x34
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f009 fc1a 	bl	800aed8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016a4:	4b57      	ldr	r3, [pc, #348]	@ (8001804 <MX_TIM1_Init+0x1a0>)
 80016a6:	4a58      	ldr	r2, [pc, #352]	@ (8001808 <MX_TIM1_Init+0x1a4>)
 80016a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016aa:	4b56      	ldr	r3, [pc, #344]	@ (8001804 <MX_TIM1_Init+0x1a0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b54      	ldr	r3, [pc, #336]	@ (8001804 <MX_TIM1_Init+0x1a0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6799;
 80016b6:	4b53      	ldr	r3, [pc, #332]	@ (8001804 <MX_TIM1_Init+0x1a0>)
 80016b8:	f641 228f 	movw	r2, #6799	@ 0x1a8f
 80016bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b51      	ldr	r3, [pc, #324]	@ (8001804 <MX_TIM1_Init+0x1a0>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001804 <MX_TIM1_Init+0x1a0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001804 <MX_TIM1_Init+0x1a0>)
 80016cc:	2280      	movs	r2, #128	@ 0x80
 80016ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016d0:	484c      	ldr	r0, [pc, #304]	@ (8001804 <MX_TIM1_Init+0x1a0>)
 80016d2:	f004 fcad 	bl	8006030 <HAL_TIM_Base_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80016dc:	f7ff fde2 	bl	80012a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016e6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016ea:	4619      	mov	r1, r3
 80016ec:	4845      	ldr	r0, [pc, #276]	@ (8001804 <MX_TIM1_Init+0x1a0>)
 80016ee:	f005 f8c3 	bl	8006878 <HAL_TIM_ConfigClockSource>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80016f8:	f7ff fdd4 	bl	80012a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016fc:	4841      	ldr	r0, [pc, #260]	@ (8001804 <MX_TIM1_Init+0x1a0>)
 80016fe:	f004 fd51 	bl	80061a4 <HAL_TIM_PWM_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001708:	f7ff fdcc 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001710:	2300      	movs	r3, #0
 8001712:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001718:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800171c:	4619      	mov	r1, r3
 800171e:	4839      	ldr	r0, [pc, #228]	@ (8001804 <MX_TIM1_Init+0x1a0>)
 8001720:	f005 fe04 	bl	800732c <HAL_TIMEx_MasterConfigSynchronization>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800172a:	f7ff fdbb 	bl	80012a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172e:	2360      	movs	r3, #96	@ 0x60
 8001730:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001736:	2300      	movs	r3, #0
 8001738:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800173a:	2300      	movs	r3, #0
 800173c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800174a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800174e:	2200      	movs	r2, #0
 8001750:	4619      	mov	r1, r3
 8001752:	482c      	ldr	r0, [pc, #176]	@ (8001804 <MX_TIM1_Init+0x1a0>)
 8001754:	f004 ff7c 	bl	8006650 <HAL_TIM_PWM_ConfigChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800175e:	f7ff fda1 	bl	80012a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001762:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001766:	2204      	movs	r2, #4
 8001768:	4619      	mov	r1, r3
 800176a:	4826      	ldr	r0, [pc, #152]	@ (8001804 <MX_TIM1_Init+0x1a0>)
 800176c:	f004 ff70 	bl	8006650 <HAL_TIM_PWM_ConfigChannel>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001776:	f7ff fd95 	bl	80012a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800177a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800177e:	2208      	movs	r2, #8
 8001780:	4619      	mov	r1, r3
 8001782:	4820      	ldr	r0, [pc, #128]	@ (8001804 <MX_TIM1_Init+0x1a0>)
 8001784:	f004 ff64 	bl	8006650 <HAL_TIM_PWM_ConfigChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800178e:	f7ff fd89 	bl	80012a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001792:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001796:	220c      	movs	r2, #12
 8001798:	4619      	mov	r1, r3
 800179a:	481a      	ldr	r0, [pc, #104]	@ (8001804 <MX_TIM1_Init+0x1a0>)
 800179c:	f004 ff58 	bl	8006650 <HAL_TIM_PWM_ConfigChannel>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80017a6:	f7ff fd7d 	bl	80012a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017da:	2300      	movs	r3, #0
 80017dc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	4619      	mov	r1, r3
 80017e6:	4807      	ldr	r0, [pc, #28]	@ (8001804 <MX_TIM1_Init+0x1a0>)
 80017e8:	f005 fe22 	bl	8007430 <HAL_TIMEx_ConfigBreakDeadTime>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 80017f2:	f7ff fd57 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017f6:	4803      	ldr	r0, [pc, #12]	@ (8001804 <MX_TIM1_Init+0x1a0>)
 80017f8:	f000 fa1e 	bl	8001c38 <HAL_TIM_MspPostInit>

}
 80017fc:	bf00      	nop
 80017fe:	3770      	adds	r7, #112	@ 0x70
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000308 	.word	0x20000308
 8001808:	40012c00 	.word	0x40012c00

0800180c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	@ 0x30
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	2224      	movs	r2, #36	@ 0x24
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f009 fb5c 	bl	800aed8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001820:	463b      	mov	r3, r7
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800182a:	4b21      	ldr	r3, [pc, #132]	@ (80018b0 <MX_TIM3_Init+0xa4>)
 800182c:	4a21      	ldr	r2, [pc, #132]	@ (80018b4 <MX_TIM3_Init+0xa8>)
 800182e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001830:	4b1f      	ldr	r3, [pc, #124]	@ (80018b0 <MX_TIM3_Init+0xa4>)
 8001832:	2200      	movs	r2, #0
 8001834:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001836:	4b1e      	ldr	r3, [pc, #120]	@ (80018b0 <MX_TIM3_Init+0xa4>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800183c:	4b1c      	ldr	r3, [pc, #112]	@ (80018b0 <MX_TIM3_Init+0xa4>)
 800183e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001842:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001844:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <MX_TIM3_Init+0xa4>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800184a:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <MX_TIM3_Init+0xa4>)
 800184c:	2280      	movs	r2, #128	@ 0x80
 800184e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001850:	2301      	movs	r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001858:	2301      	movs	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001868:	2301      	movs	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	4619      	mov	r1, r3
 800187a:	480d      	ldr	r0, [pc, #52]	@ (80018b0 <MX_TIM3_Init+0xa4>)
 800187c:	f004 fcf3 	bl	8006266 <HAL_TIM_Encoder_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001886:	f7ff fd0d 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001892:	463b      	mov	r3, r7
 8001894:	4619      	mov	r1, r3
 8001896:	4806      	ldr	r0, [pc, #24]	@ (80018b0 <MX_TIM3_Init+0xa4>)
 8001898:	f005 fd48 	bl	800732c <HAL_TIMEx_MasterConfigSynchronization>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80018a2:	f7ff fcff 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	3730      	adds	r7, #48	@ 0x30
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000354 	.word	0x20000354
 80018b4:	40000400 	.word	0x40000400

080018b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	@ 0x30
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	2224      	movs	r2, #36	@ 0x24
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f009 fb06 	bl	800aed8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	463b      	mov	r3, r7
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018d6:	4b21      	ldr	r3, [pc, #132]	@ (800195c <MX_TIM4_Init+0xa4>)
 80018d8:	4a21      	ldr	r2, [pc, #132]	@ (8001960 <MX_TIM4_Init+0xa8>)
 80018da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018dc:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <MX_TIM4_Init+0xa4>)
 80018de:	2200      	movs	r2, #0
 80018e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e2:	4b1e      	ldr	r3, [pc, #120]	@ (800195c <MX_TIM4_Init+0xa4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018e8:	4b1c      	ldr	r3, [pc, #112]	@ (800195c <MX_TIM4_Init+0xa4>)
 80018ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f0:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <MX_TIM4_Init+0xa4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018f6:	4b19      	ldr	r3, [pc, #100]	@ (800195c <MX_TIM4_Init+0xa4>)
 80018f8:	2280      	movs	r2, #128	@ 0x80
 80018fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018fc:	2301      	movs	r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001904:	2301      	movs	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001908:	2300      	movs	r3, #0
 800190a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001914:	2301      	movs	r3, #1
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4619      	mov	r1, r3
 8001926:	480d      	ldr	r0, [pc, #52]	@ (800195c <MX_TIM4_Init+0xa4>)
 8001928:	f004 fc9d 	bl	8006266 <HAL_TIM_Encoder_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001932:	f7ff fcb7 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800193e:	463b      	mov	r3, r7
 8001940:	4619      	mov	r1, r3
 8001942:	4806      	ldr	r0, [pc, #24]	@ (800195c <MX_TIM4_Init+0xa4>)
 8001944:	f005 fcf2 	bl	800732c <HAL_TIMEx_MasterConfigSynchronization>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800194e:	f7ff fca9 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	3730      	adds	r7, #48	@ 0x30
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200003a0 	.word	0x200003a0
 8001960:	40000800 	.word	0x40000800

08001964 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001974:	4b14      	ldr	r3, [pc, #80]	@ (80019c8 <MX_TIM6_Init+0x64>)
 8001976:	4a15      	ldr	r2, [pc, #84]	@ (80019cc <MX_TIM6_Init+0x68>)
 8001978:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 800197a:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <MX_TIM6_Init+0x64>)
 800197c:	22a9      	movs	r2, #169	@ 0xa9
 800197e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <MX_TIM6_Init+0x64>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <MX_TIM6_Init+0x64>)
 8001988:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800198c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198e:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <MX_TIM6_Init+0x64>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001994:	480c      	ldr	r0, [pc, #48]	@ (80019c8 <MX_TIM6_Init+0x64>)
 8001996:	f004 fb4b 	bl	8006030 <HAL_TIM_Base_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80019a0:	f7ff fc80 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019a4:	2320      	movs	r3, #32
 80019a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <MX_TIM6_Init+0x64>)
 80019b2:	f005 fcbb 	bl	800732c <HAL_TIMEx_MasterConfigSynchronization>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80019bc:	f7ff fc72 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200003ec 	.word	0x200003ec
 80019cc:	40001000 	.word	0x40001000

080019d0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80019e0:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <MX_TIM7_Init+0x64>)
 80019e2:	4a15      	ldr	r2, [pc, #84]	@ (8001a38 <MX_TIM7_Init+0x68>)
 80019e4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 80019e6:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <MX_TIM7_Init+0x64>)
 80019e8:	22a9      	movs	r2, #169	@ 0xa9
 80019ea:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <MX_TIM7_Init+0x64>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <MX_TIM7_Init+0x64>)
 80019f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019f8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <MX_TIM7_Init+0x64>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a00:	480c      	ldr	r0, [pc, #48]	@ (8001a34 <MX_TIM7_Init+0x64>)
 8001a02:	f004 fb15 	bl	8006030 <HAL_TIM_Base_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001a0c:	f7ff fc4a 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	@ (8001a34 <MX_TIM7_Init+0x64>)
 8001a1e:	f005 fc85 	bl	800732c <HAL_TIMEx_MasterConfigSynchronization>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001a28:	f7ff fc3c 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000438 	.word	0x20000438
 8001a38:	40001400 	.word	0x40001400

08001a3c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001a40:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <MX_TIM16_Init+0x48>)
 8001a42:	4a11      	ldr	r2, [pc, #68]	@ (8001a88 <MX_TIM16_Init+0x4c>)
 8001a44:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1699;
 8001a46:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <MX_TIM16_Init+0x48>)
 8001a48:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001a4c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a84 <MX_TIM16_Init+0x48>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <MX_TIM16_Init+0x48>)
 8001a56:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a5a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <MX_TIM16_Init+0x48>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001a62:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <MX_TIM16_Init+0x48>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <MX_TIM16_Init+0x48>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001a6e:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <MX_TIM16_Init+0x48>)
 8001a70:	f004 fade 	bl	8006030 <HAL_TIM_Base_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001a7a:	f7ff fc13 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000484 	.word	0x20000484
 8001a88:	40014400 	.word	0x40014400

08001a8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a28      	ldr	r2, [pc, #160]	@ (8001b3c <HAL_TIM_Base_MspInit+0xb0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a9e:	4b28      	ldr	r3, [pc, #160]	@ (8001b40 <HAL_TIM_Base_MspInit+0xb4>)
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa2:	4a27      	ldr	r2, [pc, #156]	@ (8001b40 <HAL_TIM_Base_MspInit+0xb4>)
 8001aa4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001aa8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aaa:	4b25      	ldr	r3, [pc, #148]	@ (8001b40 <HAL_TIM_Base_MspInit+0xb4>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001ab6:	e03c      	b.n	8001b32 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM6)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a21      	ldr	r2, [pc, #132]	@ (8001b44 <HAL_TIM_Base_MspInit+0xb8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d114      	bne.n	8001aec <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b40 <HAL_TIM_Base_MspInit+0xb4>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b40 <HAL_TIM_Base_MspInit+0xb4>)
 8001ac8:	f043 0310 	orr.w	r3, r3, #16
 8001acc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ace:	4b1c      	ldr	r3, [pc, #112]	@ (8001b40 <HAL_TIM_Base_MspInit+0xb4>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2105      	movs	r1, #5
 8001ade:	2036      	movs	r0, #54	@ 0x36
 8001ae0:	f001 fdff 	bl	80036e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ae4:	2036      	movs	r0, #54	@ 0x36
 8001ae6:	f001 fe16 	bl	8003716 <HAL_NVIC_EnableIRQ>
}
 8001aea:	e022      	b.n	8001b32 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM7)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a15      	ldr	r2, [pc, #84]	@ (8001b48 <HAL_TIM_Base_MspInit+0xbc>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10c      	bne.n	8001b10 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001af6:	4b12      	ldr	r3, [pc, #72]	@ (8001b40 <HAL_TIM_Base_MspInit+0xb4>)
 8001af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afa:	4a11      	ldr	r2, [pc, #68]	@ (8001b40 <HAL_TIM_Base_MspInit+0xb4>)
 8001afc:	f043 0320 	orr.w	r3, r3, #32
 8001b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b02:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <HAL_TIM_Base_MspInit+0xb4>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
}
 8001b0e:	e010      	b.n	8001b32 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM16)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0d      	ldr	r2, [pc, #52]	@ (8001b4c <HAL_TIM_Base_MspInit+0xc0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d10b      	bne.n	8001b32 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b1a:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <HAL_TIM_Base_MspInit+0xb4>)
 8001b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b1e:	4a08      	ldr	r2, [pc, #32]	@ (8001b40 <HAL_TIM_Base_MspInit+0xb4>)
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b24:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b26:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <HAL_TIM_Base_MspInit+0xb4>)
 8001b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40012c00 	.word	0x40012c00
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40001000 	.word	0x40001000
 8001b48:	40001400 	.word	0x40001400
 8001b4c:	40014400 	.word	0x40014400

08001b50 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08c      	sub	sp, #48	@ 0x30
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a2e      	ldr	r2, [pc, #184]	@ (8001c28 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d128      	bne.n	8001bc4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b72:	4b2e      	ldr	r3, [pc, #184]	@ (8001c2c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b76:	4a2d      	ldr	r2, [pc, #180]	@ (8001c2c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c2c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	61bb      	str	r3, [r7, #24]
 8001b88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8a:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8e:	4a27      	ldr	r2, [pc, #156]	@ (8001c2c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b96:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LIDAR_M_SCTR_Pin|ENCODER_RIGHT_A_Pin|ENCODER_RIGHT_B_Pin;
 8001ba2:	2332      	movs	r3, #50	@ 0x32
 8001ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	4619      	mov	r1, r3
 8001bbc:	481c      	ldr	r0, [pc, #112]	@ (8001c30 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001bbe:	f002 f837 	bl	8003c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001bc2:	e02c      	b.n	8001c1e <HAL_TIM_Encoder_MspInit+0xce>
  else if(tim_encoderHandle->Instance==TIM4)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c34 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d127      	bne.n	8001c1e <HAL_TIM_Encoder_MspInit+0xce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bce:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd2:	4a16      	ldr	r2, [pc, #88]	@ (8001c2c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bda:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be6:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bea:	4a10      	ldr	r2, [pc, #64]	@ (8001c2c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_LEFT_A_Pin|ENCODER_LEFT_B_Pin;
 8001bfe:	23c0      	movs	r3, #192	@ 0xc0
 8001c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	@ (8001c30 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c1a:	f002 f809 	bl	8003c30 <HAL_GPIO_Init>
}
 8001c1e:	bf00      	nop
 8001c20:	3730      	adds	r7, #48	@ 0x30
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40000400 	.word	0x40000400
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	48000400 	.word	0x48000400
 8001c34:	40000800 	.word	0x40000800

08001c38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc4 <HAL_TIM_MspPostInit+0x8c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d12f      	bne.n	8001cba <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc8 <HAL_TIM_MspPostInit+0x90>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8001cc8 <HAL_TIM_MspPostInit+0x90>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c66:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <HAL_TIM_MspPostInit+0x90>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = RIGHT_MOTOR_FWD_Pin|RIGHT_MOTOR_REV_Pin|LEFT_MOTOR_FWD_Pin;
 8001c72:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001c76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c84:	2306      	movs	r3, #6
 8001c86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c92:	f001 ffcd 	bl	8003c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEFT_MOTOR_REV_Pin;
 8001c96:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8001ca8:	230b      	movs	r3, #11
 8001caa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LEFT_MOTOR_REV_GPIO_Port, &GPIO_InitStruct);
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cb6:	f001 ffbb 	bl	8003c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cba:	bf00      	nop
 8001cbc:	3720      	adds	r7, #32
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40012c00 	.word	0x40012c00
 8001cc8:	40021000 	.word	0x40021000

08001ccc <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cd0:	4b24      	ldr	r3, [pc, #144]	@ (8001d64 <MX_UART4_Init+0x98>)
 8001cd2:	4a25      	ldr	r2, [pc, #148]	@ (8001d68 <MX_UART4_Init+0x9c>)
 8001cd4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001cd6:	4b23      	ldr	r3, [pc, #140]	@ (8001d64 <MX_UART4_Init+0x98>)
 8001cd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cdc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cde:	4b21      	ldr	r3, [pc, #132]	@ (8001d64 <MX_UART4_Init+0x98>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <MX_UART4_Init+0x98>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cea:	4b1e      	ldr	r3, [pc, #120]	@ (8001d64 <MX_UART4_Init+0x98>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <MX_UART4_Init+0x98>)
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d64 <MX_UART4_Init+0x98>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cfc:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <MX_UART4_Init+0x98>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d02:	4b18      	ldr	r3, [pc, #96]	@ (8001d64 <MX_UART4_Init+0x98>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d08:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <MX_UART4_Init+0x98>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001d0e:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <MX_UART4_Init+0x98>)
 8001d10:	2208      	movs	r2, #8
 8001d12:	629a      	str	r2, [r3, #40]	@ 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001d14:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <MX_UART4_Init+0x98>)
 8001d16:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d1a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d1c:	4811      	ldr	r0, [pc, #68]	@ (8001d64 <MX_UART4_Init+0x98>)
 8001d1e:	f005 fc59 	bl	80075d4 <HAL_UART_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_UART4_Init+0x60>
  {
    Error_Handler();
 8001d28:	f7ff fabc 	bl	80012a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	480d      	ldr	r0, [pc, #52]	@ (8001d64 <MX_UART4_Init+0x98>)
 8001d30:	f006 fa52 	bl	80081d8 <HAL_UARTEx_SetTxFifoThreshold>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8001d3a:	f7ff fab3 	bl	80012a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4808      	ldr	r0, [pc, #32]	@ (8001d64 <MX_UART4_Init+0x98>)
 8001d42:	f006 fa87 	bl	8008254 <HAL_UARTEx_SetRxFifoThreshold>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_UART4_Init+0x84>
  {
    Error_Handler();
 8001d4c:	f7ff faaa 	bl	80012a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001d50:	4804      	ldr	r0, [pc, #16]	@ (8001d64 <MX_UART4_Init+0x98>)
 8001d52:	f006 fa08 	bl	8008166 <HAL_UARTEx_DisableFifoMode>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_UART4_Init+0x94>
  {
    Error_Handler();
 8001d5c:	f7ff faa2 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	200004d0 	.word	0x200004d0
 8001d68:	40004c00 	.word	0x40004c00

08001d6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d70:	4b22      	ldr	r3, [pc, #136]	@ (8001dfc <MX_USART3_UART_Init+0x90>)
 8001d72:	4a23      	ldr	r2, [pc, #140]	@ (8001e00 <MX_USART3_UART_Init+0x94>)
 8001d74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 128000;
 8001d76:	4b21      	ldr	r3, [pc, #132]	@ (8001dfc <MX_USART3_UART_Init+0x90>)
 8001d78:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8001d7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <MX_USART3_UART_Init+0x90>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d84:	4b1d      	ldr	r3, [pc, #116]	@ (8001dfc <MX_USART3_UART_Init+0x90>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <MX_USART3_UART_Init+0x90>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d90:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <MX_USART3_UART_Init+0x90>)
 8001d92:	220c      	movs	r2, #12
 8001d94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d96:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <MX_USART3_UART_Init+0x90>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9c:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <MX_USART3_UART_Init+0x90>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001da2:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <MX_USART3_UART_Init+0x90>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001da8:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <MX_USART3_UART_Init+0x90>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dae:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <MX_USART3_UART_Init+0x90>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001db4:	4811      	ldr	r0, [pc, #68]	@ (8001dfc <MX_USART3_UART_Init+0x90>)
 8001db6:	f005 fc0d 	bl	80075d4 <HAL_UART_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001dc0:	f7ff fa70 	bl	80012a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	480d      	ldr	r0, [pc, #52]	@ (8001dfc <MX_USART3_UART_Init+0x90>)
 8001dc8:	f006 fa06 	bl	80081d8 <HAL_UARTEx_SetTxFifoThreshold>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001dd2:	f7ff fa67 	bl	80012a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4808      	ldr	r0, [pc, #32]	@ (8001dfc <MX_USART3_UART_Init+0x90>)
 8001dda:	f006 fa3b 	bl	8008254 <HAL_UARTEx_SetRxFifoThreshold>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001de4:	f7ff fa5e 	bl	80012a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001de8:	4804      	ldr	r0, [pc, #16]	@ (8001dfc <MX_USART3_UART_Init+0x90>)
 8001dea:	f006 f9bc 	bl	8008166 <HAL_UARTEx_DisableFifoMode>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001df4:	f7ff fa56 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000564 	.word	0x20000564
 8001e00:	40004800 	.word	0x40004800

08001e04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b09c      	sub	sp, #112	@ 0x70
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e1c:	f107 0318 	add.w	r3, r7, #24
 8001e20:	2244      	movs	r2, #68	@ 0x44
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f009 f857 	bl	800aed8 <memset>
  if(uartHandle->Instance==UART4)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f24 <HAL_UART_MspInit+0x120>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d137      	bne.n	8001ea4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e34:	2308      	movs	r3, #8
 8001e36:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e3c:	f107 0318 	add.w	r3, r7, #24
 8001e40:	4618      	mov	r0, r3
 8001e42:	f002 ffd1 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e4c:	f7ff fa2a 	bl	80012a4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e50:	4b35      	ldr	r3, [pc, #212]	@ (8001f28 <HAL_UART_MspInit+0x124>)
 8001e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e54:	4a34      	ldr	r2, [pc, #208]	@ (8001f28 <HAL_UART_MspInit+0x124>)
 8001e56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e5c:	4b32      	ldr	r3, [pc, #200]	@ (8001f28 <HAL_UART_MspInit+0x124>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e68:	4b2f      	ldr	r3, [pc, #188]	@ (8001f28 <HAL_UART_MspInit+0x124>)
 8001e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f28 <HAL_UART_MspInit+0x124>)
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e74:	4b2c      	ldr	r3, [pc, #176]	@ (8001f28 <HAL_UART_MspInit+0x124>)
 8001e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001e80:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001e92:	2305      	movs	r3, #5
 8001e94:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e96:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4823      	ldr	r0, [pc, #140]	@ (8001f2c <HAL_UART_MspInit+0x128>)
 8001e9e:	f001 fec7 	bl	8003c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ea2:	e03b      	b.n	8001f1c <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a21      	ldr	r2, [pc, #132]	@ (8001f30 <HAL_UART_MspInit+0x12c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d136      	bne.n	8001f1c <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb6:	f107 0318 	add.w	r3, r7, #24
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f002 ff94 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001ec6:	f7ff f9ed 	bl	80012a4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eca:	4b17      	ldr	r3, [pc, #92]	@ (8001f28 <HAL_UART_MspInit+0x124>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ece:	4a16      	ldr	r2, [pc, #88]	@ (8001f28 <HAL_UART_MspInit+0x124>)
 8001ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ed6:	4b14      	ldr	r3, [pc, #80]	@ (8001f28 <HAL_UART_MspInit+0x124>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <HAL_UART_MspInit+0x124>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee6:	4a10      	ldr	r2, [pc, #64]	@ (8001f28 <HAL_UART_MspInit+0x124>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eee:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <HAL_UART_MspInit+0x124>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_INPUT_Pin|LIDAR_OUTPUT_Pin;
 8001efa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001efe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f0c:	2307      	movs	r3, #7
 8001f0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f10:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001f14:	4619      	mov	r1, r3
 8001f16:	4807      	ldr	r0, [pc, #28]	@ (8001f34 <HAL_UART_MspInit+0x130>)
 8001f18:	f001 fe8a 	bl	8003c30 <HAL_GPIO_Init>
}
 8001f1c:	bf00      	nop
 8001f1e:	3770      	adds	r7, #112	@ 0x70
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40004c00 	.word	0x40004c00
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	48000800 	.word	0x48000800
 8001f30:	40004800 	.word	0x40004800
 8001f34:	48000400 	.word	0x48000400

08001f38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f38:	480d      	ldr	r0, [pc, #52]	@ (8001f70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f3a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f3c:	f7ff fb80 	bl	8001640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f40:	480c      	ldr	r0, [pc, #48]	@ (8001f74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f42:	490d      	ldr	r1, [pc, #52]	@ (8001f78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f44:	4a0d      	ldr	r2, [pc, #52]	@ (8001f7c <LoopForever+0xe>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f48:	e002      	b.n	8001f50 <LoopCopyDataInit>

08001f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4e:	3304      	adds	r3, #4

08001f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f54:	d3f9      	bcc.n	8001f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f56:	4a0a      	ldr	r2, [pc, #40]	@ (8001f80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f58:	4c0a      	ldr	r4, [pc, #40]	@ (8001f84 <LoopForever+0x16>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f5c:	e001      	b.n	8001f62 <LoopFillZerobss>

08001f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f60:	3204      	adds	r2, #4

08001f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f64:	d3fb      	bcc.n	8001f5e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001f66:	f009 f82b 	bl	800afc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f6a:	f7ff f8cd 	bl	8001108 <main>

08001f6e <LoopForever>:

LoopForever:
    b LoopForever
 8001f6e:	e7fe      	b.n	8001f6e <LoopForever>
  ldr   r0, =_estack
 8001f70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f78:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001f7c:	0800bdcc 	.word	0x0800bdcc
  ldr r2, =_sbss
 8001f80:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001f84:	20001518 	.word	0x20001518

08001f88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f88:	e7fe      	b.n	8001f88 <ADC1_2_IRQHandler>

08001f8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f94:	2003      	movs	r0, #3
 8001f96:	f001 fb99 	bl	80036cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f9a:	200f      	movs	r0, #15
 8001f9c:	f000 f80e 	bl	8001fbc <HAL_InitTick>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	71fb      	strb	r3, [r7, #7]
 8001faa:	e001      	b.n	8001fb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fac:	f7ff fa00 	bl	80013b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fb0:	79fb      	ldrb	r3, [r7, #7]

}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001fc8:	4b16      	ldr	r3, [pc, #88]	@ (8002024 <HAL_InitTick+0x68>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d022      	beq.n	8002016 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001fd0:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <HAL_InitTick+0x6c>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b13      	ldr	r3, [pc, #76]	@ (8002024 <HAL_InitTick+0x68>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f001 fba4 	bl	8003732 <HAL_SYSTICK_Config>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10f      	bne.n	8002010 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	d809      	bhi.n	800200a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ffe:	f001 fb70 	bl	80036e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002002:	4a0a      	ldr	r2, [pc, #40]	@ (800202c <HAL_InitTick+0x70>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e007      	b.n	800201a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	e004      	b.n	800201a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e001      	b.n	800201a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000008 	.word	0x20000008
 8002028:	20000000 	.word	0x20000000
 800202c:	20000004 	.word	0x20000004

08002030 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_IncTick+0x1c>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b05      	ldr	r3, [pc, #20]	@ (8002050 <HAL_IncTick+0x20>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4413      	add	r3, r2
 800203e:	4a03      	ldr	r2, [pc, #12]	@ (800204c <HAL_IncTick+0x1c>)
 8002040:	6013      	str	r3, [r2, #0]
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	200005f8 	.word	0x200005f8
 8002050:	20000008 	.word	0x20000008

08002054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return uwTick;
 8002058:	4b03      	ldr	r3, [pc, #12]	@ (8002068 <HAL_GetTick+0x14>)
 800205a:	681b      	ldr	r3, [r3, #0]
}
 800205c:	4618      	mov	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	200005f8 	.word	0x200005f8

0800206c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002074:	f7ff ffee 	bl	8002054 <HAL_GetTick>
 8002078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002084:	d004      	beq.n	8002090 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002086:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <HAL_Delay+0x40>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4413      	add	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002090:	bf00      	nop
 8002092:	f7ff ffdf 	bl	8002054 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d8f7      	bhi.n	8002092 <HAL_Delay+0x26>
  {
  }
}
 80020a2:	bf00      	nop
 80020a4:	bf00      	nop
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000008 	.word	0x20000008

080020b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	609a      	str	r2, [r3, #8]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	609a      	str	r2, [r3, #8]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3360      	adds	r3, #96	@ 0x60
 800212a:	461a      	mov	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <LL_ADC_SetOffset+0x44>)
 800213a:	4013      	ands	r3, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	4313      	orrs	r3, r2
 8002148:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002150:	bf00      	nop
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	03fff000 	.word	0x03fff000

08002160 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3360      	adds	r3, #96	@ 0x60
 800216e:	461a      	mov	r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3360      	adds	r3, #96	@ 0x60
 800219c:	461a      	mov	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021b6:	bf00      	nop
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b087      	sub	sp, #28
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	3360      	adds	r3, #96	@ 0x60
 80021d2:	461a      	mov	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80021ec:	bf00      	nop
 80021ee:	371c      	adds	r7, #28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3360      	adds	r3, #96	@ 0x60
 8002208:	461a      	mov	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	431a      	orrs	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	615a      	str	r2, [r3, #20]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800227a:	b480      	push	{r7}
 800227c:	b087      	sub	sp, #28
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3330      	adds	r3, #48	@ 0x30
 800228a:	461a      	mov	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	4413      	add	r3, r2
 8002298:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	211f      	movs	r1, #31
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	401a      	ands	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	0e9b      	lsrs	r3, r3, #26
 80022b2:	f003 011f 	and.w	r1, r3, #31
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	fa01 f303 	lsl.w	r3, r1, r3
 80022c0:	431a      	orrs	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022c6:	bf00      	nop
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b087      	sub	sp, #28
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3314      	adds	r3, #20
 80022e2:	461a      	mov	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	0e5b      	lsrs	r3, r3, #25
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	4413      	add	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	0d1b      	lsrs	r3, r3, #20
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	2107      	movs	r1, #7
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	401a      	ands	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	0d1b      	lsrs	r3, r3, #20
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	431a      	orrs	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800231c:	bf00      	nop
 800231e:	371c      	adds	r7, #28
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002340:	43db      	mvns	r3, r3
 8002342:	401a      	ands	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f003 0318 	and.w	r3, r3, #24
 800234a:	4908      	ldr	r1, [pc, #32]	@ (800236c <LL_ADC_SetChannelSingleDiff+0x44>)
 800234c:	40d9      	lsrs	r1, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	400b      	ands	r3, r1
 8002352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002356:	431a      	orrs	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	0007ffff 	.word	0x0007ffff

08002370 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 031f 	and.w	r3, r3, #31
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800239c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6093      	str	r3, [r2, #8]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023c4:	d101      	bne.n	80023ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80023e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002410:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002414:	d101      	bne.n	800241a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002438:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800243c:	f043 0201 	orr.w	r2, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <LL_ADC_IsEnabled+0x18>
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <LL_ADC_IsEnabled+0x1a>
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002486:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800248a:	f043 0204 	orr.w	r2, r3, #4
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d101      	bne.n	80024b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d101      	bne.n	80024dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b089      	sub	sp, #36	@ 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e167      	b.n	80027d6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7fe fa37 	bl	8000988 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff3f 	bl	80023b0 <LL_ADC_IsDeepPowerDownEnabled>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d004      	beq.n	8002542 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff25 	bl	800238c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff5a 	bl	8002400 <LL_ADC_IsInternalRegulatorEnabled>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d115      	bne.n	800257e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff3e 	bl	80023d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800255c:	4ba0      	ldr	r3, [pc, #640]	@ (80027e0 <HAL_ADC_Init+0x2f4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	099b      	lsrs	r3, r3, #6
 8002562:	4aa0      	ldr	r2, [pc, #640]	@ (80027e4 <HAL_ADC_Init+0x2f8>)
 8002564:	fba2 2303 	umull	r2, r3, r2, r3
 8002568:	099b      	lsrs	r3, r3, #6
 800256a:	3301      	adds	r3, #1
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002570:	e002      	b.n	8002578 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	3b01      	subs	r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f9      	bne.n	8002572 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ff3c 	bl	8002400 <LL_ADC_IsInternalRegulatorEnabled>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10d      	bne.n	80025aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002592:	f043 0210 	orr.w	r2, r3, #16
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800259e:	f043 0201 	orr.w	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ff75 	bl	800249e <LL_ADC_REG_IsConversionOngoing>
 80025b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f040 8100 	bne.w	80027c4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f040 80fc 	bne.w	80027c4 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80025d4:	f043 0202 	orr.w	r2, r3, #2
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff35 	bl	8002450 <LL_ADC_IsEnabled>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d111      	bne.n	8002610 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80025f0:	f7ff ff2e 	bl	8002450 <LL_ADC_IsEnabled>
 80025f4:	4604      	mov	r4, r0
 80025f6:	487c      	ldr	r0, [pc, #496]	@ (80027e8 <HAL_ADC_Init+0x2fc>)
 80025f8:	f7ff ff2a 	bl	8002450 <LL_ADC_IsEnabled>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4323      	orrs	r3, r4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	4619      	mov	r1, r3
 800260a:	4878      	ldr	r0, [pc, #480]	@ (80027ec <HAL_ADC_Init+0x300>)
 800260c:	f7ff fd50 	bl	80020b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	7f5b      	ldrb	r3, [r3, #29]
 8002614:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800261a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002620:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002626:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800262e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800263a:	2b01      	cmp	r3, #1
 800263c:	d106      	bne.n	800264c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002642:	3b01      	subs	r3, #1
 8002644:	045b      	lsls	r3, r3, #17
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002650:	2b00      	cmp	r3, #0
 8002652:	d009      	beq.n	8002668 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002658:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002660:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	4b60      	ldr	r3, [pc, #384]	@ (80027f0 <HAL_ADC_Init+0x304>)
 8002670:	4013      	ands	r3, r2
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	69b9      	ldr	r1, [r7, #24]
 8002678:	430b      	orrs	r3, r1
 800267a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff ff14 	bl	80024c4 <LL_ADC_INJ_IsConversionOngoing>
 800269c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d16d      	bne.n	8002780 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d16a      	bne.n	8002780 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026ae:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026b6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026c6:	f023 0302 	bic.w	r3, r3, #2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	69b9      	ldr	r1, [r7, #24]
 80026d0:	430b      	orrs	r3, r1
 80026d2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d017      	beq.n	800270c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80026ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80026f4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80026f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6911      	ldr	r1, [r2, #16]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	430b      	orrs	r3, r1
 8002706:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800270a:	e013      	b.n	8002734 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691a      	ldr	r2, [r3, #16]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800271a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800272c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002730:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800273a:	2b01      	cmp	r3, #1
 800273c:	d118      	bne.n	8002770 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002748:	f023 0304 	bic.w	r3, r3, #4
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002754:	4311      	orrs	r1, r2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800275a:	4311      	orrs	r1, r2
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002760:	430a      	orrs	r2, r1
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	611a      	str	r2, [r3, #16]
 800276e:	e007      	b.n	8002780 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d10c      	bne.n	80027a2 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f023 010f 	bic.w	r1, r3, #15
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	1e5a      	subs	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	631a      	str	r2, [r3, #48]	@ 0x30
 80027a0:	e007      	b.n	80027b2 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 020f 	bic.w	r2, r2, #15
 80027b0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b6:	f023 0303 	bic.w	r3, r3, #3
 80027ba:	f043 0201 	orr.w	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027c2:	e007      	b.n	80027d4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c8:	f043 0210 	orr.w	r2, r3, #16
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3724      	adds	r7, #36	@ 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd90      	pop	{r4, r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000000 	.word	0x20000000
 80027e4:	053e2d63 	.word	0x053e2d63
 80027e8:	50000100 	.word	0x50000100
 80027ec:	50000300 	.word	0x50000300
 80027f0:	fff04007 	.word	0xfff04007

080027f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002800:	4851      	ldr	r0, [pc, #324]	@ (8002948 <HAL_ADC_Start_DMA+0x154>)
 8002802:	f7ff fdb5 	bl	8002370 <LL_ADC_GetMultimode>
 8002806:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fe46 	bl	800249e <LL_ADC_REG_IsConversionOngoing>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	f040 808f 	bne.w	8002938 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_ADC_Start_DMA+0x34>
 8002824:	2302      	movs	r3, #2
 8002826:	e08a      	b.n	800293e <HAL_ADC_Start_DMA+0x14a>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b05      	cmp	r3, #5
 800283a:	d002      	beq.n	8002842 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	2b09      	cmp	r3, #9
 8002840:	d173      	bne.n	800292a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fc8e 	bl	8003164 <ADC_Enable>
 8002848:	4603      	mov	r3, r0
 800284a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d166      	bne.n	8002920 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002856:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a38      	ldr	r2, [pc, #224]	@ (800294c <HAL_ADC_Start_DMA+0x158>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d002      	beq.n	8002876 <HAL_ADC_Start_DMA+0x82>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	e001      	b.n	800287a <HAL_ADC_Start_DMA+0x86>
 8002876:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	4293      	cmp	r3, r2
 8002880:	d002      	beq.n	8002888 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d105      	bne.n	8002894 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002898:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d006      	beq.n	80028ae <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a4:	f023 0206 	bic.w	r2, r3, #6
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	661a      	str	r2, [r3, #96]	@ 0x60
 80028ac:	e002      	b.n	80028b4 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b8:	4a25      	ldr	r2, [pc, #148]	@ (8002950 <HAL_ADC_Start_DMA+0x15c>)
 80028ba:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c0:	4a24      	ldr	r2, [pc, #144]	@ (8002954 <HAL_ADC_Start_DMA+0x160>)
 80028c2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c8:	4a23      	ldr	r2, [pc, #140]	@ (8002958 <HAL_ADC_Start_DMA+0x164>)
 80028ca:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	221c      	movs	r2, #28
 80028d2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0210 	orr.w	r2, r2, #16
 80028ea:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3340      	adds	r3, #64	@ 0x40
 8002906:	4619      	mov	r1, r3
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f000 ffc6 	bl	800389c <HAL_DMA_Start_IT>
 8002910:	4603      	mov	r3, r0
 8002912:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fdac 	bl	8002476 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800291e:	e00d      	b.n	800293c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002928:	e008      	b.n	800293c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002936:	e001      	b.n	800293c <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002938:	2302      	movs	r3, #2
 800293a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800293c:	7dfb      	ldrb	r3, [r7, #23]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	50000300 	.word	0x50000300
 800294c:	50000100 	.word	0x50000100
 8002950:	08003271 	.word	0x08003271
 8002954:	08003349 	.word	0x08003349
 8002958:	08003365 	.word	0x08003365

0800295c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b0b6      	sub	sp, #216	@ 0xd8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x22>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e3c8      	b.n	8003138 <HAL_ADC_ConfigChannel+0x7b4>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fd73 	bl	800249e <LL_ADC_REG_IsConversionOngoing>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 83ad 	bne.w	800311a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	f7ff fc54 	bl	800227a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fd61 	bl	800249e <LL_ADC_REG_IsConversionOngoing>
 80029dc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fd6d 	bl	80024c4 <LL_ADC_INJ_IsConversionOngoing>
 80029ea:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f040 81d9 	bne.w	8002daa <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f040 81d4 	bne.w	8002daa <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a0a:	d10f      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2200      	movs	r2, #0
 8002a16:	4619      	mov	r1, r3
 8002a18:	f7ff fc5b 	bl	80022d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fc02 	bl	800222e <LL_ADC_SetSamplingTimeCommonConfig>
 8002a2a:	e00e      	b.n	8002a4a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	6819      	ldr	r1, [r3, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f7ff fc4a 	bl	80022d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2100      	movs	r1, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fbf2 	bl	800222e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	08db      	lsrs	r3, r3, #3
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d022      	beq.n	8002ab2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6919      	ldr	r1, [r3, #16]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a7c:	f7ff fb4c 	bl	8002118 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	6919      	ldr	r1, [r3, #16]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f7ff fb98 	bl	80021c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d102      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x124>
 8002aa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aa6:	e000      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x126>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f7ff fba4 	bl	80021f8 <LL_ADC_SetOffsetSaturation>
 8002ab0:	e17b      	b.n	8002daa <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fb51 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x15a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2100      	movs	r1, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fb46 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	0e9b      	lsrs	r3, r3, #26
 8002ad8:	f003 021f 	and.w	r2, r3, #31
 8002adc:	e01e      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x198>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fb3b 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002afc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	e004      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002b10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b14:	fab3 f383 	clz	r3, r3
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x1b0>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	0e9b      	lsrs	r3, r3, #26
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	e018      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x1e2>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002b50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002b58:	2320      	movs	r3, #32
 8002b5a:	e004      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002b5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d106      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fb0a 	bl	800218c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff faee 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10a      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x220>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2101      	movs	r1, #1
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fae3 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	0e9b      	lsrs	r3, r3, #26
 8002b9e:	f003 021f 	and.w	r2, r3, #31
 8002ba2:	e01e      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x25e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2101      	movs	r1, #1
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fad8 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bba:	fa93 f3a3 	rbit	r3, r3
 8002bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002bca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002bd2:	2320      	movs	r3, #32
 8002bd4:	e004      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002bd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bda:	fab3 f383 	clz	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d105      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x276>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	0e9b      	lsrs	r3, r3, #26
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	e018      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x2a8>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002c0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002c16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002c1e:	2320      	movs	r3, #32
 8002c20:	e004      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002c22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d106      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2200      	movs	r2, #0
 8002c36:	2101      	movs	r1, #1
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff faa7 	bl	800218c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2102      	movs	r1, #2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fa8b 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x2e6>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2102      	movs	r1, #2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fa80 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002c60:	4603      	mov	r3, r0
 8002c62:	0e9b      	lsrs	r3, r3, #26
 8002c64:	f003 021f 	and.w	r2, r3, #31
 8002c68:	e01e      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x324>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2102      	movs	r1, #2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fa75 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002c88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002c90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002c98:	2320      	movs	r3, #32
 8002c9a:	e004      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002c9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d105      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x33c>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	e016      	b.n	8002cee <HAL_ADC_ConfigChannel+0x36a>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002cd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002cd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e004      	b.n	8002cee <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d106      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fa46 	bl	800218c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2103      	movs	r1, #3
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fa2a 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x3a8>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2103      	movs	r1, #3
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fa1f 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002d22:	4603      	mov	r3, r0
 8002d24:	0e9b      	lsrs	r3, r3, #26
 8002d26:	f003 021f 	and.w	r2, r3, #31
 8002d2a:	e017      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x3d8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2103      	movs	r1, #3
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fa14 	bl	8002160 <LL_ADC_GetOffsetChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002d44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d46:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002d48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002d4e:	2320      	movs	r3, #32
 8002d50:	e003      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002d52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d105      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x3f0>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	0e9b      	lsrs	r3, r3, #26
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	e011      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x414>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002d82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d84:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002d86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	e003      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d106      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2200      	movs	r2, #0
 8002da2:	2103      	movs	r1, #3
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff f9f1 	bl	800218c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fb4e 	bl	8002450 <LL_ADC_IsEnabled>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f040 8140 	bne.w	800303c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6819      	ldr	r1, [r3, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f7ff faad 	bl	8002328 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	4a8f      	ldr	r2, [pc, #572]	@ (8003010 <HAL_ADC_ConfigChannel+0x68c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	f040 8131 	bne.w	800303c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10b      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x47e>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	0e9b      	lsrs	r3, r3, #26
 8002df0:	3301      	adds	r3, #1
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	2b09      	cmp	r3, #9
 8002df8:	bf94      	ite	ls
 8002dfa:	2301      	movls	r3, #1
 8002dfc:	2300      	movhi	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	e019      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x4b2>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002e10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e12:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002e14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002e1a:	2320      	movs	r3, #32
 8002e1c:	e003      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002e1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	3301      	adds	r3, #1
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2b09      	cmp	r3, #9
 8002e2e:	bf94      	ite	ls
 8002e30:	2301      	movls	r3, #1
 8002e32:	2300      	movhi	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d079      	beq.n	8002f2e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d107      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x4d2>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	0e9b      	lsrs	r3, r3, #26
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	069b      	lsls	r3, r3, #26
 8002e50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e54:	e015      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x4fe>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e66:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002e6e:	2320      	movs	r3, #32
 8002e70:	e003      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	069b      	lsls	r3, r3, #26
 8002e7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x51e>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	0e9b      	lsrs	r3, r3, #26
 8002e94:	3301      	adds	r3, #1
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea0:	e017      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x54e>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002eb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002eba:	2320      	movs	r3, #32
 8002ebc:	e003      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	2101      	movs	r1, #1
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	ea42 0103 	orr.w	r1, r2, r3
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x574>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	0e9b      	lsrs	r3, r3, #26
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f003 021f 	and.w	r2, r3, #31
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	051b      	lsls	r3, r3, #20
 8002ef6:	e018      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x5a6>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002f10:	2320      	movs	r3, #32
 8002f12:	e003      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f003 021f 	and.w	r2, r3, #31
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	e081      	b.n	8003032 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d107      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x5c6>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	0e9b      	lsrs	r3, r3, #26
 8002f40:	3301      	adds	r3, #1
 8002f42:	069b      	lsls	r3, r3, #26
 8002f44:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f48:	e015      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x5f2>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f5a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002f62:	2320      	movs	r3, #32
 8002f64:	e003      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	069b      	lsls	r3, r3, #26
 8002f72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x612>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	0e9b      	lsrs	r3, r3, #26
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2101      	movs	r1, #1
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	e017      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x642>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	61fb      	str	r3, [r7, #28]
  return result;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002fae:	2320      	movs	r3, #32
 8002fb0:	e003      	b.n	8002fba <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc6:	ea42 0103 	orr.w	r1, r2, r3
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10d      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x66e>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	0e9b      	lsrs	r3, r3, #26
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f003 021f 	and.w	r2, r3, #31
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3b1e      	subs	r3, #30
 8002fea:	051b      	lsls	r3, r3, #20
 8002fec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ff0:	e01e      	b.n	8003030 <HAL_ADC_ConfigChannel+0x6ac>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	613b      	str	r3, [r7, #16]
  return result;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d104      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800300a:	2320      	movs	r3, #32
 800300c:	e006      	b.n	800301c <HAL_ADC_ConfigChannel+0x698>
 800300e:	bf00      	nop
 8003010:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	3301      	adds	r3, #1
 800301e:	f003 021f 	and.w	r2, r3, #31
 8003022:	4613      	mov	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	3b1e      	subs	r3, #30
 800302a:	051b      	lsls	r3, r3, #20
 800302c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003030:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003036:	4619      	mov	r1, r3
 8003038:	f7ff f94b 	bl	80022d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b3f      	ldr	r3, [pc, #252]	@ (8003140 <HAL_ADC_ConfigChannel+0x7bc>)
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d071      	beq.n	800312c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003048:	483e      	ldr	r0, [pc, #248]	@ (8003144 <HAL_ADC_ConfigChannel+0x7c0>)
 800304a:	f7ff f857 	bl	80020fc <LL_ADC_GetCommonPathInternalCh>
 800304e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a3c      	ldr	r2, [pc, #240]	@ (8003148 <HAL_ADC_ConfigChannel+0x7c4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d004      	beq.n	8003066 <HAL_ADC_ConfigChannel+0x6e2>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a3a      	ldr	r2, [pc, #232]	@ (800314c <HAL_ADC_ConfigChannel+0x7c8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d127      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003066:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800306a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d121      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800307a:	d157      	bne.n	800312c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800307c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003080:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003084:	4619      	mov	r1, r3
 8003086:	482f      	ldr	r0, [pc, #188]	@ (8003144 <HAL_ADC_ConfigChannel+0x7c0>)
 8003088:	f7ff f825 	bl	80020d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800308c:	4b30      	ldr	r3, [pc, #192]	@ (8003150 <HAL_ADC_ConfigChannel+0x7cc>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	099b      	lsrs	r3, r3, #6
 8003092:	4a30      	ldr	r2, [pc, #192]	@ (8003154 <HAL_ADC_ConfigChannel+0x7d0>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	099b      	lsrs	r3, r3, #6
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030a6:	e002      	b.n	80030ae <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f9      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030b4:	e03a      	b.n	800312c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a27      	ldr	r2, [pc, #156]	@ (8003158 <HAL_ADC_ConfigChannel+0x7d4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d113      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10d      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a22      	ldr	r2, [pc, #136]	@ (800315c <HAL_ADC_ConfigChannel+0x7d8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d02a      	beq.n	800312c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030de:	4619      	mov	r1, r3
 80030e0:	4818      	ldr	r0, [pc, #96]	@ (8003144 <HAL_ADC_ConfigChannel+0x7c0>)
 80030e2:	f7fe fff8 	bl	80020d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030e6:	e021      	b.n	800312c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003160 <HAL_ADC_ConfigChannel+0x7dc>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d11c      	bne.n	800312c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d116      	bne.n	800312c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a16      	ldr	r2, [pc, #88]	@ (800315c <HAL_ADC_ConfigChannel+0x7d8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d011      	beq.n	800312c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003108:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800310c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003110:	4619      	mov	r1, r3
 8003112:	480c      	ldr	r0, [pc, #48]	@ (8003144 <HAL_ADC_ConfigChannel+0x7c0>)
 8003114:	f7fe ffdf 	bl	80020d6 <LL_ADC_SetCommonPathInternalCh>
 8003118:	e008      	b.n	800312c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311e:	f043 0220 	orr.w	r2, r3, #32
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003134:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003138:	4618      	mov	r0, r3
 800313a:	37d8      	adds	r7, #216	@ 0xd8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	80080000 	.word	0x80080000
 8003144:	50000300 	.word	0x50000300
 8003148:	c3210000 	.word	0xc3210000
 800314c:	90c00010 	.word	0x90c00010
 8003150:	20000000 	.word	0x20000000
 8003154:	053e2d63 	.word	0x053e2d63
 8003158:	c7520000 	.word	0xc7520000
 800315c:	50000100 	.word	0x50000100
 8003160:	cb840000 	.word	0xcb840000

08003164 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800316c:	2300      	movs	r3, #0
 800316e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff f96b 	bl	8002450 <LL_ADC_IsEnabled>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d169      	bne.n	8003254 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	4b36      	ldr	r3, [pc, #216]	@ (8003260 <ADC_Enable+0xfc>)
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00d      	beq.n	80031aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003192:	f043 0210 	orr.w	r2, r3, #16
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319e:	f043 0201 	orr.w	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e055      	b.n	8003256 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff f93a 	bl	8002428 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80031b4:	482b      	ldr	r0, [pc, #172]	@ (8003264 <ADC_Enable+0x100>)
 80031b6:	f7fe ffa1 	bl	80020fc <LL_ADC_GetCommonPathInternalCh>
 80031ba:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80031bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d013      	beq.n	80031ec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031c4:	4b28      	ldr	r3, [pc, #160]	@ (8003268 <ADC_Enable+0x104>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	099b      	lsrs	r3, r3, #6
 80031ca:	4a28      	ldr	r2, [pc, #160]	@ (800326c <ADC_Enable+0x108>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031de:	e002      	b.n	80031e6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f9      	bne.n	80031e0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031ec:	f7fe ff32 	bl	8002054 <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031f2:	e028      	b.n	8003246 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff f929 	bl	8002450 <LL_ADC_IsEnabled>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d104      	bne.n	800320e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff f90d 	bl	8002428 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800320e:	f7fe ff21 	bl	8002054 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d914      	bls.n	8003246 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d00d      	beq.n	8003246 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322e:	f043 0210 	orr.w	r2, r3, #16
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323a:	f043 0201 	orr.w	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e007      	b.n	8003256 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d1cf      	bne.n	80031f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	8000003f 	.word	0x8000003f
 8003264:	50000300 	.word	0x50000300
 8003268:	20000000 	.word	0x20000000
 800326c:	053e2d63 	.word	0x053e2d63

08003270 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003282:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003286:	2b00      	cmp	r3, #0
 8003288:	d14b      	bne.n	8003322 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d021      	beq.n	80032e8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe ffd3 	bl	8002254 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d032      	beq.n	800331a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d12b      	bne.n	800331a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d11f      	bne.n	800331a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032e6:	e018      	b.n	800331a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d111      	bne.n	800331a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003306:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d105      	bne.n	800331a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003312:	f043 0201 	orr.w	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f7fd fcca 	bl	8000cb4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003320:	e00e      	b.n	8003340 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f7ff fb1e 	bl	8002970 <HAL_ADC_ErrorCallback>
}
 8003334:	e004      	b.n	8003340 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4798      	blx	r3
}
 8003340:	bf00      	nop
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f7ff fb00 	bl	800295c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800335c:	bf00      	nop
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003370:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003376:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003382:	f043 0204 	orr.w	r2, r3, #4
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f7ff faf0 	bl	8002970 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <LL_ADC_IsEnabled>:
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <LL_ADC_IsEnabled+0x18>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <LL_ADC_IsEnabled+0x1a>
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <LL_ADC_REG_IsConversionOngoing>:
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d101      	bne.n	80033d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b0a1      	sub	sp, #132	@ 0x84
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033fe:	2302      	movs	r3, #2
 8003400:	e08b      	b.n	800351a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800340a:	2300      	movs	r3, #0
 800340c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800340e:	2300      	movs	r3, #0
 8003410:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800341a:	d102      	bne.n	8003422 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800341c:	4b41      	ldr	r3, [pc, #260]	@ (8003524 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	e001      	b.n	8003426 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10b      	bne.n	8003444 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e06a      	b.n	800351a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff ffb9 	bl	80033be <LL_ADC_REG_IsConversionOngoing>
 800344c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff ffb3 	bl	80033be <LL_ADC_REG_IsConversionOngoing>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d14c      	bne.n	80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800345e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003460:	2b00      	cmp	r3, #0
 8003462:	d149      	bne.n	80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003464:	4b30      	ldr	r3, [pc, #192]	@ (8003528 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003466:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d028      	beq.n	80034c2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003470:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003482:	035b      	lsls	r3, r3, #13
 8003484:	430b      	orrs	r3, r1
 8003486:	431a      	orrs	r2, r3
 8003488:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800348a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800348c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003490:	f7ff ff82 	bl	8003398 <LL_ADC_IsEnabled>
 8003494:	4604      	mov	r4, r0
 8003496:	4823      	ldr	r0, [pc, #140]	@ (8003524 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003498:	f7ff ff7e 	bl	8003398 <LL_ADC_IsEnabled>
 800349c:	4603      	mov	r3, r0
 800349e:	4323      	orrs	r3, r4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d133      	bne.n	800350c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80034ac:	f023 030f 	bic.w	r3, r3, #15
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	6811      	ldr	r1, [r2, #0]
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	6892      	ldr	r2, [r2, #8]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	431a      	orrs	r2, r3
 80034bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034be:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034c0:	e024      	b.n	800350c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034ce:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80034d2:	f7ff ff61 	bl	8003398 <LL_ADC_IsEnabled>
 80034d6:	4604      	mov	r4, r0
 80034d8:	4812      	ldr	r0, [pc, #72]	@ (8003524 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80034da:	f7ff ff5d 	bl	8003398 <LL_ADC_IsEnabled>
 80034de:	4603      	mov	r3, r0
 80034e0:	4323      	orrs	r3, r4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d112      	bne.n	800350c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80034ee:	f023 030f 	bic.w	r3, r3, #15
 80034f2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80034f4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034f6:	e009      	b.n	800350c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fc:	f043 0220 	orr.w	r2, r3, #32
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800350a:	e000      	b.n	800350e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800350c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003516:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800351a:	4618      	mov	r0, r3
 800351c:	3784      	adds	r7, #132	@ 0x84
 800351e:	46bd      	mov	sp, r7
 8003520:	bd90      	pop	{r4, r7, pc}
 8003522:	bf00      	nop
 8003524:	50000100 	.word	0x50000100
 8003528:	50000300 	.word	0x50000300

0800352c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800353c:	4b0c      	ldr	r3, [pc, #48]	@ (8003570 <__NVIC_SetPriorityGrouping+0x44>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003548:	4013      	ands	r3, r2
 800354a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003554:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800355c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800355e:	4a04      	ldr	r2, [pc, #16]	@ (8003570 <__NVIC_SetPriorityGrouping+0x44>)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	60d3      	str	r3, [r2, #12]
}
 8003564:	bf00      	nop
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003578:	4b04      	ldr	r3, [pc, #16]	@ (800358c <__NVIC_GetPriorityGrouping+0x18>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	0a1b      	lsrs	r3, r3, #8
 800357e:	f003 0307 	and.w	r3, r3, #7
}
 8003582:	4618      	mov	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800359a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	db0b      	blt.n	80035ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	f003 021f 	and.w	r2, r3, #31
 80035a8:	4907      	ldr	r1, [pc, #28]	@ (80035c8 <__NVIC_EnableIRQ+0x38>)
 80035aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	2001      	movs	r0, #1
 80035b2:	fa00 f202 	lsl.w	r2, r0, r2
 80035b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	e000e100 	.word	0xe000e100

080035cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	6039      	str	r1, [r7, #0]
 80035d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	db0a      	blt.n	80035f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	490c      	ldr	r1, [pc, #48]	@ (8003618 <__NVIC_SetPriority+0x4c>)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	0112      	lsls	r2, r2, #4
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	440b      	add	r3, r1
 80035f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f4:	e00a      	b.n	800360c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	4908      	ldr	r1, [pc, #32]	@ (800361c <__NVIC_SetPriority+0x50>)
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	3b04      	subs	r3, #4
 8003604:	0112      	lsls	r2, r2, #4
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	440b      	add	r3, r1
 800360a:	761a      	strb	r2, [r3, #24]
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	e000e100 	.word	0xe000e100
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	@ 0x24
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f1c3 0307 	rsb	r3, r3, #7
 800363a:	2b04      	cmp	r3, #4
 800363c:	bf28      	it	cs
 800363e:	2304      	movcs	r3, #4
 8003640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3304      	adds	r3, #4
 8003646:	2b06      	cmp	r3, #6
 8003648:	d902      	bls.n	8003650 <NVIC_EncodePriority+0x30>
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3b03      	subs	r3, #3
 800364e:	e000      	b.n	8003652 <NVIC_EncodePriority+0x32>
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003654:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43da      	mvns	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	401a      	ands	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003668:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	43d9      	mvns	r1, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003678:	4313      	orrs	r3, r2
         );
}
 800367a:	4618      	mov	r0, r3
 800367c:	3724      	adds	r7, #36	@ 0x24
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3b01      	subs	r3, #1
 8003694:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003698:	d301      	bcc.n	800369e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800369a:	2301      	movs	r3, #1
 800369c:	e00f      	b.n	80036be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800369e:	4a0a      	ldr	r2, [pc, #40]	@ (80036c8 <SysTick_Config+0x40>)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036a6:	210f      	movs	r1, #15
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036ac:	f7ff ff8e 	bl	80035cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036b0:	4b05      	ldr	r3, [pc, #20]	@ (80036c8 <SysTick_Config+0x40>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036b6:	4b04      	ldr	r3, [pc, #16]	@ (80036c8 <SysTick_Config+0x40>)
 80036b8:	2207      	movs	r2, #7
 80036ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	e000e010 	.word	0xe000e010

080036cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff ff29 	bl	800352c <__NVIC_SetPriorityGrouping>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b086      	sub	sp, #24
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	4603      	mov	r3, r0
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036f0:	f7ff ff40 	bl	8003574 <__NVIC_GetPriorityGrouping>
 80036f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	6978      	ldr	r0, [r7, #20]
 80036fc:	f7ff ff90 	bl	8003620 <NVIC_EncodePriority>
 8003700:	4602      	mov	r2, r0
 8003702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff5f 	bl	80035cc <__NVIC_SetPriority>
}
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff33 	bl	8003590 <__NVIC_EnableIRQ>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ffa4 	bl	8003688 <SysTick_Config>
 8003740:	4603      	mov	r3, r0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e08d      	b.n	800387a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	4b47      	ldr	r3, [pc, #284]	@ (8003884 <HAL_DMA_Init+0x138>)
 8003766:	429a      	cmp	r2, r3
 8003768:	d80f      	bhi.n	800378a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	4b45      	ldr	r3, [pc, #276]	@ (8003888 <HAL_DMA_Init+0x13c>)
 8003772:	4413      	add	r3, r2
 8003774:	4a45      	ldr	r2, [pc, #276]	@ (800388c <HAL_DMA_Init+0x140>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	009a      	lsls	r2, r3, #2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a42      	ldr	r2, [pc, #264]	@ (8003890 <HAL_DMA_Init+0x144>)
 8003786:	641a      	str	r2, [r3, #64]	@ 0x40
 8003788:	e00e      	b.n	80037a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	4b40      	ldr	r3, [pc, #256]	@ (8003894 <HAL_DMA_Init+0x148>)
 8003792:	4413      	add	r3, r2
 8003794:	4a3d      	ldr	r2, [pc, #244]	@ (800388c <HAL_DMA_Init+0x140>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	091b      	lsrs	r3, r3, #4
 800379c:	009a      	lsls	r2, r3, #2
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a3c      	ldr	r2, [pc, #240]	@ (8003898 <HAL_DMA_Init+0x14c>)
 80037a6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80037be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f9b6 	bl	8003b6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003808:	d102      	bne.n	8003810 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003824:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d010      	beq.n	8003850 <HAL_DMA_Init+0x104>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b04      	cmp	r3, #4
 8003834:	d80c      	bhi.n	8003850 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f9d6 	bl	8003be8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	e008      	b.n	8003862 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40020407 	.word	0x40020407
 8003888:	bffdfff8 	.word	0xbffdfff8
 800388c:	cccccccd 	.word	0xcccccccd
 8003890:	40020000 	.word	0x40020000
 8003894:	bffdfbf8 	.word	0xbffdfbf8
 8003898:	40020400 	.word	0x40020400

0800389c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_DMA_Start_IT+0x20>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e066      	b.n	800398a <HAL_DMA_Start_IT+0xee>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d155      	bne.n	800397c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0201 	bic.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f8fb 	bl	8003af0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 020e 	orr.w	r2, r2, #14
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e00f      	b.n	8003934 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0204 	bic.w	r2, r2, #4
 8003922:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 020a 	orr.w	r2, r2, #10
 8003932:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003950:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003956:	2b00      	cmp	r3, #0
 8003958:	d007      	beq.n	800396a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003964:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003968:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0201 	orr.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	e005      	b.n	8003988 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003984:	2302      	movs	r3, #2
 8003986:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003988:	7dfb      	ldrb	r3, [r7, #23]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	2204      	movs	r2, #4
 80039b4:	409a      	lsls	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d026      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x7a>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d021      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d107      	bne.n	80039e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0204 	bic.w	r2, r2, #4
 80039e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ea:	f003 021f 	and.w	r2, r3, #31
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	2104      	movs	r1, #4
 80039f4:	fa01 f202 	lsl.w	r2, r1, r2
 80039f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d071      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a0a:	e06c      	b.n	8003ae6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	2202      	movs	r2, #2
 8003a16:	409a      	lsls	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d02e      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d029      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10b      	bne.n	8003a50 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 020a 	bic.w	r2, r2, #10
 8003a46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a54:	f003 021f 	and.w	r2, r3, #31
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a62:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d038      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a7c:	e033      	b.n	8003ae6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	2208      	movs	r2, #8
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d02a      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d025      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 020e 	bic.w	r2, r2, #14
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab0:	f003 021f 	and.w	r2, r3, #31
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	2101      	movs	r1, #1
 8003aba:	fa01 f202 	lsl.w	r2, r1, r2
 8003abe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d004      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ae6:	bf00      	nop
 8003ae8:	bf00      	nop
}
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b06:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b18:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1e:	f003 021f 	and.w	r2, r3, #31
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	2101      	movs	r1, #1
 8003b28:	fa01 f202 	lsl.w	r2, r1, r2
 8003b2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	2b10      	cmp	r3, #16
 8003b3c:	d108      	bne.n	8003b50 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b4e:	e007      	b.n	8003b60 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	60da      	str	r2, [r3, #12]
}
 8003b60:	bf00      	nop
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4b16      	ldr	r3, [pc, #88]	@ (8003bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d802      	bhi.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003b80:	4b15      	ldr	r3, [pc, #84]	@ (8003bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	e001      	b.n	8003b8a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003b86:	4b15      	ldr	r3, [pc, #84]	@ (8003bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b88:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	3b08      	subs	r3, #8
 8003b96:	4a12      	ldr	r2, [pc, #72]	@ (8003be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	009a      	lsls	r2, r3, #2
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4413      	add	r3, r2
 8003bac:	461a      	mov	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8003be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003bb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003bc6:	bf00      	nop
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	40020407 	.word	0x40020407
 8003bd8:	40020800 	.word	0x40020800
 8003bdc:	40020820 	.word	0x40020820
 8003be0:	cccccccd 	.word	0xcccccccd
 8003be4:	40020880 	.word	0x40020880

08003be8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	461a      	mov	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a08      	ldr	r2, [pc, #32]	@ (8003c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c0a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	2201      	movs	r2, #1
 8003c16:	409a      	lsls	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	1000823f 	.word	0x1000823f
 8003c2c:	40020940 	.word	0x40020940

08003c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c3e:	e15a      	b.n	8003ef6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	2101      	movs	r1, #1
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 814c 	beq.w	8003ef0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d005      	beq.n	8003c70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d130      	bne.n	8003cd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4013      	ands	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	091b      	lsrs	r3, r3, #4
 8003cbc:	f003 0201 	and.w	r2, r3, #1
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d017      	beq.n	8003d0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	2203      	movs	r2, #3
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d123      	bne.n	8003d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	08da      	lsrs	r2, r3, #3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3208      	adds	r2, #8
 8003d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	220f      	movs	r2, #15
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	08da      	lsrs	r2, r3, #3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3208      	adds	r2, #8
 8003d5c:	6939      	ldr	r1, [r7, #16]
 8003d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4013      	ands	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 0203 	and.w	r2, r3, #3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 80a6 	beq.w	8003ef0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da4:	4b5b      	ldr	r3, [pc, #364]	@ (8003f14 <HAL_GPIO_Init+0x2e4>)
 8003da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da8:	4a5a      	ldr	r2, [pc, #360]	@ (8003f14 <HAL_GPIO_Init+0x2e4>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	6613      	str	r3, [r2, #96]	@ 0x60
 8003db0:	4b58      	ldr	r3, [pc, #352]	@ (8003f14 <HAL_GPIO_Init+0x2e4>)
 8003db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dbc:	4a56      	ldr	r2, [pc, #344]	@ (8003f18 <HAL_GPIO_Init+0x2e8>)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	089b      	lsrs	r3, r3, #2
 8003dc2:	3302      	adds	r3, #2
 8003dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	220f      	movs	r2, #15
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003de6:	d01f      	beq.n	8003e28 <HAL_GPIO_Init+0x1f8>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a4c      	ldr	r2, [pc, #304]	@ (8003f1c <HAL_GPIO_Init+0x2ec>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d019      	beq.n	8003e24 <HAL_GPIO_Init+0x1f4>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a4b      	ldr	r2, [pc, #300]	@ (8003f20 <HAL_GPIO_Init+0x2f0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d013      	beq.n	8003e20 <HAL_GPIO_Init+0x1f0>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a4a      	ldr	r2, [pc, #296]	@ (8003f24 <HAL_GPIO_Init+0x2f4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00d      	beq.n	8003e1c <HAL_GPIO_Init+0x1ec>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a49      	ldr	r2, [pc, #292]	@ (8003f28 <HAL_GPIO_Init+0x2f8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d007      	beq.n	8003e18 <HAL_GPIO_Init+0x1e8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a48      	ldr	r2, [pc, #288]	@ (8003f2c <HAL_GPIO_Init+0x2fc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d101      	bne.n	8003e14 <HAL_GPIO_Init+0x1e4>
 8003e10:	2305      	movs	r3, #5
 8003e12:	e00a      	b.n	8003e2a <HAL_GPIO_Init+0x1fa>
 8003e14:	2306      	movs	r3, #6
 8003e16:	e008      	b.n	8003e2a <HAL_GPIO_Init+0x1fa>
 8003e18:	2304      	movs	r3, #4
 8003e1a:	e006      	b.n	8003e2a <HAL_GPIO_Init+0x1fa>
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e004      	b.n	8003e2a <HAL_GPIO_Init+0x1fa>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e002      	b.n	8003e2a <HAL_GPIO_Init+0x1fa>
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <HAL_GPIO_Init+0x1fa>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	f002 0203 	and.w	r2, r2, #3
 8003e30:	0092      	lsls	r2, r2, #2
 8003e32:	4093      	lsls	r3, r2
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e3a:	4937      	ldr	r1, [pc, #220]	@ (8003f18 <HAL_GPIO_Init+0x2e8>)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	3302      	adds	r3, #2
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e48:	4b39      	ldr	r3, [pc, #228]	@ (8003f30 <HAL_GPIO_Init+0x300>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	43db      	mvns	r3, r3
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4013      	ands	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e6c:	4a30      	ldr	r2, [pc, #192]	@ (8003f30 <HAL_GPIO_Init+0x300>)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e72:	4b2f      	ldr	r3, [pc, #188]	@ (8003f30 <HAL_GPIO_Init+0x300>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e96:	4a26      	ldr	r2, [pc, #152]	@ (8003f30 <HAL_GPIO_Init+0x300>)
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e9c:	4b24      	ldr	r3, [pc, #144]	@ (8003f30 <HAL_GPIO_Init+0x300>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8003f30 <HAL_GPIO_Init+0x300>)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f30 <HAL_GPIO_Init+0x300>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eea:	4a11      	ldr	r2, [pc, #68]	@ (8003f30 <HAL_GPIO_Init+0x300>)
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	fa22 f303 	lsr.w	r3, r2, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f47f ae9d 	bne.w	8003c40 <HAL_GPIO_Init+0x10>
  }
}
 8003f06:	bf00      	nop
 8003f08:	bf00      	nop
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40010000 	.word	0x40010000
 8003f1c:	48000400 	.word	0x48000400
 8003f20:	48000800 	.word	0x48000800
 8003f24:	48000c00 	.word	0x48000c00
 8003f28:	48001000 	.word	0x48001000
 8003f2c:	48001400 	.word	0x48001400
 8003f30:	40010400 	.word	0x40010400

08003f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	807b      	strh	r3, [r7, #2]
 8003f40:	4613      	mov	r3, r2
 8003f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f44:	787b      	ldrb	r3, [r7, #1]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f4a:	887a      	ldrh	r2, [r7, #2]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f50:	e002      	b.n	8003f58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f52:	887a      	ldrh	r2, [r7, #2]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	041a      	lsls	r2, r3, #16
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	43d9      	mvns	r1, r3
 8003f82:	887b      	ldrh	r3, [r7, #2]
 8003f84:	400b      	ands	r3, r1
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	619a      	str	r2, [r3, #24]
}
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fa2:	4b08      	ldr	r3, [pc, #32]	@ (8003fc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d006      	beq.n	8003fbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fae:	4a05      	ldr	r2, [pc, #20]	@ (8003fc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd f942 	bl	8001240 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40010400 	.word	0x40010400

08003fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e08d      	b.n	80040f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fd f800 	bl	8000ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2224      	movs	r2, #36	@ 0x24
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0201 	bic.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004018:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004028:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	e006      	b.n	8004050 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800404e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d108      	bne.n	800406a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004066:	605a      	str	r2, [r3, #4]
 8004068:	e007      	b.n	800407a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004078:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004088:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800408c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800409c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69d9      	ldr	r1, [r3, #28]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1a      	ldr	r2, [r3, #32]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b20      	cmp	r3, #32
 8004112:	d138      	bne.n	8004186 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800411e:	2302      	movs	r3, #2
 8004120:	e032      	b.n	8004188 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2224      	movs	r2, #36	@ 0x24
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0201 	bic.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004150:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6819      	ldr	r1, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0201 	orr.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	e000      	b.n	8004188 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004186:	2302      	movs	r3, #2
  }
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d139      	bne.n	800421e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e033      	b.n	8004220 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2224      	movs	r2, #36	@ 0x24
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0201 	bic.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80041e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	e000      	b.n	8004220 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800421e:	2302      	movs	r3, #2
  }
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d141      	bne.n	80042be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800423a:	4b4b      	ldr	r3, [pc, #300]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004246:	d131      	bne.n	80042ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004248:	4b47      	ldr	r3, [pc, #284]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800424a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800424e:	4a46      	ldr	r2, [pc, #280]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004254:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004258:	4b43      	ldr	r3, [pc, #268]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004260:	4a41      	ldr	r2, [pc, #260]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004262:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004268:	4b40      	ldr	r3, [pc, #256]	@ (800436c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2232      	movs	r2, #50	@ 0x32
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	4a3f      	ldr	r2, [pc, #252]	@ (8004370 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	0c9b      	lsrs	r3, r3, #18
 800427a:	3301      	adds	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800427e:	e002      	b.n	8004286 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3b01      	subs	r3, #1
 8004284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004286:	4b38      	ldr	r3, [pc, #224]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800428e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004292:	d102      	bne.n	800429a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f2      	bne.n	8004280 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800429a:	4b33      	ldr	r3, [pc, #204]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042a6:	d158      	bne.n	800435a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e057      	b.n	800435c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042b2:	4a2d      	ldr	r2, [pc, #180]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80042bc:	e04d      	b.n	800435a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c4:	d141      	bne.n	800434a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042c6:	4b28      	ldr	r3, [pc, #160]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042d2:	d131      	bne.n	8004338 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042d4:	4b24      	ldr	r3, [pc, #144]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042da:	4a23      	ldr	r2, [pc, #140]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042e4:	4b20      	ldr	r3, [pc, #128]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042f4:	4b1d      	ldr	r3, [pc, #116]	@ (800436c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2232      	movs	r2, #50	@ 0x32
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004370 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004300:	fba2 2303 	umull	r2, r3, r2, r3
 8004304:	0c9b      	lsrs	r3, r3, #18
 8004306:	3301      	adds	r3, #1
 8004308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800430a:	e002      	b.n	8004312 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3b01      	subs	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004312:	4b15      	ldr	r3, [pc, #84]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800431e:	d102      	bne.n	8004326 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f2      	bne.n	800430c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004326:	4b10      	ldr	r3, [pc, #64]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004332:	d112      	bne.n	800435a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e011      	b.n	800435c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004338:	4b0b      	ldr	r3, [pc, #44]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800433e:	4a0a      	ldr	r2, [pc, #40]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004344:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004348:	e007      	b.n	800435a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800434a:	4b07      	ldr	r3, [pc, #28]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004352:	4a05      	ldr	r2, [pc, #20]	@ (8004368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004354:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004358:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	40007000 	.word	0x40007000
 800436c:	20000000 	.word	0x20000000
 8004370:	431bde83 	.word	0x431bde83

08004374 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004378:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	4a04      	ldr	r2, [pc, #16]	@ (8004390 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800437e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004382:	6093      	str	r3, [r2, #8]
}
 8004384:	bf00      	nop
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40007000 	.word	0x40007000

08004394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e2fe      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d075      	beq.n	800449e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043b2:	4b97      	ldr	r3, [pc, #604]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043bc:	4b94      	ldr	r3, [pc, #592]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0303 	and.w	r3, r3, #3
 80043c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	d102      	bne.n	80043d2 <HAL_RCC_OscConfig+0x3e>
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d002      	beq.n	80043d8 <HAL_RCC_OscConfig+0x44>
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d10b      	bne.n	80043f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d8:	4b8d      	ldr	r3, [pc, #564]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d05b      	beq.n	800449c <HAL_RCC_OscConfig+0x108>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d157      	bne.n	800449c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e2d9      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f8:	d106      	bne.n	8004408 <HAL_RCC_OscConfig+0x74>
 80043fa:	4b85      	ldr	r3, [pc, #532]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a84      	ldr	r2, [pc, #528]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e01d      	b.n	8004444 <HAL_RCC_OscConfig+0xb0>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0x98>
 8004412:	4b7f      	ldr	r3, [pc, #508]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a7e      	ldr	r2, [pc, #504]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 8004418:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	4b7c      	ldr	r3, [pc, #496]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a7b      	ldr	r2, [pc, #492]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 8004424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	e00b      	b.n	8004444 <HAL_RCC_OscConfig+0xb0>
 800442c:	4b78      	ldr	r3, [pc, #480]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a77      	ldr	r2, [pc, #476]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 8004432:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	4b75      	ldr	r3, [pc, #468]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a74      	ldr	r2, [pc, #464]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 800443e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d013      	beq.n	8004474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fd fe02 	bl	8002054 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004454:	f7fd fdfe 	bl	8002054 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b64      	cmp	r3, #100	@ 0x64
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e29e      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004466:	4b6a      	ldr	r3, [pc, #424]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0xc0>
 8004472:	e014      	b.n	800449e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fd fdee 	bl	8002054 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800447c:	f7fd fdea 	bl	8002054 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b64      	cmp	r3, #100	@ 0x64
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e28a      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800448e:	4b60      	ldr	r3, [pc, #384]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0xe8>
 800449a:	e000      	b.n	800449e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d075      	beq.n	8004596 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044aa:	4b59      	ldr	r3, [pc, #356]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044b4:	4b56      	ldr	r3, [pc, #344]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	2b0c      	cmp	r3, #12
 80044c2:	d102      	bne.n	80044ca <HAL_RCC_OscConfig+0x136>
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d002      	beq.n	80044d0 <HAL_RCC_OscConfig+0x13c>
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d11f      	bne.n	8004510 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044d0:	4b4f      	ldr	r3, [pc, #316]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_RCC_OscConfig+0x154>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e25d      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e8:	4b49      	ldr	r3, [pc, #292]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	061b      	lsls	r3, r3, #24
 80044f6:	4946      	ldr	r1, [pc, #280]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044fc:	4b45      	ldr	r3, [pc, #276]	@ (8004614 <HAL_RCC_OscConfig+0x280>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7fd fd5b 	bl	8001fbc <HAL_InitTick>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d043      	beq.n	8004594 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e249      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d023      	beq.n	8004560 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004518:	4b3d      	ldr	r3, [pc, #244]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a3c      	ldr	r2, [pc, #240]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 800451e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fd fd96 	bl	8002054 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800452c:	f7fd fd92 	bl	8002054 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e232      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800453e:	4b34      	ldr	r3, [pc, #208]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454a:	4b31      	ldr	r3, [pc, #196]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	061b      	lsls	r3, r3, #24
 8004558:	492d      	ldr	r1, [pc, #180]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 800455a:	4313      	orrs	r3, r2
 800455c:	604b      	str	r3, [r1, #4]
 800455e:	e01a      	b.n	8004596 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004560:	4b2b      	ldr	r3, [pc, #172]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a2a      	ldr	r2, [pc, #168]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 8004566:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800456a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456c:	f7fd fd72 	bl	8002054 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004574:	f7fd fd6e 	bl	8002054 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e20e      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004586:	4b22      	ldr	r3, [pc, #136]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0x1e0>
 8004592:	e000      	b.n	8004596 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004594:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d041      	beq.n	8004626 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01c      	beq.n	80045e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045aa:	4b19      	ldr	r3, [pc, #100]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 80045ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045b0:	4a17      	ldr	r2, [pc, #92]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 80045b2:	f043 0301 	orr.w	r3, r3, #1
 80045b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fd fd4b 	bl	8002054 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045c2:	f7fd fd47 	bl	8002054 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e1e7      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 80045d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0ef      	beq.n	80045c2 <HAL_RCC_OscConfig+0x22e>
 80045e2:	e020      	b.n	8004626 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 80045e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ea:	4a09      	ldr	r2, [pc, #36]	@ (8004610 <HAL_RCC_OscConfig+0x27c>)
 80045ec:	f023 0301 	bic.w	r3, r3, #1
 80045f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f4:	f7fd fd2e 	bl	8002054 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045fa:	e00d      	b.n	8004618 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045fc:	f7fd fd2a 	bl	8002054 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d906      	bls.n	8004618 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e1ca      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
 800460e:	bf00      	nop
 8004610:	40021000 	.word	0x40021000
 8004614:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004618:	4b8c      	ldr	r3, [pc, #560]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 800461a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1ea      	bne.n	80045fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80a6 	beq.w	8004780 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004634:	2300      	movs	r3, #0
 8004636:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004638:	4b84      	ldr	r3, [pc, #528]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 800463a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_RCC_OscConfig+0x2b4>
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <HAL_RCC_OscConfig+0x2b6>
 8004648:	2300      	movs	r3, #0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00d      	beq.n	800466a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800464e:	4b7f      	ldr	r3, [pc, #508]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 8004650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004652:	4a7e      	ldr	r2, [pc, #504]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 8004654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004658:	6593      	str	r3, [r2, #88]	@ 0x58
 800465a:	4b7c      	ldr	r3, [pc, #496]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 800465c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004666:	2301      	movs	r3, #1
 8004668:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800466a:	4b79      	ldr	r3, [pc, #484]	@ (8004850 <HAL_RCC_OscConfig+0x4bc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d118      	bne.n	80046a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004676:	4b76      	ldr	r3, [pc, #472]	@ (8004850 <HAL_RCC_OscConfig+0x4bc>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a75      	ldr	r2, [pc, #468]	@ (8004850 <HAL_RCC_OscConfig+0x4bc>)
 800467c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004682:	f7fd fce7 	bl	8002054 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800468a:	f7fd fce3 	bl	8002054 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e183      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800469c:	4b6c      	ldr	r3, [pc, #432]	@ (8004850 <HAL_RCC_OscConfig+0x4bc>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d108      	bne.n	80046c2 <HAL_RCC_OscConfig+0x32e>
 80046b0:	4b66      	ldr	r3, [pc, #408]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b6:	4a65      	ldr	r2, [pc, #404]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046c0:	e024      	b.n	800470c <HAL_RCC_OscConfig+0x378>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b05      	cmp	r3, #5
 80046c8:	d110      	bne.n	80046ec <HAL_RCC_OscConfig+0x358>
 80046ca:	4b60      	ldr	r3, [pc, #384]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 80046cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d0:	4a5e      	ldr	r2, [pc, #376]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 80046d2:	f043 0304 	orr.w	r3, r3, #4
 80046d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046da:	4b5c      	ldr	r3, [pc, #368]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 80046dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e0:	4a5a      	ldr	r2, [pc, #360]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046ea:	e00f      	b.n	800470c <HAL_RCC_OscConfig+0x378>
 80046ec:	4b57      	ldr	r3, [pc, #348]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 80046ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f2:	4a56      	ldr	r2, [pc, #344]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 80046f4:	f023 0301 	bic.w	r3, r3, #1
 80046f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046fc:	4b53      	ldr	r3, [pc, #332]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004702:	4a52      	ldr	r2, [pc, #328]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 8004704:	f023 0304 	bic.w	r3, r3, #4
 8004708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d016      	beq.n	8004742 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004714:	f7fd fc9e 	bl	8002054 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800471a:	e00a      	b.n	8004732 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471c:	f7fd fc9a 	bl	8002054 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800472a:	4293      	cmp	r3, r2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e138      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004732:	4b46      	ldr	r3, [pc, #280]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0ed      	beq.n	800471c <HAL_RCC_OscConfig+0x388>
 8004740:	e015      	b.n	800476e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004742:	f7fd fc87 	bl	8002054 <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004748:	e00a      	b.n	8004760 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800474a:	f7fd fc83 	bl	8002054 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004758:	4293      	cmp	r3, r2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e121      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004760:	4b3a      	ldr	r3, [pc, #232]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1ed      	bne.n	800474a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800476e:	7ffb      	ldrb	r3, [r7, #31]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d105      	bne.n	8004780 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004774:	4b35      	ldr	r3, [pc, #212]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 8004776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004778:	4a34      	ldr	r2, [pc, #208]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 800477a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800477e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b00      	cmp	r3, #0
 800478a:	d03c      	beq.n	8004806 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01c      	beq.n	80047ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004794:	4b2d      	ldr	r3, [pc, #180]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 8004796:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800479a:	4a2c      	ldr	r2, [pc, #176]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a4:	f7fd fc56 	bl	8002054 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047ac:	f7fd fc52 	bl	8002054 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e0f2      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047be:	4b23      	ldr	r3, [pc, #140]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 80047c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0ef      	beq.n	80047ac <HAL_RCC_OscConfig+0x418>
 80047cc:	e01b      	b.n	8004806 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047ce:	4b1f      	ldr	r3, [pc, #124]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 80047d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047d4:	4a1d      	ldr	r2, [pc, #116]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 80047d6:	f023 0301 	bic.w	r3, r3, #1
 80047da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047de:	f7fd fc39 	bl	8002054 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047e6:	f7fd fc35 	bl	8002054 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e0d5      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047f8:	4b14      	ldr	r3, [pc, #80]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 80047fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1ef      	bne.n	80047e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80c9 	beq.w	80049a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004810:	4b0e      	ldr	r3, [pc, #56]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 030c 	and.w	r3, r3, #12
 8004818:	2b0c      	cmp	r3, #12
 800481a:	f000 8083 	beq.w	8004924 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d15e      	bne.n	80048e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004826:	4b09      	ldr	r3, [pc, #36]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a08      	ldr	r2, [pc, #32]	@ (800484c <HAL_RCC_OscConfig+0x4b8>)
 800482c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004832:	f7fd fc0f 	bl	8002054 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004838:	e00c      	b.n	8004854 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800483a:	f7fd fc0b 	bl	8002054 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d905      	bls.n	8004854 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e0ab      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
 800484c:	40021000 	.word	0x40021000
 8004850:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004854:	4b55      	ldr	r3, [pc, #340]	@ (80049ac <HAL_RCC_OscConfig+0x618>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1ec      	bne.n	800483a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004860:	4b52      	ldr	r3, [pc, #328]	@ (80049ac <HAL_RCC_OscConfig+0x618>)
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	4b52      	ldr	r3, [pc, #328]	@ (80049b0 <HAL_RCC_OscConfig+0x61c>)
 8004866:	4013      	ands	r3, r2
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6a11      	ldr	r1, [r2, #32]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004870:	3a01      	subs	r2, #1
 8004872:	0112      	lsls	r2, r2, #4
 8004874:	4311      	orrs	r1, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800487a:	0212      	lsls	r2, r2, #8
 800487c:	4311      	orrs	r1, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004882:	0852      	lsrs	r2, r2, #1
 8004884:	3a01      	subs	r2, #1
 8004886:	0552      	lsls	r2, r2, #21
 8004888:	4311      	orrs	r1, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800488e:	0852      	lsrs	r2, r2, #1
 8004890:	3a01      	subs	r2, #1
 8004892:	0652      	lsls	r2, r2, #25
 8004894:	4311      	orrs	r1, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800489a:	06d2      	lsls	r2, r2, #27
 800489c:	430a      	orrs	r2, r1
 800489e:	4943      	ldr	r1, [pc, #268]	@ (80049ac <HAL_RCC_OscConfig+0x618>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a4:	4b41      	ldr	r3, [pc, #260]	@ (80049ac <HAL_RCC_OscConfig+0x618>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a40      	ldr	r2, [pc, #256]	@ (80049ac <HAL_RCC_OscConfig+0x618>)
 80048aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048b0:	4b3e      	ldr	r3, [pc, #248]	@ (80049ac <HAL_RCC_OscConfig+0x618>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4a3d      	ldr	r2, [pc, #244]	@ (80049ac <HAL_RCC_OscConfig+0x618>)
 80048b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fd fbca 	bl	8002054 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c4:	f7fd fbc6 	bl	8002054 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e066      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048d6:	4b35      	ldr	r3, [pc, #212]	@ (80049ac <HAL_RCC_OscConfig+0x618>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0x530>
 80048e2:	e05e      	b.n	80049a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e4:	4b31      	ldr	r3, [pc, #196]	@ (80049ac <HAL_RCC_OscConfig+0x618>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a30      	ldr	r2, [pc, #192]	@ (80049ac <HAL_RCC_OscConfig+0x618>)
 80048ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f0:	f7fd fbb0 	bl	8002054 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f8:	f7fd fbac 	bl	8002054 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e04c      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800490a:	4b28      	ldr	r3, [pc, #160]	@ (80049ac <HAL_RCC_OscConfig+0x618>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f0      	bne.n	80048f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004916:	4b25      	ldr	r3, [pc, #148]	@ (80049ac <HAL_RCC_OscConfig+0x618>)
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	4924      	ldr	r1, [pc, #144]	@ (80049ac <HAL_RCC_OscConfig+0x618>)
 800491c:	4b25      	ldr	r3, [pc, #148]	@ (80049b4 <HAL_RCC_OscConfig+0x620>)
 800491e:	4013      	ands	r3, r2
 8004920:	60cb      	str	r3, [r1, #12]
 8004922:	e03e      	b.n	80049a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e039      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004930:	4b1e      	ldr	r3, [pc, #120]	@ (80049ac <HAL_RCC_OscConfig+0x618>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f003 0203 	and.w	r2, r3, #3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	429a      	cmp	r2, r3
 8004942:	d12c      	bne.n	800499e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	3b01      	subs	r3, #1
 8004950:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004952:	429a      	cmp	r2, r3
 8004954:	d123      	bne.n	800499e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004960:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004962:	429a      	cmp	r2, r3
 8004964:	d11b      	bne.n	800499e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004970:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004972:	429a      	cmp	r2, r3
 8004974:	d113      	bne.n	800499e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	3b01      	subs	r3, #1
 8004984:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004986:	429a      	cmp	r2, r3
 8004988:	d109      	bne.n	800499e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	3b01      	subs	r3, #1
 8004998:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800499a:	429a      	cmp	r2, r3
 800499c:	d001      	beq.n	80049a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3720      	adds	r7, #32
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40021000 	.word	0x40021000
 80049b0:	019f800c 	.word	0x019f800c
 80049b4:	feeefffc 	.word	0xfeeefffc

080049b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e11e      	b.n	8004c0e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049d0:	4b91      	ldr	r3, [pc, #580]	@ (8004c18 <HAL_RCC_ClockConfig+0x260>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 030f 	and.w	r3, r3, #15
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d910      	bls.n	8004a00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049de:	4b8e      	ldr	r3, [pc, #568]	@ (8004c18 <HAL_RCC_ClockConfig+0x260>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 020f 	bic.w	r2, r3, #15
 80049e6:	498c      	ldr	r1, [pc, #560]	@ (8004c18 <HAL_RCC_ClockConfig+0x260>)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ee:	4b8a      	ldr	r3, [pc, #552]	@ (8004c18 <HAL_RCC_ClockConfig+0x260>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d001      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e106      	b.n	8004c0e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d073      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d129      	bne.n	8004a68 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a14:	4b81      	ldr	r3, [pc, #516]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0f4      	b.n	8004c0e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004a24:	f000 f99c 	bl	8004d60 <RCC_GetSysClockFreqFromPLLSource>
 8004a28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	4a7c      	ldr	r2, [pc, #496]	@ (8004c20 <HAL_RCC_ClockConfig+0x268>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d93f      	bls.n	8004ab2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a32:	4b7a      	ldr	r3, [pc, #488]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d009      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d033      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d12f      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a52:	4b72      	ldr	r3, [pc, #456]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a5a:	4a70      	ldr	r2, [pc, #448]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a62:	2380      	movs	r3, #128	@ 0x80
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	e024      	b.n	8004ab2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d107      	bne.n	8004a80 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a70:	4b6a      	ldr	r3, [pc, #424]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d109      	bne.n	8004a90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e0c6      	b.n	8004c0e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a80:	4b66      	ldr	r3, [pc, #408]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0be      	b.n	8004c0e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a90:	f000 f8ce 	bl	8004c30 <HAL_RCC_GetSysClockFreq>
 8004a94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4a61      	ldr	r2, [pc, #388]	@ (8004c20 <HAL_RCC_ClockConfig+0x268>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d909      	bls.n	8004ab2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a9e:	4b5f      	ldr	r3, [pc, #380]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004aa6:	4a5d      	ldr	r2, [pc, #372]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004aae:	2380      	movs	r3, #128	@ 0x80
 8004ab0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ab2:	4b5a      	ldr	r3, [pc, #360]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f023 0203 	bic.w	r2, r3, #3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	4957      	ldr	r1, [pc, #348]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac4:	f7fd fac6 	bl	8002054 <HAL_GetTick>
 8004ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aca:	e00a      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004acc:	f7fd fac2 	bl	8002054 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e095      	b.n	8004c0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 020c 	and.w	r2, r3, #12
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d1eb      	bne.n	8004acc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d023      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b0c:	4b43      	ldr	r3, [pc, #268]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4a42      	ldr	r2, [pc, #264]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004b12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b16:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004b24:	4b3d      	ldr	r3, [pc, #244]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b2c:	4a3b      	ldr	r2, [pc, #236]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004b2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b34:	4b39      	ldr	r3, [pc, #228]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	4936      	ldr	r1, [pc, #216]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	608b      	str	r3, [r1, #8]
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2b80      	cmp	r3, #128	@ 0x80
 8004b4c:	d105      	bne.n	8004b5a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b4e:	4b33      	ldr	r3, [pc, #204]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	4a32      	ldr	r2, [pc, #200]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004b54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b58:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c18 <HAL_RCC_ClockConfig+0x260>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d21d      	bcs.n	8004ba4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b68:	4b2b      	ldr	r3, [pc, #172]	@ (8004c18 <HAL_RCC_ClockConfig+0x260>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f023 020f 	bic.w	r2, r3, #15
 8004b70:	4929      	ldr	r1, [pc, #164]	@ (8004c18 <HAL_RCC_ClockConfig+0x260>)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b78:	f7fd fa6c 	bl	8002054 <HAL_GetTick>
 8004b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7e:	e00a      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b80:	f7fd fa68 	bl	8002054 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e03b      	b.n	8004c0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b96:	4b20      	ldr	r3, [pc, #128]	@ (8004c18 <HAL_RCC_ClockConfig+0x260>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d1ed      	bne.n	8004b80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4917      	ldr	r1, [pc, #92]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bce:	4b13      	ldr	r3, [pc, #76]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	490f      	ldr	r1, [pc, #60]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004be2:	f000 f825 	bl	8004c30 <HAL_RCC_GetSysClockFreq>
 8004be6:	4602      	mov	r2, r0
 8004be8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c1c <HAL_RCC_ClockConfig+0x264>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	490c      	ldr	r1, [pc, #48]	@ (8004c24 <HAL_RCC_ClockConfig+0x26c>)
 8004bf4:	5ccb      	ldrb	r3, [r1, r3]
 8004bf6:	f003 031f 	and.w	r3, r3, #31
 8004bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8004c28 <HAL_RCC_ClockConfig+0x270>)
 8004c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c02:	4b0a      	ldr	r3, [pc, #40]	@ (8004c2c <HAL_RCC_ClockConfig+0x274>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fd f9d8 	bl	8001fbc <HAL_InitTick>
 8004c0c:	4603      	mov	r3, r0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40022000 	.word	0x40022000
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	04c4b400 	.word	0x04c4b400
 8004c24:	0800bd48 	.word	0x0800bd48
 8004c28:	20000000 	.word	0x20000000
 8004c2c:	20000004 	.word	0x20000004

08004c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c36:	4b2c      	ldr	r3, [pc, #176]	@ (8004ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 030c 	and.w	r3, r3, #12
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d102      	bne.n	8004c48 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c42:	4b2a      	ldr	r3, [pc, #168]	@ (8004cec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	e047      	b.n	8004cd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c48:	4b27      	ldr	r3, [pc, #156]	@ (8004ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 030c 	and.w	r3, r3, #12
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d102      	bne.n	8004c5a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c54:	4b25      	ldr	r3, [pc, #148]	@ (8004cec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	e03e      	b.n	8004cd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004c5a:	4b23      	ldr	r3, [pc, #140]	@ (8004ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	2b0c      	cmp	r3, #12
 8004c64:	d136      	bne.n	8004cd4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c66:	4b20      	ldr	r3, [pc, #128]	@ (8004ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c70:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d10c      	bne.n	8004c9e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c84:	4a19      	ldr	r2, [pc, #100]	@ (8004cec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8c:	4a16      	ldr	r2, [pc, #88]	@ (8004ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c8e:	68d2      	ldr	r2, [r2, #12]
 8004c90:	0a12      	lsrs	r2, r2, #8
 8004c92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c96:	fb02 f303 	mul.w	r3, r2, r3
 8004c9a:	617b      	str	r3, [r7, #20]
      break;
 8004c9c:	e00c      	b.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c9e:	4a13      	ldr	r2, [pc, #76]	@ (8004cec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca6:	4a10      	ldr	r2, [pc, #64]	@ (8004ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ca8:	68d2      	ldr	r2, [r2, #12]
 8004caa:	0a12      	lsrs	r2, r2, #8
 8004cac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004cb0:	fb02 f303 	mul.w	r3, r2, r3
 8004cb4:	617b      	str	r3, [r7, #20]
      break;
 8004cb6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	0e5b      	lsrs	r3, r3, #25
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	e001      	b.n	8004cd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004cd8:	693b      	ldr	r3, [r7, #16]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	00f42400 	.word	0x00f42400

08004cf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cf4:	4b03      	ldr	r3, [pc, #12]	@ (8004d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20000000 	.word	0x20000000

08004d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d0c:	f7ff fff0 	bl	8004cf0 <HAL_RCC_GetHCLKFreq>
 8004d10:	4602      	mov	r2, r0
 8004d12:	4b06      	ldr	r3, [pc, #24]	@ (8004d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	0a1b      	lsrs	r3, r3, #8
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	4904      	ldr	r1, [pc, #16]	@ (8004d30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d1e:	5ccb      	ldrb	r3, [r1, r3]
 8004d20:	f003 031f 	and.w	r3, r3, #31
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	0800bd58 	.word	0x0800bd58

08004d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d38:	f7ff ffda 	bl	8004cf0 <HAL_RCC_GetHCLKFreq>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	4b06      	ldr	r3, [pc, #24]	@ (8004d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	0adb      	lsrs	r3, r3, #11
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	4904      	ldr	r1, [pc, #16]	@ (8004d5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d4a:	5ccb      	ldrb	r3, [r1, r3]
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	0800bd58 	.word	0x0800bd58

08004d60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d66:	4b1e      	ldr	r3, [pc, #120]	@ (8004de0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d70:	4b1b      	ldr	r3, [pc, #108]	@ (8004de0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	091b      	lsrs	r3, r3, #4
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d10c      	bne.n	8004d9e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d84:	4a17      	ldr	r2, [pc, #92]	@ (8004de4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8c:	4a14      	ldr	r2, [pc, #80]	@ (8004de0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d8e:	68d2      	ldr	r2, [r2, #12]
 8004d90:	0a12      	lsrs	r2, r2, #8
 8004d92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d96:	fb02 f303 	mul.w	r3, r2, r3
 8004d9a:	617b      	str	r3, [r7, #20]
    break;
 8004d9c:	e00c      	b.n	8004db8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d9e:	4a11      	ldr	r2, [pc, #68]	@ (8004de4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da6:	4a0e      	ldr	r2, [pc, #56]	@ (8004de0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004da8:	68d2      	ldr	r2, [r2, #12]
 8004daa:	0a12      	lsrs	r2, r2, #8
 8004dac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004db0:	fb02 f303 	mul.w	r3, r2, r3
 8004db4:	617b      	str	r3, [r7, #20]
    break;
 8004db6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004db8:	4b09      	ldr	r3, [pc, #36]	@ (8004de0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	0e5b      	lsrs	r3, r3, #25
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004dd2:	687b      	ldr	r3, [r7, #4]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40021000 	.word	0x40021000
 8004de4:	00f42400 	.word	0x00f42400

08004de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004df0:	2300      	movs	r3, #0
 8004df2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004df4:	2300      	movs	r3, #0
 8004df6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8098 	beq.w	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e06:	2300      	movs	r3, #0
 8004e08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e0a:	4b43      	ldr	r3, [pc, #268]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10d      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e16:	4b40      	ldr	r3, [pc, #256]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e20:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e22:	4b3d      	ldr	r3, [pc, #244]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e2a:	60bb      	str	r3, [r7, #8]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e32:	4b3a      	ldr	r3, [pc, #232]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a39      	ldr	r2, [pc, #228]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e3e:	f7fd f909 	bl	8002054 <HAL_GetTick>
 8004e42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e44:	e009      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e46:	f7fd f905 	bl	8002054 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d902      	bls.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	74fb      	strb	r3, [r7, #19]
        break;
 8004e58:	e005      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e5a:	4b30      	ldr	r3, [pc, #192]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0ef      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e66:	7cfb      	ldrb	r3, [r7, #19]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d159      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d01e      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d019      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e88:	4b23      	ldr	r3, [pc, #140]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e94:	4b20      	ldr	r3, [pc, #128]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004eb4:	4a18      	ldr	r2, [pc, #96]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d016      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec6:	f7fd f8c5 	bl	8002054 <HAL_GetTick>
 8004eca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ecc:	e00b      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ece:	f7fd f8c1 	bl	8002054 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d902      	bls.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	74fb      	strb	r3, [r7, #19]
            break;
 8004ee4:	e006      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0ec      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ef4:	7cfb      	ldrb	r3, [r7, #19]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10b      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004efa:	4b07      	ldr	r3, [pc, #28]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f08:	4903      	ldr	r1, [pc, #12]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f10:	e008      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f12:	7cfb      	ldrb	r3, [r7, #19]
 8004f14:	74bb      	strb	r3, [r7, #18]
 8004f16:	e005      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f20:	7cfb      	ldrb	r3, [r7, #19]
 8004f22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f24:	7c7b      	ldrb	r3, [r7, #17]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d105      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f2a:	4ba6      	ldr	r3, [pc, #664]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2e:	4aa5      	ldr	r2, [pc, #660]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f42:	4ba0      	ldr	r3, [pc, #640]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f48:	f023 0203 	bic.w	r2, r3, #3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	499c      	ldr	r1, [pc, #624]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f64:	4b97      	ldr	r3, [pc, #604]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f6a:	f023 020c 	bic.w	r2, r3, #12
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	4994      	ldr	r1, [pc, #592]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f86:	4b8f      	ldr	r3, [pc, #572]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	498b      	ldr	r1, [pc, #556]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fa8:	4b86      	ldr	r3, [pc, #536]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	4983      	ldr	r1, [pc, #524]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fca:	4b7e      	ldr	r3, [pc, #504]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	497a      	ldr	r1, [pc, #488]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fec:	4b75      	ldr	r3, [pc, #468]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	4972      	ldr	r1, [pc, #456]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800500e:	4b6d      	ldr	r3, [pc, #436]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005014:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	4969      	ldr	r1, [pc, #420]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005030:	4b64      	ldr	r3, [pc, #400]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005036:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	4961      	ldr	r1, [pc, #388]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005052:	4b5c      	ldr	r3, [pc, #368]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005058:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005060:	4958      	ldr	r1, [pc, #352]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005070:	2b00      	cmp	r3, #0
 8005072:	d015      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005074:	4b53      	ldr	r3, [pc, #332]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005082:	4950      	ldr	r1, [pc, #320]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005092:	d105      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005094:	4b4b      	ldr	r3, [pc, #300]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4a4a      	ldr	r2, [pc, #296]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800509a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800509e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d015      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050ac:	4b45      	ldr	r3, [pc, #276]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ba:	4942      	ldr	r1, [pc, #264]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050ca:	d105      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050cc:	4b3d      	ldr	r3, [pc, #244]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	4a3c      	ldr	r2, [pc, #240]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050d6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d015      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050e4:	4b37      	ldr	r3, [pc, #220]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f2:	4934      	ldr	r1, [pc, #208]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005102:	d105      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005104:	4b2f      	ldr	r3, [pc, #188]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	4a2e      	ldr	r2, [pc, #184]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800510a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800510e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d015      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800511c:	4b29      	ldr	r3, [pc, #164]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800511e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005122:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800512a:	4926      	ldr	r1, [pc, #152]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005136:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800513a:	d105      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800513c:	4b21      	ldr	r3, [pc, #132]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	4a20      	ldr	r2, [pc, #128]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005146:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d015      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005154:	4b1b      	ldr	r3, [pc, #108]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	4918      	ldr	r1, [pc, #96]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005172:	d105      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005174:	4b13      	ldr	r3, [pc, #76]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	4a12      	ldr	r2, [pc, #72]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800517a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800517e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d015      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800518c:	4b0d      	ldr	r3, [pc, #52]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005192:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800519a:	490a      	ldr	r1, [pc, #40]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051aa:	d105      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051ac:	4b05      	ldr	r3, [pc, #20]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4a04      	ldr	r2, [pc, #16]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80051b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000

080051c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e09d      	b.n	8005316 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d108      	bne.n	80051f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051ea:	d009      	beq.n	8005200 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	61da      	str	r2, [r3, #28]
 80051f2:	e005      	b.n	8005200 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fc f886 	bl	800132c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005236:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005240:	d902      	bls.n	8005248 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	e002      	b.n	800524e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005248:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800524c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005256:	d007      	beq.n	8005268 <HAL_SPI_Init+0xa0>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005260:	d002      	beq.n	8005268 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052aa:	ea42 0103 	orr.w	r1, r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	0c1b      	lsrs	r3, r3, #16
 80052c4:	f003 0204 	and.w	r2, r3, #4
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80052e4:	ea42 0103 	orr.w	r1, r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005304:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b088      	sub	sp, #32
 8005322:	af00      	add	r7, sp, #0
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	60b9      	str	r1, [r7, #8]
 8005328:	603b      	str	r3, [r7, #0]
 800532a:	4613      	mov	r3, r2
 800532c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800532e:	f7fc fe91 	bl	8002054 <HAL_GetTick>
 8005332:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005334:	88fb      	ldrh	r3, [r7, #6]
 8005336:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b01      	cmp	r3, #1
 8005342:	d001      	beq.n	8005348 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005344:	2302      	movs	r3, #2
 8005346:	e15c      	b.n	8005602 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <HAL_SPI_Transmit+0x36>
 800534e:	88fb      	ldrh	r3, [r7, #6]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e154      	b.n	8005602 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_SPI_Transmit+0x48>
 8005362:	2302      	movs	r3, #2
 8005364:	e14d      	b.n	8005602 <HAL_SPI_Transmit+0x2e4>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2203      	movs	r2, #3
 8005372:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	88fa      	ldrh	r2, [r7, #6]
 8005386:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	88fa      	ldrh	r2, [r7, #6]
 800538c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053b8:	d10f      	bne.n	80053da <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e4:	2b40      	cmp	r3, #64	@ 0x40
 80053e6:	d007      	beq.n	80053f8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005400:	d952      	bls.n	80054a8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_SPI_Transmit+0xf2>
 800540a:	8b7b      	ldrh	r3, [r7, #26]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d145      	bne.n	800549c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005414:	881a      	ldrh	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005420:	1c9a      	adds	r2, r3, #2
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005434:	e032      	b.n	800549c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b02      	cmp	r3, #2
 8005442:	d112      	bne.n	800546a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005448:	881a      	ldrh	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005454:	1c9a      	adds	r2, r3, #2
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005468:	e018      	b.n	800549c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800546a:	f7fc fdf3 	bl	8002054 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d803      	bhi.n	8005482 <HAL_SPI_Transmit+0x164>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005480:	d102      	bne.n	8005488 <HAL_SPI_Transmit+0x16a>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d109      	bne.n	800549c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e0b2      	b.n	8005602 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1c7      	bne.n	8005436 <HAL_SPI_Transmit+0x118>
 80054a6:	e083      	b.n	80055b0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <HAL_SPI_Transmit+0x198>
 80054b0:	8b7b      	ldrh	r3, [r7, #26]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d177      	bne.n	80055a6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d912      	bls.n	80054e6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c4:	881a      	ldrh	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d0:	1c9a      	adds	r2, r3, #2
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b02      	subs	r3, #2
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054e4:	e05f      	b.n	80055a6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	330c      	adds	r3, #12
 80054f0:	7812      	ldrb	r2, [r2, #0]
 80054f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800550c:	e04b      	b.n	80055a6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b02      	cmp	r3, #2
 800551a:	d12b      	bne.n	8005574 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b01      	cmp	r3, #1
 8005524:	d912      	bls.n	800554c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800552a:	881a      	ldrh	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005536:	1c9a      	adds	r2, r3, #2
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005540:	b29b      	uxth	r3, r3
 8005542:	3b02      	subs	r3, #2
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800554a:	e02c      	b.n	80055a6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	330c      	adds	r3, #12
 8005556:	7812      	ldrb	r2, [r2, #0]
 8005558:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005572:	e018      	b.n	80055a6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005574:	f7fc fd6e 	bl	8002054 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	429a      	cmp	r2, r3
 8005582:	d803      	bhi.n	800558c <HAL_SPI_Transmit+0x26e>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800558a:	d102      	bne.n	8005592 <HAL_SPI_Transmit+0x274>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d109      	bne.n	80055a6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e02d      	b.n	8005602 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1ae      	bne.n	800550e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	6839      	ldr	r1, [r7, #0]
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 fcf5 	bl	8005fa4 <SPI_EndRxTxTransaction>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10a      	bne.n	80055e4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e000      	b.n	8005602 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005600:	2300      	movs	r3, #0
  }
}
 8005602:	4618      	mov	r0, r3
 8005604:	3720      	adds	r7, #32
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b088      	sub	sp, #32
 800560e:	af02      	add	r7, sp, #8
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	603b      	str	r3, [r7, #0]
 8005616:	4613      	mov	r3, r2
 8005618:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b01      	cmp	r3, #1
 8005624:	d001      	beq.n	800562a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005626:	2302      	movs	r3, #2
 8005628:	e123      	b.n	8005872 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <HAL_SPI_Receive+0x2c>
 8005630:	88fb      	ldrh	r3, [r7, #6]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e11b      	b.n	8005872 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005642:	d112      	bne.n	800566a <HAL_SPI_Receive+0x60>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10e      	bne.n	800566a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2204      	movs	r2, #4
 8005650:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005654:	88fa      	ldrh	r2, [r7, #6]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	4613      	mov	r3, r2
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 f90a 	bl	800587a <HAL_SPI_TransmitReceive>
 8005666:	4603      	mov	r3, r0
 8005668:	e103      	b.n	8005872 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800566a:	f7fc fcf3 	bl	8002054 <HAL_GetTick>
 800566e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_SPI_Receive+0x74>
 800567a:	2302      	movs	r3, #2
 800567c:	e0f9      	b.n	8005872 <HAL_SPI_Receive+0x268>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2204      	movs	r2, #4
 800568a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	88fa      	ldrh	r2, [r7, #6]
 800569e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	88fa      	ldrh	r2, [r7, #6]
 80056a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056d0:	d908      	bls.n	80056e4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80056e0:	605a      	str	r2, [r3, #4]
 80056e2:	e007      	b.n	80056f4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80056f2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056fc:	d10f      	bne.n	800571e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800570c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800571c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005728:	2b40      	cmp	r3, #64	@ 0x40
 800572a:	d007      	beq.n	800573c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800573a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005744:	d875      	bhi.n	8005832 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005746:	e037      	b.n	80057b8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b01      	cmp	r3, #1
 8005754:	d117      	bne.n	8005786 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f103 020c 	add.w	r2, r3, #12
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005762:	7812      	ldrb	r2, [r2, #0]
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005784:	e018      	b.n	80057b8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005786:	f7fc fc65 	bl	8002054 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d803      	bhi.n	800579e <HAL_SPI_Receive+0x194>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800579c:	d102      	bne.n	80057a4 <HAL_SPI_Receive+0x19a>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d109      	bne.n	80057b8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e05c      	b.n	8005872 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057be:	b29b      	uxth	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1c1      	bne.n	8005748 <HAL_SPI_Receive+0x13e>
 80057c4:	e03b      	b.n	800583e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d115      	bne.n	8005800 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057de:	b292      	uxth	r2, r2
 80057e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e6:	1c9a      	adds	r2, r3, #2
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80057fe:	e018      	b.n	8005832 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005800:	f7fc fc28 	bl	8002054 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d803      	bhi.n	8005818 <HAL_SPI_Receive+0x20e>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005816:	d102      	bne.n	800581e <HAL_SPI_Receive+0x214>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d109      	bne.n	8005832 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e01f      	b.n	8005872 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1c3      	bne.n	80057c6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fb56 	bl	8005ef4 <SPI_EndRxTransaction>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2220      	movs	r2, #32
 8005852:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8005870:	2300      	movs	r3, #0
  }
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b08a      	sub	sp, #40	@ 0x28
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
 8005886:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005888:	2301      	movs	r3, #1
 800588a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800588c:	f7fc fbe2 	bl	8002054 <HAL_GetTick>
 8005890:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005898:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80058a0:	887b      	ldrh	r3, [r7, #2]
 80058a2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80058a4:	887b      	ldrh	r3, [r7, #2]
 80058a6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058a8:	7ffb      	ldrb	r3, [r7, #31]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d00c      	beq.n	80058c8 <HAL_SPI_TransmitReceive+0x4e>
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058b4:	d106      	bne.n	80058c4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d102      	bne.n	80058c4 <HAL_SPI_TransmitReceive+0x4a>
 80058be:	7ffb      	ldrb	r3, [r7, #31]
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d001      	beq.n	80058c8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80058c4:	2302      	movs	r3, #2
 80058c6:	e1f3      	b.n	8005cb0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <HAL_SPI_TransmitReceive+0x60>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <HAL_SPI_TransmitReceive+0x60>
 80058d4:	887b      	ldrh	r3, [r7, #2]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e1e8      	b.n	8005cb0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_SPI_TransmitReceive+0x72>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e1e1      	b.n	8005cb0 <HAL_SPI_TransmitReceive+0x436>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d003      	beq.n	8005908 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2205      	movs	r2, #5
 8005904:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	887a      	ldrh	r2, [r7, #2]
 8005918:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	887a      	ldrh	r2, [r7, #2]
 8005920:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	887a      	ldrh	r2, [r7, #2]
 800592e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	887a      	ldrh	r2, [r7, #2]
 8005934:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800594a:	d802      	bhi.n	8005952 <HAL_SPI_TransmitReceive+0xd8>
 800594c:	8abb      	ldrh	r3, [r7, #20]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d908      	bls.n	8005964 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005960:	605a      	str	r2, [r3, #4]
 8005962:	e007      	b.n	8005974 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005972:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597e:	2b40      	cmp	r3, #64	@ 0x40
 8005980:	d007      	beq.n	8005992 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005990:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800599a:	f240 8083 	bls.w	8005aa4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <HAL_SPI_TransmitReceive+0x132>
 80059a6:	8afb      	ldrh	r3, [r7, #22]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d16f      	bne.n	8005a8c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b0:	881a      	ldrh	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059bc:	1c9a      	adds	r2, r3, #2
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059d0:	e05c      	b.n	8005a8c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d11b      	bne.n	8005a18 <HAL_SPI_TransmitReceive+0x19e>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d016      	beq.n	8005a18 <HAL_SPI_TransmitReceive+0x19e>
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d113      	bne.n	8005a18 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f4:	881a      	ldrh	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a00:	1c9a      	adds	r2, r3, #2
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d11c      	bne.n	8005a60 <HAL_SPI_TransmitReceive+0x1e6>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d016      	beq.n	8005a60 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3c:	b292      	uxth	r2, r2
 8005a3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a44:	1c9a      	adds	r2, r3, #2
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a60:	f7fc faf8 	bl	8002054 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d80d      	bhi.n	8005a8c <HAL_SPI_TransmitReceive+0x212>
 8005a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a76:	d009      	beq.n	8005a8c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e111      	b.n	8005cb0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d19d      	bne.n	80059d2 <HAL_SPI_TransmitReceive+0x158>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d197      	bne.n	80059d2 <HAL_SPI_TransmitReceive+0x158>
 8005aa2:	e0e5      	b.n	8005c70 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_SPI_TransmitReceive+0x23a>
 8005aac:	8afb      	ldrh	r3, [r7, #22]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	f040 80d1 	bne.w	8005c56 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d912      	bls.n	8005ae4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac2:	881a      	ldrh	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ace:	1c9a      	adds	r2, r3, #2
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b02      	subs	r3, #2
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ae2:	e0b8      	b.n	8005c56 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	330c      	adds	r3, #12
 8005aee:	7812      	ldrb	r2, [r2, #0]
 8005af0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b0a:	e0a4      	b.n	8005c56 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d134      	bne.n	8005b84 <HAL_SPI_TransmitReceive+0x30a>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d02f      	beq.n	8005b84 <HAL_SPI_TransmitReceive+0x30a>
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d12c      	bne.n	8005b84 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d912      	bls.n	8005b5a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b38:	881a      	ldrh	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b44:	1c9a      	adds	r2, r3, #2
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	3b02      	subs	r3, #2
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b58:	e012      	b.n	8005b80 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	330c      	adds	r3, #12
 8005b64:	7812      	ldrb	r2, [r2, #0]
 8005b66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d148      	bne.n	8005c24 <HAL_SPI_TransmitReceive+0x3aa>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d042      	beq.n	8005c24 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d923      	bls.n	8005bf2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb4:	b292      	uxth	r2, r2
 8005bb6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbc:	1c9a      	adds	r2, r3, #2
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b02      	subs	r3, #2
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d81f      	bhi.n	8005c20 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005bee:	605a      	str	r2, [r3, #4]
 8005bf0:	e016      	b.n	8005c20 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f103 020c 	add.w	r2, r3, #12
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfe:	7812      	ldrb	r2, [r2, #0]
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c20:	2301      	movs	r3, #1
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c24:	f7fc fa16 	bl	8002054 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d803      	bhi.n	8005c3c <HAL_SPI_TransmitReceive+0x3c2>
 8005c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c3a:	d102      	bne.n	8005c42 <HAL_SPI_TransmitReceive+0x3c8>
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d109      	bne.n	8005c56 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e02c      	b.n	8005cb0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f47f af55 	bne.w	8005b0c <HAL_SPI_TransmitReceive+0x292>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f47f af4e 	bne.w	8005b0c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c70:	6a3a      	ldr	r2, [r7, #32]
 8005c72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f995 	bl	8005fa4 <SPI_EndRxTxTransaction>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d008      	beq.n	8005c92 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2220      	movs	r2, #32
 8005c84:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e00e      	b.n	8005cb0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e000      	b.n	8005cb0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005cae:	2300      	movs	r3, #0
  }
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3728      	adds	r7, #40	@ 0x28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	603b      	str	r3, [r7, #0]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cc8:	f7fc f9c4 	bl	8002054 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd0:	1a9b      	subs	r3, r3, r2
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cd8:	f7fc f9bc 	bl	8002054 <HAL_GetTick>
 8005cdc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cde:	4b39      	ldr	r3, [pc, #228]	@ (8005dc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	015b      	lsls	r3, r3, #5
 8005ce4:	0d1b      	lsrs	r3, r3, #20
 8005ce6:	69fa      	ldr	r2, [r7, #28]
 8005ce8:	fb02 f303 	mul.w	r3, r2, r3
 8005cec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cee:	e054      	b.n	8005d9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cf6:	d050      	beq.n	8005d9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cf8:	f7fc f9ac 	bl	8002054 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d902      	bls.n	8005d0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d13d      	bne.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d26:	d111      	bne.n	8005d4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d30:	d004      	beq.n	8005d3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d3a:	d107      	bne.n	8005d4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d54:	d10f      	bne.n	8005d76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e017      	b.n	8005dba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	4013      	ands	r3, r2
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	bf0c      	ite	eq
 8005daa:	2301      	moveq	r3, #1
 8005dac:	2300      	movne	r3, #0
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	461a      	mov	r2, r3
 8005db2:	79fb      	ldrb	r3, [r7, #7]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d19b      	bne.n	8005cf0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3720      	adds	r7, #32
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20000000 	.word	0x20000000

08005dc8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08a      	sub	sp, #40	@ 0x28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005dda:	f7fc f93b 	bl	8002054 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de2:	1a9b      	subs	r3, r3, r2
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	4413      	add	r3, r2
 8005de8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005dea:	f7fc f933 	bl	8002054 <HAL_GetTick>
 8005dee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005df8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ef0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	00da      	lsls	r2, r3, #3
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	0d1b      	lsrs	r3, r3, #20
 8005e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e0a:	fb02 f303 	mul.w	r3, r2, r3
 8005e0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005e10:	e060      	b.n	8005ed4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005e18:	d107      	bne.n	8005e2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d104      	bne.n	8005e2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005e28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e30:	d050      	beq.n	8005ed4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e32:	f7fc f90f 	bl	8002054 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d902      	bls.n	8005e48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d13d      	bne.n	8005ec4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e60:	d111      	bne.n	8005e86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e6a:	d004      	beq.n	8005e76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e74:	d107      	bne.n	8005e86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e8e:	d10f      	bne.n	8005eb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005eae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e010      	b.n	8005ee6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	4013      	ands	r3, r2
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d196      	bne.n	8005e12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3728      	adds	r7, #40	@ 0x28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000000 	.word	0x20000000

08005ef4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f08:	d111      	bne.n	8005f2e <SPI_EndRxTransaction+0x3a>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f12:	d004      	beq.n	8005f1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f1c:	d107      	bne.n	8005f2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f2c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2200      	movs	r2, #0
 8005f36:	2180      	movs	r1, #128	@ 0x80
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7ff febd 	bl	8005cb8 <SPI_WaitFlagStateUntilTimeout>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f48:	f043 0220 	orr.w	r2, r3, #32
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e023      	b.n	8005f9c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f5c:	d11d      	bne.n	8005f9a <SPI_EndRxTransaction+0xa6>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f66:	d004      	beq.n	8005f72 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f70:	d113      	bne.n	8005f9a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f7ff ff22 	bl	8005dc8 <SPI_WaitFifoStateUntilTimeout>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d007      	beq.n	8005f9a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f8e:	f043 0220 	orr.w	r2, r3, #32
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e000      	b.n	8005f9c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af02      	add	r7, sp, #8
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f7ff ff03 	bl	8005dc8 <SPI_WaitFifoStateUntilTimeout>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d007      	beq.n	8005fd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fcc:	f043 0220 	orr.w	r2, r3, #32
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e027      	b.n	8006028 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2180      	movs	r1, #128	@ 0x80
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f7ff fe68 	bl	8005cb8 <SPI_WaitFlagStateUntilTimeout>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d007      	beq.n	8005ffe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ff2:	f043 0220 	orr.w	r2, r3, #32
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e014      	b.n	8006028 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2200      	movs	r2, #0
 8006006:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f7ff fedc 	bl	8005dc8 <SPI_WaitFifoStateUntilTimeout>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800601a:	f043 0220 	orr.w	r2, r3, #32
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e000      	b.n	8006028 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e049      	b.n	80060d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fb fd18 	bl	8001a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3304      	adds	r3, #4
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f000 fd2e 	bl	8006ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d001      	beq.n	80060f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e042      	b.n	800617e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a21      	ldr	r2, [pc, #132]	@ (800618c <HAL_TIM_Base_Start+0xac>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d018      	beq.n	800613c <HAL_TIM_Base_Start+0x5c>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006112:	d013      	beq.n	800613c <HAL_TIM_Base_Start+0x5c>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a1d      	ldr	r2, [pc, #116]	@ (8006190 <HAL_TIM_Base_Start+0xb0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00e      	beq.n	800613c <HAL_TIM_Base_Start+0x5c>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a1c      	ldr	r2, [pc, #112]	@ (8006194 <HAL_TIM_Base_Start+0xb4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d009      	beq.n	800613c <HAL_TIM_Base_Start+0x5c>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1a      	ldr	r2, [pc, #104]	@ (8006198 <HAL_TIM_Base_Start+0xb8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d004      	beq.n	800613c <HAL_TIM_Base_Start+0x5c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a19      	ldr	r2, [pc, #100]	@ (800619c <HAL_TIM_Base_Start+0xbc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d115      	bne.n	8006168 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	4b17      	ldr	r3, [pc, #92]	@ (80061a0 <HAL_TIM_Base_Start+0xc0>)
 8006144:	4013      	ands	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b06      	cmp	r3, #6
 800614c:	d015      	beq.n	800617a <HAL_TIM_Base_Start+0x9a>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006154:	d011      	beq.n	800617a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f042 0201 	orr.w	r2, r2, #1
 8006164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006166:	e008      	b.n	800617a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0201 	orr.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	e000      	b.n	800617c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40012c00 	.word	0x40012c00
 8006190:	40000400 	.word	0x40000400
 8006194:	40000800 	.word	0x40000800
 8006198:	40013400 	.word	0x40013400
 800619c:	40014000 	.word	0x40014000
 80061a0:	00010007 	.word	0x00010007

080061a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e049      	b.n	800624a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f841 	bl	8006252 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3304      	adds	r3, #4
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f000 fc74 	bl	8006ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b086      	sub	sp, #24
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e097      	b.n	80063aa <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fb fc5e 	bl	8001b50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6812      	ldr	r2, [r2, #0]
 80062a6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80062aa:	f023 0307 	bic.w	r3, r3, #7
 80062ae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3304      	adds	r3, #4
 80062b8:	4619      	mov	r1, r3
 80062ba:	4610      	mov	r0, r2
 80062bc:	f000 fc08 	bl	8006ad0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062e8:	f023 0303 	bic.w	r3, r3, #3
 80062ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	689a      	ldr	r2, [r3, #8]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	021b      	lsls	r3, r3, #8
 80062f8:	4313      	orrs	r3, r2
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006306:	f023 030c 	bic.w	r3, r3, #12
 800630a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006312:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	4313      	orrs	r3, r2
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	011a      	lsls	r2, r3, #4
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	031b      	lsls	r3, r3, #12
 8006336:	4313      	orrs	r3, r2
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006344:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800634c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	4313      	orrs	r3, r2
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	4313      	orrs	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d020      	beq.n	8006416 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d01b      	beq.n	8006416 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f06f 0202 	mvn.w	r2, #2
 80063e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	f003 0303 	and.w	r3, r3, #3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fb49 	bl	8006a94 <HAL_TIM_IC_CaptureCallback>
 8006402:	e005      	b.n	8006410 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fb3b 	bl	8006a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fb4c 	bl	8006aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d020      	beq.n	8006462 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f003 0304 	and.w	r3, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	d01b      	beq.n	8006462 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f06f 0204 	mvn.w	r2, #4
 8006432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fb23 	bl	8006a94 <HAL_TIM_IC_CaptureCallback>
 800644e:	e005      	b.n	800645c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fb15 	bl	8006a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fb26 	bl	8006aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d020      	beq.n	80064ae <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f003 0308 	and.w	r3, r3, #8
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01b      	beq.n	80064ae <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f06f 0208 	mvn.w	r2, #8
 800647e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2204      	movs	r2, #4
 8006484:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fafd 	bl	8006a94 <HAL_TIM_IC_CaptureCallback>
 800649a:	e005      	b.n	80064a8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 faef 	bl	8006a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fb00 	bl	8006aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d020      	beq.n	80064fa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f003 0310 	and.w	r3, r3, #16
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d01b      	beq.n	80064fa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f06f 0210 	mvn.w	r2, #16
 80064ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2208      	movs	r2, #8
 80064d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fad7 	bl	8006a94 <HAL_TIM_IC_CaptureCallback>
 80064e6:	e005      	b.n	80064f4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fac9 	bl	8006a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fada 	bl	8006aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00c      	beq.n	800651e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d007      	beq.n	800651e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f06f 0201 	mvn.w	r2, #1
 8006516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 faa7 	bl	8006a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006524:	2b00      	cmp	r3, #0
 8006526:	d104      	bne.n	8006532 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00c      	beq.n	800654c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006538:	2b00      	cmp	r3, #0
 800653a:	d007      	beq.n	800654c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f001 f808 	bl	800755c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00c      	beq.n	8006570 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800655c:	2b00      	cmp	r3, #0
 800655e:	d007      	beq.n	8006570 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f001 f800 	bl	8007570 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00c      	beq.n	8006594 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006580:	2b00      	cmp	r3, #0
 8006582:	d007      	beq.n	8006594 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800658c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fa94 	bl	8006abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f003 0320 	and.w	r3, r3, #32
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00c      	beq.n	80065b8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f003 0320 	and.w	r3, r3, #32
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d007      	beq.n	80065b8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f06f 0220 	mvn.w	r2, #32
 80065b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 ffc8 	bl	8007548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00c      	beq.n	80065dc <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d007      	beq.n	80065dc <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80065d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 ffd4 	bl	8007584 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00c      	beq.n	8006600 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d007      	beq.n	8006600 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80065f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 ffcc 	bl	8007598 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00c      	beq.n	8006624 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d007      	beq.n	8006624 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800661c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 ffc4 	bl	80075ac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00c      	beq.n	8006648 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d007      	beq.n	8006648 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 ffbc 	bl	80075c0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006648:	bf00      	nop
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800666a:	2302      	movs	r3, #2
 800666c:	e0ff      	b.n	800686e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b14      	cmp	r3, #20
 800667a:	f200 80f0 	bhi.w	800685e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800667e:	a201      	add	r2, pc, #4	@ (adr r2, 8006684 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006684:	080066d9 	.word	0x080066d9
 8006688:	0800685f 	.word	0x0800685f
 800668c:	0800685f 	.word	0x0800685f
 8006690:	0800685f 	.word	0x0800685f
 8006694:	08006719 	.word	0x08006719
 8006698:	0800685f 	.word	0x0800685f
 800669c:	0800685f 	.word	0x0800685f
 80066a0:	0800685f 	.word	0x0800685f
 80066a4:	0800675b 	.word	0x0800675b
 80066a8:	0800685f 	.word	0x0800685f
 80066ac:	0800685f 	.word	0x0800685f
 80066b0:	0800685f 	.word	0x0800685f
 80066b4:	0800679b 	.word	0x0800679b
 80066b8:	0800685f 	.word	0x0800685f
 80066bc:	0800685f 	.word	0x0800685f
 80066c0:	0800685f 	.word	0x0800685f
 80066c4:	080067dd 	.word	0x080067dd
 80066c8:	0800685f 	.word	0x0800685f
 80066cc:	0800685f 	.word	0x0800685f
 80066d0:	0800685f 	.word	0x0800685f
 80066d4:	0800681d 	.word	0x0800681d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68b9      	ldr	r1, [r7, #8]
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fa92 	bl	8006c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0208 	orr.w	r2, r2, #8
 80066f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0204 	bic.w	r2, r2, #4
 8006702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6999      	ldr	r1, [r3, #24]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	691a      	ldr	r2, [r3, #16]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	619a      	str	r2, [r3, #24]
      break;
 8006716:	e0a5      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fb02 	bl	8006d28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6999      	ldr	r1, [r3, #24]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	021a      	lsls	r2, r3, #8
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	619a      	str	r2, [r3, #24]
      break;
 8006758:	e084      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fb6b 	bl	8006e3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0208 	orr.w	r2, r2, #8
 8006774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0204 	bic.w	r2, r2, #4
 8006784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69d9      	ldr	r1, [r3, #28]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	61da      	str	r2, [r3, #28]
      break;
 8006798:	e064      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fbd3 	bl	8006f4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69da      	ldr	r2, [r3, #28]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69d9      	ldr	r1, [r3, #28]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	021a      	lsls	r2, r3, #8
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	61da      	str	r2, [r3, #28]
      break;
 80067da:	e043      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fc3c 	bl	8007060 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0208 	orr.w	r2, r2, #8
 80067f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0204 	bic.w	r2, r2, #4
 8006806:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800681a:	e023      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fc80 	bl	8007128 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006836:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006846:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	021a      	lsls	r2, r3, #8
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800685c:	e002      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	75fb      	strb	r3, [r7, #23]
      break;
 8006862:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800686c:	7dfb      	ldrb	r3, [r7, #23]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3718      	adds	r7, #24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop

08006878 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_TIM_ConfigClockSource+0x1c>
 8006890:	2302      	movs	r3, #2
 8006892:	e0de      	b.n	8006a52 <HAL_TIM_ConfigClockSource+0x1da>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80068b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80068b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a63      	ldr	r2, [pc, #396]	@ (8006a5c <HAL_TIM_ConfigClockSource+0x1e4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	f000 80a9 	beq.w	8006a26 <HAL_TIM_ConfigClockSource+0x1ae>
 80068d4:	4a61      	ldr	r2, [pc, #388]	@ (8006a5c <HAL_TIM_ConfigClockSource+0x1e4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	f200 80ae 	bhi.w	8006a38 <HAL_TIM_ConfigClockSource+0x1c0>
 80068dc:	4a60      	ldr	r2, [pc, #384]	@ (8006a60 <HAL_TIM_ConfigClockSource+0x1e8>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	f000 80a1 	beq.w	8006a26 <HAL_TIM_ConfigClockSource+0x1ae>
 80068e4:	4a5e      	ldr	r2, [pc, #376]	@ (8006a60 <HAL_TIM_ConfigClockSource+0x1e8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	f200 80a6 	bhi.w	8006a38 <HAL_TIM_ConfigClockSource+0x1c0>
 80068ec:	4a5d      	ldr	r2, [pc, #372]	@ (8006a64 <HAL_TIM_ConfigClockSource+0x1ec>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	f000 8099 	beq.w	8006a26 <HAL_TIM_ConfigClockSource+0x1ae>
 80068f4:	4a5b      	ldr	r2, [pc, #364]	@ (8006a64 <HAL_TIM_ConfigClockSource+0x1ec>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	f200 809e 	bhi.w	8006a38 <HAL_TIM_ConfigClockSource+0x1c0>
 80068fc:	4a5a      	ldr	r2, [pc, #360]	@ (8006a68 <HAL_TIM_ConfigClockSource+0x1f0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	f000 8091 	beq.w	8006a26 <HAL_TIM_ConfigClockSource+0x1ae>
 8006904:	4a58      	ldr	r2, [pc, #352]	@ (8006a68 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	f200 8096 	bhi.w	8006a38 <HAL_TIM_ConfigClockSource+0x1c0>
 800690c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006910:	f000 8089 	beq.w	8006a26 <HAL_TIM_ConfigClockSource+0x1ae>
 8006914:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006918:	f200 808e 	bhi.w	8006a38 <HAL_TIM_ConfigClockSource+0x1c0>
 800691c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006920:	d03e      	beq.n	80069a0 <HAL_TIM_ConfigClockSource+0x128>
 8006922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006926:	f200 8087 	bhi.w	8006a38 <HAL_TIM_ConfigClockSource+0x1c0>
 800692a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800692e:	f000 8086 	beq.w	8006a3e <HAL_TIM_ConfigClockSource+0x1c6>
 8006932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006936:	d87f      	bhi.n	8006a38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006938:	2b70      	cmp	r3, #112	@ 0x70
 800693a:	d01a      	beq.n	8006972 <HAL_TIM_ConfigClockSource+0xfa>
 800693c:	2b70      	cmp	r3, #112	@ 0x70
 800693e:	d87b      	bhi.n	8006a38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006940:	2b60      	cmp	r3, #96	@ 0x60
 8006942:	d050      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0x16e>
 8006944:	2b60      	cmp	r3, #96	@ 0x60
 8006946:	d877      	bhi.n	8006a38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006948:	2b50      	cmp	r3, #80	@ 0x50
 800694a:	d03c      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0x14e>
 800694c:	2b50      	cmp	r3, #80	@ 0x50
 800694e:	d873      	bhi.n	8006a38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006950:	2b40      	cmp	r3, #64	@ 0x40
 8006952:	d058      	beq.n	8006a06 <HAL_TIM_ConfigClockSource+0x18e>
 8006954:	2b40      	cmp	r3, #64	@ 0x40
 8006956:	d86f      	bhi.n	8006a38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006958:	2b30      	cmp	r3, #48	@ 0x30
 800695a:	d064      	beq.n	8006a26 <HAL_TIM_ConfigClockSource+0x1ae>
 800695c:	2b30      	cmp	r3, #48	@ 0x30
 800695e:	d86b      	bhi.n	8006a38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006960:	2b20      	cmp	r3, #32
 8006962:	d060      	beq.n	8006a26 <HAL_TIM_ConfigClockSource+0x1ae>
 8006964:	2b20      	cmp	r3, #32
 8006966:	d867      	bhi.n	8006a38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006968:	2b00      	cmp	r3, #0
 800696a:	d05c      	beq.n	8006a26 <HAL_TIM_ConfigClockSource+0x1ae>
 800696c:	2b10      	cmp	r3, #16
 800696e:	d05a      	beq.n	8006a26 <HAL_TIM_ConfigClockSource+0x1ae>
 8006970:	e062      	b.n	8006a38 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006982:	f000 fcb3 	bl	80072ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006994:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	609a      	str	r2, [r3, #8]
      break;
 800699e:	e04f      	b.n	8006a40 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069b0:	f000 fc9c 	bl	80072ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069c2:	609a      	str	r2, [r3, #8]
      break;
 80069c4:	e03c      	b.n	8006a40 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069d2:	461a      	mov	r2, r3
 80069d4:	f000 fc0e 	bl	80071f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2150      	movs	r1, #80	@ 0x50
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 fc67 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 80069e4:	e02c      	b.n	8006a40 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069f2:	461a      	mov	r2, r3
 80069f4:	f000 fc2d 	bl	8007252 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2160      	movs	r1, #96	@ 0x60
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fc57 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006a04:	e01c      	b.n	8006a40 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a12:	461a      	mov	r2, r3
 8006a14:	f000 fbee 	bl	80071f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2140      	movs	r1, #64	@ 0x40
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fc47 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006a24:	e00c      	b.n	8006a40 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4610      	mov	r0, r2
 8006a32:	f000 fc3e 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006a36:	e003      	b.n	8006a40 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a3c:	e000      	b.n	8006a40 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006a3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	00100070 	.word	0x00100070
 8006a60:	00100040 	.word	0x00100040
 8006a64:	00100030 	.word	0x00100030
 8006a68:	00100020 	.word	0x00100020

08006a6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a42      	ldr	r2, [pc, #264]	@ (8006bec <TIM_Base_SetConfig+0x11c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d00f      	beq.n	8006b08 <TIM_Base_SetConfig+0x38>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aee:	d00b      	beq.n	8006b08 <TIM_Base_SetConfig+0x38>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a3f      	ldr	r2, [pc, #252]	@ (8006bf0 <TIM_Base_SetConfig+0x120>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d007      	beq.n	8006b08 <TIM_Base_SetConfig+0x38>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a3e      	ldr	r2, [pc, #248]	@ (8006bf4 <TIM_Base_SetConfig+0x124>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d003      	beq.n	8006b08 <TIM_Base_SetConfig+0x38>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a3d      	ldr	r2, [pc, #244]	@ (8006bf8 <TIM_Base_SetConfig+0x128>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d108      	bne.n	8006b1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a33      	ldr	r2, [pc, #204]	@ (8006bec <TIM_Base_SetConfig+0x11c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d01b      	beq.n	8006b5a <TIM_Base_SetConfig+0x8a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b28:	d017      	beq.n	8006b5a <TIM_Base_SetConfig+0x8a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a30      	ldr	r2, [pc, #192]	@ (8006bf0 <TIM_Base_SetConfig+0x120>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d013      	beq.n	8006b5a <TIM_Base_SetConfig+0x8a>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a2f      	ldr	r2, [pc, #188]	@ (8006bf4 <TIM_Base_SetConfig+0x124>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d00f      	beq.n	8006b5a <TIM_Base_SetConfig+0x8a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a2e      	ldr	r2, [pc, #184]	@ (8006bf8 <TIM_Base_SetConfig+0x128>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00b      	beq.n	8006b5a <TIM_Base_SetConfig+0x8a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a2d      	ldr	r2, [pc, #180]	@ (8006bfc <TIM_Base_SetConfig+0x12c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d007      	beq.n	8006b5a <TIM_Base_SetConfig+0x8a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a2c      	ldr	r2, [pc, #176]	@ (8006c00 <TIM_Base_SetConfig+0x130>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d003      	beq.n	8006b5a <TIM_Base_SetConfig+0x8a>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a2b      	ldr	r2, [pc, #172]	@ (8006c04 <TIM_Base_SetConfig+0x134>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d108      	bne.n	8006b6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a16      	ldr	r2, [pc, #88]	@ (8006bec <TIM_Base_SetConfig+0x11c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00f      	beq.n	8006bb8 <TIM_Base_SetConfig+0xe8>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a17      	ldr	r2, [pc, #92]	@ (8006bf8 <TIM_Base_SetConfig+0x128>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00b      	beq.n	8006bb8 <TIM_Base_SetConfig+0xe8>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a16      	ldr	r2, [pc, #88]	@ (8006bfc <TIM_Base_SetConfig+0x12c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d007      	beq.n	8006bb8 <TIM_Base_SetConfig+0xe8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a15      	ldr	r2, [pc, #84]	@ (8006c00 <TIM_Base_SetConfig+0x130>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d003      	beq.n	8006bb8 <TIM_Base_SetConfig+0xe8>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a14      	ldr	r2, [pc, #80]	@ (8006c04 <TIM_Base_SetConfig+0x134>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d103      	bne.n	8006bc0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d105      	bne.n	8006bde <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f023 0201 	bic.w	r2, r3, #1
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	611a      	str	r2, [r3, #16]
  }
}
 8006bde:	bf00      	nop
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40012c00 	.word	0x40012c00
 8006bf0:	40000400 	.word	0x40000400
 8006bf4:	40000800 	.word	0x40000800
 8006bf8:	40013400 	.word	0x40013400
 8006bfc:	40014000 	.word	0x40014000
 8006c00:	40014400 	.word	0x40014400
 8006c04:	40014800 	.word	0x40014800

08006c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	f023 0201 	bic.w	r2, r3, #1
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0303 	bic.w	r3, r3, #3
 8006c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f023 0302 	bic.w	r3, r3, #2
 8006c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a2c      	ldr	r2, [pc, #176]	@ (8006d14 <TIM_OC1_SetConfig+0x10c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d00f      	beq.n	8006c88 <TIM_OC1_SetConfig+0x80>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a2b      	ldr	r2, [pc, #172]	@ (8006d18 <TIM_OC1_SetConfig+0x110>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00b      	beq.n	8006c88 <TIM_OC1_SetConfig+0x80>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a2a      	ldr	r2, [pc, #168]	@ (8006d1c <TIM_OC1_SetConfig+0x114>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d007      	beq.n	8006c88 <TIM_OC1_SetConfig+0x80>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a29      	ldr	r2, [pc, #164]	@ (8006d20 <TIM_OC1_SetConfig+0x118>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_OC1_SetConfig+0x80>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a28      	ldr	r2, [pc, #160]	@ (8006d24 <TIM_OC1_SetConfig+0x11c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d10c      	bne.n	8006ca2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f023 0308 	bic.w	r3, r3, #8
 8006c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f023 0304 	bic.w	r3, r3, #4
 8006ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8006d14 <TIM_OC1_SetConfig+0x10c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00f      	beq.n	8006cca <TIM_OC1_SetConfig+0xc2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a1a      	ldr	r2, [pc, #104]	@ (8006d18 <TIM_OC1_SetConfig+0x110>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00b      	beq.n	8006cca <TIM_OC1_SetConfig+0xc2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a19      	ldr	r2, [pc, #100]	@ (8006d1c <TIM_OC1_SetConfig+0x114>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d007      	beq.n	8006cca <TIM_OC1_SetConfig+0xc2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a18      	ldr	r2, [pc, #96]	@ (8006d20 <TIM_OC1_SetConfig+0x118>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d003      	beq.n	8006cca <TIM_OC1_SetConfig+0xc2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a17      	ldr	r2, [pc, #92]	@ (8006d24 <TIM_OC1_SetConfig+0x11c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d111      	bne.n	8006cee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	621a      	str	r2, [r3, #32]
}
 8006d08:	bf00      	nop
 8006d0a:	371c      	adds	r7, #28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	40012c00 	.word	0x40012c00
 8006d18:	40013400 	.word	0x40013400
 8006d1c:	40014000 	.word	0x40014000
 8006d20:	40014400 	.word	0x40014400
 8006d24:	40014800 	.word	0x40014800

08006d28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	f023 0210 	bic.w	r2, r3, #16
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	021b      	lsls	r3, r3, #8
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f023 0320 	bic.w	r3, r3, #32
 8006d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a28      	ldr	r2, [pc, #160]	@ (8006e28 <TIM_OC2_SetConfig+0x100>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d003      	beq.n	8006d94 <TIM_OC2_SetConfig+0x6c>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a27      	ldr	r2, [pc, #156]	@ (8006e2c <TIM_OC2_SetConfig+0x104>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d10d      	bne.n	8006db0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a1d      	ldr	r2, [pc, #116]	@ (8006e28 <TIM_OC2_SetConfig+0x100>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d00f      	beq.n	8006dd8 <TIM_OC2_SetConfig+0xb0>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a1c      	ldr	r2, [pc, #112]	@ (8006e2c <TIM_OC2_SetConfig+0x104>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00b      	beq.n	8006dd8 <TIM_OC2_SetConfig+0xb0>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8006e30 <TIM_OC2_SetConfig+0x108>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d007      	beq.n	8006dd8 <TIM_OC2_SetConfig+0xb0>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a1a      	ldr	r2, [pc, #104]	@ (8006e34 <TIM_OC2_SetConfig+0x10c>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d003      	beq.n	8006dd8 <TIM_OC2_SetConfig+0xb0>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a19      	ldr	r2, [pc, #100]	@ (8006e38 <TIM_OC2_SetConfig+0x110>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d113      	bne.n	8006e00 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006dde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006de6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	621a      	str	r2, [r3, #32]
}
 8006e1a:	bf00      	nop
 8006e1c:	371c      	adds	r7, #28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	40012c00 	.word	0x40012c00
 8006e2c:	40013400 	.word	0x40013400
 8006e30:	40014000 	.word	0x40014000
 8006e34:	40014400 	.word	0x40014400
 8006e38:	40014800 	.word	0x40014800

08006e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f023 0303 	bic.w	r3, r3, #3
 8006e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	021b      	lsls	r3, r3, #8
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a27      	ldr	r2, [pc, #156]	@ (8006f38 <TIM_OC3_SetConfig+0xfc>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d003      	beq.n	8006ea6 <TIM_OC3_SetConfig+0x6a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a26      	ldr	r2, [pc, #152]	@ (8006f3c <TIM_OC3_SetConfig+0x100>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d10d      	bne.n	8006ec2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006eac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8006f38 <TIM_OC3_SetConfig+0xfc>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00f      	beq.n	8006eea <TIM_OC3_SetConfig+0xae>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8006f3c <TIM_OC3_SetConfig+0x100>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00b      	beq.n	8006eea <TIM_OC3_SetConfig+0xae>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8006f40 <TIM_OC3_SetConfig+0x104>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d007      	beq.n	8006eea <TIM_OC3_SetConfig+0xae>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a19      	ldr	r2, [pc, #100]	@ (8006f44 <TIM_OC3_SetConfig+0x108>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d003      	beq.n	8006eea <TIM_OC3_SetConfig+0xae>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a18      	ldr	r2, [pc, #96]	@ (8006f48 <TIM_OC3_SetConfig+0x10c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d113      	bne.n	8006f12 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	011b      	lsls	r3, r3, #4
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	621a      	str	r2, [r3, #32]
}
 8006f2c:	bf00      	nop
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	40012c00 	.word	0x40012c00
 8006f3c:	40013400 	.word	0x40013400
 8006f40:	40014000 	.word	0x40014000
 8006f44:	40014400 	.word	0x40014400
 8006f48:	40014800 	.word	0x40014800

08006f4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	021b      	lsls	r3, r3, #8
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	031b      	lsls	r3, r3, #12
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a28      	ldr	r2, [pc, #160]	@ (800704c <TIM_OC4_SetConfig+0x100>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d003      	beq.n	8006fb8 <TIM_OC4_SetConfig+0x6c>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a27      	ldr	r2, [pc, #156]	@ (8007050 <TIM_OC4_SetConfig+0x104>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d10d      	bne.n	8006fd4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	031b      	lsls	r3, r3, #12
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800704c <TIM_OC4_SetConfig+0x100>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d00f      	beq.n	8006ffc <TIM_OC4_SetConfig+0xb0>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a1c      	ldr	r2, [pc, #112]	@ (8007050 <TIM_OC4_SetConfig+0x104>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d00b      	beq.n	8006ffc <TIM_OC4_SetConfig+0xb0>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8007054 <TIM_OC4_SetConfig+0x108>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d007      	beq.n	8006ffc <TIM_OC4_SetConfig+0xb0>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a1a      	ldr	r2, [pc, #104]	@ (8007058 <TIM_OC4_SetConfig+0x10c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d003      	beq.n	8006ffc <TIM_OC4_SetConfig+0xb0>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a19      	ldr	r2, [pc, #100]	@ (800705c <TIM_OC4_SetConfig+0x110>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d113      	bne.n	8007024 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007002:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800700a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	019b      	lsls	r3, r3, #6
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	4313      	orrs	r3, r2
 8007016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	019b      	lsls	r3, r3, #6
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4313      	orrs	r3, r2
 8007022:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	621a      	str	r2, [r3, #32]
}
 800703e:	bf00      	nop
 8007040:	371c      	adds	r7, #28
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	40012c00 	.word	0x40012c00
 8007050:	40013400 	.word	0x40013400
 8007054:	40014000 	.word	0x40014000
 8007058:	40014400 	.word	0x40014400
 800705c:	40014800 	.word	0x40014800

08007060 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800708e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80070a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	041b      	lsls	r3, r3, #16
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a17      	ldr	r2, [pc, #92]	@ (8007114 <TIM_OC5_SetConfig+0xb4>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00f      	beq.n	80070da <TIM_OC5_SetConfig+0x7a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a16      	ldr	r2, [pc, #88]	@ (8007118 <TIM_OC5_SetConfig+0xb8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d00b      	beq.n	80070da <TIM_OC5_SetConfig+0x7a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a15      	ldr	r2, [pc, #84]	@ (800711c <TIM_OC5_SetConfig+0xbc>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d007      	beq.n	80070da <TIM_OC5_SetConfig+0x7a>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a14      	ldr	r2, [pc, #80]	@ (8007120 <TIM_OC5_SetConfig+0xc0>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d003      	beq.n	80070da <TIM_OC5_SetConfig+0x7a>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a13      	ldr	r2, [pc, #76]	@ (8007124 <TIM_OC5_SetConfig+0xc4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d109      	bne.n	80070ee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	621a      	str	r2, [r3, #32]
}
 8007108:	bf00      	nop
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	40012c00 	.word	0x40012c00
 8007118:	40013400 	.word	0x40013400
 800711c:	40014000 	.word	0x40014000
 8007120:	40014400 	.word	0x40014400
 8007124:	40014800 	.word	0x40014800

08007128 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800714e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800715a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	021b      	lsls	r3, r3, #8
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	4313      	orrs	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800716e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	051b      	lsls	r3, r3, #20
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	4313      	orrs	r3, r2
 800717a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a18      	ldr	r2, [pc, #96]	@ (80071e0 <TIM_OC6_SetConfig+0xb8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d00f      	beq.n	80071a4 <TIM_OC6_SetConfig+0x7c>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a17      	ldr	r2, [pc, #92]	@ (80071e4 <TIM_OC6_SetConfig+0xbc>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00b      	beq.n	80071a4 <TIM_OC6_SetConfig+0x7c>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a16      	ldr	r2, [pc, #88]	@ (80071e8 <TIM_OC6_SetConfig+0xc0>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d007      	beq.n	80071a4 <TIM_OC6_SetConfig+0x7c>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a15      	ldr	r2, [pc, #84]	@ (80071ec <TIM_OC6_SetConfig+0xc4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d003      	beq.n	80071a4 <TIM_OC6_SetConfig+0x7c>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a14      	ldr	r2, [pc, #80]	@ (80071f0 <TIM_OC6_SetConfig+0xc8>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d109      	bne.n	80071b8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	029b      	lsls	r3, r3, #10
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	621a      	str	r2, [r3, #32]
}
 80071d2:	bf00      	nop
 80071d4:	371c      	adds	r7, #28
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	40012c00 	.word	0x40012c00
 80071e4:	40013400 	.word	0x40013400
 80071e8:	40014000 	.word	0x40014000
 80071ec:	40014400 	.word	0x40014400
 80071f0:	40014800 	.word	0x40014800

080071f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	f023 0201 	bic.w	r2, r3, #1
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800721e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4313      	orrs	r3, r2
 8007228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f023 030a 	bic.w	r3, r3, #10
 8007230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	621a      	str	r2, [r3, #32]
}
 8007246:	bf00      	nop
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007252:	b480      	push	{r7}
 8007254:	b087      	sub	sp, #28
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	f023 0210 	bic.w	r2, r3, #16
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800727c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	031b      	lsls	r3, r3, #12
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	4313      	orrs	r3, r2
 8007286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800728e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	4313      	orrs	r3, r2
 8007298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80072c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f043 0307 	orr.w	r3, r3, #7
 80072d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	609a      	str	r2, [r3, #8]
}
 80072e0:	bf00      	nop
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	021a      	lsls	r2, r3, #8
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	431a      	orrs	r2, r3
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	4313      	orrs	r3, r2
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	4313      	orrs	r3, r2
 8007318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	609a      	str	r2, [r3, #8]
}
 8007320:	bf00      	nop
 8007322:	371c      	adds	r7, #28
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800733c:	2b01      	cmp	r3, #1
 800733e:	d101      	bne.n	8007344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007340:	2302      	movs	r3, #2
 8007342:	e065      	b.n	8007410 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2202      	movs	r2, #2
 8007350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a2c      	ldr	r2, [pc, #176]	@ (800741c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d004      	beq.n	8007378 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a2b      	ldr	r2, [pc, #172]	@ (8007420 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d108      	bne.n	800738a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800737e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	4313      	orrs	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007390:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007394:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4313      	orrs	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a1b      	ldr	r2, [pc, #108]	@ (800741c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d018      	beq.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ba:	d013      	beq.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a18      	ldr	r2, [pc, #96]	@ (8007424 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d00e      	beq.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a17      	ldr	r2, [pc, #92]	@ (8007428 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d009      	beq.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a12      	ldr	r2, [pc, #72]	@ (8007420 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d004      	beq.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a13      	ldr	r2, [pc, #76]	@ (800742c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d10c      	bne.n	80073fe <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	40012c00 	.word	0x40012c00
 8007420:	40013400 	.word	0x40013400
 8007424:	40000400 	.word	0x40000400
 8007428:	40000800 	.word	0x40000800
 800742c:	40014000 	.word	0x40014000

08007430 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007444:	2b01      	cmp	r3, #1
 8007446:	d101      	bne.n	800744c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007448:	2302      	movs	r3, #2
 800744a:	e073      	b.n	8007534 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	4313      	orrs	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4313      	orrs	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	041b      	lsls	r3, r3, #16
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a19      	ldr	r2, [pc, #100]	@ (8007540 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d004      	beq.n	80074e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a18      	ldr	r2, [pc, #96]	@ (8007544 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d11c      	bne.n	8007522 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f2:	051b      	lsls	r3, r3, #20
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	4313      	orrs	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007510:	4313      	orrs	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751e:	4313      	orrs	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	40012c00 	.word	0x40012c00
 8007544:	40013400 	.word	0x40013400

08007548 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e042      	b.n	800766c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7fa fc03 	bl	8001e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2224      	movs	r2, #36	@ 0x24
 8007602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0201 	bic.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fb82 	bl	8007d28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f8b3 	bl	8007790 <UART_SetConfig>
 800762a:	4603      	mov	r3, r0
 800762c:	2b01      	cmp	r3, #1
 800762e:	d101      	bne.n	8007634 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e01b      	b.n	800766c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007642:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689a      	ldr	r2, [r3, #8]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007652:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0201 	orr.w	r2, r2, #1
 8007662:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fc01 	bl	8007e6c <UART_CheckIdleState>
 800766a:	4603      	mov	r3, r0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08a      	sub	sp, #40	@ 0x28
 8007678:	af02      	add	r7, sp, #8
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	603b      	str	r3, [r7, #0]
 8007680:	4613      	mov	r3, r2
 8007682:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800768a:	2b20      	cmp	r3, #32
 800768c:	d17b      	bne.n	8007786 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <HAL_UART_Transmit+0x26>
 8007694:	88fb      	ldrh	r3, [r7, #6]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e074      	b.n	8007788 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2221      	movs	r2, #33	@ 0x21
 80076aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076ae:	f7fa fcd1 	bl	8002054 <HAL_GetTick>
 80076b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	88fa      	ldrh	r2, [r7, #6]
 80076b8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	88fa      	ldrh	r2, [r7, #6]
 80076c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076cc:	d108      	bne.n	80076e0 <HAL_UART_Transmit+0x6c>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d104      	bne.n	80076e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	61bb      	str	r3, [r7, #24]
 80076de:	e003      	b.n	80076e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076e4:	2300      	movs	r3, #0
 80076e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076e8:	e030      	b.n	800774c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2200      	movs	r2, #0
 80076f2:	2180      	movs	r1, #128	@ 0x80
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 fc63 	bl	8007fc0 <UART_WaitOnFlagUntilTimeout>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d005      	beq.n	800770c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2220      	movs	r2, #32
 8007704:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e03d      	b.n	8007788 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10b      	bne.n	800772a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007720:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	3302      	adds	r3, #2
 8007726:	61bb      	str	r3, [r7, #24]
 8007728:	e007      	b.n	800773a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	781a      	ldrb	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	3301      	adds	r3, #1
 8007738:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007740:	b29b      	uxth	r3, r3
 8007742:	3b01      	subs	r3, #1
 8007744:	b29a      	uxth	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007752:	b29b      	uxth	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1c8      	bne.n	80076ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2200      	movs	r2, #0
 8007760:	2140      	movs	r1, #64	@ 0x40
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 fc2c 	bl	8007fc0 <UART_WaitOnFlagUntilTimeout>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d005      	beq.n	800777a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2220      	movs	r2, #32
 8007772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e006      	b.n	8007788 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2220      	movs	r2, #32
 800777e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	e000      	b.n	8007788 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007786:	2302      	movs	r3, #2
  }
}
 8007788:	4618      	mov	r0, r3
 800778a:	3720      	adds	r7, #32
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007794:	b08c      	sub	sp, #48	@ 0x30
 8007796:	af00      	add	r7, sp, #0
 8007798:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	431a      	orrs	r2, r3
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	431a      	orrs	r2, r3
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	4bab      	ldr	r3, [pc, #684]	@ (8007a6c <UART_SetConfig+0x2dc>)
 80077c0:	4013      	ands	r3, r2
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	6812      	ldr	r2, [r2, #0]
 80077c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077c8:	430b      	orrs	r3, r1
 80077ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4aa0      	ldr	r2, [pc, #640]	@ (8007a70 <UART_SetConfig+0x2e0>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d004      	beq.n	80077fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077f8:	4313      	orrs	r3, r2
 80077fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007806:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	6812      	ldr	r2, [r2, #0]
 800780e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007810:	430b      	orrs	r3, r1
 8007812:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781a:	f023 010f 	bic.w	r1, r3, #15
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	430a      	orrs	r2, r1
 8007828:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a91      	ldr	r2, [pc, #580]	@ (8007a74 <UART_SetConfig+0x2e4>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d125      	bne.n	8007880 <UART_SetConfig+0xf0>
 8007834:	4b90      	ldr	r3, [pc, #576]	@ (8007a78 <UART_SetConfig+0x2e8>)
 8007836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800783a:	f003 0303 	and.w	r3, r3, #3
 800783e:	2b03      	cmp	r3, #3
 8007840:	d81a      	bhi.n	8007878 <UART_SetConfig+0xe8>
 8007842:	a201      	add	r2, pc, #4	@ (adr r2, 8007848 <UART_SetConfig+0xb8>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	08007859 	.word	0x08007859
 800784c:	08007869 	.word	0x08007869
 8007850:	08007861 	.word	0x08007861
 8007854:	08007871 	.word	0x08007871
 8007858:	2301      	movs	r3, #1
 800785a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800785e:	e0d6      	b.n	8007a0e <UART_SetConfig+0x27e>
 8007860:	2302      	movs	r3, #2
 8007862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007866:	e0d2      	b.n	8007a0e <UART_SetConfig+0x27e>
 8007868:	2304      	movs	r3, #4
 800786a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800786e:	e0ce      	b.n	8007a0e <UART_SetConfig+0x27e>
 8007870:	2308      	movs	r3, #8
 8007872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007876:	e0ca      	b.n	8007a0e <UART_SetConfig+0x27e>
 8007878:	2310      	movs	r3, #16
 800787a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800787e:	e0c6      	b.n	8007a0e <UART_SetConfig+0x27e>
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a7d      	ldr	r2, [pc, #500]	@ (8007a7c <UART_SetConfig+0x2ec>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d138      	bne.n	80078fc <UART_SetConfig+0x16c>
 800788a:	4b7b      	ldr	r3, [pc, #492]	@ (8007a78 <UART_SetConfig+0x2e8>)
 800788c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007890:	f003 030c 	and.w	r3, r3, #12
 8007894:	2b0c      	cmp	r3, #12
 8007896:	d82d      	bhi.n	80078f4 <UART_SetConfig+0x164>
 8007898:	a201      	add	r2, pc, #4	@ (adr r2, 80078a0 <UART_SetConfig+0x110>)
 800789a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789e:	bf00      	nop
 80078a0:	080078d5 	.word	0x080078d5
 80078a4:	080078f5 	.word	0x080078f5
 80078a8:	080078f5 	.word	0x080078f5
 80078ac:	080078f5 	.word	0x080078f5
 80078b0:	080078e5 	.word	0x080078e5
 80078b4:	080078f5 	.word	0x080078f5
 80078b8:	080078f5 	.word	0x080078f5
 80078bc:	080078f5 	.word	0x080078f5
 80078c0:	080078dd 	.word	0x080078dd
 80078c4:	080078f5 	.word	0x080078f5
 80078c8:	080078f5 	.word	0x080078f5
 80078cc:	080078f5 	.word	0x080078f5
 80078d0:	080078ed 	.word	0x080078ed
 80078d4:	2300      	movs	r3, #0
 80078d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078da:	e098      	b.n	8007a0e <UART_SetConfig+0x27e>
 80078dc:	2302      	movs	r3, #2
 80078de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078e2:	e094      	b.n	8007a0e <UART_SetConfig+0x27e>
 80078e4:	2304      	movs	r3, #4
 80078e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ea:	e090      	b.n	8007a0e <UART_SetConfig+0x27e>
 80078ec:	2308      	movs	r3, #8
 80078ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078f2:	e08c      	b.n	8007a0e <UART_SetConfig+0x27e>
 80078f4:	2310      	movs	r3, #16
 80078f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078fa:	e088      	b.n	8007a0e <UART_SetConfig+0x27e>
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a5f      	ldr	r2, [pc, #380]	@ (8007a80 <UART_SetConfig+0x2f0>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d125      	bne.n	8007952 <UART_SetConfig+0x1c2>
 8007906:	4b5c      	ldr	r3, [pc, #368]	@ (8007a78 <UART_SetConfig+0x2e8>)
 8007908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800790c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007910:	2b30      	cmp	r3, #48	@ 0x30
 8007912:	d016      	beq.n	8007942 <UART_SetConfig+0x1b2>
 8007914:	2b30      	cmp	r3, #48	@ 0x30
 8007916:	d818      	bhi.n	800794a <UART_SetConfig+0x1ba>
 8007918:	2b20      	cmp	r3, #32
 800791a:	d00a      	beq.n	8007932 <UART_SetConfig+0x1a2>
 800791c:	2b20      	cmp	r3, #32
 800791e:	d814      	bhi.n	800794a <UART_SetConfig+0x1ba>
 8007920:	2b00      	cmp	r3, #0
 8007922:	d002      	beq.n	800792a <UART_SetConfig+0x19a>
 8007924:	2b10      	cmp	r3, #16
 8007926:	d008      	beq.n	800793a <UART_SetConfig+0x1aa>
 8007928:	e00f      	b.n	800794a <UART_SetConfig+0x1ba>
 800792a:	2300      	movs	r3, #0
 800792c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007930:	e06d      	b.n	8007a0e <UART_SetConfig+0x27e>
 8007932:	2302      	movs	r3, #2
 8007934:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007938:	e069      	b.n	8007a0e <UART_SetConfig+0x27e>
 800793a:	2304      	movs	r3, #4
 800793c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007940:	e065      	b.n	8007a0e <UART_SetConfig+0x27e>
 8007942:	2308      	movs	r3, #8
 8007944:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007948:	e061      	b.n	8007a0e <UART_SetConfig+0x27e>
 800794a:	2310      	movs	r3, #16
 800794c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007950:	e05d      	b.n	8007a0e <UART_SetConfig+0x27e>
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a4b      	ldr	r2, [pc, #300]	@ (8007a84 <UART_SetConfig+0x2f4>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d125      	bne.n	80079a8 <UART_SetConfig+0x218>
 800795c:	4b46      	ldr	r3, [pc, #280]	@ (8007a78 <UART_SetConfig+0x2e8>)
 800795e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007962:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007966:	2bc0      	cmp	r3, #192	@ 0xc0
 8007968:	d016      	beq.n	8007998 <UART_SetConfig+0x208>
 800796a:	2bc0      	cmp	r3, #192	@ 0xc0
 800796c:	d818      	bhi.n	80079a0 <UART_SetConfig+0x210>
 800796e:	2b80      	cmp	r3, #128	@ 0x80
 8007970:	d00a      	beq.n	8007988 <UART_SetConfig+0x1f8>
 8007972:	2b80      	cmp	r3, #128	@ 0x80
 8007974:	d814      	bhi.n	80079a0 <UART_SetConfig+0x210>
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <UART_SetConfig+0x1f0>
 800797a:	2b40      	cmp	r3, #64	@ 0x40
 800797c:	d008      	beq.n	8007990 <UART_SetConfig+0x200>
 800797e:	e00f      	b.n	80079a0 <UART_SetConfig+0x210>
 8007980:	2300      	movs	r3, #0
 8007982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007986:	e042      	b.n	8007a0e <UART_SetConfig+0x27e>
 8007988:	2302      	movs	r3, #2
 800798a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800798e:	e03e      	b.n	8007a0e <UART_SetConfig+0x27e>
 8007990:	2304      	movs	r3, #4
 8007992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007996:	e03a      	b.n	8007a0e <UART_SetConfig+0x27e>
 8007998:	2308      	movs	r3, #8
 800799a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800799e:	e036      	b.n	8007a0e <UART_SetConfig+0x27e>
 80079a0:	2310      	movs	r3, #16
 80079a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079a6:	e032      	b.n	8007a0e <UART_SetConfig+0x27e>
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a30      	ldr	r2, [pc, #192]	@ (8007a70 <UART_SetConfig+0x2e0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d12a      	bne.n	8007a08 <UART_SetConfig+0x278>
 80079b2:	4b31      	ldr	r3, [pc, #196]	@ (8007a78 <UART_SetConfig+0x2e8>)
 80079b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80079bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079c0:	d01a      	beq.n	80079f8 <UART_SetConfig+0x268>
 80079c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079c6:	d81b      	bhi.n	8007a00 <UART_SetConfig+0x270>
 80079c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079cc:	d00c      	beq.n	80079e8 <UART_SetConfig+0x258>
 80079ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079d2:	d815      	bhi.n	8007a00 <UART_SetConfig+0x270>
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <UART_SetConfig+0x250>
 80079d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079dc:	d008      	beq.n	80079f0 <UART_SetConfig+0x260>
 80079de:	e00f      	b.n	8007a00 <UART_SetConfig+0x270>
 80079e0:	2300      	movs	r3, #0
 80079e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079e6:	e012      	b.n	8007a0e <UART_SetConfig+0x27e>
 80079e8:	2302      	movs	r3, #2
 80079ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079ee:	e00e      	b.n	8007a0e <UART_SetConfig+0x27e>
 80079f0:	2304      	movs	r3, #4
 80079f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079f6:	e00a      	b.n	8007a0e <UART_SetConfig+0x27e>
 80079f8:	2308      	movs	r3, #8
 80079fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079fe:	e006      	b.n	8007a0e <UART_SetConfig+0x27e>
 8007a00:	2310      	movs	r3, #16
 8007a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a06:	e002      	b.n	8007a0e <UART_SetConfig+0x27e>
 8007a08:	2310      	movs	r3, #16
 8007a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a17      	ldr	r2, [pc, #92]	@ (8007a70 <UART_SetConfig+0x2e0>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	f040 80a8 	bne.w	8007b6a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a1e:	2b08      	cmp	r3, #8
 8007a20:	d834      	bhi.n	8007a8c <UART_SetConfig+0x2fc>
 8007a22:	a201      	add	r2, pc, #4	@ (adr r2, 8007a28 <UART_SetConfig+0x298>)
 8007a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a28:	08007a4d 	.word	0x08007a4d
 8007a2c:	08007a8d 	.word	0x08007a8d
 8007a30:	08007a55 	.word	0x08007a55
 8007a34:	08007a8d 	.word	0x08007a8d
 8007a38:	08007a5b 	.word	0x08007a5b
 8007a3c:	08007a8d 	.word	0x08007a8d
 8007a40:	08007a8d 	.word	0x08007a8d
 8007a44:	08007a8d 	.word	0x08007a8d
 8007a48:	08007a63 	.word	0x08007a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a4c:	f7fd f95c 	bl	8004d08 <HAL_RCC_GetPCLK1Freq>
 8007a50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a52:	e021      	b.n	8007a98 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a54:	4b0c      	ldr	r3, [pc, #48]	@ (8007a88 <UART_SetConfig+0x2f8>)
 8007a56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a58:	e01e      	b.n	8007a98 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a5a:	f7fd f8e9 	bl	8004c30 <HAL_RCC_GetSysClockFreq>
 8007a5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a60:	e01a      	b.n	8007a98 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a68:	e016      	b.n	8007a98 <UART_SetConfig+0x308>
 8007a6a:	bf00      	nop
 8007a6c:	cfff69f3 	.word	0xcfff69f3
 8007a70:	40008000 	.word	0x40008000
 8007a74:	40013800 	.word	0x40013800
 8007a78:	40021000 	.word	0x40021000
 8007a7c:	40004400 	.word	0x40004400
 8007a80:	40004800 	.word	0x40004800
 8007a84:	40004c00 	.word	0x40004c00
 8007a88:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a96:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 812a 	beq.w	8007cf4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa4:	4a9e      	ldr	r2, [pc, #632]	@ (8007d20 <UART_SetConfig+0x590>)
 8007aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aae:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ab2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	4413      	add	r3, r2
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d305      	bcc.n	8007ad0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d903      	bls.n	8007ad8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ad6:	e10d      	b.n	8007cf4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ada:	2200      	movs	r2, #0
 8007adc:	60bb      	str	r3, [r7, #8]
 8007ade:	60fa      	str	r2, [r7, #12]
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae4:	4a8e      	ldr	r2, [pc, #568]	@ (8007d20 <UART_SetConfig+0x590>)
 8007ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	2200      	movs	r2, #0
 8007aee:	603b      	str	r3, [r7, #0]
 8007af0:	607a      	str	r2, [r7, #4]
 8007af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007af6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007afa:	f7f8 fbe1 	bl	80002c0 <__aeabi_uldivmod>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	4610      	mov	r0, r2
 8007b04:	4619      	mov	r1, r3
 8007b06:	f04f 0200 	mov.w	r2, #0
 8007b0a:	f04f 0300 	mov.w	r3, #0
 8007b0e:	020b      	lsls	r3, r1, #8
 8007b10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b14:	0202      	lsls	r2, r0, #8
 8007b16:	6979      	ldr	r1, [r7, #20]
 8007b18:	6849      	ldr	r1, [r1, #4]
 8007b1a:	0849      	lsrs	r1, r1, #1
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	460c      	mov	r4, r1
 8007b20:	4605      	mov	r5, r0
 8007b22:	eb12 0804 	adds.w	r8, r2, r4
 8007b26:	eb43 0905 	adc.w	r9, r3, r5
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	469a      	mov	sl, r3
 8007b32:	4693      	mov	fp, r2
 8007b34:	4652      	mov	r2, sl
 8007b36:	465b      	mov	r3, fp
 8007b38:	4640      	mov	r0, r8
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	f7f8 fbc0 	bl	80002c0 <__aeabi_uldivmod>
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	4613      	mov	r3, r2
 8007b46:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b4e:	d308      	bcc.n	8007b62 <UART_SetConfig+0x3d2>
 8007b50:	6a3b      	ldr	r3, [r7, #32]
 8007b52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b56:	d204      	bcs.n	8007b62 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6a3a      	ldr	r2, [r7, #32]
 8007b5e:	60da      	str	r2, [r3, #12]
 8007b60:	e0c8      	b.n	8007cf4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b68:	e0c4      	b.n	8007cf4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b72:	d167      	bne.n	8007c44 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007b74:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	d828      	bhi.n	8007bce <UART_SetConfig+0x43e>
 8007b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b84 <UART_SetConfig+0x3f4>)
 8007b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b82:	bf00      	nop
 8007b84:	08007ba9 	.word	0x08007ba9
 8007b88:	08007bb1 	.word	0x08007bb1
 8007b8c:	08007bb9 	.word	0x08007bb9
 8007b90:	08007bcf 	.word	0x08007bcf
 8007b94:	08007bbf 	.word	0x08007bbf
 8007b98:	08007bcf 	.word	0x08007bcf
 8007b9c:	08007bcf 	.word	0x08007bcf
 8007ba0:	08007bcf 	.word	0x08007bcf
 8007ba4:	08007bc7 	.word	0x08007bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ba8:	f7fd f8ae 	bl	8004d08 <HAL_RCC_GetPCLK1Freq>
 8007bac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bae:	e014      	b.n	8007bda <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bb0:	f7fd f8c0 	bl	8004d34 <HAL_RCC_GetPCLK2Freq>
 8007bb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bb6:	e010      	b.n	8007bda <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bb8:	4b5a      	ldr	r3, [pc, #360]	@ (8007d24 <UART_SetConfig+0x594>)
 8007bba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007bbc:	e00d      	b.n	8007bda <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bbe:	f7fd f837 	bl	8004c30 <HAL_RCC_GetSysClockFreq>
 8007bc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bc4:	e009      	b.n	8007bda <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007bcc:	e005      	b.n	8007bda <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007bd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 8089 	beq.w	8007cf4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be6:	4a4e      	ldr	r2, [pc, #312]	@ (8007d20 <UART_SetConfig+0x590>)
 8007be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bec:	461a      	mov	r2, r3
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bf4:	005a      	lsls	r2, r3, #1
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	085b      	lsrs	r3, r3, #1
 8007bfc:	441a      	add	r2, r3
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	2b0f      	cmp	r3, #15
 8007c0c:	d916      	bls.n	8007c3c <UART_SetConfig+0x4ac>
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c14:	d212      	bcs.n	8007c3c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	f023 030f 	bic.w	r3, r3, #15
 8007c1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	085b      	lsrs	r3, r3, #1
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	8bfb      	ldrh	r3, [r7, #30]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	8bfa      	ldrh	r2, [r7, #30]
 8007c38:	60da      	str	r2, [r3, #12]
 8007c3a:	e05b      	b.n	8007cf4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c42:	e057      	b.n	8007cf4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	d828      	bhi.n	8007c9e <UART_SetConfig+0x50e>
 8007c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c54 <UART_SetConfig+0x4c4>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007c79 	.word	0x08007c79
 8007c58:	08007c81 	.word	0x08007c81
 8007c5c:	08007c89 	.word	0x08007c89
 8007c60:	08007c9f 	.word	0x08007c9f
 8007c64:	08007c8f 	.word	0x08007c8f
 8007c68:	08007c9f 	.word	0x08007c9f
 8007c6c:	08007c9f 	.word	0x08007c9f
 8007c70:	08007c9f 	.word	0x08007c9f
 8007c74:	08007c97 	.word	0x08007c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c78:	f7fd f846 	bl	8004d08 <HAL_RCC_GetPCLK1Freq>
 8007c7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c7e:	e014      	b.n	8007caa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c80:	f7fd f858 	bl	8004d34 <HAL_RCC_GetPCLK2Freq>
 8007c84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c86:	e010      	b.n	8007caa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c88:	4b26      	ldr	r3, [pc, #152]	@ (8007d24 <UART_SetConfig+0x594>)
 8007c8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c8c:	e00d      	b.n	8007caa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c8e:	f7fc ffcf 	bl	8004c30 <HAL_RCC_GetSysClockFreq>
 8007c92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c94:	e009      	b.n	8007caa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c9c:	e005      	b.n	8007caa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ca8:	bf00      	nop
    }

    if (pclk != 0U)
 8007caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d021      	beq.n	8007cf4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8007d20 <UART_SetConfig+0x590>)
 8007cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	085b      	lsrs	r3, r3, #1
 8007cc8:	441a      	add	r2, r3
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	2b0f      	cmp	r3, #15
 8007cd8:	d909      	bls.n	8007cee <UART_SetConfig+0x55e>
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ce0:	d205      	bcs.n	8007cee <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	60da      	str	r2, [r3, #12]
 8007cec:	e002      	b.n	8007cf4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	2200      	movs	r2, #0
 8007d08:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007d10:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3730      	adds	r7, #48	@ 0x30
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d1e:	bf00      	nop
 8007d20:	0800bd60 	.word	0x0800bd60
 8007d24:	00f42400 	.word	0x00f42400

08007d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d34:	f003 0308 	and.w	r3, r3, #8
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00a      	beq.n	8007d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00a      	beq.n	8007d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d78:	f003 0302 	and.w	r3, r3, #2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00a      	beq.n	8007d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9a:	f003 0304 	and.w	r3, r3, #4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00a      	beq.n	8007db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	430a      	orrs	r2, r1
 8007db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dbc:	f003 0310 	and.w	r3, r3, #16
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00a      	beq.n	8007dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dde:	f003 0320 	and.w	r3, r3, #32
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d01a      	beq.n	8007e3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e26:	d10a      	bne.n	8007e3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00a      	beq.n	8007e60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	605a      	str	r2, [r3, #4]
  }
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b098      	sub	sp, #96	@ 0x60
 8007e70:	af02      	add	r7, sp, #8
 8007e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e7c:	f7fa f8ea 	bl	8002054 <HAL_GetTick>
 8007e80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0308 	and.w	r3, r3, #8
 8007e8c:	2b08      	cmp	r3, #8
 8007e8e:	d12f      	bne.n	8007ef0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f88e 	bl	8007fc0 <UART_WaitOnFlagUntilTimeout>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d022      	beq.n	8007ef0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb2:	e853 3f00 	ldrex	r3, [r3]
 8007eb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ebe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ecc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ece:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ed0:	e841 2300 	strex	r3, r2, [r1]
 8007ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e6      	bne.n	8007eaa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e063      	b.n	8007fb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0304 	and.w	r3, r3, #4
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d149      	bne.n	8007f92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007efe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f06:	2200      	movs	r2, #0
 8007f08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f857 	bl	8007fc0 <UART_WaitOnFlagUntilTimeout>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d03c      	beq.n	8007f92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	623b      	str	r3, [r7, #32]
   return(result);
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f36:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e6      	bne.n	8007f18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3308      	adds	r3, #8
 8007f50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	e853 3f00 	ldrex	r3, [r3]
 8007f58:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f023 0301 	bic.w	r3, r3, #1
 8007f60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f6a:	61fa      	str	r2, [r7, #28]
 8007f6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	69b9      	ldr	r1, [r7, #24]
 8007f70:	69fa      	ldr	r2, [r7, #28]
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	617b      	str	r3, [r7, #20]
   return(result);
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e5      	bne.n	8007f4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2220      	movs	r2, #32
 8007f82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e012      	b.n	8007fb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2220      	movs	r2, #32
 8007f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3758      	adds	r7, #88	@ 0x58
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fd0:	e04f      	b.n	8008072 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fd8:	d04b      	beq.n	8008072 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fda:	f7fa f83b 	bl	8002054 <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d302      	bcc.n	8007ff0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e04e      	b.n	8008092 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0304 	and.w	r3, r3, #4
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d037      	beq.n	8008072 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2b80      	cmp	r3, #128	@ 0x80
 8008006:	d034      	beq.n	8008072 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2b40      	cmp	r3, #64	@ 0x40
 800800c:	d031      	beq.n	8008072 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	f003 0308 	and.w	r3, r3, #8
 8008018:	2b08      	cmp	r3, #8
 800801a:	d110      	bne.n	800803e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2208      	movs	r2, #8
 8008022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 f838 	bl	800809a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2208      	movs	r2, #8
 800802e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e029      	b.n	8008092 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008048:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800804c:	d111      	bne.n	8008072 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008056:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 f81e 	bl	800809a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2220      	movs	r2, #32
 8008062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e00f      	b.n	8008092 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	69da      	ldr	r2, [r3, #28]
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	4013      	ands	r3, r2
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	429a      	cmp	r2, r3
 8008080:	bf0c      	ite	eq
 8008082:	2301      	moveq	r3, #1
 8008084:	2300      	movne	r3, #0
 8008086:	b2db      	uxtb	r3, r3
 8008088:	461a      	mov	r2, r3
 800808a:	79fb      	ldrb	r3, [r7, #7]
 800808c:	429a      	cmp	r2, r3
 800808e:	d0a0      	beq.n	8007fd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800809a:	b480      	push	{r7}
 800809c:	b095      	sub	sp, #84	@ 0x54
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080aa:	e853 3f00 	ldrex	r3, [r3]
 80080ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	461a      	mov	r2, r3
 80080be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80080c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80080c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80080c8:	e841 2300 	strex	r3, r2, [r1]
 80080cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80080ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e6      	bne.n	80080a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3308      	adds	r3, #8
 80080da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	e853 3f00 	ldrex	r3, [r3]
 80080e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080ea:	f023 0301 	bic.w	r3, r3, #1
 80080ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3308      	adds	r3, #8
 80080f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008100:	e841 2300 	strex	r3, r2, [r1]
 8008104:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1e3      	bne.n	80080d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008110:	2b01      	cmp	r3, #1
 8008112:	d118      	bne.n	8008146 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	e853 3f00 	ldrex	r3, [r3]
 8008120:	60bb      	str	r3, [r7, #8]
   return(result);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f023 0310 	bic.w	r3, r3, #16
 8008128:	647b      	str	r3, [r7, #68]	@ 0x44
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008132:	61bb      	str	r3, [r7, #24]
 8008134:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	6979      	ldr	r1, [r7, #20]
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	613b      	str	r3, [r7, #16]
   return(result);
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e6      	bne.n	8008114 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2220      	movs	r2, #32
 800814a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800815a:	bf00      	nop
 800815c:	3754      	adds	r7, #84	@ 0x54
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008166:	b480      	push	{r7}
 8008168:	b085      	sub	sp, #20
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008174:	2b01      	cmp	r3, #1
 8008176:	d101      	bne.n	800817c <HAL_UARTEx_DisableFifoMode+0x16>
 8008178:	2302      	movs	r3, #2
 800817a:	e027      	b.n	80081cc <HAL_UARTEx_DisableFifoMode+0x66>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2224      	movs	r2, #36	@ 0x24
 8008188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f022 0201 	bic.w	r2, r2, #1
 80081a2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80081aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2220      	movs	r2, #32
 80081be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d101      	bne.n	80081f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80081ec:	2302      	movs	r3, #2
 80081ee:	e02d      	b.n	800824c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2224      	movs	r2, #36	@ 0x24
 80081fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 0201 	bic.w	r2, r2, #1
 8008216:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	430a      	orrs	r2, r1
 800822a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f84f 	bl	80082d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2220      	movs	r2, #32
 800823e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008264:	2b01      	cmp	r3, #1
 8008266:	d101      	bne.n	800826c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008268:	2302      	movs	r3, #2
 800826a:	e02d      	b.n	80082c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2224      	movs	r2, #36	@ 0x24
 8008278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f022 0201 	bic.w	r2, r2, #1
 8008292:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	430a      	orrs	r2, r1
 80082a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f811 	bl	80082d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d108      	bne.n	80082f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082f0:	e031      	b.n	8008356 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082f2:	2308      	movs	r3, #8
 80082f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082f6:	2308      	movs	r3, #8
 80082f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	0e5b      	lsrs	r3, r3, #25
 8008302:	b2db      	uxtb	r3, r3
 8008304:	f003 0307 	and.w	r3, r3, #7
 8008308:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	0f5b      	lsrs	r3, r3, #29
 8008312:	b2db      	uxtb	r3, r3
 8008314:	f003 0307 	and.w	r3, r3, #7
 8008318:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	7b3a      	ldrb	r2, [r7, #12]
 800831e:	4911      	ldr	r1, [pc, #68]	@ (8008364 <UARTEx_SetNbDataToProcess+0x94>)
 8008320:	5c8a      	ldrb	r2, [r1, r2]
 8008322:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008326:	7b3a      	ldrb	r2, [r7, #12]
 8008328:	490f      	ldr	r1, [pc, #60]	@ (8008368 <UARTEx_SetNbDataToProcess+0x98>)
 800832a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800832c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008330:	b29a      	uxth	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	7b7a      	ldrb	r2, [r7, #13]
 800833c:	4909      	ldr	r1, [pc, #36]	@ (8008364 <UARTEx_SetNbDataToProcess+0x94>)
 800833e:	5c8a      	ldrb	r2, [r1, r2]
 8008340:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008344:	7b7a      	ldrb	r2, [r7, #13]
 8008346:	4908      	ldr	r1, [pc, #32]	@ (8008368 <UARTEx_SetNbDataToProcess+0x98>)
 8008348:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800834a:	fb93 f3f2 	sdiv	r3, r3, r2
 800834e:	b29a      	uxth	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008356:	bf00      	nop
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	0800bd78 	.word	0x0800bd78
 8008368:	0800bd80 	.word	0x0800bd80

0800836c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008376:	2300      	movs	r3, #0
 8008378:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800837a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800837e:	2b84      	cmp	r3, #132	@ 0x84
 8008380:	d005      	beq.n	800838e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008382:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4413      	add	r3, r2
 800838a:	3303      	adds	r3, #3
 800838c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800838e:	68fb      	ldr	r3, [r7, #12]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80083a0:	f000 ff24 	bl	80091ec <vTaskStartScheduler>
  
  return osOK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	bd80      	pop	{r7, pc}

080083aa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80083aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ac:	b087      	sub	sp, #28
 80083ae:	af02      	add	r7, sp, #8
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685c      	ldr	r4, [r3, #4]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083c0:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7ff ffcf 	bl	800836c <makeFreeRtosPriority>
 80083ce:	4602      	mov	r2, r0
 80083d0:	f107 030c 	add.w	r3, r7, #12
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	9200      	str	r2, [sp, #0]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	4632      	mov	r2, r6
 80083dc:	4629      	mov	r1, r5
 80083de:	4620      	mov	r0, r4
 80083e0:	f000 fd82 	bl	8008ee8 <xTaskCreate>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d001      	beq.n	80083ee <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80083ea:	2300      	movs	r3, #0
 80083ec:	e000      	b.n	80083f0 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80083ee:	68fb      	ldr	r3, [r7, #12]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080083f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <osDelay+0x16>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	e000      	b.n	8008410 <osDelay+0x18>
 800840e:	2301      	movs	r3, #1
 8008410:	4618      	mov	r0, r3
 8008412:	f000 feb5 	bl	8009180 <vTaskDelay>
  
  return osOK;
 8008416:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008418:	4618      	mov	r0, r3
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f103 0208 	add.w	r2, r3, #8
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008438:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f103 0208 	add.w	r2, r3, #8
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f103 0208 	add.w	r2, r3, #8
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800846e:	bf00      	nop
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800847a:	b480      	push	{r7}
 800847c:	b085      	sub	sp, #20
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	601a      	str	r2, [r3, #0]
}
 80084b6:	bf00      	nop
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084c2:	b480      	push	{r7}
 80084c4:	b085      	sub	sp, #20
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
 80084ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084d8:	d103      	bne.n	80084e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	e00c      	b.n	80084fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	3308      	adds	r3, #8
 80084e6:	60fb      	str	r3, [r7, #12]
 80084e8:	e002      	b.n	80084f0 <vListInsert+0x2e>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	60fb      	str	r3, [r7, #12]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d2f6      	bcs.n	80084ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	683a      	ldr	r2, [r7, #0]
 8008516:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	601a      	str	r2, [r3, #0]
}
 8008528:	bf00      	nop
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	6892      	ldr	r2, [r2, #8]
 800854a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	6852      	ldr	r2, [r2, #4]
 8008554:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	429a      	cmp	r2, r3
 800855e:	d103      	bne.n	8008568 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	1e5a      	subs	r2, r3, #1
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10b      	bne.n	80085b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800859c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a0:	f383 8811 	msr	BASEPRI, r3
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80085ae:	bf00      	nop
 80085b0:	bf00      	nop
 80085b2:	e7fd      	b.n	80085b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80085b4:	f001 ffa0 	bl	800a4f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085c0:	68f9      	ldr	r1, [r7, #12]
 80085c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085c4:	fb01 f303 	mul.w	r3, r1, r3
 80085c8:	441a      	add	r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e4:	3b01      	subs	r3, #1
 80085e6:	68f9      	ldr	r1, [r7, #12]
 80085e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085ea:	fb01 f303 	mul.w	r3, r1, r3
 80085ee:	441a      	add	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	22ff      	movs	r2, #255	@ 0xff
 80085f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	22ff      	movs	r2, #255	@ 0xff
 8008600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d114      	bne.n	8008634 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d01a      	beq.n	8008648 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3310      	adds	r3, #16
 8008616:	4618      	mov	r0, r3
 8008618:	f001 f86c 	bl	80096f4 <xTaskRemoveFromEventList>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d012      	beq.n	8008648 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008622:	4b0d      	ldr	r3, [pc, #52]	@ (8008658 <xQueueGenericReset+0xd0>)
 8008624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	e009      	b.n	8008648 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	3310      	adds	r3, #16
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff fef1 	bl	8008420 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	3324      	adds	r3, #36	@ 0x24
 8008642:	4618      	mov	r0, r3
 8008644:	f7ff feec 	bl	8008420 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008648:	f001 ff88 	bl	800a55c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800864c:	2301      	movs	r3, #1
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	e000ed04 	.word	0xe000ed04

0800865c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08a      	sub	sp, #40	@ 0x28
 8008660:	af02      	add	r7, sp, #8
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	4613      	mov	r3, r2
 8008668:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10b      	bne.n	8008688 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	613b      	str	r3, [r7, #16]
}
 8008682:	bf00      	nop
 8008684:	bf00      	nop
 8008686:	e7fd      	b.n	8008684 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	fb02 f303 	mul.w	r3, r2, r3
 8008690:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	3348      	adds	r3, #72	@ 0x48
 8008696:	4618      	mov	r0, r3
 8008698:	f002 f850 	bl	800a73c <pvPortMalloc>
 800869c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00d      	beq.n	80086c0 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	3348      	adds	r3, #72	@ 0x48
 80086ac:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086ae:	79fa      	ldrb	r2, [r7, #7]
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	4613      	mov	r3, r2
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	68b9      	ldr	r1, [r7, #8]
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 f805 	bl	80086ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086c0:	69bb      	ldr	r3, [r7, #24]
	}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3720      	adds	r7, #32
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b084      	sub	sp, #16
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	60f8      	str	r0, [r7, #12]
 80086d2:	60b9      	str	r1, [r7, #8]
 80086d4:	607a      	str	r2, [r7, #4]
 80086d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d103      	bne.n	80086e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	e002      	b.n	80086ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80086f8:	2101      	movs	r1, #1
 80086fa:	69b8      	ldr	r0, [r7, #24]
 80086fc:	f7ff ff44 	bl	8008588 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008700:	bf00      	nop
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08e      	sub	sp, #56	@ 0x38
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008716:	2300      	movs	r3, #0
 8008718:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800871e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10b      	bne.n	800873c <xQueueGenericSend+0x34>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008736:	bf00      	nop
 8008738:	bf00      	nop
 800873a:	e7fd      	b.n	8008738 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d103      	bne.n	800874a <xQueueGenericSend+0x42>
 8008742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <xQueueGenericSend+0x46>
 800874a:	2301      	movs	r3, #1
 800874c:	e000      	b.n	8008750 <xQueueGenericSend+0x48>
 800874e:	2300      	movs	r3, #0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10b      	bne.n	800876c <xQueueGenericSend+0x64>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008766:	bf00      	nop
 8008768:	bf00      	nop
 800876a:	e7fd      	b.n	8008768 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	2b02      	cmp	r3, #2
 8008770:	d103      	bne.n	800877a <xQueueGenericSend+0x72>
 8008772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008776:	2b01      	cmp	r3, #1
 8008778:	d101      	bne.n	800877e <xQueueGenericSend+0x76>
 800877a:	2301      	movs	r3, #1
 800877c:	e000      	b.n	8008780 <xQueueGenericSend+0x78>
 800877e:	2300      	movs	r3, #0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10b      	bne.n	800879c <xQueueGenericSend+0x94>
	__asm volatile
 8008784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	623b      	str	r3, [r7, #32]
}
 8008796:	bf00      	nop
 8008798:	bf00      	nop
 800879a:	e7fd      	b.n	8008798 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800879c:	f001 f950 	bl	8009a40 <xTaskGetSchedulerState>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d102      	bne.n	80087ac <xQueueGenericSend+0xa4>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <xQueueGenericSend+0xa8>
 80087ac:	2301      	movs	r3, #1
 80087ae:	e000      	b.n	80087b2 <xQueueGenericSend+0xaa>
 80087b0:	2300      	movs	r3, #0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10b      	bne.n	80087ce <xQueueGenericSend+0xc6>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	61fb      	str	r3, [r7, #28]
}
 80087c8:	bf00      	nop
 80087ca:	bf00      	nop
 80087cc:	e7fd      	b.n	80087ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087ce:	f001 fe93 	bl	800a4f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087da:	429a      	cmp	r2, r3
 80087dc:	d302      	bcc.n	80087e4 <xQueueGenericSend+0xdc>
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d129      	bne.n	8008838 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087e4:	683a      	ldr	r2, [r7, #0]
 80087e6:	68b9      	ldr	r1, [r7, #8]
 80087e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087ea:	f000 fa0f 	bl	8008c0c <prvCopyDataToQueue>
 80087ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d010      	beq.n	800881a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fa:	3324      	adds	r3, #36	@ 0x24
 80087fc:	4618      	mov	r0, r3
 80087fe:	f000 ff79 	bl	80096f4 <xTaskRemoveFromEventList>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d013      	beq.n	8008830 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008808:	4b3f      	ldr	r3, [pc, #252]	@ (8008908 <xQueueGenericSend+0x200>)
 800880a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	e00a      	b.n	8008830 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800881a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d007      	beq.n	8008830 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008820:	4b39      	ldr	r3, [pc, #228]	@ (8008908 <xQueueGenericSend+0x200>)
 8008822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008830:	f001 fe94 	bl	800a55c <vPortExitCritical>
				return pdPASS;
 8008834:	2301      	movs	r3, #1
 8008836:	e063      	b.n	8008900 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d103      	bne.n	8008846 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800883e:	f001 fe8d 	bl	800a55c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008842:	2300      	movs	r3, #0
 8008844:	e05c      	b.n	8008900 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008848:	2b00      	cmp	r3, #0
 800884a:	d106      	bne.n	800885a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800884c:	f107 0314 	add.w	r3, r7, #20
 8008850:	4618      	mov	r0, r3
 8008852:	f000 ffb3 	bl	80097bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008856:	2301      	movs	r3, #1
 8008858:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800885a:	f001 fe7f 	bl	800a55c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800885e:	f000 fd1d 	bl	800929c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008862:	f001 fe49 	bl	800a4f8 <vPortEnterCritical>
 8008866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008868:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800886c:	b25b      	sxtb	r3, r3
 800886e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008872:	d103      	bne.n	800887c <xQueueGenericSend+0x174>
 8008874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800887c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008882:	b25b      	sxtb	r3, r3
 8008884:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008888:	d103      	bne.n	8008892 <xQueueGenericSend+0x18a>
 800888a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888c:	2200      	movs	r2, #0
 800888e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008892:	f001 fe63 	bl	800a55c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008896:	1d3a      	adds	r2, r7, #4
 8008898:	f107 0314 	add.w	r3, r7, #20
 800889c:	4611      	mov	r1, r2
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 ffa2 	bl	80097e8 <xTaskCheckForTimeOut>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d124      	bne.n	80088f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088ac:	f000 faa6 	bl	8008dfc <prvIsQueueFull>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d018      	beq.n	80088e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b8:	3310      	adds	r3, #16
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 fec6 	bl	8009650 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088c6:	f000 fa31 	bl	8008d2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088ca:	f000 fcf5 	bl	80092b8 <xTaskResumeAll>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f47f af7c 	bne.w	80087ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80088d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008908 <xQueueGenericSend+0x200>)
 80088d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	e772      	b.n	80087ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80088e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088ea:	f000 fa1f 	bl	8008d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088ee:	f000 fce3 	bl	80092b8 <xTaskResumeAll>
 80088f2:	e76c      	b.n	80087ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80088f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088f6:	f000 fa19 	bl	8008d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088fa:	f000 fcdd 	bl	80092b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80088fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008900:	4618      	mov	r0, r3
 8008902:	3738      	adds	r7, #56	@ 0x38
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	e000ed04 	.word	0xe000ed04

0800890c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b090      	sub	sp, #64	@ 0x40
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
 8008918:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800891e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10b      	bne.n	800893c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008936:	bf00      	nop
 8008938:	bf00      	nop
 800893a:	e7fd      	b.n	8008938 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d103      	bne.n	800894a <xQueueGenericSendFromISR+0x3e>
 8008942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <xQueueGenericSendFromISR+0x42>
 800894a:	2301      	movs	r3, #1
 800894c:	e000      	b.n	8008950 <xQueueGenericSendFromISR+0x44>
 800894e:	2300      	movs	r3, #0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10b      	bne.n	800896c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008966:	bf00      	nop
 8008968:	bf00      	nop
 800896a:	e7fd      	b.n	8008968 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	2b02      	cmp	r3, #2
 8008970:	d103      	bne.n	800897a <xQueueGenericSendFromISR+0x6e>
 8008972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008976:	2b01      	cmp	r3, #1
 8008978:	d101      	bne.n	800897e <xQueueGenericSendFromISR+0x72>
 800897a:	2301      	movs	r3, #1
 800897c:	e000      	b.n	8008980 <xQueueGenericSendFromISR+0x74>
 800897e:	2300      	movs	r3, #0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10b      	bne.n	800899c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	623b      	str	r3, [r7, #32]
}
 8008996:	bf00      	nop
 8008998:	bf00      	nop
 800899a:	e7fd      	b.n	8008998 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800899c:	f001 fe8c 	bl	800a6b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089a0:	f3ef 8211 	mrs	r2, BASEPRI
 80089a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	61fa      	str	r2, [r7, #28]
 80089b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d302      	bcc.n	80089ce <xQueueGenericSendFromISR+0xc2>
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d12f      	bne.n	8008a2e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	68b9      	ldr	r1, [r7, #8]
 80089e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80089e4:	f000 f912 	bl	8008c0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80089ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089f0:	d112      	bne.n	8008a18 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d016      	beq.n	8008a28 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fc:	3324      	adds	r3, #36	@ 0x24
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 fe78 	bl	80096f4 <xTaskRemoveFromEventList>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00e      	beq.n	8008a28 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	601a      	str	r2, [r3, #0]
 8008a16:	e007      	b.n	8008a28 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	b25a      	sxtb	r2, r3
 8008a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008a2c:	e001      	b.n	8008a32 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a34:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3740      	adds	r7, #64	@ 0x40
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08c      	sub	sp, #48	@ 0x30
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a54:	2300      	movs	r3, #0
 8008a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10b      	bne.n	8008a7a <xQueueReceive+0x32>
	__asm volatile
 8008a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	623b      	str	r3, [r7, #32]
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop
 8008a78:	e7fd      	b.n	8008a76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d103      	bne.n	8008a88 <xQueueReceive+0x40>
 8008a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d101      	bne.n	8008a8c <xQueueReceive+0x44>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e000      	b.n	8008a8e <xQueueReceive+0x46>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10b      	bne.n	8008aaa <xQueueReceive+0x62>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	61fb      	str	r3, [r7, #28]
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop
 8008aa8:	e7fd      	b.n	8008aa6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008aaa:	f000 ffc9 	bl	8009a40 <xTaskGetSchedulerState>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d102      	bne.n	8008aba <xQueueReceive+0x72>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <xQueueReceive+0x76>
 8008aba:	2301      	movs	r3, #1
 8008abc:	e000      	b.n	8008ac0 <xQueueReceive+0x78>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10b      	bne.n	8008adc <xQueueReceive+0x94>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	61bb      	str	r3, [r7, #24]
}
 8008ad6:	bf00      	nop
 8008ad8:	bf00      	nop
 8008ada:	e7fd      	b.n	8008ad8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008adc:	f001 fd0c 	bl	800a4f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d01f      	beq.n	8008b2c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008aec:	68b9      	ldr	r1, [r7, #8]
 8008aee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008af0:	f000 f8f6 	bl	8008ce0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af6:	1e5a      	subs	r2, r3, #1
 8008af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00f      	beq.n	8008b24 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b06:	3310      	adds	r3, #16
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f000 fdf3 	bl	80096f4 <xTaskRemoveFromEventList>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d007      	beq.n	8008b24 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b14:	4b3c      	ldr	r3, [pc, #240]	@ (8008c08 <xQueueReceive+0x1c0>)
 8008b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b24:	f001 fd1a 	bl	800a55c <vPortExitCritical>
				return pdPASS;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e069      	b.n	8008c00 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d103      	bne.n	8008b3a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b32:	f001 fd13 	bl	800a55c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b36:	2300      	movs	r3, #0
 8008b38:	e062      	b.n	8008c00 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d106      	bne.n	8008b4e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b40:	f107 0310 	add.w	r3, r7, #16
 8008b44:	4618      	mov	r0, r3
 8008b46:	f000 fe39 	bl	80097bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b4e:	f001 fd05 	bl	800a55c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b52:	f000 fba3 	bl	800929c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b56:	f001 fccf 	bl	800a4f8 <vPortEnterCritical>
 8008b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b60:	b25b      	sxtb	r3, r3
 8008b62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b66:	d103      	bne.n	8008b70 <xQueueReceive+0x128>
 8008b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b76:	b25b      	sxtb	r3, r3
 8008b78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b7c:	d103      	bne.n	8008b86 <xQueueReceive+0x13e>
 8008b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b86:	f001 fce9 	bl	800a55c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b8a:	1d3a      	adds	r2, r7, #4
 8008b8c:	f107 0310 	add.w	r3, r7, #16
 8008b90:	4611      	mov	r1, r2
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 fe28 	bl	80097e8 <xTaskCheckForTimeOut>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d123      	bne.n	8008be6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ba0:	f000 f916 	bl	8008dd0 <prvIsQueueEmpty>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d017      	beq.n	8008bda <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bac:	3324      	adds	r3, #36	@ 0x24
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 fd4c 	bl	8009650 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bba:	f000 f8b7 	bl	8008d2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bbe:	f000 fb7b 	bl	80092b8 <xTaskResumeAll>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d189      	bne.n	8008adc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8008c08 <xQueueReceive+0x1c0>)
 8008bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bce:	601a      	str	r2, [r3, #0]
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	e780      	b.n	8008adc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008bda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bdc:	f000 f8a6 	bl	8008d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008be0:	f000 fb6a 	bl	80092b8 <xTaskResumeAll>
 8008be4:	e77a      	b.n	8008adc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008be6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008be8:	f000 f8a0 	bl	8008d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bec:	f000 fb64 	bl	80092b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bf2:	f000 f8ed 	bl	8008dd0 <prvIsQueueEmpty>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f43f af6f 	beq.w	8008adc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008bfe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3730      	adds	r7, #48	@ 0x30
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	e000ed04 	.word	0xe000ed04

08008c0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10d      	bne.n	8008c46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d14d      	bne.n	8008cce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 ff20 	bl	8009a7c <xTaskPriorityDisinherit>
 8008c3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	609a      	str	r2, [r3, #8]
 8008c44:	e043      	b.n	8008cce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d119      	bne.n	8008c80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6858      	ldr	r0, [r3, #4]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c54:	461a      	mov	r2, r3
 8008c56:	68b9      	ldr	r1, [r7, #8]
 8008c58:	f002 f9d9 	bl	800b00e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c64:	441a      	add	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d32b      	bcc.n	8008cce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	605a      	str	r2, [r3, #4]
 8008c7e:	e026      	b.n	8008cce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	68d8      	ldr	r0, [r3, #12]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c88:	461a      	mov	r2, r3
 8008c8a:	68b9      	ldr	r1, [r7, #8]
 8008c8c:	f002 f9bf 	bl	800b00e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	68da      	ldr	r2, [r3, #12]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c98:	425b      	negs	r3, r3
 8008c9a:	441a      	add	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d207      	bcs.n	8008cbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cb4:	425b      	negs	r3, r3
 8008cb6:	441a      	add	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d105      	bne.n	8008cce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d002      	beq.n	8008cce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008cd6:	697b      	ldr	r3, [r7, #20]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d018      	beq.n	8008d24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68da      	ldr	r2, [r3, #12]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cfa:	441a      	add	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68da      	ldr	r2, [r3, #12]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d303      	bcc.n	8008d14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	68d9      	ldr	r1, [r3, #12]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	6838      	ldr	r0, [r7, #0]
 8008d20:	f002 f975 	bl	800b00e <memcpy>
	}
}
 8008d24:	bf00      	nop
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d34:	f001 fbe0 	bl	800a4f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d40:	e011      	b.n	8008d66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d012      	beq.n	8008d70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	3324      	adds	r3, #36	@ 0x24
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 fcd0 	bl	80096f4 <xTaskRemoveFromEventList>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d5a:	f000 fda9 	bl	80098b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
 8008d60:	3b01      	subs	r3, #1
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	dce9      	bgt.n	8008d42 <prvUnlockQueue+0x16>
 8008d6e:	e000      	b.n	8008d72 <prvUnlockQueue+0x46>
					break;
 8008d70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	22ff      	movs	r2, #255	@ 0xff
 8008d76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008d7a:	f001 fbef 	bl	800a55c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d7e:	f001 fbbb 	bl	800a4f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d8a:	e011      	b.n	8008db0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d012      	beq.n	8008dba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	3310      	adds	r3, #16
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 fcab 	bl	80096f4 <xTaskRemoveFromEventList>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008da4:	f000 fd84 	bl	80098b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008db0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	dce9      	bgt.n	8008d8c <prvUnlockQueue+0x60>
 8008db8:	e000      	b.n	8008dbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008dba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	22ff      	movs	r2, #255	@ 0xff
 8008dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008dc4:	f001 fbca 	bl	800a55c <vPortExitCritical>
}
 8008dc8:	bf00      	nop
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008dd8:	f001 fb8e 	bl	800a4f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d102      	bne.n	8008dea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008de4:	2301      	movs	r3, #1
 8008de6:	60fb      	str	r3, [r7, #12]
 8008de8:	e001      	b.n	8008dee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008dea:	2300      	movs	r3, #0
 8008dec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008dee:	f001 fbb5 	bl	800a55c <vPortExitCritical>

	return xReturn;
 8008df2:	68fb      	ldr	r3, [r7, #12]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e04:	f001 fb78 	bl	800a4f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d102      	bne.n	8008e1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e14:	2301      	movs	r3, #1
 8008e16:	60fb      	str	r3, [r7, #12]
 8008e18:	e001      	b.n	8008e1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e1e:	f001 fb9d 	bl	800a55c <vPortExitCritical>

	return xReturn;
 8008e22:	68fb      	ldr	r3, [r7, #12]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e36:	2300      	movs	r3, #0
 8008e38:	60fb      	str	r3, [r7, #12]
 8008e3a:	e014      	b.n	8008e66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e3c:	4a0f      	ldr	r2, [pc, #60]	@ (8008e7c <vQueueAddToRegistry+0x50>)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10b      	bne.n	8008e60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e48:	490c      	ldr	r1, [pc, #48]	@ (8008e7c <vQueueAddToRegistry+0x50>)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	683a      	ldr	r2, [r7, #0]
 8008e4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e52:	4a0a      	ldr	r2, [pc, #40]	@ (8008e7c <vQueueAddToRegistry+0x50>)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	00db      	lsls	r3, r3, #3
 8008e58:	4413      	add	r3, r2
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008e5e:	e006      	b.n	8008e6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	3301      	adds	r3, #1
 8008e64:	60fb      	str	r3, [r7, #12]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b07      	cmp	r3, #7
 8008e6a:	d9e7      	bls.n	8008e3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e6c:	bf00      	nop
 8008e6e:	bf00      	nop
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	200005fc 	.word	0x200005fc

08008e80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e90:	f001 fb32 	bl	800a4f8 <vPortEnterCritical>
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e9a:	b25b      	sxtb	r3, r3
 8008e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ea0:	d103      	bne.n	8008eaa <vQueueWaitForMessageRestricted+0x2a>
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008eb0:	b25b      	sxtb	r3, r3
 8008eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008eb6:	d103      	bne.n	8008ec0 <vQueueWaitForMessageRestricted+0x40>
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ec0:	f001 fb4c 	bl	800a55c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d106      	bne.n	8008eda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	3324      	adds	r3, #36	@ 0x24
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 fbe1 	bl	800969c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008eda:	6978      	ldr	r0, [r7, #20]
 8008edc:	f7ff ff26 	bl	8008d2c <prvUnlockQueue>
	}
 8008ee0:	bf00      	nop
 8008ee2:	3718      	adds	r7, #24
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b08c      	sub	sp, #48	@ 0x30
 8008eec:	af04      	add	r7, sp, #16
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	603b      	str	r3, [r7, #0]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ef8:	88fb      	ldrh	r3, [r7, #6]
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4618      	mov	r0, r3
 8008efe:	f001 fc1d 	bl	800a73c <pvPortMalloc>
 8008f02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00e      	beq.n	8008f28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f0a:	20a0      	movs	r0, #160	@ 0xa0
 8008f0c:	f001 fc16 	bl	800a73c <pvPortMalloc>
 8008f10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d003      	beq.n	8008f20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f1e:	e005      	b.n	8008f2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f20:	6978      	ldr	r0, [r7, #20]
 8008f22:	f001 fcd9 	bl	800a8d8 <vPortFree>
 8008f26:	e001      	b.n	8008f2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d013      	beq.n	8008f5a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f32:	88fa      	ldrh	r2, [r7, #6]
 8008f34:	2300      	movs	r3, #0
 8008f36:	9303      	str	r3, [sp, #12]
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	9302      	str	r3, [sp, #8]
 8008f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f3e:	9301      	str	r3, [sp, #4]
 8008f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	68b9      	ldr	r1, [r7, #8]
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 f80f 	bl	8008f6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f4e:	69f8      	ldr	r0, [r7, #28]
 8008f50:	f000 f8ac 	bl	80090ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f54:	2301      	movs	r3, #1
 8008f56:	61bb      	str	r3, [r7, #24]
 8008f58:	e002      	b.n	8008f60 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f60:	69bb      	ldr	r3, [r7, #24]
	}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3720      	adds	r7, #32
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f84:	3b01      	subs	r3, #1
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	f023 0307 	bic.w	r3, r3, #7
 8008f92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	f003 0307 	and.w	r3, r3, #7
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00b      	beq.n	8008fb6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	617b      	str	r3, [r7, #20]
}
 8008fb0:	bf00      	nop
 8008fb2:	bf00      	nop
 8008fb4:	e7fd      	b.n	8008fb2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d01f      	beq.n	8008ffc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	61fb      	str	r3, [r7, #28]
 8008fc0:	e012      	b.n	8008fe8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	7819      	ldrb	r1, [r3, #0]
 8008fca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	4413      	add	r3, r2
 8008fd0:	3334      	adds	r3, #52	@ 0x34
 8008fd2:	460a      	mov	r2, r1
 8008fd4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	4413      	add	r3, r2
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d006      	beq.n	8008ff0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	61fb      	str	r3, [r7, #28]
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	2b0f      	cmp	r3, #15
 8008fec:	d9e9      	bls.n	8008fc2 <prvInitialiseNewTask+0x56>
 8008fee:	e000      	b.n	8008ff2 <prvInitialiseNewTask+0x86>
			{
				break;
 8008ff0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ffa:	e003      	b.n	8009004 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009006:	2b06      	cmp	r3, #6
 8009008:	d901      	bls.n	800900e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800900a:	2306      	movs	r3, #6
 800900c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800900e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009010:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009012:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009016:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009018:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800901a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901c:	2200      	movs	r2, #0
 800901e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009022:	3304      	adds	r3, #4
 8009024:	4618      	mov	r0, r3
 8009026:	f7ff fa1b 	bl	8008460 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800902a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902c:	3318      	adds	r3, #24
 800902e:	4618      	mov	r0, r3
 8009030:	f7ff fa16 	bl	8008460 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009038:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800903a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800903c:	f1c3 0207 	rsb	r2, r3, #7
 8009040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009042:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009046:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009048:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800904a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904c:	2200      	movs	r2, #0
 800904e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009054:	2200      	movs	r2, #0
 8009056:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800905a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905c:	334c      	adds	r3, #76	@ 0x4c
 800905e:	224c      	movs	r2, #76	@ 0x4c
 8009060:	2100      	movs	r1, #0
 8009062:	4618      	mov	r0, r3
 8009064:	f001 ff38 	bl	800aed8 <memset>
 8009068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906a:	4a0d      	ldr	r2, [pc, #52]	@ (80090a0 <prvInitialiseNewTask+0x134>)
 800906c:	651a      	str	r2, [r3, #80]	@ 0x50
 800906e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009070:	4a0c      	ldr	r2, [pc, #48]	@ (80090a4 <prvInitialiseNewTask+0x138>)
 8009072:	655a      	str	r2, [r3, #84]	@ 0x54
 8009074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009076:	4a0c      	ldr	r2, [pc, #48]	@ (80090a8 <prvInitialiseNewTask+0x13c>)
 8009078:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	68f9      	ldr	r1, [r7, #12]
 800907e:	69b8      	ldr	r0, [r7, #24]
 8009080:	f001 f908 	bl	800a294 <pxPortInitialiseStack>
 8009084:	4602      	mov	r2, r0
 8009086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009088:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800908a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009096:	bf00      	nop
 8009098:	3720      	adds	r7, #32
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	200013d4 	.word	0x200013d4
 80090a4:	2000143c 	.word	0x2000143c
 80090a8:	200014a4 	.word	0x200014a4

080090ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80090b4:	f001 fa20 	bl	800a4f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80090b8:	4b2a      	ldr	r3, [pc, #168]	@ (8009164 <prvAddNewTaskToReadyList+0xb8>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	3301      	adds	r3, #1
 80090be:	4a29      	ldr	r2, [pc, #164]	@ (8009164 <prvAddNewTaskToReadyList+0xb8>)
 80090c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80090c2:	4b29      	ldr	r3, [pc, #164]	@ (8009168 <prvAddNewTaskToReadyList+0xbc>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d109      	bne.n	80090de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80090ca:	4a27      	ldr	r2, [pc, #156]	@ (8009168 <prvAddNewTaskToReadyList+0xbc>)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090d0:	4b24      	ldr	r3, [pc, #144]	@ (8009164 <prvAddNewTaskToReadyList+0xb8>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d110      	bne.n	80090fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80090d8:	f000 fc0e 	bl	80098f8 <prvInitialiseTaskLists>
 80090dc:	e00d      	b.n	80090fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80090de:	4b23      	ldr	r3, [pc, #140]	@ (800916c <prvAddNewTaskToReadyList+0xc0>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d109      	bne.n	80090fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090e6:	4b20      	ldr	r3, [pc, #128]	@ (8009168 <prvAddNewTaskToReadyList+0xbc>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d802      	bhi.n	80090fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009168 <prvAddNewTaskToReadyList+0xbc>)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009170 <prvAddNewTaskToReadyList+0xc4>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3301      	adds	r3, #1
 8009100:	4a1b      	ldr	r2, [pc, #108]	@ (8009170 <prvAddNewTaskToReadyList+0xc4>)
 8009102:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009108:	2201      	movs	r2, #1
 800910a:	409a      	lsls	r2, r3
 800910c:	4b19      	ldr	r3, [pc, #100]	@ (8009174 <prvAddNewTaskToReadyList+0xc8>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4313      	orrs	r3, r2
 8009112:	4a18      	ldr	r2, [pc, #96]	@ (8009174 <prvAddNewTaskToReadyList+0xc8>)
 8009114:	6013      	str	r3, [r2, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800911a:	4613      	mov	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4413      	add	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4a15      	ldr	r2, [pc, #84]	@ (8009178 <prvAddNewTaskToReadyList+0xcc>)
 8009124:	441a      	add	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	3304      	adds	r3, #4
 800912a:	4619      	mov	r1, r3
 800912c:	4610      	mov	r0, r2
 800912e:	f7ff f9a4 	bl	800847a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009132:	f001 fa13 	bl	800a55c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009136:	4b0d      	ldr	r3, [pc, #52]	@ (800916c <prvAddNewTaskToReadyList+0xc0>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00e      	beq.n	800915c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800913e:	4b0a      	ldr	r3, [pc, #40]	@ (8009168 <prvAddNewTaskToReadyList+0xbc>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009148:	429a      	cmp	r2, r3
 800914a:	d207      	bcs.n	800915c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800914c:	4b0b      	ldr	r3, [pc, #44]	@ (800917c <prvAddNewTaskToReadyList+0xd0>)
 800914e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800915c:	bf00      	nop
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	2000073c 	.word	0x2000073c
 8009168:	2000063c 	.word	0x2000063c
 800916c:	20000748 	.word	0x20000748
 8009170:	20000758 	.word	0x20000758
 8009174:	20000744 	.word	0x20000744
 8009178:	20000640 	.word	0x20000640
 800917c:	e000ed04 	.word	0xe000ed04

08009180 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d018      	beq.n	80091c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009192:	4b14      	ldr	r3, [pc, #80]	@ (80091e4 <vTaskDelay+0x64>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00b      	beq.n	80091b2 <vTaskDelay+0x32>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	60bb      	str	r3, [r7, #8]
}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	e7fd      	b.n	80091ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80091b2:	f000 f873 	bl	800929c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80091b6:	2100      	movs	r1, #0
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fce7 	bl	8009b8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80091be:	f000 f87b 	bl	80092b8 <xTaskResumeAll>
 80091c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d107      	bne.n	80091da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80091ca:	4b07      	ldr	r3, [pc, #28]	@ (80091e8 <vTaskDelay+0x68>)
 80091cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091da:	bf00      	nop
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20000764 	.word	0x20000764
 80091e8:	e000ed04 	.word	0xe000ed04

080091ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80091f2:	4b22      	ldr	r3, [pc, #136]	@ (800927c <vTaskStartScheduler+0x90>)
 80091f4:	9301      	str	r3, [sp, #4]
 80091f6:	2300      	movs	r3, #0
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	2300      	movs	r3, #0
 80091fc:	2280      	movs	r2, #128	@ 0x80
 80091fe:	4920      	ldr	r1, [pc, #128]	@ (8009280 <vTaskStartScheduler+0x94>)
 8009200:	4820      	ldr	r0, [pc, #128]	@ (8009284 <vTaskStartScheduler+0x98>)
 8009202:	f7ff fe71 	bl	8008ee8 <xTaskCreate>
 8009206:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d102      	bne.n	8009214 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800920e:	f000 fd23 	bl	8009c58 <xTimerCreateTimerTask>
 8009212:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d11b      	bne.n	8009252 <vTaskStartScheduler+0x66>
	__asm volatile
 800921a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921e:	f383 8811 	msr	BASEPRI, r3
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	60bb      	str	r3, [r7, #8]
}
 800922c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800922e:	4b16      	ldr	r3, [pc, #88]	@ (8009288 <vTaskStartScheduler+0x9c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	334c      	adds	r3, #76	@ 0x4c
 8009234:	4a15      	ldr	r2, [pc, #84]	@ (800928c <vTaskStartScheduler+0xa0>)
 8009236:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009238:	4b15      	ldr	r3, [pc, #84]	@ (8009290 <vTaskStartScheduler+0xa4>)
 800923a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800923e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009240:	4b14      	ldr	r3, [pc, #80]	@ (8009294 <vTaskStartScheduler+0xa8>)
 8009242:	2201      	movs	r2, #1
 8009244:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009246:	4b14      	ldr	r3, [pc, #80]	@ (8009298 <vTaskStartScheduler+0xac>)
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800924c:	f001 f8b0 	bl	800a3b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009250:	e00f      	b.n	8009272 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009258:	d10b      	bne.n	8009272 <vTaskStartScheduler+0x86>
	__asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925e:	f383 8811 	msr	BASEPRI, r3
 8009262:	f3bf 8f6f 	isb	sy
 8009266:	f3bf 8f4f 	dsb	sy
 800926a:	607b      	str	r3, [r7, #4]
}
 800926c:	bf00      	nop
 800926e:	bf00      	nop
 8009270:	e7fd      	b.n	800926e <vTaskStartScheduler+0x82>
}
 8009272:	bf00      	nop
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	20000760 	.word	0x20000760
 8009280:	0800bd30 	.word	0x0800bd30
 8009284:	080098c9 	.word	0x080098c9
 8009288:	2000063c 	.word	0x2000063c
 800928c:	2000001c 	.word	0x2000001c
 8009290:	2000075c 	.word	0x2000075c
 8009294:	20000748 	.word	0x20000748
 8009298:	20000740 	.word	0x20000740

0800929c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800929c:	b480      	push	{r7}
 800929e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80092a0:	4b04      	ldr	r3, [pc, #16]	@ (80092b4 <vTaskSuspendAll+0x18>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3301      	adds	r3, #1
 80092a6:	4a03      	ldr	r2, [pc, #12]	@ (80092b4 <vTaskSuspendAll+0x18>)
 80092a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80092aa:	bf00      	nop
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	20000764 	.word	0x20000764

080092b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092be:	2300      	movs	r3, #0
 80092c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80092c2:	2300      	movs	r3, #0
 80092c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80092c6:	4b42      	ldr	r3, [pc, #264]	@ (80093d0 <xTaskResumeAll+0x118>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10b      	bne.n	80092e6 <xTaskResumeAll+0x2e>
	__asm volatile
 80092ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	603b      	str	r3, [r7, #0]
}
 80092e0:	bf00      	nop
 80092e2:	bf00      	nop
 80092e4:	e7fd      	b.n	80092e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80092e6:	f001 f907 	bl	800a4f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80092ea:	4b39      	ldr	r3, [pc, #228]	@ (80093d0 <xTaskResumeAll+0x118>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	3b01      	subs	r3, #1
 80092f0:	4a37      	ldr	r2, [pc, #220]	@ (80093d0 <xTaskResumeAll+0x118>)
 80092f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092f4:	4b36      	ldr	r3, [pc, #216]	@ (80093d0 <xTaskResumeAll+0x118>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d161      	bne.n	80093c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80092fc:	4b35      	ldr	r3, [pc, #212]	@ (80093d4 <xTaskResumeAll+0x11c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d05d      	beq.n	80093c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009304:	e02e      	b.n	8009364 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009306:	4b34      	ldr	r3, [pc, #208]	@ (80093d8 <xTaskResumeAll+0x120>)
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3318      	adds	r3, #24
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff f90e 	bl	8008534 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	3304      	adds	r3, #4
 800931c:	4618      	mov	r0, r3
 800931e:	f7ff f909 	bl	8008534 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009326:	2201      	movs	r2, #1
 8009328:	409a      	lsls	r2, r3
 800932a:	4b2c      	ldr	r3, [pc, #176]	@ (80093dc <xTaskResumeAll+0x124>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4313      	orrs	r3, r2
 8009330:	4a2a      	ldr	r2, [pc, #168]	@ (80093dc <xTaskResumeAll+0x124>)
 8009332:	6013      	str	r3, [r2, #0]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009338:	4613      	mov	r3, r2
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	4413      	add	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4a27      	ldr	r2, [pc, #156]	@ (80093e0 <xTaskResumeAll+0x128>)
 8009342:	441a      	add	r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3304      	adds	r3, #4
 8009348:	4619      	mov	r1, r3
 800934a:	4610      	mov	r0, r2
 800934c:	f7ff f895 	bl	800847a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009354:	4b23      	ldr	r3, [pc, #140]	@ (80093e4 <xTaskResumeAll+0x12c>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800935a:	429a      	cmp	r2, r3
 800935c:	d302      	bcc.n	8009364 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800935e:	4b22      	ldr	r3, [pc, #136]	@ (80093e8 <xTaskResumeAll+0x130>)
 8009360:	2201      	movs	r2, #1
 8009362:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009364:	4b1c      	ldr	r3, [pc, #112]	@ (80093d8 <xTaskResumeAll+0x120>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1cc      	bne.n	8009306 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009372:	f000 fb45 	bl	8009a00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009376:	4b1d      	ldr	r3, [pc, #116]	@ (80093ec <xTaskResumeAll+0x134>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d010      	beq.n	80093a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009382:	f000 f847 	bl	8009414 <xTaskIncrementTick>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800938c:	4b16      	ldr	r3, [pc, #88]	@ (80093e8 <xTaskResumeAll+0x130>)
 800938e:	2201      	movs	r2, #1
 8009390:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	3b01      	subs	r3, #1
 8009396:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1f1      	bne.n	8009382 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800939e:	4b13      	ldr	r3, [pc, #76]	@ (80093ec <xTaskResumeAll+0x134>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80093a4:	4b10      	ldr	r3, [pc, #64]	@ (80093e8 <xTaskResumeAll+0x130>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d009      	beq.n	80093c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80093ac:	2301      	movs	r3, #1
 80093ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80093b0:	4b0f      	ldr	r3, [pc, #60]	@ (80093f0 <xTaskResumeAll+0x138>)
 80093b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093b6:	601a      	str	r2, [r3, #0]
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093c0:	f001 f8cc 	bl	800a55c <vPortExitCritical>

	return xAlreadyYielded;
 80093c4:	68bb      	ldr	r3, [r7, #8]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	20000764 	.word	0x20000764
 80093d4:	2000073c 	.word	0x2000073c
 80093d8:	200006fc 	.word	0x200006fc
 80093dc:	20000744 	.word	0x20000744
 80093e0:	20000640 	.word	0x20000640
 80093e4:	2000063c 	.word	0x2000063c
 80093e8:	20000750 	.word	0x20000750
 80093ec:	2000074c 	.word	0x2000074c
 80093f0:	e000ed04 	.word	0xe000ed04

080093f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80093fa:	4b05      	ldr	r3, [pc, #20]	@ (8009410 <xTaskGetTickCount+0x1c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009400:	687b      	ldr	r3, [r7, #4]
}
 8009402:	4618      	mov	r0, r3
 8009404:	370c      	adds	r7, #12
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	20000740 	.word	0x20000740

08009414 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800941a:	2300      	movs	r3, #0
 800941c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800941e:	4b4f      	ldr	r3, [pc, #316]	@ (800955c <xTaskIncrementTick+0x148>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	f040 808f 	bne.w	8009546 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009428:	4b4d      	ldr	r3, [pc, #308]	@ (8009560 <xTaskIncrementTick+0x14c>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3301      	adds	r3, #1
 800942e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009430:	4a4b      	ldr	r2, [pc, #300]	@ (8009560 <xTaskIncrementTick+0x14c>)
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d121      	bne.n	8009480 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800943c:	4b49      	ldr	r3, [pc, #292]	@ (8009564 <xTaskIncrementTick+0x150>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00b      	beq.n	800945e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	603b      	str	r3, [r7, #0]
}
 8009458:	bf00      	nop
 800945a:	bf00      	nop
 800945c:	e7fd      	b.n	800945a <xTaskIncrementTick+0x46>
 800945e:	4b41      	ldr	r3, [pc, #260]	@ (8009564 <xTaskIncrementTick+0x150>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	4b40      	ldr	r3, [pc, #256]	@ (8009568 <xTaskIncrementTick+0x154>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a3e      	ldr	r2, [pc, #248]	@ (8009564 <xTaskIncrementTick+0x150>)
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	4a3e      	ldr	r2, [pc, #248]	@ (8009568 <xTaskIncrementTick+0x154>)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	4b3e      	ldr	r3, [pc, #248]	@ (800956c <xTaskIncrementTick+0x158>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3301      	adds	r3, #1
 8009478:	4a3c      	ldr	r2, [pc, #240]	@ (800956c <xTaskIncrementTick+0x158>)
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	f000 fac0 	bl	8009a00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009480:	4b3b      	ldr	r3, [pc, #236]	@ (8009570 <xTaskIncrementTick+0x15c>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	429a      	cmp	r2, r3
 8009488:	d348      	bcc.n	800951c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800948a:	4b36      	ldr	r3, [pc, #216]	@ (8009564 <xTaskIncrementTick+0x150>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d104      	bne.n	800949e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009494:	4b36      	ldr	r3, [pc, #216]	@ (8009570 <xTaskIncrementTick+0x15c>)
 8009496:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800949a:	601a      	str	r2, [r3, #0]
					break;
 800949c:	e03e      	b.n	800951c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800949e:	4b31      	ldr	r3, [pc, #196]	@ (8009564 <xTaskIncrementTick+0x150>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d203      	bcs.n	80094be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80094b6:	4a2e      	ldr	r2, [pc, #184]	@ (8009570 <xTaskIncrementTick+0x15c>)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80094bc:	e02e      	b.n	800951c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	3304      	adds	r3, #4
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7ff f836 	bl	8008534 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d004      	beq.n	80094da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	3318      	adds	r3, #24
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7ff f82d 	bl	8008534 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094de:	2201      	movs	r2, #1
 80094e0:	409a      	lsls	r2, r3
 80094e2:	4b24      	ldr	r3, [pc, #144]	@ (8009574 <xTaskIncrementTick+0x160>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	4a22      	ldr	r2, [pc, #136]	@ (8009574 <xTaskIncrementTick+0x160>)
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4a1f      	ldr	r2, [pc, #124]	@ (8009578 <xTaskIncrementTick+0x164>)
 80094fa:	441a      	add	r2, r3
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	3304      	adds	r3, #4
 8009500:	4619      	mov	r1, r3
 8009502:	4610      	mov	r0, r2
 8009504:	f7fe ffb9 	bl	800847a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800950c:	4b1b      	ldr	r3, [pc, #108]	@ (800957c <xTaskIncrementTick+0x168>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009512:	429a      	cmp	r2, r3
 8009514:	d3b9      	bcc.n	800948a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009516:	2301      	movs	r3, #1
 8009518:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800951a:	e7b6      	b.n	800948a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800951c:	4b17      	ldr	r3, [pc, #92]	@ (800957c <xTaskIncrementTick+0x168>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009522:	4915      	ldr	r1, [pc, #84]	@ (8009578 <xTaskIncrementTick+0x164>)
 8009524:	4613      	mov	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	440b      	add	r3, r1
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d901      	bls.n	8009538 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009534:	2301      	movs	r3, #1
 8009536:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009538:	4b11      	ldr	r3, [pc, #68]	@ (8009580 <xTaskIncrementTick+0x16c>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d007      	beq.n	8009550 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009540:	2301      	movs	r3, #1
 8009542:	617b      	str	r3, [r7, #20]
 8009544:	e004      	b.n	8009550 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009546:	4b0f      	ldr	r3, [pc, #60]	@ (8009584 <xTaskIncrementTick+0x170>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	3301      	adds	r3, #1
 800954c:	4a0d      	ldr	r2, [pc, #52]	@ (8009584 <xTaskIncrementTick+0x170>)
 800954e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009550:	697b      	ldr	r3, [r7, #20]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3718      	adds	r7, #24
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	20000764 	.word	0x20000764
 8009560:	20000740 	.word	0x20000740
 8009564:	200006f4 	.word	0x200006f4
 8009568:	200006f8 	.word	0x200006f8
 800956c:	20000754 	.word	0x20000754
 8009570:	2000075c 	.word	0x2000075c
 8009574:	20000744 	.word	0x20000744
 8009578:	20000640 	.word	0x20000640
 800957c:	2000063c 	.word	0x2000063c
 8009580:	20000750 	.word	0x20000750
 8009584:	2000074c 	.word	0x2000074c

08009588 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009588:	b480      	push	{r7}
 800958a:	b087      	sub	sp, #28
 800958c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800958e:	4b2a      	ldr	r3, [pc, #168]	@ (8009638 <vTaskSwitchContext+0xb0>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d003      	beq.n	800959e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009596:	4b29      	ldr	r3, [pc, #164]	@ (800963c <vTaskSwitchContext+0xb4>)
 8009598:	2201      	movs	r2, #1
 800959a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800959c:	e045      	b.n	800962a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800959e:	4b27      	ldr	r3, [pc, #156]	@ (800963c <vTaskSwitchContext+0xb4>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a4:	4b26      	ldr	r3, [pc, #152]	@ (8009640 <vTaskSwitchContext+0xb8>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	fab3 f383 	clz	r3, r3
 80095b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80095b2:	7afb      	ldrb	r3, [r7, #11]
 80095b4:	f1c3 031f 	rsb	r3, r3, #31
 80095b8:	617b      	str	r3, [r7, #20]
 80095ba:	4922      	ldr	r1, [pc, #136]	@ (8009644 <vTaskSwitchContext+0xbc>)
 80095bc:	697a      	ldr	r2, [r7, #20]
 80095be:	4613      	mov	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	440b      	add	r3, r1
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10b      	bne.n	80095e6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	607b      	str	r3, [r7, #4]
}
 80095e0:	bf00      	nop
 80095e2:	bf00      	nop
 80095e4:	e7fd      	b.n	80095e2 <vTaskSwitchContext+0x5a>
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	4613      	mov	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	4a14      	ldr	r2, [pc, #80]	@ (8009644 <vTaskSwitchContext+0xbc>)
 80095f2:	4413      	add	r3, r2
 80095f4:	613b      	str	r3, [r7, #16]
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	605a      	str	r2, [r3, #4]
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	3308      	adds	r3, #8
 8009608:	429a      	cmp	r2, r3
 800960a:	d104      	bne.n	8009616 <vTaskSwitchContext+0x8e>
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	605a      	str	r2, [r3, #4]
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	4a0a      	ldr	r2, [pc, #40]	@ (8009648 <vTaskSwitchContext+0xc0>)
 800961e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009620:	4b09      	ldr	r3, [pc, #36]	@ (8009648 <vTaskSwitchContext+0xc0>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	334c      	adds	r3, #76	@ 0x4c
 8009626:	4a09      	ldr	r2, [pc, #36]	@ (800964c <vTaskSwitchContext+0xc4>)
 8009628:	6013      	str	r3, [r2, #0]
}
 800962a:	bf00      	nop
 800962c:	371c      	adds	r7, #28
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	20000764 	.word	0x20000764
 800963c:	20000750 	.word	0x20000750
 8009640:	20000744 	.word	0x20000744
 8009644:	20000640 	.word	0x20000640
 8009648:	2000063c 	.word	0x2000063c
 800964c:	2000001c 	.word	0x2000001c

08009650 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10b      	bne.n	8009678 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	60fb      	str	r3, [r7, #12]
}
 8009672:	bf00      	nop
 8009674:	bf00      	nop
 8009676:	e7fd      	b.n	8009674 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009678:	4b07      	ldr	r3, [pc, #28]	@ (8009698 <vTaskPlaceOnEventList+0x48>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	3318      	adds	r3, #24
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7fe ff1e 	bl	80084c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009686:	2101      	movs	r1, #1
 8009688:	6838      	ldr	r0, [r7, #0]
 800968a:	f000 fa7f 	bl	8009b8c <prvAddCurrentTaskToDelayedList>
}
 800968e:	bf00      	nop
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	2000063c 	.word	0x2000063c

0800969c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10b      	bne.n	80096c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	617b      	str	r3, [r7, #20]
}
 80096c0:	bf00      	nop
 80096c2:	bf00      	nop
 80096c4:	e7fd      	b.n	80096c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096c6:	4b0a      	ldr	r3, [pc, #40]	@ (80096f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3318      	adds	r3, #24
 80096cc:	4619      	mov	r1, r3
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f7fe fed3 	bl	800847a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d002      	beq.n	80096e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80096da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80096de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096e0:	6879      	ldr	r1, [r7, #4]
 80096e2:	68b8      	ldr	r0, [r7, #8]
 80096e4:	f000 fa52 	bl	8009b8c <prvAddCurrentTaskToDelayedList>
	}
 80096e8:	bf00      	nop
 80096ea:	3718      	adds	r7, #24
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	2000063c 	.word	0x2000063c

080096f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10b      	bne.n	8009722 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	60fb      	str	r3, [r7, #12]
}
 800971c:	bf00      	nop
 800971e:	bf00      	nop
 8009720:	e7fd      	b.n	800971e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	3318      	adds	r3, #24
 8009726:	4618      	mov	r0, r3
 8009728:	f7fe ff04 	bl	8008534 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800972c:	4b1d      	ldr	r3, [pc, #116]	@ (80097a4 <xTaskRemoveFromEventList+0xb0>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d11c      	bne.n	800976e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	3304      	adds	r3, #4
 8009738:	4618      	mov	r0, r3
 800973a:	f7fe fefb 	bl	8008534 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009742:	2201      	movs	r2, #1
 8009744:	409a      	lsls	r2, r3
 8009746:	4b18      	ldr	r3, [pc, #96]	@ (80097a8 <xTaskRemoveFromEventList+0xb4>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4313      	orrs	r3, r2
 800974c:	4a16      	ldr	r2, [pc, #88]	@ (80097a8 <xTaskRemoveFromEventList+0xb4>)
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009754:	4613      	mov	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4a13      	ldr	r2, [pc, #76]	@ (80097ac <xTaskRemoveFromEventList+0xb8>)
 800975e:	441a      	add	r2, r3
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	3304      	adds	r3, #4
 8009764:	4619      	mov	r1, r3
 8009766:	4610      	mov	r0, r2
 8009768:	f7fe fe87 	bl	800847a <vListInsertEnd>
 800976c:	e005      	b.n	800977a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	3318      	adds	r3, #24
 8009772:	4619      	mov	r1, r3
 8009774:	480e      	ldr	r0, [pc, #56]	@ (80097b0 <xTaskRemoveFromEventList+0xbc>)
 8009776:	f7fe fe80 	bl	800847a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800977e:	4b0d      	ldr	r3, [pc, #52]	@ (80097b4 <xTaskRemoveFromEventList+0xc0>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009784:	429a      	cmp	r2, r3
 8009786:	d905      	bls.n	8009794 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009788:	2301      	movs	r3, #1
 800978a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800978c:	4b0a      	ldr	r3, [pc, #40]	@ (80097b8 <xTaskRemoveFromEventList+0xc4>)
 800978e:	2201      	movs	r2, #1
 8009790:	601a      	str	r2, [r3, #0]
 8009792:	e001      	b.n	8009798 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009794:	2300      	movs	r3, #0
 8009796:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009798:	697b      	ldr	r3, [r7, #20]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	20000764 	.word	0x20000764
 80097a8:	20000744 	.word	0x20000744
 80097ac:	20000640 	.word	0x20000640
 80097b0:	200006fc 	.word	0x200006fc
 80097b4:	2000063c 	.word	0x2000063c
 80097b8:	20000750 	.word	0x20000750

080097bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097c4:	4b06      	ldr	r3, [pc, #24]	@ (80097e0 <vTaskInternalSetTimeOutState+0x24>)
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097cc:	4b05      	ldr	r3, [pc, #20]	@ (80097e4 <vTaskInternalSetTimeOutState+0x28>)
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	605a      	str	r2, [r3, #4]
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	20000754 	.word	0x20000754
 80097e4:	20000740 	.word	0x20000740

080097e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b088      	sub	sp, #32
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10b      	bne.n	8009810 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80097f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097fc:	f383 8811 	msr	BASEPRI, r3
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	613b      	str	r3, [r7, #16]
}
 800980a:	bf00      	nop
 800980c:	bf00      	nop
 800980e:	e7fd      	b.n	800980c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10b      	bne.n	800982e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	60fb      	str	r3, [r7, #12]
}
 8009828:	bf00      	nop
 800982a:	bf00      	nop
 800982c:	e7fd      	b.n	800982a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800982e:	f000 fe63 	bl	800a4f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009832:	4b1d      	ldr	r3, [pc, #116]	@ (80098a8 <xTaskCheckForTimeOut+0xc0>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	69ba      	ldr	r2, [r7, #24]
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800984a:	d102      	bne.n	8009852 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800984c:	2300      	movs	r3, #0
 800984e:	61fb      	str	r3, [r7, #28]
 8009850:	e023      	b.n	800989a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	4b15      	ldr	r3, [pc, #84]	@ (80098ac <xTaskCheckForTimeOut+0xc4>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	429a      	cmp	r2, r3
 800985c:	d007      	beq.n	800986e <xTaskCheckForTimeOut+0x86>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	69ba      	ldr	r2, [r7, #24]
 8009864:	429a      	cmp	r2, r3
 8009866:	d302      	bcc.n	800986e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009868:	2301      	movs	r3, #1
 800986a:	61fb      	str	r3, [r7, #28]
 800986c:	e015      	b.n	800989a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	429a      	cmp	r2, r3
 8009876:	d20b      	bcs.n	8009890 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	1ad2      	subs	r2, r2, r3
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7ff ff99 	bl	80097bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800988a:	2300      	movs	r3, #0
 800988c:	61fb      	str	r3, [r7, #28]
 800988e:	e004      	b.n	800989a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	2200      	movs	r2, #0
 8009894:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009896:	2301      	movs	r3, #1
 8009898:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800989a:	f000 fe5f 	bl	800a55c <vPortExitCritical>

	return xReturn;
 800989e:	69fb      	ldr	r3, [r7, #28]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3720      	adds	r7, #32
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	20000740 	.word	0x20000740
 80098ac:	20000754 	.word	0x20000754

080098b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098b0:	b480      	push	{r7}
 80098b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80098b4:	4b03      	ldr	r3, [pc, #12]	@ (80098c4 <vTaskMissedYield+0x14>)
 80098b6:	2201      	movs	r2, #1
 80098b8:	601a      	str	r2, [r3, #0]
}
 80098ba:	bf00      	nop
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	20000750 	.word	0x20000750

080098c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098d0:	f000 f852 	bl	8009978 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098d4:	4b06      	ldr	r3, [pc, #24]	@ (80098f0 <prvIdleTask+0x28>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d9f9      	bls.n	80098d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80098dc:	4b05      	ldr	r3, [pc, #20]	@ (80098f4 <prvIdleTask+0x2c>)
 80098de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80098ec:	e7f0      	b.n	80098d0 <prvIdleTask+0x8>
 80098ee:	bf00      	nop
 80098f0:	20000640 	.word	0x20000640
 80098f4:	e000ed04 	.word	0xe000ed04

080098f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098fe:	2300      	movs	r3, #0
 8009900:	607b      	str	r3, [r7, #4]
 8009902:	e00c      	b.n	800991e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	4613      	mov	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4413      	add	r3, r2
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4a12      	ldr	r2, [pc, #72]	@ (8009958 <prvInitialiseTaskLists+0x60>)
 8009910:	4413      	add	r3, r2
 8009912:	4618      	mov	r0, r3
 8009914:	f7fe fd84 	bl	8008420 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	3301      	adds	r3, #1
 800991c:	607b      	str	r3, [r7, #4]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b06      	cmp	r3, #6
 8009922:	d9ef      	bls.n	8009904 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009924:	480d      	ldr	r0, [pc, #52]	@ (800995c <prvInitialiseTaskLists+0x64>)
 8009926:	f7fe fd7b 	bl	8008420 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800992a:	480d      	ldr	r0, [pc, #52]	@ (8009960 <prvInitialiseTaskLists+0x68>)
 800992c:	f7fe fd78 	bl	8008420 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009930:	480c      	ldr	r0, [pc, #48]	@ (8009964 <prvInitialiseTaskLists+0x6c>)
 8009932:	f7fe fd75 	bl	8008420 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009936:	480c      	ldr	r0, [pc, #48]	@ (8009968 <prvInitialiseTaskLists+0x70>)
 8009938:	f7fe fd72 	bl	8008420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800993c:	480b      	ldr	r0, [pc, #44]	@ (800996c <prvInitialiseTaskLists+0x74>)
 800993e:	f7fe fd6f 	bl	8008420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009942:	4b0b      	ldr	r3, [pc, #44]	@ (8009970 <prvInitialiseTaskLists+0x78>)
 8009944:	4a05      	ldr	r2, [pc, #20]	@ (800995c <prvInitialiseTaskLists+0x64>)
 8009946:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009948:	4b0a      	ldr	r3, [pc, #40]	@ (8009974 <prvInitialiseTaskLists+0x7c>)
 800994a:	4a05      	ldr	r2, [pc, #20]	@ (8009960 <prvInitialiseTaskLists+0x68>)
 800994c:	601a      	str	r2, [r3, #0]
}
 800994e:	bf00      	nop
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	20000640 	.word	0x20000640
 800995c:	200006cc 	.word	0x200006cc
 8009960:	200006e0 	.word	0x200006e0
 8009964:	200006fc 	.word	0x200006fc
 8009968:	20000710 	.word	0x20000710
 800996c:	20000728 	.word	0x20000728
 8009970:	200006f4 	.word	0x200006f4
 8009974:	200006f8 	.word	0x200006f8

08009978 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800997e:	e019      	b.n	80099b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009980:	f000 fdba 	bl	800a4f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009984:	4b10      	ldr	r3, [pc, #64]	@ (80099c8 <prvCheckTasksWaitingTermination+0x50>)
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	3304      	adds	r3, #4
 8009990:	4618      	mov	r0, r3
 8009992:	f7fe fdcf 	bl	8008534 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009996:	4b0d      	ldr	r3, [pc, #52]	@ (80099cc <prvCheckTasksWaitingTermination+0x54>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	3b01      	subs	r3, #1
 800999c:	4a0b      	ldr	r2, [pc, #44]	@ (80099cc <prvCheckTasksWaitingTermination+0x54>)
 800999e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80099a0:	4b0b      	ldr	r3, [pc, #44]	@ (80099d0 <prvCheckTasksWaitingTermination+0x58>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3b01      	subs	r3, #1
 80099a6:	4a0a      	ldr	r2, [pc, #40]	@ (80099d0 <prvCheckTasksWaitingTermination+0x58>)
 80099a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80099aa:	f000 fdd7 	bl	800a55c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f810 	bl	80099d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099b4:	4b06      	ldr	r3, [pc, #24]	@ (80099d0 <prvCheckTasksWaitingTermination+0x58>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1e1      	bne.n	8009980 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80099bc:	bf00      	nop
 80099be:	bf00      	nop
 80099c0:	3708      	adds	r7, #8
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	20000710 	.word	0x20000710
 80099cc:	2000073c 	.word	0x2000073c
 80099d0:	20000724 	.word	0x20000724

080099d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	334c      	adds	r3, #76	@ 0x4c
 80099e0:	4618      	mov	r0, r3
 80099e2:	f001 fa81 	bl	800aee8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ea:	4618      	mov	r0, r3
 80099ec:	f000 ff74 	bl	800a8d8 <vPortFree>
			vPortFree( pxTCB );
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 ff71 	bl	800a8d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099f6:	bf00      	nop
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
	...

08009a00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a06:	4b0c      	ldr	r3, [pc, #48]	@ (8009a38 <prvResetNextTaskUnblockTime+0x38>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d104      	bne.n	8009a1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a10:	4b0a      	ldr	r3, [pc, #40]	@ (8009a3c <prvResetNextTaskUnblockTime+0x3c>)
 8009a12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a18:	e008      	b.n	8009a2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a1a:	4b07      	ldr	r3, [pc, #28]	@ (8009a38 <prvResetNextTaskUnblockTime+0x38>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	4a04      	ldr	r2, [pc, #16]	@ (8009a3c <prvResetNextTaskUnblockTime+0x3c>)
 8009a2a:	6013      	str	r3, [r2, #0]
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr
 8009a38:	200006f4 	.word	0x200006f4
 8009a3c:	2000075c 	.word	0x2000075c

08009a40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a46:	4b0b      	ldr	r3, [pc, #44]	@ (8009a74 <xTaskGetSchedulerState+0x34>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d102      	bne.n	8009a54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	607b      	str	r3, [r7, #4]
 8009a52:	e008      	b.n	8009a66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a54:	4b08      	ldr	r3, [pc, #32]	@ (8009a78 <xTaskGetSchedulerState+0x38>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d102      	bne.n	8009a62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	607b      	str	r3, [r7, #4]
 8009a60:	e001      	b.n	8009a66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a62:	2300      	movs	r3, #0
 8009a64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a66:	687b      	ldr	r3, [r7, #4]
	}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr
 8009a74:	20000748 	.word	0x20000748
 8009a78:	20000764 	.word	0x20000764

08009a7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b086      	sub	sp, #24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d070      	beq.n	8009b74 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a92:	4b3b      	ldr	r3, [pc, #236]	@ (8009b80 <xTaskPriorityDisinherit+0x104>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	693a      	ldr	r2, [r7, #16]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d00b      	beq.n	8009ab4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	60fb      	str	r3, [r7, #12]
}
 8009aae:	bf00      	nop
 8009ab0:	bf00      	nop
 8009ab2:	e7fd      	b.n	8009ab0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10b      	bne.n	8009ad4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	60bb      	str	r3, [r7, #8]
}
 8009ace:	bf00      	nop
 8009ad0:	bf00      	nop
 8009ad2:	e7fd      	b.n	8009ad0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ad8:	1e5a      	subs	r2, r3, #1
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d044      	beq.n	8009b74 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d140      	bne.n	8009b74 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	3304      	adds	r3, #4
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fe fd1c 	bl	8008534 <uxListRemove>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d115      	bne.n	8009b2e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b06:	491f      	ldr	r1, [pc, #124]	@ (8009b84 <xTaskPriorityDisinherit+0x108>)
 8009b08:	4613      	mov	r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4413      	add	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	440b      	add	r3, r1
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10a      	bne.n	8009b2e <xTaskPriorityDisinherit+0xb2>
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b22:	43da      	mvns	r2, r3
 8009b24:	4b18      	ldr	r3, [pc, #96]	@ (8009b88 <xTaskPriorityDisinherit+0x10c>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4013      	ands	r3, r2
 8009b2a:	4a17      	ldr	r2, [pc, #92]	@ (8009b88 <xTaskPriorityDisinherit+0x10c>)
 8009b2c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b3a:	f1c3 0207 	rsb	r2, r3, #7
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b46:	2201      	movs	r2, #1
 8009b48:	409a      	lsls	r2, r3
 8009b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8009b88 <xTaskPriorityDisinherit+0x10c>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	4a0d      	ldr	r2, [pc, #52]	@ (8009b88 <xTaskPriorityDisinherit+0x10c>)
 8009b52:	6013      	str	r3, [r2, #0]
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b58:	4613      	mov	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	4413      	add	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	4a08      	ldr	r2, [pc, #32]	@ (8009b84 <xTaskPriorityDisinherit+0x108>)
 8009b62:	441a      	add	r2, r3
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	3304      	adds	r3, #4
 8009b68:	4619      	mov	r1, r3
 8009b6a:	4610      	mov	r0, r2
 8009b6c:	f7fe fc85 	bl	800847a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b70:	2301      	movs	r3, #1
 8009b72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b74:	697b      	ldr	r3, [r7, #20]
	}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3718      	adds	r7, #24
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	2000063c 	.word	0x2000063c
 8009b84:	20000640 	.word	0x20000640
 8009b88:	20000744 	.word	0x20000744

08009b8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b96:	4b29      	ldr	r3, [pc, #164]	@ (8009c3c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b9c:	4b28      	ldr	r3, [pc, #160]	@ (8009c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3304      	adds	r3, #4
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fe fcc6 	bl	8008534 <uxListRemove>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10b      	bne.n	8009bc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009bae:	4b24      	ldr	r3, [pc, #144]	@ (8009c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bba:	43da      	mvns	r2, r3
 8009bbc:	4b21      	ldr	r3, [pc, #132]	@ (8009c44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	4a20      	ldr	r2, [pc, #128]	@ (8009c44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009bc4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bcc:	d10a      	bne.n	8009be4 <prvAddCurrentTaskToDelayedList+0x58>
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d007      	beq.n	8009be4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8009c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	3304      	adds	r3, #4
 8009bda:	4619      	mov	r1, r3
 8009bdc:	481a      	ldr	r0, [pc, #104]	@ (8009c48 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009bde:	f7fe fc4c 	bl	800847a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009be2:	e026      	b.n	8009c32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4413      	add	r3, r2
 8009bea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009bec:	4b14      	ldr	r3, [pc, #80]	@ (8009c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d209      	bcs.n	8009c10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bfc:	4b13      	ldr	r3, [pc, #76]	@ (8009c4c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	4b0f      	ldr	r3, [pc, #60]	@ (8009c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3304      	adds	r3, #4
 8009c06:	4619      	mov	r1, r3
 8009c08:	4610      	mov	r0, r2
 8009c0a:	f7fe fc5a 	bl	80084c2 <vListInsert>
}
 8009c0e:	e010      	b.n	8009c32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c10:	4b0f      	ldr	r3, [pc, #60]	@ (8009c50 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	4b0a      	ldr	r3, [pc, #40]	@ (8009c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	f7fe fc50 	bl	80084c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c22:	4b0c      	ldr	r3, [pc, #48]	@ (8009c54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68ba      	ldr	r2, [r7, #8]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d202      	bcs.n	8009c32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009c2c:	4a09      	ldr	r2, [pc, #36]	@ (8009c54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	6013      	str	r3, [r2, #0]
}
 8009c32:	bf00      	nop
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	20000740 	.word	0x20000740
 8009c40:	2000063c 	.word	0x2000063c
 8009c44:	20000744 	.word	0x20000744
 8009c48:	20000728 	.word	0x20000728
 8009c4c:	200006f8 	.word	0x200006f8
 8009c50:	200006f4 	.word	0x200006f4
 8009c54:	2000075c 	.word	0x2000075c

08009c58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c62:	f000 fae1 	bl	800a228 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c66:	4b12      	ldr	r3, [pc, #72]	@ (8009cb0 <xTimerCreateTimerTask+0x58>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00b      	beq.n	8009c86 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8009c6e:	4b11      	ldr	r3, [pc, #68]	@ (8009cb4 <xTimerCreateTimerTask+0x5c>)
 8009c70:	9301      	str	r3, [sp, #4]
 8009c72:	2302      	movs	r3, #2
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	2300      	movs	r3, #0
 8009c78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c7c:	490e      	ldr	r1, [pc, #56]	@ (8009cb8 <xTimerCreateTimerTask+0x60>)
 8009c7e:	480f      	ldr	r0, [pc, #60]	@ (8009cbc <xTimerCreateTimerTask+0x64>)
 8009c80:	f7ff f932 	bl	8008ee8 <xTaskCreate>
 8009c84:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10b      	bne.n	8009ca4 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	603b      	str	r3, [r7, #0]
}
 8009c9e:	bf00      	nop
 8009ca0:	bf00      	nop
 8009ca2:	e7fd      	b.n	8009ca0 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8009ca4:	687b      	ldr	r3, [r7, #4]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20000798 	.word	0x20000798
 8009cb4:	2000079c 	.word	0x2000079c
 8009cb8:	0800bd38 	.word	0x0800bd38
 8009cbc:	08009df9 	.word	0x08009df9

08009cc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b08a      	sub	sp, #40	@ 0x28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
 8009ccc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10b      	bne.n	8009cf0 <xTimerGenericCommand+0x30>
	__asm volatile
 8009cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cdc:	f383 8811 	msr	BASEPRI, r3
 8009ce0:	f3bf 8f6f 	isb	sy
 8009ce4:	f3bf 8f4f 	dsb	sy
 8009ce8:	623b      	str	r3, [r7, #32]
}
 8009cea:	bf00      	nop
 8009cec:	bf00      	nop
 8009cee:	e7fd      	b.n	8009cec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009cf0:	4b19      	ldr	r3, [pc, #100]	@ (8009d58 <xTimerGenericCommand+0x98>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d02a      	beq.n	8009d4e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2b05      	cmp	r3, #5
 8009d08:	dc18      	bgt.n	8009d3c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d0a:	f7ff fe99 	bl	8009a40 <xTaskGetSchedulerState>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d109      	bne.n	8009d28 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d14:	4b10      	ldr	r3, [pc, #64]	@ (8009d58 <xTimerGenericCommand+0x98>)
 8009d16:	6818      	ldr	r0, [r3, #0]
 8009d18:	f107 0114 	add.w	r1, r7, #20
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d20:	f7fe fcf2 	bl	8008708 <xQueueGenericSend>
 8009d24:	6278      	str	r0, [r7, #36]	@ 0x24
 8009d26:	e012      	b.n	8009d4e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d28:	4b0b      	ldr	r3, [pc, #44]	@ (8009d58 <xTimerGenericCommand+0x98>)
 8009d2a:	6818      	ldr	r0, [r3, #0]
 8009d2c:	f107 0114 	add.w	r1, r7, #20
 8009d30:	2300      	movs	r3, #0
 8009d32:	2200      	movs	r2, #0
 8009d34:	f7fe fce8 	bl	8008708 <xQueueGenericSend>
 8009d38:	6278      	str	r0, [r7, #36]	@ 0x24
 8009d3a:	e008      	b.n	8009d4e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d3c:	4b06      	ldr	r3, [pc, #24]	@ (8009d58 <xTimerGenericCommand+0x98>)
 8009d3e:	6818      	ldr	r0, [r3, #0]
 8009d40:	f107 0114 	add.w	r1, r7, #20
 8009d44:	2300      	movs	r3, #0
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	f7fe fde0 	bl	800890c <xQueueGenericSendFromISR>
 8009d4c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3728      	adds	r7, #40	@ 0x28
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	20000798 	.word	0x20000798

08009d5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b088      	sub	sp, #32
 8009d60:	af02      	add	r7, sp, #8
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d66:	4b23      	ldr	r3, [pc, #140]	@ (8009df4 <prvProcessExpiredTimer+0x98>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	3304      	adds	r3, #4
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fe fbdd 	bl	8008534 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009d80:	f003 0304 	and.w	r3, r3, #4
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d023      	beq.n	8009dd0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	699a      	ldr	r2, [r3, #24]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	18d1      	adds	r1, r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	6978      	ldr	r0, [r7, #20]
 8009d96:	f000 f8d5 	bl	8009f44 <prvInsertTimerInActiveList>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d020      	beq.n	8009de2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009da0:	2300      	movs	r3, #0
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	2300      	movs	r3, #0
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	2100      	movs	r1, #0
 8009daa:	6978      	ldr	r0, [r7, #20]
 8009dac:	f7ff ff88 	bl	8009cc0 <xTimerGenericCommand>
 8009db0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d114      	bne.n	8009de2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	60fb      	str	r3, [r7, #12]
}
 8009dca:	bf00      	nop
 8009dcc:	bf00      	nop
 8009dce:	e7fd      	b.n	8009dcc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009dd6:	f023 0301 	bic.w	r3, r3, #1
 8009dda:	b2da      	uxtb	r2, r3
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	6a1b      	ldr	r3, [r3, #32]
 8009de6:	6978      	ldr	r0, [r7, #20]
 8009de8:	4798      	blx	r3
}
 8009dea:	bf00      	nop
 8009dec:	3718      	adds	r7, #24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20000790 	.word	0x20000790

08009df8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e00:	f107 0308 	add.w	r3, r7, #8
 8009e04:	4618      	mov	r0, r3
 8009e06:	f000 f859 	bl	8009ebc <prvGetNextExpireTime>
 8009e0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f000 f805 	bl	8009e20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e16:	f000 f8d7 	bl	8009fc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e1a:	bf00      	nop
 8009e1c:	e7f0      	b.n	8009e00 <prvTimerTask+0x8>
	...

08009e20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e2a:	f7ff fa37 	bl	800929c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e2e:	f107 0308 	add.w	r3, r7, #8
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 f866 	bl	8009f04 <prvSampleTimeNow>
 8009e38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d130      	bne.n	8009ea2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10a      	bne.n	8009e5c <prvProcessTimerOrBlockTask+0x3c>
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d806      	bhi.n	8009e5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e4e:	f7ff fa33 	bl	80092b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e52:	68f9      	ldr	r1, [r7, #12]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7ff ff81 	bl	8009d5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e5a:	e024      	b.n	8009ea6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d008      	beq.n	8009e74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e62:	4b13      	ldr	r3, [pc, #76]	@ (8009eb0 <prvProcessTimerOrBlockTask+0x90>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d101      	bne.n	8009e70 <prvProcessTimerOrBlockTask+0x50>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e000      	b.n	8009e72 <prvProcessTimerOrBlockTask+0x52>
 8009e70:	2300      	movs	r3, #0
 8009e72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e74:	4b0f      	ldr	r3, [pc, #60]	@ (8009eb4 <prvProcessTimerOrBlockTask+0x94>)
 8009e76:	6818      	ldr	r0, [r3, #0]
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	4619      	mov	r1, r3
 8009e82:	f7fe fffd 	bl	8008e80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e86:	f7ff fa17 	bl	80092b8 <xTaskResumeAll>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10a      	bne.n	8009ea6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e90:	4b09      	ldr	r3, [pc, #36]	@ (8009eb8 <prvProcessTimerOrBlockTask+0x98>)
 8009e92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e96:	601a      	str	r2, [r3, #0]
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	f3bf 8f6f 	isb	sy
}
 8009ea0:	e001      	b.n	8009ea6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009ea2:	f7ff fa09 	bl	80092b8 <xTaskResumeAll>
}
 8009ea6:	bf00      	nop
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	20000794 	.word	0x20000794
 8009eb4:	20000798 	.word	0x20000798
 8009eb8:	e000ed04 	.word	0xe000ed04

08009ebc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8009f00 <prvGetNextExpireTime+0x44>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <prvGetNextExpireTime+0x16>
 8009ece:	2201      	movs	r2, #1
 8009ed0:	e000      	b.n	8009ed4 <prvGetNextExpireTime+0x18>
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d105      	bne.n	8009eec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ee0:	4b07      	ldr	r3, [pc, #28]	@ (8009f00 <prvGetNextExpireTime+0x44>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	60fb      	str	r3, [r7, #12]
 8009eea:	e001      	b.n	8009ef0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009eec:	2300      	movs	r3, #0
 8009eee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3714      	adds	r7, #20
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	20000790 	.word	0x20000790

08009f04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f0c:	f7ff fa72 	bl	80093f4 <xTaskGetTickCount>
 8009f10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f12:	4b0b      	ldr	r3, [pc, #44]	@ (8009f40 <prvSampleTimeNow+0x3c>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	68fa      	ldr	r2, [r7, #12]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d205      	bcs.n	8009f28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f1c:	f000 f91e 	bl	800a15c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	601a      	str	r2, [r3, #0]
 8009f26:	e002      	b.n	8009f2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f2e:	4a04      	ldr	r2, [pc, #16]	@ (8009f40 <prvSampleTimeNow+0x3c>)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f34:	68fb      	ldr	r3, [r7, #12]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	200007a0 	.word	0x200007a0

08009f44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	607a      	str	r2, [r7, #4]
 8009f50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f52:	2300      	movs	r3, #0
 8009f54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d812      	bhi.n	8009f90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	1ad2      	subs	r2, r2, r3
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d302      	bcc.n	8009f7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	617b      	str	r3, [r7, #20]
 8009f7c:	e01b      	b.n	8009fb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f7e:	4b10      	ldr	r3, [pc, #64]	@ (8009fc0 <prvInsertTimerInActiveList+0x7c>)
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	3304      	adds	r3, #4
 8009f86:	4619      	mov	r1, r3
 8009f88:	4610      	mov	r0, r2
 8009f8a:	f7fe fa9a 	bl	80084c2 <vListInsert>
 8009f8e:	e012      	b.n	8009fb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d206      	bcs.n	8009fa6 <prvInsertTimerInActiveList+0x62>
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d302      	bcc.n	8009fa6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	617b      	str	r3, [r7, #20]
 8009fa4:	e007      	b.n	8009fb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fa6:	4b07      	ldr	r3, [pc, #28]	@ (8009fc4 <prvInsertTimerInActiveList+0x80>)
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	3304      	adds	r3, #4
 8009fae:	4619      	mov	r1, r3
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	f7fe fa86 	bl	80084c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009fb6:	697b      	ldr	r3, [r7, #20]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	20000794 	.word	0x20000794
 8009fc4:	20000790 	.word	0x20000790

08009fc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b08c      	sub	sp, #48	@ 0x30
 8009fcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fce:	e0b2      	b.n	800a136 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f2c0 80af 	blt.w	800a136 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fde:	695b      	ldr	r3, [r3, #20]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d004      	beq.n	8009fee <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7fe faa3 	bl	8008534 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fee:	1d3b      	adds	r3, r7, #4
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7ff ff87 	bl	8009f04 <prvSampleTimeNow>
 8009ff6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	2b09      	cmp	r3, #9
 8009ffc:	f200 8098 	bhi.w	800a130 <prvProcessReceivedCommands+0x168>
 800a000:	a201      	add	r2, pc, #4	@ (adr r2, 800a008 <prvProcessReceivedCommands+0x40>)
 800a002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a006:	bf00      	nop
 800a008:	0800a031 	.word	0x0800a031
 800a00c:	0800a031 	.word	0x0800a031
 800a010:	0800a031 	.word	0x0800a031
 800a014:	0800a0a7 	.word	0x0800a0a7
 800a018:	0800a0bb 	.word	0x0800a0bb
 800a01c:	0800a107 	.word	0x0800a107
 800a020:	0800a031 	.word	0x0800a031
 800a024:	0800a031 	.word	0x0800a031
 800a028:	0800a0a7 	.word	0x0800a0a7
 800a02c:	0800a0bb 	.word	0x0800a0bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a032:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a036:	f043 0301 	orr.w	r3, r3, #1
 800a03a:	b2da      	uxtb	r2, r3
 800a03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a046:	699b      	ldr	r3, [r3, #24]
 800a048:	18d1      	adds	r1, r2, r3
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6a3a      	ldr	r2, [r7, #32]
 800a04e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a050:	f7ff ff78 	bl	8009f44 <prvInsertTimerInActiveList>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d06c      	beq.n	800a134 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a060:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a064:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a068:	f003 0304 	and.w	r3, r3, #4
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d061      	beq.n	800a134 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	441a      	add	r2, r3
 800a078:	2300      	movs	r3, #0
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	2300      	movs	r3, #0
 800a07e:	2100      	movs	r1, #0
 800a080:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a082:	f7ff fe1d 	bl	8009cc0 <xTimerGenericCommand>
 800a086:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d152      	bne.n	800a134 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	61bb      	str	r3, [r7, #24]
}
 800a0a0:	bf00      	nop
 800a0a2:	bf00      	nop
 800a0a4:	e7fd      	b.n	800a0a2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a0ac:	f023 0301 	bic.w	r3, r3, #1
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800a0b8:	e03d      	b.n	800a136 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a0c0:	f043 0301 	orr.w	r3, r3, #1
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10b      	bne.n	800a0f2 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	617b      	str	r3, [r7, #20]
}
 800a0ec:	bf00      	nop
 800a0ee:	bf00      	nop
 800a0f0:	e7fd      	b.n	800a0ee <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f4:	699a      	ldr	r2, [r3, #24]
 800a0f6:	6a3b      	ldr	r3, [r7, #32]
 800a0f8:	18d1      	adds	r1, r2, r3
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	6a3a      	ldr	r2, [r7, #32]
 800a0fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a100:	f7ff ff20 	bl	8009f44 <prvInsertTimerInActiveList>
					break;
 800a104:	e017      	b.n	800a136 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a108:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a10c:	f003 0302 	and.w	r3, r3, #2
 800a110:	2b00      	cmp	r3, #0
 800a112:	d103      	bne.n	800a11c <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800a114:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a116:	f000 fbdf 	bl	800a8d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a11a:	e00c      	b.n	800a136 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a122:	f023 0301 	bic.w	r3, r3, #1
 800a126:	b2da      	uxtb	r2, r3
 800a128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800a12e:	e002      	b.n	800a136 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800a130:	bf00      	nop
 800a132:	e000      	b.n	800a136 <prvProcessReceivedCommands+0x16e>
					break;
 800a134:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a136:	4b08      	ldr	r3, [pc, #32]	@ (800a158 <prvProcessReceivedCommands+0x190>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f107 0108 	add.w	r1, r7, #8
 800a13e:	2200      	movs	r2, #0
 800a140:	4618      	mov	r0, r3
 800a142:	f7fe fc81 	bl	8008a48 <xQueueReceive>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f47f af41 	bne.w	8009fd0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a14e:	bf00      	nop
 800a150:	bf00      	nop
 800a152:	3728      	adds	r7, #40	@ 0x28
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	20000798 	.word	0x20000798

0800a15c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b088      	sub	sp, #32
 800a160:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a162:	e049      	b.n	800a1f8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a164:	4b2e      	ldr	r3, [pc, #184]	@ (800a220 <prvSwitchTimerLists+0xc4>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a16e:	4b2c      	ldr	r3, [pc, #176]	@ (800a220 <prvSwitchTimerLists+0xc4>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	3304      	adds	r3, #4
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fe f9d9 	bl	8008534 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a190:	f003 0304 	and.w	r3, r3, #4
 800a194:	2b00      	cmp	r3, #0
 800a196:	d02f      	beq.n	800a1f8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	4413      	add	r3, r2
 800a1a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d90e      	bls.n	800a1c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	68ba      	ldr	r2, [r7, #8]
 800a1ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1b6:	4b1a      	ldr	r3, [pc, #104]	@ (800a220 <prvSwitchTimerLists+0xc4>)
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	3304      	adds	r3, #4
 800a1be:	4619      	mov	r1, r3
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	f7fe f97e 	bl	80084c2 <vListInsert>
 800a1c6:	e017      	b.n	800a1f8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f7ff fd74 	bl	8009cc0 <xTimerGenericCommand>
 800a1d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10b      	bne.n	800a1f8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	603b      	str	r3, [r7, #0]
}
 800a1f2:	bf00      	nop
 800a1f4:	bf00      	nop
 800a1f6:	e7fd      	b.n	800a1f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1f8:	4b09      	ldr	r3, [pc, #36]	@ (800a220 <prvSwitchTimerLists+0xc4>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1b0      	bne.n	800a164 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a202:	4b07      	ldr	r3, [pc, #28]	@ (800a220 <prvSwitchTimerLists+0xc4>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a208:	4b06      	ldr	r3, [pc, #24]	@ (800a224 <prvSwitchTimerLists+0xc8>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a04      	ldr	r2, [pc, #16]	@ (800a220 <prvSwitchTimerLists+0xc4>)
 800a20e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a210:	4a04      	ldr	r2, [pc, #16]	@ (800a224 <prvSwitchTimerLists+0xc8>)
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	6013      	str	r3, [r2, #0]
}
 800a216:	bf00      	nop
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20000790 	.word	0x20000790
 800a224:	20000794 	.word	0x20000794

0800a228 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a22c:	f000 f964 	bl	800a4f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a230:	4b12      	ldr	r3, [pc, #72]	@ (800a27c <prvCheckForValidListAndQueue+0x54>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d11d      	bne.n	800a274 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800a238:	4811      	ldr	r0, [pc, #68]	@ (800a280 <prvCheckForValidListAndQueue+0x58>)
 800a23a:	f7fe f8f1 	bl	8008420 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a23e:	4811      	ldr	r0, [pc, #68]	@ (800a284 <prvCheckForValidListAndQueue+0x5c>)
 800a240:	f7fe f8ee 	bl	8008420 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a244:	4b10      	ldr	r3, [pc, #64]	@ (800a288 <prvCheckForValidListAndQueue+0x60>)
 800a246:	4a0e      	ldr	r2, [pc, #56]	@ (800a280 <prvCheckForValidListAndQueue+0x58>)
 800a248:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a24a:	4b10      	ldr	r3, [pc, #64]	@ (800a28c <prvCheckForValidListAndQueue+0x64>)
 800a24c:	4a0d      	ldr	r2, [pc, #52]	@ (800a284 <prvCheckForValidListAndQueue+0x5c>)
 800a24e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800a250:	2200      	movs	r2, #0
 800a252:	210c      	movs	r1, #12
 800a254:	200a      	movs	r0, #10
 800a256:	f7fe fa01 	bl	800865c <xQueueGenericCreate>
 800a25a:	4603      	mov	r3, r0
 800a25c:	4a07      	ldr	r2, [pc, #28]	@ (800a27c <prvCheckForValidListAndQueue+0x54>)
 800a25e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a260:	4b06      	ldr	r3, [pc, #24]	@ (800a27c <prvCheckForValidListAndQueue+0x54>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d005      	beq.n	800a274 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a268:	4b04      	ldr	r3, [pc, #16]	@ (800a27c <prvCheckForValidListAndQueue+0x54>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4908      	ldr	r1, [pc, #32]	@ (800a290 <prvCheckForValidListAndQueue+0x68>)
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fe fddc 	bl	8008e2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a274:	f000 f972 	bl	800a55c <vPortExitCritical>
}
 800a278:	bf00      	nop
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	20000798 	.word	0x20000798
 800a280:	20000768 	.word	0x20000768
 800a284:	2000077c 	.word	0x2000077c
 800a288:	20000790 	.word	0x20000790
 800a28c:	20000794 	.word	0x20000794
 800a290:	0800bd40 	.word	0x0800bd40

0800a294 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	3b04      	subs	r3, #4
 800a2a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a2ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3b04      	subs	r3, #4
 800a2b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	f023 0201 	bic.w	r2, r3, #1
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	3b04      	subs	r3, #4
 800a2c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a2c4:	4a0c      	ldr	r2, [pc, #48]	@ (800a2f8 <pxPortInitialiseStack+0x64>)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	3b14      	subs	r3, #20
 800a2ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3b04      	subs	r3, #4
 800a2da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f06f 0202 	mvn.w	r2, #2
 800a2e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	3b20      	subs	r3, #32
 800a2e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	0800a2fd 	.word	0x0800a2fd

0800a2fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a302:	2300      	movs	r3, #0
 800a304:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a306:	4b13      	ldr	r3, [pc, #76]	@ (800a354 <prvTaskExitError+0x58>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a30e:	d00b      	beq.n	800a328 <prvTaskExitError+0x2c>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	60fb      	str	r3, [r7, #12]
}
 800a322:	bf00      	nop
 800a324:	bf00      	nop
 800a326:	e7fd      	b.n	800a324 <prvTaskExitError+0x28>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	60bb      	str	r3, [r7, #8]
}
 800a33a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a33c:	bf00      	nop
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d0fc      	beq.n	800a33e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a344:	bf00      	nop
 800a346:	bf00      	nop
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	2000000c 	.word	0x2000000c
	...

0800a360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a360:	4b07      	ldr	r3, [pc, #28]	@ (800a380 <pxCurrentTCBConst2>)
 800a362:	6819      	ldr	r1, [r3, #0]
 800a364:	6808      	ldr	r0, [r1, #0]
 800a366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36a:	f380 8809 	msr	PSP, r0
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f04f 0000 	mov.w	r0, #0
 800a376:	f380 8811 	msr	BASEPRI, r0
 800a37a:	4770      	bx	lr
 800a37c:	f3af 8000 	nop.w

0800a380 <pxCurrentTCBConst2>:
 800a380:	2000063c 	.word	0x2000063c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop

0800a388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a388:	4808      	ldr	r0, [pc, #32]	@ (800a3ac <prvPortStartFirstTask+0x24>)
 800a38a:	6800      	ldr	r0, [r0, #0]
 800a38c:	6800      	ldr	r0, [r0, #0]
 800a38e:	f380 8808 	msr	MSP, r0
 800a392:	f04f 0000 	mov.w	r0, #0
 800a396:	f380 8814 	msr	CONTROL, r0
 800a39a:	b662      	cpsie	i
 800a39c:	b661      	cpsie	f
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	df00      	svc	0
 800a3a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3aa:	bf00      	nop
 800a3ac:	e000ed08 	.word	0xe000ed08

0800a3b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a3b6:	4b47      	ldr	r3, [pc, #284]	@ (800a4d4 <xPortStartScheduler+0x124>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a47      	ldr	r2, [pc, #284]	@ (800a4d8 <xPortStartScheduler+0x128>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d10b      	bne.n	800a3d8 <xPortStartScheduler+0x28>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	613b      	str	r3, [r7, #16]
}
 800a3d2:	bf00      	nop
 800a3d4:	bf00      	nop
 800a3d6:	e7fd      	b.n	800a3d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a3d8:	4b3e      	ldr	r3, [pc, #248]	@ (800a4d4 <xPortStartScheduler+0x124>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a3f      	ldr	r2, [pc, #252]	@ (800a4dc <xPortStartScheduler+0x12c>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d10b      	bne.n	800a3fa <xPortStartScheduler+0x4a>
	__asm volatile
 800a3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	60fb      	str	r3, [r7, #12]
}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop
 800a3f8:	e7fd      	b.n	800a3f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a3fa:	4b39      	ldr	r3, [pc, #228]	@ (800a4e0 <xPortStartScheduler+0x130>)
 800a3fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	b2db      	uxtb	r3, r3
 800a404:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	22ff      	movs	r2, #255	@ 0xff
 800a40a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	b2db      	uxtb	r3, r3
 800a412:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a414:	78fb      	ldrb	r3, [r7, #3]
 800a416:	b2db      	uxtb	r3, r3
 800a418:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a41c:	b2da      	uxtb	r2, r3
 800a41e:	4b31      	ldr	r3, [pc, #196]	@ (800a4e4 <xPortStartScheduler+0x134>)
 800a420:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a422:	4b31      	ldr	r3, [pc, #196]	@ (800a4e8 <xPortStartScheduler+0x138>)
 800a424:	2207      	movs	r2, #7
 800a426:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a428:	e009      	b.n	800a43e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a42a:	4b2f      	ldr	r3, [pc, #188]	@ (800a4e8 <xPortStartScheduler+0x138>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	3b01      	subs	r3, #1
 800a430:	4a2d      	ldr	r2, [pc, #180]	@ (800a4e8 <xPortStartScheduler+0x138>)
 800a432:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a434:	78fb      	ldrb	r3, [r7, #3]
 800a436:	b2db      	uxtb	r3, r3
 800a438:	005b      	lsls	r3, r3, #1
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a43e:	78fb      	ldrb	r3, [r7, #3]
 800a440:	b2db      	uxtb	r3, r3
 800a442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a446:	2b80      	cmp	r3, #128	@ 0x80
 800a448:	d0ef      	beq.n	800a42a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a44a:	4b27      	ldr	r3, [pc, #156]	@ (800a4e8 <xPortStartScheduler+0x138>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f1c3 0307 	rsb	r3, r3, #7
 800a452:	2b04      	cmp	r3, #4
 800a454:	d00b      	beq.n	800a46e <xPortStartScheduler+0xbe>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	60bb      	str	r3, [r7, #8]
}
 800a468:	bf00      	nop
 800a46a:	bf00      	nop
 800a46c:	e7fd      	b.n	800a46a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a46e:	4b1e      	ldr	r3, [pc, #120]	@ (800a4e8 <xPortStartScheduler+0x138>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	021b      	lsls	r3, r3, #8
 800a474:	4a1c      	ldr	r2, [pc, #112]	@ (800a4e8 <xPortStartScheduler+0x138>)
 800a476:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a478:	4b1b      	ldr	r3, [pc, #108]	@ (800a4e8 <xPortStartScheduler+0x138>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a480:	4a19      	ldr	r2, [pc, #100]	@ (800a4e8 <xPortStartScheduler+0x138>)
 800a482:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	b2da      	uxtb	r2, r3
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a48c:	4b17      	ldr	r3, [pc, #92]	@ (800a4ec <xPortStartScheduler+0x13c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a16      	ldr	r2, [pc, #88]	@ (800a4ec <xPortStartScheduler+0x13c>)
 800a492:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a496:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a498:	4b14      	ldr	r3, [pc, #80]	@ (800a4ec <xPortStartScheduler+0x13c>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a13      	ldr	r2, [pc, #76]	@ (800a4ec <xPortStartScheduler+0x13c>)
 800a49e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a4a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a4a4:	f000 f8da 	bl	800a65c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4a8:	4b11      	ldr	r3, [pc, #68]	@ (800a4f0 <xPortStartScheduler+0x140>)
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a4ae:	f000 f8f9 	bl	800a6a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a4b2:	4b10      	ldr	r3, [pc, #64]	@ (800a4f4 <xPortStartScheduler+0x144>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a0f      	ldr	r2, [pc, #60]	@ (800a4f4 <xPortStartScheduler+0x144>)
 800a4b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a4bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4be:	f7ff ff63 	bl	800a388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a4c2:	f7ff f861 	bl	8009588 <vTaskSwitchContext>
	prvTaskExitError();
 800a4c6:	f7ff ff19 	bl	800a2fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3718      	adds	r7, #24
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	e000ed00 	.word	0xe000ed00
 800a4d8:	410fc271 	.word	0x410fc271
 800a4dc:	410fc270 	.word	0x410fc270
 800a4e0:	e000e400 	.word	0xe000e400
 800a4e4:	200007a4 	.word	0x200007a4
 800a4e8:	200007a8 	.word	0x200007a8
 800a4ec:	e000ed20 	.word	0xe000ed20
 800a4f0:	2000000c 	.word	0x2000000c
 800a4f4:	e000ef34 	.word	0xe000ef34

0800a4f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	607b      	str	r3, [r7, #4]
}
 800a510:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a512:	4b10      	ldr	r3, [pc, #64]	@ (800a554 <vPortEnterCritical+0x5c>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	3301      	adds	r3, #1
 800a518:	4a0e      	ldr	r2, [pc, #56]	@ (800a554 <vPortEnterCritical+0x5c>)
 800a51a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a51c:	4b0d      	ldr	r3, [pc, #52]	@ (800a554 <vPortEnterCritical+0x5c>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d110      	bne.n	800a546 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a524:	4b0c      	ldr	r3, [pc, #48]	@ (800a558 <vPortEnterCritical+0x60>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00b      	beq.n	800a546 <vPortEnterCritical+0x4e>
	__asm volatile
 800a52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	603b      	str	r3, [r7, #0]
}
 800a540:	bf00      	nop
 800a542:	bf00      	nop
 800a544:	e7fd      	b.n	800a542 <vPortEnterCritical+0x4a>
	}
}
 800a546:	bf00      	nop
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	2000000c 	.word	0x2000000c
 800a558:	e000ed04 	.word	0xe000ed04

0800a55c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a562:	4b12      	ldr	r3, [pc, #72]	@ (800a5ac <vPortExitCritical+0x50>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10b      	bne.n	800a582 <vPortExitCritical+0x26>
	__asm volatile
 800a56a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	607b      	str	r3, [r7, #4]
}
 800a57c:	bf00      	nop
 800a57e:	bf00      	nop
 800a580:	e7fd      	b.n	800a57e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a582:	4b0a      	ldr	r3, [pc, #40]	@ (800a5ac <vPortExitCritical+0x50>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	3b01      	subs	r3, #1
 800a588:	4a08      	ldr	r2, [pc, #32]	@ (800a5ac <vPortExitCritical+0x50>)
 800a58a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a58c:	4b07      	ldr	r3, [pc, #28]	@ (800a5ac <vPortExitCritical+0x50>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d105      	bne.n	800a5a0 <vPortExitCritical+0x44>
 800a594:	2300      	movs	r3, #0
 800a596:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	f383 8811 	msr	BASEPRI, r3
}
 800a59e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a5a0:	bf00      	nop
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr
 800a5ac:	2000000c 	.word	0x2000000c

0800a5b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a5b0:	f3ef 8009 	mrs	r0, PSP
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	4b15      	ldr	r3, [pc, #84]	@ (800a610 <pxCurrentTCBConst>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	f01e 0f10 	tst.w	lr, #16
 800a5c0:	bf08      	it	eq
 800a5c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a5c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ca:	6010      	str	r0, [r2, #0]
 800a5cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a5d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a5d4:	f380 8811 	msr	BASEPRI, r0
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	f7fe ffd2 	bl	8009588 <vTaskSwitchContext>
 800a5e4:	f04f 0000 	mov.w	r0, #0
 800a5e8:	f380 8811 	msr	BASEPRI, r0
 800a5ec:	bc09      	pop	{r0, r3}
 800a5ee:	6819      	ldr	r1, [r3, #0]
 800a5f0:	6808      	ldr	r0, [r1, #0]
 800a5f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f6:	f01e 0f10 	tst.w	lr, #16
 800a5fa:	bf08      	it	eq
 800a5fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a600:	f380 8809 	msr	PSP, r0
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	f3af 8000 	nop.w

0800a610 <pxCurrentTCBConst>:
 800a610:	2000063c 	.word	0x2000063c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a614:	bf00      	nop
 800a616:	bf00      	nop

0800a618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	607b      	str	r3, [r7, #4]
}
 800a630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a632:	f7fe feef 	bl	8009414 <xTaskIncrementTick>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d003      	beq.n	800a644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a63c:	4b06      	ldr	r3, [pc, #24]	@ (800a658 <xPortSysTickHandler+0x40>)
 800a63e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a642:	601a      	str	r2, [r3, #0]
 800a644:	2300      	movs	r3, #0
 800a646:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	f383 8811 	msr	BASEPRI, r3
}
 800a64e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	e000ed04 	.word	0xe000ed04

0800a65c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a65c:	b480      	push	{r7}
 800a65e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a660:	4b0b      	ldr	r3, [pc, #44]	@ (800a690 <vPortSetupTimerInterrupt+0x34>)
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a666:	4b0b      	ldr	r3, [pc, #44]	@ (800a694 <vPortSetupTimerInterrupt+0x38>)
 800a668:	2200      	movs	r2, #0
 800a66a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a66c:	4b0a      	ldr	r3, [pc, #40]	@ (800a698 <vPortSetupTimerInterrupt+0x3c>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a0a      	ldr	r2, [pc, #40]	@ (800a69c <vPortSetupTimerInterrupt+0x40>)
 800a672:	fba2 2303 	umull	r2, r3, r2, r3
 800a676:	099b      	lsrs	r3, r3, #6
 800a678:	4a09      	ldr	r2, [pc, #36]	@ (800a6a0 <vPortSetupTimerInterrupt+0x44>)
 800a67a:	3b01      	subs	r3, #1
 800a67c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a67e:	4b04      	ldr	r3, [pc, #16]	@ (800a690 <vPortSetupTimerInterrupt+0x34>)
 800a680:	2207      	movs	r2, #7
 800a682:	601a      	str	r2, [r3, #0]
}
 800a684:	bf00      	nop
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	e000e010 	.word	0xe000e010
 800a694:	e000e018 	.word	0xe000e018
 800a698:	20000000 	.word	0x20000000
 800a69c:	10624dd3 	.word	0x10624dd3
 800a6a0:	e000e014 	.word	0xe000e014

0800a6a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a6a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a6b4 <vPortEnableVFP+0x10>
 800a6a8:	6801      	ldr	r1, [r0, #0]
 800a6aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a6ae:	6001      	str	r1, [r0, #0]
 800a6b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a6b2:	bf00      	nop
 800a6b4:	e000ed88 	.word	0xe000ed88

0800a6b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a6be:	f3ef 8305 	mrs	r3, IPSR
 800a6c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2b0f      	cmp	r3, #15
 800a6c8:	d915      	bls.n	800a6f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a6ca:	4a18      	ldr	r2, [pc, #96]	@ (800a72c <vPortValidateInterruptPriority+0x74>)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a6d4:	4b16      	ldr	r3, [pc, #88]	@ (800a730 <vPortValidateInterruptPriority+0x78>)
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	7afa      	ldrb	r2, [r7, #11]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d20b      	bcs.n	800a6f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	607b      	str	r3, [r7, #4]
}
 800a6f0:	bf00      	nop
 800a6f2:	bf00      	nop
 800a6f4:	e7fd      	b.n	800a6f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a6f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a734 <vPortValidateInterruptPriority+0x7c>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a6fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a738 <vPortValidateInterruptPriority+0x80>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	429a      	cmp	r2, r3
 800a704:	d90b      	bls.n	800a71e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	603b      	str	r3, [r7, #0]
}
 800a718:	bf00      	nop
 800a71a:	bf00      	nop
 800a71c:	e7fd      	b.n	800a71a <vPortValidateInterruptPriority+0x62>
	}
 800a71e:	bf00      	nop
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	e000e3f0 	.word	0xe000e3f0
 800a730:	200007a4 	.word	0x200007a4
 800a734:	e000ed0c 	.word	0xe000ed0c
 800a738:	200007a8 	.word	0x200007a8

0800a73c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b08a      	sub	sp, #40	@ 0x28
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a744:	2300      	movs	r3, #0
 800a746:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a748:	f7fe fda8 	bl	800929c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a74c:	4b5c      	ldr	r3, [pc, #368]	@ (800a8c0 <pvPortMalloc+0x184>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d101      	bne.n	800a758 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a754:	f000 f924 	bl	800a9a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a758:	4b5a      	ldr	r3, [pc, #360]	@ (800a8c4 <pvPortMalloc+0x188>)
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4013      	ands	r3, r2
 800a760:	2b00      	cmp	r3, #0
 800a762:	f040 8095 	bne.w	800a890 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d01e      	beq.n	800a7aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a76c:	2208      	movs	r2, #8
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4413      	add	r3, r2
 800a772:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f003 0307 	and.w	r3, r3, #7
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d015      	beq.n	800a7aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f023 0307 	bic.w	r3, r3, #7
 800a784:	3308      	adds	r3, #8
 800a786:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f003 0307 	and.w	r3, r3, #7
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00b      	beq.n	800a7aa <pvPortMalloc+0x6e>
	__asm volatile
 800a792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	617b      	str	r3, [r7, #20]
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop
 800a7a8:	e7fd      	b.n	800a7a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d06f      	beq.n	800a890 <pvPortMalloc+0x154>
 800a7b0:	4b45      	ldr	r3, [pc, #276]	@ (800a8c8 <pvPortMalloc+0x18c>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d86a      	bhi.n	800a890 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a7ba:	4b44      	ldr	r3, [pc, #272]	@ (800a8cc <pvPortMalloc+0x190>)
 800a7bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a7be:	4b43      	ldr	r3, [pc, #268]	@ (800a8cc <pvPortMalloc+0x190>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7c4:	e004      	b.n	800a7d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d903      	bls.n	800a7e2 <pvPortMalloc+0xa6>
 800a7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1f1      	bne.n	800a7c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a7e2:	4b37      	ldr	r3, [pc, #220]	@ (800a8c0 <pvPortMalloc+0x184>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d051      	beq.n	800a890 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a7ec:	6a3b      	ldr	r3, [r7, #32]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2208      	movs	r2, #8
 800a7f2:	4413      	add	r3, r2
 800a7f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	6a3b      	ldr	r3, [r7, #32]
 800a7fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a800:	685a      	ldr	r2, [r3, #4]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	1ad2      	subs	r2, r2, r3
 800a806:	2308      	movs	r3, #8
 800a808:	005b      	lsls	r3, r3, #1
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d920      	bls.n	800a850 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a80e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4413      	add	r3, r2
 800a814:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	f003 0307 	and.w	r3, r3, #7
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00b      	beq.n	800a838 <pvPortMalloc+0xfc>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	613b      	str	r3, [r7, #16]
}
 800a832:	bf00      	nop
 800a834:	bf00      	nop
 800a836:	e7fd      	b.n	800a834 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83a:	685a      	ldr	r2, [r3, #4]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	1ad2      	subs	r2, r2, r3
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a84a:	69b8      	ldr	r0, [r7, #24]
 800a84c:	f000 f90a 	bl	800aa64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a850:	4b1d      	ldr	r3, [pc, #116]	@ (800a8c8 <pvPortMalloc+0x18c>)
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	1ad3      	subs	r3, r2, r3
 800a85a:	4a1b      	ldr	r2, [pc, #108]	@ (800a8c8 <pvPortMalloc+0x18c>)
 800a85c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a85e:	4b1a      	ldr	r3, [pc, #104]	@ (800a8c8 <pvPortMalloc+0x18c>)
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	4b1b      	ldr	r3, [pc, #108]	@ (800a8d0 <pvPortMalloc+0x194>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	429a      	cmp	r2, r3
 800a868:	d203      	bcs.n	800a872 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a86a:	4b17      	ldr	r3, [pc, #92]	@ (800a8c8 <pvPortMalloc+0x18c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a18      	ldr	r2, [pc, #96]	@ (800a8d0 <pvPortMalloc+0x194>)
 800a870:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a874:	685a      	ldr	r2, [r3, #4]
 800a876:	4b13      	ldr	r3, [pc, #76]	@ (800a8c4 <pvPortMalloc+0x188>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	431a      	orrs	r2, r3
 800a87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a882:	2200      	movs	r2, #0
 800a884:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a886:	4b13      	ldr	r3, [pc, #76]	@ (800a8d4 <pvPortMalloc+0x198>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3301      	adds	r3, #1
 800a88c:	4a11      	ldr	r2, [pc, #68]	@ (800a8d4 <pvPortMalloc+0x198>)
 800a88e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a890:	f7fe fd12 	bl	80092b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	f003 0307 	and.w	r3, r3, #7
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00b      	beq.n	800a8b6 <pvPortMalloc+0x17a>
	__asm volatile
 800a89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a2:	f383 8811 	msr	BASEPRI, r3
 800a8a6:	f3bf 8f6f 	isb	sy
 800a8aa:	f3bf 8f4f 	dsb	sy
 800a8ae:	60fb      	str	r3, [r7, #12]
}
 800a8b0:	bf00      	nop
 800a8b2:	bf00      	nop
 800a8b4:	e7fd      	b.n	800a8b2 <pvPortMalloc+0x176>
	return pvReturn;
 800a8b6:	69fb      	ldr	r3, [r7, #28]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3728      	adds	r7, #40	@ 0x28
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	200013b4 	.word	0x200013b4
 800a8c4:	200013c8 	.word	0x200013c8
 800a8c8:	200013b8 	.word	0x200013b8
 800a8cc:	200013ac 	.word	0x200013ac
 800a8d0:	200013bc 	.word	0x200013bc
 800a8d4:	200013c0 	.word	0x200013c0

0800a8d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b086      	sub	sp, #24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d04f      	beq.n	800a98a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a8ea:	2308      	movs	r3, #8
 800a8ec:	425b      	negs	r3, r3
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	4b25      	ldr	r3, [pc, #148]	@ (800a994 <vPortFree+0xbc>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4013      	ands	r3, r2
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10b      	bne.n	800a91e <vPortFree+0x46>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	60fb      	str	r3, [r7, #12]
}
 800a918:	bf00      	nop
 800a91a:	bf00      	nop
 800a91c:	e7fd      	b.n	800a91a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00b      	beq.n	800a93e <vPortFree+0x66>
	__asm volatile
 800a926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	60bb      	str	r3, [r7, #8]
}
 800a938:	bf00      	nop
 800a93a:	bf00      	nop
 800a93c:	e7fd      	b.n	800a93a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	685a      	ldr	r2, [r3, #4]
 800a942:	4b14      	ldr	r3, [pc, #80]	@ (800a994 <vPortFree+0xbc>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4013      	ands	r3, r2
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d01e      	beq.n	800a98a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d11a      	bne.n	800a98a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	685a      	ldr	r2, [r3, #4]
 800a958:	4b0e      	ldr	r3, [pc, #56]	@ (800a994 <vPortFree+0xbc>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	43db      	mvns	r3, r3
 800a95e:	401a      	ands	r2, r3
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a964:	f7fe fc9a 	bl	800929c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	4b0a      	ldr	r3, [pc, #40]	@ (800a998 <vPortFree+0xc0>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4413      	add	r3, r2
 800a972:	4a09      	ldr	r2, [pc, #36]	@ (800a998 <vPortFree+0xc0>)
 800a974:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a976:	6938      	ldr	r0, [r7, #16]
 800a978:	f000 f874 	bl	800aa64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a97c:	4b07      	ldr	r3, [pc, #28]	@ (800a99c <vPortFree+0xc4>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	3301      	adds	r3, #1
 800a982:	4a06      	ldr	r2, [pc, #24]	@ (800a99c <vPortFree+0xc4>)
 800a984:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a986:	f7fe fc97 	bl	80092b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a98a:	bf00      	nop
 800a98c:	3718      	adds	r7, #24
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	200013c8 	.word	0x200013c8
 800a998:	200013b8 	.word	0x200013b8
 800a99c:	200013c4 	.word	0x200013c4

0800a9a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a9a6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a9aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a9ac:	4b27      	ldr	r3, [pc, #156]	@ (800aa4c <prvHeapInit+0xac>)
 800a9ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f003 0307 	and.w	r3, r3, #7
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00c      	beq.n	800a9d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	3307      	adds	r3, #7
 800a9be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f023 0307 	bic.w	r3, r3, #7
 800a9c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	4a1f      	ldr	r2, [pc, #124]	@ (800aa4c <prvHeapInit+0xac>)
 800a9d0:	4413      	add	r3, r2
 800a9d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a9d8:	4a1d      	ldr	r2, [pc, #116]	@ (800aa50 <prvHeapInit+0xb0>)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a9de:	4b1c      	ldr	r3, [pc, #112]	@ (800aa50 <prvHeapInit+0xb0>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68ba      	ldr	r2, [r7, #8]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a9ec:	2208      	movs	r2, #8
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	1a9b      	subs	r3, r3, r2
 800a9f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f023 0307 	bic.w	r3, r3, #7
 800a9fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4a15      	ldr	r2, [pc, #84]	@ (800aa54 <prvHeapInit+0xb4>)
 800aa00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa02:	4b14      	ldr	r3, [pc, #80]	@ (800aa54 <prvHeapInit+0xb4>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2200      	movs	r2, #0
 800aa08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa0a:	4b12      	ldr	r3, [pc, #72]	@ (800aa54 <prvHeapInit+0xb4>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	1ad2      	subs	r2, r2, r3
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa20:	4b0c      	ldr	r3, [pc, #48]	@ (800aa54 <prvHeapInit+0xb4>)
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	4a0a      	ldr	r2, [pc, #40]	@ (800aa58 <prvHeapInit+0xb8>)
 800aa2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	4a09      	ldr	r2, [pc, #36]	@ (800aa5c <prvHeapInit+0xbc>)
 800aa36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa38:	4b09      	ldr	r3, [pc, #36]	@ (800aa60 <prvHeapInit+0xc0>)
 800aa3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aa3e:	601a      	str	r2, [r3, #0]
}
 800aa40:	bf00      	nop
 800aa42:	3714      	adds	r7, #20
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr
 800aa4c:	200007ac 	.word	0x200007ac
 800aa50:	200013ac 	.word	0x200013ac
 800aa54:	200013b4 	.word	0x200013b4
 800aa58:	200013bc 	.word	0x200013bc
 800aa5c:	200013b8 	.word	0x200013b8
 800aa60:	200013c8 	.word	0x200013c8

0800aa64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa6c:	4b28      	ldr	r3, [pc, #160]	@ (800ab10 <prvInsertBlockIntoFreeList+0xac>)
 800aa6e:	60fb      	str	r3, [r7, #12]
 800aa70:	e002      	b.n	800aa78 <prvInsertBlockIntoFreeList+0x14>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d8f7      	bhi.n	800aa72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d108      	bne.n	800aaa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	685a      	ldr	r2, [r3, #4]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	441a      	add	r2, r3
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	441a      	add	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d118      	bne.n	800aaec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	4b15      	ldr	r3, [pc, #84]	@ (800ab14 <prvInsertBlockIntoFreeList+0xb0>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d00d      	beq.n	800aae2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	685a      	ldr	r2, [r3, #4]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	441a      	add	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	601a      	str	r2, [r3, #0]
 800aae0:	e008      	b.n	800aaf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aae2:	4b0c      	ldr	r3, [pc, #48]	@ (800ab14 <prvInsertBlockIntoFreeList+0xb0>)
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	e003      	b.n	800aaf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d002      	beq.n	800ab02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab02:	bf00      	nop
 800ab04:	3714      	adds	r7, #20
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	200013ac 	.word	0x200013ac
 800ab14:	200013b4 	.word	0x200013b4

0800ab18 <sbrk_aligned>:
 800ab18:	b570      	push	{r4, r5, r6, lr}
 800ab1a:	4e0f      	ldr	r6, [pc, #60]	@ (800ab58 <sbrk_aligned+0x40>)
 800ab1c:	460c      	mov	r4, r1
 800ab1e:	6831      	ldr	r1, [r6, #0]
 800ab20:	4605      	mov	r5, r0
 800ab22:	b911      	cbnz	r1, 800ab2a <sbrk_aligned+0x12>
 800ab24:	f000 fa36 	bl	800af94 <_sbrk_r>
 800ab28:	6030      	str	r0, [r6, #0]
 800ab2a:	4621      	mov	r1, r4
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	f000 fa31 	bl	800af94 <_sbrk_r>
 800ab32:	1c43      	adds	r3, r0, #1
 800ab34:	d103      	bne.n	800ab3e <sbrk_aligned+0x26>
 800ab36:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	bd70      	pop	{r4, r5, r6, pc}
 800ab3e:	1cc4      	adds	r4, r0, #3
 800ab40:	f024 0403 	bic.w	r4, r4, #3
 800ab44:	42a0      	cmp	r0, r4
 800ab46:	d0f8      	beq.n	800ab3a <sbrk_aligned+0x22>
 800ab48:	1a21      	subs	r1, r4, r0
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	f000 fa22 	bl	800af94 <_sbrk_r>
 800ab50:	3001      	adds	r0, #1
 800ab52:	d1f2      	bne.n	800ab3a <sbrk_aligned+0x22>
 800ab54:	e7ef      	b.n	800ab36 <sbrk_aligned+0x1e>
 800ab56:	bf00      	nop
 800ab58:	200013cc 	.word	0x200013cc

0800ab5c <_malloc_r>:
 800ab5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab60:	1ccd      	adds	r5, r1, #3
 800ab62:	f025 0503 	bic.w	r5, r5, #3
 800ab66:	3508      	adds	r5, #8
 800ab68:	2d0c      	cmp	r5, #12
 800ab6a:	bf38      	it	cc
 800ab6c:	250c      	movcc	r5, #12
 800ab6e:	2d00      	cmp	r5, #0
 800ab70:	4606      	mov	r6, r0
 800ab72:	db01      	blt.n	800ab78 <_malloc_r+0x1c>
 800ab74:	42a9      	cmp	r1, r5
 800ab76:	d904      	bls.n	800ab82 <_malloc_r+0x26>
 800ab78:	230c      	movs	r3, #12
 800ab7a:	6033      	str	r3, [r6, #0]
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac58 <_malloc_r+0xfc>
 800ab86:	f000 f869 	bl	800ac5c <__malloc_lock>
 800ab8a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab8e:	461c      	mov	r4, r3
 800ab90:	bb44      	cbnz	r4, 800abe4 <_malloc_r+0x88>
 800ab92:	4629      	mov	r1, r5
 800ab94:	4630      	mov	r0, r6
 800ab96:	f7ff ffbf 	bl	800ab18 <sbrk_aligned>
 800ab9a:	1c43      	adds	r3, r0, #1
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	d158      	bne.n	800ac52 <_malloc_r+0xf6>
 800aba0:	f8d8 4000 	ldr.w	r4, [r8]
 800aba4:	4627      	mov	r7, r4
 800aba6:	2f00      	cmp	r7, #0
 800aba8:	d143      	bne.n	800ac32 <_malloc_r+0xd6>
 800abaa:	2c00      	cmp	r4, #0
 800abac:	d04b      	beq.n	800ac46 <_malloc_r+0xea>
 800abae:	6823      	ldr	r3, [r4, #0]
 800abb0:	4639      	mov	r1, r7
 800abb2:	4630      	mov	r0, r6
 800abb4:	eb04 0903 	add.w	r9, r4, r3
 800abb8:	f000 f9ec 	bl	800af94 <_sbrk_r>
 800abbc:	4581      	cmp	r9, r0
 800abbe:	d142      	bne.n	800ac46 <_malloc_r+0xea>
 800abc0:	6821      	ldr	r1, [r4, #0]
 800abc2:	1a6d      	subs	r5, r5, r1
 800abc4:	4629      	mov	r1, r5
 800abc6:	4630      	mov	r0, r6
 800abc8:	f7ff ffa6 	bl	800ab18 <sbrk_aligned>
 800abcc:	3001      	adds	r0, #1
 800abce:	d03a      	beq.n	800ac46 <_malloc_r+0xea>
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	442b      	add	r3, r5
 800abd4:	6023      	str	r3, [r4, #0]
 800abd6:	f8d8 3000 	ldr.w	r3, [r8]
 800abda:	685a      	ldr	r2, [r3, #4]
 800abdc:	bb62      	cbnz	r2, 800ac38 <_malloc_r+0xdc>
 800abde:	f8c8 7000 	str.w	r7, [r8]
 800abe2:	e00f      	b.n	800ac04 <_malloc_r+0xa8>
 800abe4:	6822      	ldr	r2, [r4, #0]
 800abe6:	1b52      	subs	r2, r2, r5
 800abe8:	d420      	bmi.n	800ac2c <_malloc_r+0xd0>
 800abea:	2a0b      	cmp	r2, #11
 800abec:	d917      	bls.n	800ac1e <_malloc_r+0xc2>
 800abee:	1961      	adds	r1, r4, r5
 800abf0:	42a3      	cmp	r3, r4
 800abf2:	6025      	str	r5, [r4, #0]
 800abf4:	bf18      	it	ne
 800abf6:	6059      	strne	r1, [r3, #4]
 800abf8:	6863      	ldr	r3, [r4, #4]
 800abfa:	bf08      	it	eq
 800abfc:	f8c8 1000 	streq.w	r1, [r8]
 800ac00:	5162      	str	r2, [r4, r5]
 800ac02:	604b      	str	r3, [r1, #4]
 800ac04:	4630      	mov	r0, r6
 800ac06:	f000 f82f 	bl	800ac68 <__malloc_unlock>
 800ac0a:	f104 000b 	add.w	r0, r4, #11
 800ac0e:	1d23      	adds	r3, r4, #4
 800ac10:	f020 0007 	bic.w	r0, r0, #7
 800ac14:	1ac2      	subs	r2, r0, r3
 800ac16:	bf1c      	itt	ne
 800ac18:	1a1b      	subne	r3, r3, r0
 800ac1a:	50a3      	strne	r3, [r4, r2]
 800ac1c:	e7af      	b.n	800ab7e <_malloc_r+0x22>
 800ac1e:	6862      	ldr	r2, [r4, #4]
 800ac20:	42a3      	cmp	r3, r4
 800ac22:	bf0c      	ite	eq
 800ac24:	f8c8 2000 	streq.w	r2, [r8]
 800ac28:	605a      	strne	r2, [r3, #4]
 800ac2a:	e7eb      	b.n	800ac04 <_malloc_r+0xa8>
 800ac2c:	4623      	mov	r3, r4
 800ac2e:	6864      	ldr	r4, [r4, #4]
 800ac30:	e7ae      	b.n	800ab90 <_malloc_r+0x34>
 800ac32:	463c      	mov	r4, r7
 800ac34:	687f      	ldr	r7, [r7, #4]
 800ac36:	e7b6      	b.n	800aba6 <_malloc_r+0x4a>
 800ac38:	461a      	mov	r2, r3
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	42a3      	cmp	r3, r4
 800ac3e:	d1fb      	bne.n	800ac38 <_malloc_r+0xdc>
 800ac40:	2300      	movs	r3, #0
 800ac42:	6053      	str	r3, [r2, #4]
 800ac44:	e7de      	b.n	800ac04 <_malloc_r+0xa8>
 800ac46:	230c      	movs	r3, #12
 800ac48:	6033      	str	r3, [r6, #0]
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f000 f80c 	bl	800ac68 <__malloc_unlock>
 800ac50:	e794      	b.n	800ab7c <_malloc_r+0x20>
 800ac52:	6005      	str	r5, [r0, #0]
 800ac54:	e7d6      	b.n	800ac04 <_malloc_r+0xa8>
 800ac56:	bf00      	nop
 800ac58:	200013d0 	.word	0x200013d0

0800ac5c <__malloc_lock>:
 800ac5c:	4801      	ldr	r0, [pc, #4]	@ (800ac64 <__malloc_lock+0x8>)
 800ac5e:	f000 b9d4 	b.w	800b00a <__retarget_lock_acquire_recursive>
 800ac62:	bf00      	nop
 800ac64:	20001514 	.word	0x20001514

0800ac68 <__malloc_unlock>:
 800ac68:	4801      	ldr	r0, [pc, #4]	@ (800ac70 <__malloc_unlock+0x8>)
 800ac6a:	f000 b9cf 	b.w	800b00c <__retarget_lock_release_recursive>
 800ac6e:	bf00      	nop
 800ac70:	20001514 	.word	0x20001514

0800ac74 <std>:
 800ac74:	2300      	movs	r3, #0
 800ac76:	b510      	push	{r4, lr}
 800ac78:	4604      	mov	r4, r0
 800ac7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac82:	6083      	str	r3, [r0, #8]
 800ac84:	8181      	strh	r1, [r0, #12]
 800ac86:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac88:	81c2      	strh	r2, [r0, #14]
 800ac8a:	6183      	str	r3, [r0, #24]
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	2208      	movs	r2, #8
 800ac90:	305c      	adds	r0, #92	@ 0x5c
 800ac92:	f000 f921 	bl	800aed8 <memset>
 800ac96:	4b0d      	ldr	r3, [pc, #52]	@ (800accc <std+0x58>)
 800ac98:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac9a:	4b0d      	ldr	r3, [pc, #52]	@ (800acd0 <std+0x5c>)
 800ac9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac9e:	4b0d      	ldr	r3, [pc, #52]	@ (800acd4 <std+0x60>)
 800aca0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aca2:	4b0d      	ldr	r3, [pc, #52]	@ (800acd8 <std+0x64>)
 800aca4:	6323      	str	r3, [r4, #48]	@ 0x30
 800aca6:	4b0d      	ldr	r3, [pc, #52]	@ (800acdc <std+0x68>)
 800aca8:	6224      	str	r4, [r4, #32]
 800acaa:	429c      	cmp	r4, r3
 800acac:	d006      	beq.n	800acbc <std+0x48>
 800acae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800acb2:	4294      	cmp	r4, r2
 800acb4:	d002      	beq.n	800acbc <std+0x48>
 800acb6:	33d0      	adds	r3, #208	@ 0xd0
 800acb8:	429c      	cmp	r4, r3
 800acba:	d105      	bne.n	800acc8 <std+0x54>
 800acbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800acc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acc4:	f000 b9a0 	b.w	800b008 <__retarget_lock_init_recursive>
 800acc8:	bd10      	pop	{r4, pc}
 800acca:	bf00      	nop
 800accc:	0800b7b9 	.word	0x0800b7b9
 800acd0:	0800b7db 	.word	0x0800b7db
 800acd4:	0800b813 	.word	0x0800b813
 800acd8:	0800b837 	.word	0x0800b837
 800acdc:	200013d4 	.word	0x200013d4

0800ace0 <stdio_exit_handler>:
 800ace0:	4a02      	ldr	r2, [pc, #8]	@ (800acec <stdio_exit_handler+0xc>)
 800ace2:	4903      	ldr	r1, [pc, #12]	@ (800acf0 <stdio_exit_handler+0x10>)
 800ace4:	4803      	ldr	r0, [pc, #12]	@ (800acf4 <stdio_exit_handler+0x14>)
 800ace6:	f000 b869 	b.w	800adbc <_fwalk_sglue>
 800acea:	bf00      	nop
 800acec:	20000010 	.word	0x20000010
 800acf0:	0800b769 	.word	0x0800b769
 800acf4:	20000020 	.word	0x20000020

0800acf8 <cleanup_stdio>:
 800acf8:	6841      	ldr	r1, [r0, #4]
 800acfa:	4b0c      	ldr	r3, [pc, #48]	@ (800ad2c <cleanup_stdio+0x34>)
 800acfc:	4299      	cmp	r1, r3
 800acfe:	b510      	push	{r4, lr}
 800ad00:	4604      	mov	r4, r0
 800ad02:	d001      	beq.n	800ad08 <cleanup_stdio+0x10>
 800ad04:	f000 fd30 	bl	800b768 <_fflush_r>
 800ad08:	68a1      	ldr	r1, [r4, #8]
 800ad0a:	4b09      	ldr	r3, [pc, #36]	@ (800ad30 <cleanup_stdio+0x38>)
 800ad0c:	4299      	cmp	r1, r3
 800ad0e:	d002      	beq.n	800ad16 <cleanup_stdio+0x1e>
 800ad10:	4620      	mov	r0, r4
 800ad12:	f000 fd29 	bl	800b768 <_fflush_r>
 800ad16:	68e1      	ldr	r1, [r4, #12]
 800ad18:	4b06      	ldr	r3, [pc, #24]	@ (800ad34 <cleanup_stdio+0x3c>)
 800ad1a:	4299      	cmp	r1, r3
 800ad1c:	d004      	beq.n	800ad28 <cleanup_stdio+0x30>
 800ad1e:	4620      	mov	r0, r4
 800ad20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad24:	f000 bd20 	b.w	800b768 <_fflush_r>
 800ad28:	bd10      	pop	{r4, pc}
 800ad2a:	bf00      	nop
 800ad2c:	200013d4 	.word	0x200013d4
 800ad30:	2000143c 	.word	0x2000143c
 800ad34:	200014a4 	.word	0x200014a4

0800ad38 <global_stdio_init.part.0>:
 800ad38:	b510      	push	{r4, lr}
 800ad3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ad68 <global_stdio_init.part.0+0x30>)
 800ad3c:	4c0b      	ldr	r4, [pc, #44]	@ (800ad6c <global_stdio_init.part.0+0x34>)
 800ad3e:	4a0c      	ldr	r2, [pc, #48]	@ (800ad70 <global_stdio_init.part.0+0x38>)
 800ad40:	601a      	str	r2, [r3, #0]
 800ad42:	4620      	mov	r0, r4
 800ad44:	2200      	movs	r2, #0
 800ad46:	2104      	movs	r1, #4
 800ad48:	f7ff ff94 	bl	800ac74 <std>
 800ad4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad50:	2201      	movs	r2, #1
 800ad52:	2109      	movs	r1, #9
 800ad54:	f7ff ff8e 	bl	800ac74 <std>
 800ad58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad5c:	2202      	movs	r2, #2
 800ad5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad62:	2112      	movs	r1, #18
 800ad64:	f7ff bf86 	b.w	800ac74 <std>
 800ad68:	2000150c 	.word	0x2000150c
 800ad6c:	200013d4 	.word	0x200013d4
 800ad70:	0800ace1 	.word	0x0800ace1

0800ad74 <__sfp_lock_acquire>:
 800ad74:	4801      	ldr	r0, [pc, #4]	@ (800ad7c <__sfp_lock_acquire+0x8>)
 800ad76:	f000 b948 	b.w	800b00a <__retarget_lock_acquire_recursive>
 800ad7a:	bf00      	nop
 800ad7c:	20001515 	.word	0x20001515

0800ad80 <__sfp_lock_release>:
 800ad80:	4801      	ldr	r0, [pc, #4]	@ (800ad88 <__sfp_lock_release+0x8>)
 800ad82:	f000 b943 	b.w	800b00c <__retarget_lock_release_recursive>
 800ad86:	bf00      	nop
 800ad88:	20001515 	.word	0x20001515

0800ad8c <__sinit>:
 800ad8c:	b510      	push	{r4, lr}
 800ad8e:	4604      	mov	r4, r0
 800ad90:	f7ff fff0 	bl	800ad74 <__sfp_lock_acquire>
 800ad94:	6a23      	ldr	r3, [r4, #32]
 800ad96:	b11b      	cbz	r3, 800ada0 <__sinit+0x14>
 800ad98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad9c:	f7ff bff0 	b.w	800ad80 <__sfp_lock_release>
 800ada0:	4b04      	ldr	r3, [pc, #16]	@ (800adb4 <__sinit+0x28>)
 800ada2:	6223      	str	r3, [r4, #32]
 800ada4:	4b04      	ldr	r3, [pc, #16]	@ (800adb8 <__sinit+0x2c>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1f5      	bne.n	800ad98 <__sinit+0xc>
 800adac:	f7ff ffc4 	bl	800ad38 <global_stdio_init.part.0>
 800adb0:	e7f2      	b.n	800ad98 <__sinit+0xc>
 800adb2:	bf00      	nop
 800adb4:	0800acf9 	.word	0x0800acf9
 800adb8:	2000150c 	.word	0x2000150c

0800adbc <_fwalk_sglue>:
 800adbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc0:	4607      	mov	r7, r0
 800adc2:	4688      	mov	r8, r1
 800adc4:	4614      	mov	r4, r2
 800adc6:	2600      	movs	r6, #0
 800adc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adcc:	f1b9 0901 	subs.w	r9, r9, #1
 800add0:	d505      	bpl.n	800adde <_fwalk_sglue+0x22>
 800add2:	6824      	ldr	r4, [r4, #0]
 800add4:	2c00      	cmp	r4, #0
 800add6:	d1f7      	bne.n	800adc8 <_fwalk_sglue+0xc>
 800add8:	4630      	mov	r0, r6
 800adda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adde:	89ab      	ldrh	r3, [r5, #12]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d907      	bls.n	800adf4 <_fwalk_sglue+0x38>
 800ade4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ade8:	3301      	adds	r3, #1
 800adea:	d003      	beq.n	800adf4 <_fwalk_sglue+0x38>
 800adec:	4629      	mov	r1, r5
 800adee:	4638      	mov	r0, r7
 800adf0:	47c0      	blx	r8
 800adf2:	4306      	orrs	r6, r0
 800adf4:	3568      	adds	r5, #104	@ 0x68
 800adf6:	e7e9      	b.n	800adcc <_fwalk_sglue+0x10>

0800adf8 <iprintf>:
 800adf8:	b40f      	push	{r0, r1, r2, r3}
 800adfa:	b507      	push	{r0, r1, r2, lr}
 800adfc:	4906      	ldr	r1, [pc, #24]	@ (800ae18 <iprintf+0x20>)
 800adfe:	ab04      	add	r3, sp, #16
 800ae00:	6808      	ldr	r0, [r1, #0]
 800ae02:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae06:	6881      	ldr	r1, [r0, #8]
 800ae08:	9301      	str	r3, [sp, #4]
 800ae0a:	f000 f983 	bl	800b114 <_vfiprintf_r>
 800ae0e:	b003      	add	sp, #12
 800ae10:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae14:	b004      	add	sp, #16
 800ae16:	4770      	bx	lr
 800ae18:	2000001c 	.word	0x2000001c

0800ae1c <_puts_r>:
 800ae1c:	6a03      	ldr	r3, [r0, #32]
 800ae1e:	b570      	push	{r4, r5, r6, lr}
 800ae20:	6884      	ldr	r4, [r0, #8]
 800ae22:	4605      	mov	r5, r0
 800ae24:	460e      	mov	r6, r1
 800ae26:	b90b      	cbnz	r3, 800ae2c <_puts_r+0x10>
 800ae28:	f7ff ffb0 	bl	800ad8c <__sinit>
 800ae2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae2e:	07db      	lsls	r3, r3, #31
 800ae30:	d405      	bmi.n	800ae3e <_puts_r+0x22>
 800ae32:	89a3      	ldrh	r3, [r4, #12]
 800ae34:	0598      	lsls	r0, r3, #22
 800ae36:	d402      	bmi.n	800ae3e <_puts_r+0x22>
 800ae38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae3a:	f000 f8e6 	bl	800b00a <__retarget_lock_acquire_recursive>
 800ae3e:	89a3      	ldrh	r3, [r4, #12]
 800ae40:	0719      	lsls	r1, r3, #28
 800ae42:	d502      	bpl.n	800ae4a <_puts_r+0x2e>
 800ae44:	6923      	ldr	r3, [r4, #16]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d135      	bne.n	800aeb6 <_puts_r+0x9a>
 800ae4a:	4621      	mov	r1, r4
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	f000 fd35 	bl	800b8bc <__swsetup_r>
 800ae52:	b380      	cbz	r0, 800aeb6 <_puts_r+0x9a>
 800ae54:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800ae58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae5a:	07da      	lsls	r2, r3, #31
 800ae5c:	d405      	bmi.n	800ae6a <_puts_r+0x4e>
 800ae5e:	89a3      	ldrh	r3, [r4, #12]
 800ae60:	059b      	lsls	r3, r3, #22
 800ae62:	d402      	bmi.n	800ae6a <_puts_r+0x4e>
 800ae64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae66:	f000 f8d1 	bl	800b00c <__retarget_lock_release_recursive>
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	bd70      	pop	{r4, r5, r6, pc}
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	da04      	bge.n	800ae7c <_puts_r+0x60>
 800ae72:	69a2      	ldr	r2, [r4, #24]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	dc17      	bgt.n	800aea8 <_puts_r+0x8c>
 800ae78:	290a      	cmp	r1, #10
 800ae7a:	d015      	beq.n	800aea8 <_puts_r+0x8c>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	1c5a      	adds	r2, r3, #1
 800ae80:	6022      	str	r2, [r4, #0]
 800ae82:	7019      	strb	r1, [r3, #0]
 800ae84:	68a3      	ldr	r3, [r4, #8]
 800ae86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	60a3      	str	r3, [r4, #8]
 800ae8e:	2900      	cmp	r1, #0
 800ae90:	d1ed      	bne.n	800ae6e <_puts_r+0x52>
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	da11      	bge.n	800aeba <_puts_r+0x9e>
 800ae96:	4622      	mov	r2, r4
 800ae98:	210a      	movs	r1, #10
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	f000 fccf 	bl	800b83e <__swbuf_r>
 800aea0:	3001      	adds	r0, #1
 800aea2:	d0d7      	beq.n	800ae54 <_puts_r+0x38>
 800aea4:	250a      	movs	r5, #10
 800aea6:	e7d7      	b.n	800ae58 <_puts_r+0x3c>
 800aea8:	4622      	mov	r2, r4
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f000 fcc7 	bl	800b83e <__swbuf_r>
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	d1e7      	bne.n	800ae84 <_puts_r+0x68>
 800aeb4:	e7ce      	b.n	800ae54 <_puts_r+0x38>
 800aeb6:	3e01      	subs	r6, #1
 800aeb8:	e7e4      	b.n	800ae84 <_puts_r+0x68>
 800aeba:	6823      	ldr	r3, [r4, #0]
 800aebc:	1c5a      	adds	r2, r3, #1
 800aebe:	6022      	str	r2, [r4, #0]
 800aec0:	220a      	movs	r2, #10
 800aec2:	701a      	strb	r2, [r3, #0]
 800aec4:	e7ee      	b.n	800aea4 <_puts_r+0x88>
	...

0800aec8 <puts>:
 800aec8:	4b02      	ldr	r3, [pc, #8]	@ (800aed4 <puts+0xc>)
 800aeca:	4601      	mov	r1, r0
 800aecc:	6818      	ldr	r0, [r3, #0]
 800aece:	f7ff bfa5 	b.w	800ae1c <_puts_r>
 800aed2:	bf00      	nop
 800aed4:	2000001c 	.word	0x2000001c

0800aed8 <memset>:
 800aed8:	4402      	add	r2, r0
 800aeda:	4603      	mov	r3, r0
 800aedc:	4293      	cmp	r3, r2
 800aede:	d100      	bne.n	800aee2 <memset+0xa>
 800aee0:	4770      	bx	lr
 800aee2:	f803 1b01 	strb.w	r1, [r3], #1
 800aee6:	e7f9      	b.n	800aedc <memset+0x4>

0800aee8 <_reclaim_reent>:
 800aee8:	4b29      	ldr	r3, [pc, #164]	@ (800af90 <_reclaim_reent+0xa8>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4283      	cmp	r3, r0
 800aeee:	b570      	push	{r4, r5, r6, lr}
 800aef0:	4604      	mov	r4, r0
 800aef2:	d04b      	beq.n	800af8c <_reclaim_reent+0xa4>
 800aef4:	69c3      	ldr	r3, [r0, #28]
 800aef6:	b1ab      	cbz	r3, 800af24 <_reclaim_reent+0x3c>
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	b16b      	cbz	r3, 800af18 <_reclaim_reent+0x30>
 800aefc:	2500      	movs	r5, #0
 800aefe:	69e3      	ldr	r3, [r4, #28]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	5959      	ldr	r1, [r3, r5]
 800af04:	2900      	cmp	r1, #0
 800af06:	d13b      	bne.n	800af80 <_reclaim_reent+0x98>
 800af08:	3504      	adds	r5, #4
 800af0a:	2d80      	cmp	r5, #128	@ 0x80
 800af0c:	d1f7      	bne.n	800aefe <_reclaim_reent+0x16>
 800af0e:	69e3      	ldr	r3, [r4, #28]
 800af10:	4620      	mov	r0, r4
 800af12:	68d9      	ldr	r1, [r3, #12]
 800af14:	f000 f88a 	bl	800b02c <_free_r>
 800af18:	69e3      	ldr	r3, [r4, #28]
 800af1a:	6819      	ldr	r1, [r3, #0]
 800af1c:	b111      	cbz	r1, 800af24 <_reclaim_reent+0x3c>
 800af1e:	4620      	mov	r0, r4
 800af20:	f000 f884 	bl	800b02c <_free_r>
 800af24:	6961      	ldr	r1, [r4, #20]
 800af26:	b111      	cbz	r1, 800af2e <_reclaim_reent+0x46>
 800af28:	4620      	mov	r0, r4
 800af2a:	f000 f87f 	bl	800b02c <_free_r>
 800af2e:	69e1      	ldr	r1, [r4, #28]
 800af30:	b111      	cbz	r1, 800af38 <_reclaim_reent+0x50>
 800af32:	4620      	mov	r0, r4
 800af34:	f000 f87a 	bl	800b02c <_free_r>
 800af38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800af3a:	b111      	cbz	r1, 800af42 <_reclaim_reent+0x5a>
 800af3c:	4620      	mov	r0, r4
 800af3e:	f000 f875 	bl	800b02c <_free_r>
 800af42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af44:	b111      	cbz	r1, 800af4c <_reclaim_reent+0x64>
 800af46:	4620      	mov	r0, r4
 800af48:	f000 f870 	bl	800b02c <_free_r>
 800af4c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800af4e:	b111      	cbz	r1, 800af56 <_reclaim_reent+0x6e>
 800af50:	4620      	mov	r0, r4
 800af52:	f000 f86b 	bl	800b02c <_free_r>
 800af56:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800af58:	b111      	cbz	r1, 800af60 <_reclaim_reent+0x78>
 800af5a:	4620      	mov	r0, r4
 800af5c:	f000 f866 	bl	800b02c <_free_r>
 800af60:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800af62:	b111      	cbz	r1, 800af6a <_reclaim_reent+0x82>
 800af64:	4620      	mov	r0, r4
 800af66:	f000 f861 	bl	800b02c <_free_r>
 800af6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800af6c:	b111      	cbz	r1, 800af74 <_reclaim_reent+0x8c>
 800af6e:	4620      	mov	r0, r4
 800af70:	f000 f85c 	bl	800b02c <_free_r>
 800af74:	6a23      	ldr	r3, [r4, #32]
 800af76:	b14b      	cbz	r3, 800af8c <_reclaim_reent+0xa4>
 800af78:	4620      	mov	r0, r4
 800af7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af7e:	4718      	bx	r3
 800af80:	680e      	ldr	r6, [r1, #0]
 800af82:	4620      	mov	r0, r4
 800af84:	f000 f852 	bl	800b02c <_free_r>
 800af88:	4631      	mov	r1, r6
 800af8a:	e7bb      	b.n	800af04 <_reclaim_reent+0x1c>
 800af8c:	bd70      	pop	{r4, r5, r6, pc}
 800af8e:	bf00      	nop
 800af90:	2000001c 	.word	0x2000001c

0800af94 <_sbrk_r>:
 800af94:	b538      	push	{r3, r4, r5, lr}
 800af96:	4d06      	ldr	r5, [pc, #24]	@ (800afb0 <_sbrk_r+0x1c>)
 800af98:	2300      	movs	r3, #0
 800af9a:	4604      	mov	r4, r0
 800af9c:	4608      	mov	r0, r1
 800af9e:	602b      	str	r3, [r5, #0]
 800afa0:	f7f6 fb18 	bl	80015d4 <_sbrk>
 800afa4:	1c43      	adds	r3, r0, #1
 800afa6:	d102      	bne.n	800afae <_sbrk_r+0x1a>
 800afa8:	682b      	ldr	r3, [r5, #0]
 800afaa:	b103      	cbz	r3, 800afae <_sbrk_r+0x1a>
 800afac:	6023      	str	r3, [r4, #0]
 800afae:	bd38      	pop	{r3, r4, r5, pc}
 800afb0:	20001510 	.word	0x20001510

0800afb4 <__errno>:
 800afb4:	4b01      	ldr	r3, [pc, #4]	@ (800afbc <__errno+0x8>)
 800afb6:	6818      	ldr	r0, [r3, #0]
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	2000001c 	.word	0x2000001c

0800afc0 <__libc_init_array>:
 800afc0:	b570      	push	{r4, r5, r6, lr}
 800afc2:	4d0d      	ldr	r5, [pc, #52]	@ (800aff8 <__libc_init_array+0x38>)
 800afc4:	4c0d      	ldr	r4, [pc, #52]	@ (800affc <__libc_init_array+0x3c>)
 800afc6:	1b64      	subs	r4, r4, r5
 800afc8:	10a4      	asrs	r4, r4, #2
 800afca:	2600      	movs	r6, #0
 800afcc:	42a6      	cmp	r6, r4
 800afce:	d109      	bne.n	800afe4 <__libc_init_array+0x24>
 800afd0:	4d0b      	ldr	r5, [pc, #44]	@ (800b000 <__libc_init_array+0x40>)
 800afd2:	4c0c      	ldr	r4, [pc, #48]	@ (800b004 <__libc_init_array+0x44>)
 800afd4:	f000 fd92 	bl	800bafc <_init>
 800afd8:	1b64      	subs	r4, r4, r5
 800afda:	10a4      	asrs	r4, r4, #2
 800afdc:	2600      	movs	r6, #0
 800afde:	42a6      	cmp	r6, r4
 800afe0:	d105      	bne.n	800afee <__libc_init_array+0x2e>
 800afe2:	bd70      	pop	{r4, r5, r6, pc}
 800afe4:	f855 3b04 	ldr.w	r3, [r5], #4
 800afe8:	4798      	blx	r3
 800afea:	3601      	adds	r6, #1
 800afec:	e7ee      	b.n	800afcc <__libc_init_array+0xc>
 800afee:	f855 3b04 	ldr.w	r3, [r5], #4
 800aff2:	4798      	blx	r3
 800aff4:	3601      	adds	r6, #1
 800aff6:	e7f2      	b.n	800afde <__libc_init_array+0x1e>
 800aff8:	0800bdc4 	.word	0x0800bdc4
 800affc:	0800bdc4 	.word	0x0800bdc4
 800b000:	0800bdc4 	.word	0x0800bdc4
 800b004:	0800bdc8 	.word	0x0800bdc8

0800b008 <__retarget_lock_init_recursive>:
 800b008:	4770      	bx	lr

0800b00a <__retarget_lock_acquire_recursive>:
 800b00a:	4770      	bx	lr

0800b00c <__retarget_lock_release_recursive>:
 800b00c:	4770      	bx	lr

0800b00e <memcpy>:
 800b00e:	440a      	add	r2, r1
 800b010:	4291      	cmp	r1, r2
 800b012:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b016:	d100      	bne.n	800b01a <memcpy+0xc>
 800b018:	4770      	bx	lr
 800b01a:	b510      	push	{r4, lr}
 800b01c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b020:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b024:	4291      	cmp	r1, r2
 800b026:	d1f9      	bne.n	800b01c <memcpy+0xe>
 800b028:	bd10      	pop	{r4, pc}
	...

0800b02c <_free_r>:
 800b02c:	b538      	push	{r3, r4, r5, lr}
 800b02e:	4605      	mov	r5, r0
 800b030:	2900      	cmp	r1, #0
 800b032:	d041      	beq.n	800b0b8 <_free_r+0x8c>
 800b034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b038:	1f0c      	subs	r4, r1, #4
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	bfb8      	it	lt
 800b03e:	18e4      	addlt	r4, r4, r3
 800b040:	f7ff fe0c 	bl	800ac5c <__malloc_lock>
 800b044:	4a1d      	ldr	r2, [pc, #116]	@ (800b0bc <_free_r+0x90>)
 800b046:	6813      	ldr	r3, [r2, #0]
 800b048:	b933      	cbnz	r3, 800b058 <_free_r+0x2c>
 800b04a:	6063      	str	r3, [r4, #4]
 800b04c:	6014      	str	r4, [r2, #0]
 800b04e:	4628      	mov	r0, r5
 800b050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b054:	f7ff be08 	b.w	800ac68 <__malloc_unlock>
 800b058:	42a3      	cmp	r3, r4
 800b05a:	d908      	bls.n	800b06e <_free_r+0x42>
 800b05c:	6820      	ldr	r0, [r4, #0]
 800b05e:	1821      	adds	r1, r4, r0
 800b060:	428b      	cmp	r3, r1
 800b062:	bf01      	itttt	eq
 800b064:	6819      	ldreq	r1, [r3, #0]
 800b066:	685b      	ldreq	r3, [r3, #4]
 800b068:	1809      	addeq	r1, r1, r0
 800b06a:	6021      	streq	r1, [r4, #0]
 800b06c:	e7ed      	b.n	800b04a <_free_r+0x1e>
 800b06e:	461a      	mov	r2, r3
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	b10b      	cbz	r3, 800b078 <_free_r+0x4c>
 800b074:	42a3      	cmp	r3, r4
 800b076:	d9fa      	bls.n	800b06e <_free_r+0x42>
 800b078:	6811      	ldr	r1, [r2, #0]
 800b07a:	1850      	adds	r0, r2, r1
 800b07c:	42a0      	cmp	r0, r4
 800b07e:	d10b      	bne.n	800b098 <_free_r+0x6c>
 800b080:	6820      	ldr	r0, [r4, #0]
 800b082:	4401      	add	r1, r0
 800b084:	1850      	adds	r0, r2, r1
 800b086:	4283      	cmp	r3, r0
 800b088:	6011      	str	r1, [r2, #0]
 800b08a:	d1e0      	bne.n	800b04e <_free_r+0x22>
 800b08c:	6818      	ldr	r0, [r3, #0]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	6053      	str	r3, [r2, #4]
 800b092:	4408      	add	r0, r1
 800b094:	6010      	str	r0, [r2, #0]
 800b096:	e7da      	b.n	800b04e <_free_r+0x22>
 800b098:	d902      	bls.n	800b0a0 <_free_r+0x74>
 800b09a:	230c      	movs	r3, #12
 800b09c:	602b      	str	r3, [r5, #0]
 800b09e:	e7d6      	b.n	800b04e <_free_r+0x22>
 800b0a0:	6820      	ldr	r0, [r4, #0]
 800b0a2:	1821      	adds	r1, r4, r0
 800b0a4:	428b      	cmp	r3, r1
 800b0a6:	bf04      	itt	eq
 800b0a8:	6819      	ldreq	r1, [r3, #0]
 800b0aa:	685b      	ldreq	r3, [r3, #4]
 800b0ac:	6063      	str	r3, [r4, #4]
 800b0ae:	bf04      	itt	eq
 800b0b0:	1809      	addeq	r1, r1, r0
 800b0b2:	6021      	streq	r1, [r4, #0]
 800b0b4:	6054      	str	r4, [r2, #4]
 800b0b6:	e7ca      	b.n	800b04e <_free_r+0x22>
 800b0b8:	bd38      	pop	{r3, r4, r5, pc}
 800b0ba:	bf00      	nop
 800b0bc:	200013d0 	.word	0x200013d0

0800b0c0 <__sfputc_r>:
 800b0c0:	6893      	ldr	r3, [r2, #8]
 800b0c2:	3b01      	subs	r3, #1
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	b410      	push	{r4}
 800b0c8:	6093      	str	r3, [r2, #8]
 800b0ca:	da08      	bge.n	800b0de <__sfputc_r+0x1e>
 800b0cc:	6994      	ldr	r4, [r2, #24]
 800b0ce:	42a3      	cmp	r3, r4
 800b0d0:	db01      	blt.n	800b0d6 <__sfputc_r+0x16>
 800b0d2:	290a      	cmp	r1, #10
 800b0d4:	d103      	bne.n	800b0de <__sfputc_r+0x1e>
 800b0d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0da:	f000 bbb0 	b.w	800b83e <__swbuf_r>
 800b0de:	6813      	ldr	r3, [r2, #0]
 800b0e0:	1c58      	adds	r0, r3, #1
 800b0e2:	6010      	str	r0, [r2, #0]
 800b0e4:	7019      	strb	r1, [r3, #0]
 800b0e6:	4608      	mov	r0, r1
 800b0e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ec:	4770      	bx	lr

0800b0ee <__sfputs_r>:
 800b0ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	460f      	mov	r7, r1
 800b0f4:	4614      	mov	r4, r2
 800b0f6:	18d5      	adds	r5, r2, r3
 800b0f8:	42ac      	cmp	r4, r5
 800b0fa:	d101      	bne.n	800b100 <__sfputs_r+0x12>
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	e007      	b.n	800b110 <__sfputs_r+0x22>
 800b100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b104:	463a      	mov	r2, r7
 800b106:	4630      	mov	r0, r6
 800b108:	f7ff ffda 	bl	800b0c0 <__sfputc_r>
 800b10c:	1c43      	adds	r3, r0, #1
 800b10e:	d1f3      	bne.n	800b0f8 <__sfputs_r+0xa>
 800b110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b114 <_vfiprintf_r>:
 800b114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b118:	460d      	mov	r5, r1
 800b11a:	b09d      	sub	sp, #116	@ 0x74
 800b11c:	4614      	mov	r4, r2
 800b11e:	4698      	mov	r8, r3
 800b120:	4606      	mov	r6, r0
 800b122:	b118      	cbz	r0, 800b12c <_vfiprintf_r+0x18>
 800b124:	6a03      	ldr	r3, [r0, #32]
 800b126:	b90b      	cbnz	r3, 800b12c <_vfiprintf_r+0x18>
 800b128:	f7ff fe30 	bl	800ad8c <__sinit>
 800b12c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b12e:	07d9      	lsls	r1, r3, #31
 800b130:	d405      	bmi.n	800b13e <_vfiprintf_r+0x2a>
 800b132:	89ab      	ldrh	r3, [r5, #12]
 800b134:	059a      	lsls	r2, r3, #22
 800b136:	d402      	bmi.n	800b13e <_vfiprintf_r+0x2a>
 800b138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b13a:	f7ff ff66 	bl	800b00a <__retarget_lock_acquire_recursive>
 800b13e:	89ab      	ldrh	r3, [r5, #12]
 800b140:	071b      	lsls	r3, r3, #28
 800b142:	d501      	bpl.n	800b148 <_vfiprintf_r+0x34>
 800b144:	692b      	ldr	r3, [r5, #16]
 800b146:	b99b      	cbnz	r3, 800b170 <_vfiprintf_r+0x5c>
 800b148:	4629      	mov	r1, r5
 800b14a:	4630      	mov	r0, r6
 800b14c:	f000 fbb6 	bl	800b8bc <__swsetup_r>
 800b150:	b170      	cbz	r0, 800b170 <_vfiprintf_r+0x5c>
 800b152:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b154:	07dc      	lsls	r4, r3, #31
 800b156:	d504      	bpl.n	800b162 <_vfiprintf_r+0x4e>
 800b158:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b15c:	b01d      	add	sp, #116	@ 0x74
 800b15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b162:	89ab      	ldrh	r3, [r5, #12]
 800b164:	0598      	lsls	r0, r3, #22
 800b166:	d4f7      	bmi.n	800b158 <_vfiprintf_r+0x44>
 800b168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b16a:	f7ff ff4f 	bl	800b00c <__retarget_lock_release_recursive>
 800b16e:	e7f3      	b.n	800b158 <_vfiprintf_r+0x44>
 800b170:	2300      	movs	r3, #0
 800b172:	9309      	str	r3, [sp, #36]	@ 0x24
 800b174:	2320      	movs	r3, #32
 800b176:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b17a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b17e:	2330      	movs	r3, #48	@ 0x30
 800b180:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b330 <_vfiprintf_r+0x21c>
 800b184:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b188:	f04f 0901 	mov.w	r9, #1
 800b18c:	4623      	mov	r3, r4
 800b18e:	469a      	mov	sl, r3
 800b190:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b194:	b10a      	cbz	r2, 800b19a <_vfiprintf_r+0x86>
 800b196:	2a25      	cmp	r2, #37	@ 0x25
 800b198:	d1f9      	bne.n	800b18e <_vfiprintf_r+0x7a>
 800b19a:	ebba 0b04 	subs.w	fp, sl, r4
 800b19e:	d00b      	beq.n	800b1b8 <_vfiprintf_r+0xa4>
 800b1a0:	465b      	mov	r3, fp
 800b1a2:	4622      	mov	r2, r4
 800b1a4:	4629      	mov	r1, r5
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f7ff ffa1 	bl	800b0ee <__sfputs_r>
 800b1ac:	3001      	adds	r0, #1
 800b1ae:	f000 80a7 	beq.w	800b300 <_vfiprintf_r+0x1ec>
 800b1b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1b4:	445a      	add	r2, fp
 800b1b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f000 809f 	beq.w	800b300 <_vfiprintf_r+0x1ec>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b1c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1cc:	f10a 0a01 	add.w	sl, sl, #1
 800b1d0:	9304      	str	r3, [sp, #16]
 800b1d2:	9307      	str	r3, [sp, #28]
 800b1d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b1d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1da:	4654      	mov	r4, sl
 800b1dc:	2205      	movs	r2, #5
 800b1de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1e2:	4853      	ldr	r0, [pc, #332]	@ (800b330 <_vfiprintf_r+0x21c>)
 800b1e4:	f7f5 f81c 	bl	8000220 <memchr>
 800b1e8:	9a04      	ldr	r2, [sp, #16]
 800b1ea:	b9d8      	cbnz	r0, 800b224 <_vfiprintf_r+0x110>
 800b1ec:	06d1      	lsls	r1, r2, #27
 800b1ee:	bf44      	itt	mi
 800b1f0:	2320      	movmi	r3, #32
 800b1f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1f6:	0713      	lsls	r3, r2, #28
 800b1f8:	bf44      	itt	mi
 800b1fa:	232b      	movmi	r3, #43	@ 0x2b
 800b1fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b200:	f89a 3000 	ldrb.w	r3, [sl]
 800b204:	2b2a      	cmp	r3, #42	@ 0x2a
 800b206:	d015      	beq.n	800b234 <_vfiprintf_r+0x120>
 800b208:	9a07      	ldr	r2, [sp, #28]
 800b20a:	4654      	mov	r4, sl
 800b20c:	2000      	movs	r0, #0
 800b20e:	f04f 0c0a 	mov.w	ip, #10
 800b212:	4621      	mov	r1, r4
 800b214:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b218:	3b30      	subs	r3, #48	@ 0x30
 800b21a:	2b09      	cmp	r3, #9
 800b21c:	d94b      	bls.n	800b2b6 <_vfiprintf_r+0x1a2>
 800b21e:	b1b0      	cbz	r0, 800b24e <_vfiprintf_r+0x13a>
 800b220:	9207      	str	r2, [sp, #28]
 800b222:	e014      	b.n	800b24e <_vfiprintf_r+0x13a>
 800b224:	eba0 0308 	sub.w	r3, r0, r8
 800b228:	fa09 f303 	lsl.w	r3, r9, r3
 800b22c:	4313      	orrs	r3, r2
 800b22e:	9304      	str	r3, [sp, #16]
 800b230:	46a2      	mov	sl, r4
 800b232:	e7d2      	b.n	800b1da <_vfiprintf_r+0xc6>
 800b234:	9b03      	ldr	r3, [sp, #12]
 800b236:	1d19      	adds	r1, r3, #4
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	9103      	str	r1, [sp, #12]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	bfbb      	ittet	lt
 800b240:	425b      	neglt	r3, r3
 800b242:	f042 0202 	orrlt.w	r2, r2, #2
 800b246:	9307      	strge	r3, [sp, #28]
 800b248:	9307      	strlt	r3, [sp, #28]
 800b24a:	bfb8      	it	lt
 800b24c:	9204      	strlt	r2, [sp, #16]
 800b24e:	7823      	ldrb	r3, [r4, #0]
 800b250:	2b2e      	cmp	r3, #46	@ 0x2e
 800b252:	d10a      	bne.n	800b26a <_vfiprintf_r+0x156>
 800b254:	7863      	ldrb	r3, [r4, #1]
 800b256:	2b2a      	cmp	r3, #42	@ 0x2a
 800b258:	d132      	bne.n	800b2c0 <_vfiprintf_r+0x1ac>
 800b25a:	9b03      	ldr	r3, [sp, #12]
 800b25c:	1d1a      	adds	r2, r3, #4
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	9203      	str	r2, [sp, #12]
 800b262:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b266:	3402      	adds	r4, #2
 800b268:	9305      	str	r3, [sp, #20]
 800b26a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b340 <_vfiprintf_r+0x22c>
 800b26e:	7821      	ldrb	r1, [r4, #0]
 800b270:	2203      	movs	r2, #3
 800b272:	4650      	mov	r0, sl
 800b274:	f7f4 ffd4 	bl	8000220 <memchr>
 800b278:	b138      	cbz	r0, 800b28a <_vfiprintf_r+0x176>
 800b27a:	9b04      	ldr	r3, [sp, #16]
 800b27c:	eba0 000a 	sub.w	r0, r0, sl
 800b280:	2240      	movs	r2, #64	@ 0x40
 800b282:	4082      	lsls	r2, r0
 800b284:	4313      	orrs	r3, r2
 800b286:	3401      	adds	r4, #1
 800b288:	9304      	str	r3, [sp, #16]
 800b28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b28e:	4829      	ldr	r0, [pc, #164]	@ (800b334 <_vfiprintf_r+0x220>)
 800b290:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b294:	2206      	movs	r2, #6
 800b296:	f7f4 ffc3 	bl	8000220 <memchr>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d03f      	beq.n	800b31e <_vfiprintf_r+0x20a>
 800b29e:	4b26      	ldr	r3, [pc, #152]	@ (800b338 <_vfiprintf_r+0x224>)
 800b2a0:	bb1b      	cbnz	r3, 800b2ea <_vfiprintf_r+0x1d6>
 800b2a2:	9b03      	ldr	r3, [sp, #12]
 800b2a4:	3307      	adds	r3, #7
 800b2a6:	f023 0307 	bic.w	r3, r3, #7
 800b2aa:	3308      	adds	r3, #8
 800b2ac:	9303      	str	r3, [sp, #12]
 800b2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2b0:	443b      	add	r3, r7
 800b2b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2b4:	e76a      	b.n	800b18c <_vfiprintf_r+0x78>
 800b2b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	2001      	movs	r0, #1
 800b2be:	e7a8      	b.n	800b212 <_vfiprintf_r+0xfe>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	3401      	adds	r4, #1
 800b2c4:	9305      	str	r3, [sp, #20]
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	f04f 0c0a 	mov.w	ip, #10
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2d2:	3a30      	subs	r2, #48	@ 0x30
 800b2d4:	2a09      	cmp	r2, #9
 800b2d6:	d903      	bls.n	800b2e0 <_vfiprintf_r+0x1cc>
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d0c6      	beq.n	800b26a <_vfiprintf_r+0x156>
 800b2dc:	9105      	str	r1, [sp, #20]
 800b2de:	e7c4      	b.n	800b26a <_vfiprintf_r+0x156>
 800b2e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e7f0      	b.n	800b2cc <_vfiprintf_r+0x1b8>
 800b2ea:	ab03      	add	r3, sp, #12
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	462a      	mov	r2, r5
 800b2f0:	4b12      	ldr	r3, [pc, #72]	@ (800b33c <_vfiprintf_r+0x228>)
 800b2f2:	a904      	add	r1, sp, #16
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	f3af 8000 	nop.w
 800b2fa:	4607      	mov	r7, r0
 800b2fc:	1c78      	adds	r0, r7, #1
 800b2fe:	d1d6      	bne.n	800b2ae <_vfiprintf_r+0x19a>
 800b300:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b302:	07d9      	lsls	r1, r3, #31
 800b304:	d405      	bmi.n	800b312 <_vfiprintf_r+0x1fe>
 800b306:	89ab      	ldrh	r3, [r5, #12]
 800b308:	059a      	lsls	r2, r3, #22
 800b30a:	d402      	bmi.n	800b312 <_vfiprintf_r+0x1fe>
 800b30c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b30e:	f7ff fe7d 	bl	800b00c <__retarget_lock_release_recursive>
 800b312:	89ab      	ldrh	r3, [r5, #12]
 800b314:	065b      	lsls	r3, r3, #25
 800b316:	f53f af1f 	bmi.w	800b158 <_vfiprintf_r+0x44>
 800b31a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b31c:	e71e      	b.n	800b15c <_vfiprintf_r+0x48>
 800b31e:	ab03      	add	r3, sp, #12
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	462a      	mov	r2, r5
 800b324:	4b05      	ldr	r3, [pc, #20]	@ (800b33c <_vfiprintf_r+0x228>)
 800b326:	a904      	add	r1, sp, #16
 800b328:	4630      	mov	r0, r6
 800b32a:	f000 f879 	bl	800b420 <_printf_i>
 800b32e:	e7e4      	b.n	800b2fa <_vfiprintf_r+0x1e6>
 800b330:	0800bd88 	.word	0x0800bd88
 800b334:	0800bd92 	.word	0x0800bd92
 800b338:	00000000 	.word	0x00000000
 800b33c:	0800b0ef 	.word	0x0800b0ef
 800b340:	0800bd8e 	.word	0x0800bd8e

0800b344 <_printf_common>:
 800b344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b348:	4616      	mov	r6, r2
 800b34a:	4698      	mov	r8, r3
 800b34c:	688a      	ldr	r2, [r1, #8]
 800b34e:	690b      	ldr	r3, [r1, #16]
 800b350:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b354:	4293      	cmp	r3, r2
 800b356:	bfb8      	it	lt
 800b358:	4613      	movlt	r3, r2
 800b35a:	6033      	str	r3, [r6, #0]
 800b35c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b360:	4607      	mov	r7, r0
 800b362:	460c      	mov	r4, r1
 800b364:	b10a      	cbz	r2, 800b36a <_printf_common+0x26>
 800b366:	3301      	adds	r3, #1
 800b368:	6033      	str	r3, [r6, #0]
 800b36a:	6823      	ldr	r3, [r4, #0]
 800b36c:	0699      	lsls	r1, r3, #26
 800b36e:	bf42      	ittt	mi
 800b370:	6833      	ldrmi	r3, [r6, #0]
 800b372:	3302      	addmi	r3, #2
 800b374:	6033      	strmi	r3, [r6, #0]
 800b376:	6825      	ldr	r5, [r4, #0]
 800b378:	f015 0506 	ands.w	r5, r5, #6
 800b37c:	d106      	bne.n	800b38c <_printf_common+0x48>
 800b37e:	f104 0a19 	add.w	sl, r4, #25
 800b382:	68e3      	ldr	r3, [r4, #12]
 800b384:	6832      	ldr	r2, [r6, #0]
 800b386:	1a9b      	subs	r3, r3, r2
 800b388:	42ab      	cmp	r3, r5
 800b38a:	dc26      	bgt.n	800b3da <_printf_common+0x96>
 800b38c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b390:	6822      	ldr	r2, [r4, #0]
 800b392:	3b00      	subs	r3, #0
 800b394:	bf18      	it	ne
 800b396:	2301      	movne	r3, #1
 800b398:	0692      	lsls	r2, r2, #26
 800b39a:	d42b      	bmi.n	800b3f4 <_printf_common+0xb0>
 800b39c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b3a0:	4641      	mov	r1, r8
 800b3a2:	4638      	mov	r0, r7
 800b3a4:	47c8      	blx	r9
 800b3a6:	3001      	adds	r0, #1
 800b3a8:	d01e      	beq.n	800b3e8 <_printf_common+0xa4>
 800b3aa:	6823      	ldr	r3, [r4, #0]
 800b3ac:	6922      	ldr	r2, [r4, #16]
 800b3ae:	f003 0306 	and.w	r3, r3, #6
 800b3b2:	2b04      	cmp	r3, #4
 800b3b4:	bf02      	ittt	eq
 800b3b6:	68e5      	ldreq	r5, [r4, #12]
 800b3b8:	6833      	ldreq	r3, [r6, #0]
 800b3ba:	1aed      	subeq	r5, r5, r3
 800b3bc:	68a3      	ldr	r3, [r4, #8]
 800b3be:	bf0c      	ite	eq
 800b3c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3c4:	2500      	movne	r5, #0
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	bfc4      	itt	gt
 800b3ca:	1a9b      	subgt	r3, r3, r2
 800b3cc:	18ed      	addgt	r5, r5, r3
 800b3ce:	2600      	movs	r6, #0
 800b3d0:	341a      	adds	r4, #26
 800b3d2:	42b5      	cmp	r5, r6
 800b3d4:	d11a      	bne.n	800b40c <_printf_common+0xc8>
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	e008      	b.n	800b3ec <_printf_common+0xa8>
 800b3da:	2301      	movs	r3, #1
 800b3dc:	4652      	mov	r2, sl
 800b3de:	4641      	mov	r1, r8
 800b3e0:	4638      	mov	r0, r7
 800b3e2:	47c8      	blx	r9
 800b3e4:	3001      	adds	r0, #1
 800b3e6:	d103      	bne.n	800b3f0 <_printf_common+0xac>
 800b3e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f0:	3501      	adds	r5, #1
 800b3f2:	e7c6      	b.n	800b382 <_printf_common+0x3e>
 800b3f4:	18e1      	adds	r1, r4, r3
 800b3f6:	1c5a      	adds	r2, r3, #1
 800b3f8:	2030      	movs	r0, #48	@ 0x30
 800b3fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b3fe:	4422      	add	r2, r4
 800b400:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b404:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b408:	3302      	adds	r3, #2
 800b40a:	e7c7      	b.n	800b39c <_printf_common+0x58>
 800b40c:	2301      	movs	r3, #1
 800b40e:	4622      	mov	r2, r4
 800b410:	4641      	mov	r1, r8
 800b412:	4638      	mov	r0, r7
 800b414:	47c8      	blx	r9
 800b416:	3001      	adds	r0, #1
 800b418:	d0e6      	beq.n	800b3e8 <_printf_common+0xa4>
 800b41a:	3601      	adds	r6, #1
 800b41c:	e7d9      	b.n	800b3d2 <_printf_common+0x8e>
	...

0800b420 <_printf_i>:
 800b420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b424:	7e0f      	ldrb	r7, [r1, #24]
 800b426:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b428:	2f78      	cmp	r7, #120	@ 0x78
 800b42a:	4691      	mov	r9, r2
 800b42c:	4680      	mov	r8, r0
 800b42e:	460c      	mov	r4, r1
 800b430:	469a      	mov	sl, r3
 800b432:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b436:	d807      	bhi.n	800b448 <_printf_i+0x28>
 800b438:	2f62      	cmp	r7, #98	@ 0x62
 800b43a:	d80a      	bhi.n	800b452 <_printf_i+0x32>
 800b43c:	2f00      	cmp	r7, #0
 800b43e:	f000 80d2 	beq.w	800b5e6 <_printf_i+0x1c6>
 800b442:	2f58      	cmp	r7, #88	@ 0x58
 800b444:	f000 80b9 	beq.w	800b5ba <_printf_i+0x19a>
 800b448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b44c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b450:	e03a      	b.n	800b4c8 <_printf_i+0xa8>
 800b452:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b456:	2b15      	cmp	r3, #21
 800b458:	d8f6      	bhi.n	800b448 <_printf_i+0x28>
 800b45a:	a101      	add	r1, pc, #4	@ (adr r1, 800b460 <_printf_i+0x40>)
 800b45c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b460:	0800b4b9 	.word	0x0800b4b9
 800b464:	0800b4cd 	.word	0x0800b4cd
 800b468:	0800b449 	.word	0x0800b449
 800b46c:	0800b449 	.word	0x0800b449
 800b470:	0800b449 	.word	0x0800b449
 800b474:	0800b449 	.word	0x0800b449
 800b478:	0800b4cd 	.word	0x0800b4cd
 800b47c:	0800b449 	.word	0x0800b449
 800b480:	0800b449 	.word	0x0800b449
 800b484:	0800b449 	.word	0x0800b449
 800b488:	0800b449 	.word	0x0800b449
 800b48c:	0800b5cd 	.word	0x0800b5cd
 800b490:	0800b4f7 	.word	0x0800b4f7
 800b494:	0800b587 	.word	0x0800b587
 800b498:	0800b449 	.word	0x0800b449
 800b49c:	0800b449 	.word	0x0800b449
 800b4a0:	0800b5ef 	.word	0x0800b5ef
 800b4a4:	0800b449 	.word	0x0800b449
 800b4a8:	0800b4f7 	.word	0x0800b4f7
 800b4ac:	0800b449 	.word	0x0800b449
 800b4b0:	0800b449 	.word	0x0800b449
 800b4b4:	0800b58f 	.word	0x0800b58f
 800b4b8:	6833      	ldr	r3, [r6, #0]
 800b4ba:	1d1a      	adds	r2, r3, #4
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	6032      	str	r2, [r6, #0]
 800b4c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e09d      	b.n	800b608 <_printf_i+0x1e8>
 800b4cc:	6833      	ldr	r3, [r6, #0]
 800b4ce:	6820      	ldr	r0, [r4, #0]
 800b4d0:	1d19      	adds	r1, r3, #4
 800b4d2:	6031      	str	r1, [r6, #0]
 800b4d4:	0606      	lsls	r6, r0, #24
 800b4d6:	d501      	bpl.n	800b4dc <_printf_i+0xbc>
 800b4d8:	681d      	ldr	r5, [r3, #0]
 800b4da:	e003      	b.n	800b4e4 <_printf_i+0xc4>
 800b4dc:	0645      	lsls	r5, r0, #25
 800b4de:	d5fb      	bpl.n	800b4d8 <_printf_i+0xb8>
 800b4e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b4e4:	2d00      	cmp	r5, #0
 800b4e6:	da03      	bge.n	800b4f0 <_printf_i+0xd0>
 800b4e8:	232d      	movs	r3, #45	@ 0x2d
 800b4ea:	426d      	negs	r5, r5
 800b4ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4f0:	4859      	ldr	r0, [pc, #356]	@ (800b658 <_printf_i+0x238>)
 800b4f2:	230a      	movs	r3, #10
 800b4f4:	e011      	b.n	800b51a <_printf_i+0xfa>
 800b4f6:	6821      	ldr	r1, [r4, #0]
 800b4f8:	6833      	ldr	r3, [r6, #0]
 800b4fa:	0608      	lsls	r0, r1, #24
 800b4fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b500:	d402      	bmi.n	800b508 <_printf_i+0xe8>
 800b502:	0649      	lsls	r1, r1, #25
 800b504:	bf48      	it	mi
 800b506:	b2ad      	uxthmi	r5, r5
 800b508:	2f6f      	cmp	r7, #111	@ 0x6f
 800b50a:	4853      	ldr	r0, [pc, #332]	@ (800b658 <_printf_i+0x238>)
 800b50c:	6033      	str	r3, [r6, #0]
 800b50e:	bf14      	ite	ne
 800b510:	230a      	movne	r3, #10
 800b512:	2308      	moveq	r3, #8
 800b514:	2100      	movs	r1, #0
 800b516:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b51a:	6866      	ldr	r6, [r4, #4]
 800b51c:	60a6      	str	r6, [r4, #8]
 800b51e:	2e00      	cmp	r6, #0
 800b520:	bfa2      	ittt	ge
 800b522:	6821      	ldrge	r1, [r4, #0]
 800b524:	f021 0104 	bicge.w	r1, r1, #4
 800b528:	6021      	strge	r1, [r4, #0]
 800b52a:	b90d      	cbnz	r5, 800b530 <_printf_i+0x110>
 800b52c:	2e00      	cmp	r6, #0
 800b52e:	d04b      	beq.n	800b5c8 <_printf_i+0x1a8>
 800b530:	4616      	mov	r6, r2
 800b532:	fbb5 f1f3 	udiv	r1, r5, r3
 800b536:	fb03 5711 	mls	r7, r3, r1, r5
 800b53a:	5dc7      	ldrb	r7, [r0, r7]
 800b53c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b540:	462f      	mov	r7, r5
 800b542:	42bb      	cmp	r3, r7
 800b544:	460d      	mov	r5, r1
 800b546:	d9f4      	bls.n	800b532 <_printf_i+0x112>
 800b548:	2b08      	cmp	r3, #8
 800b54a:	d10b      	bne.n	800b564 <_printf_i+0x144>
 800b54c:	6823      	ldr	r3, [r4, #0]
 800b54e:	07df      	lsls	r7, r3, #31
 800b550:	d508      	bpl.n	800b564 <_printf_i+0x144>
 800b552:	6923      	ldr	r3, [r4, #16]
 800b554:	6861      	ldr	r1, [r4, #4]
 800b556:	4299      	cmp	r1, r3
 800b558:	bfde      	ittt	le
 800b55a:	2330      	movle	r3, #48	@ 0x30
 800b55c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b560:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b564:	1b92      	subs	r2, r2, r6
 800b566:	6122      	str	r2, [r4, #16]
 800b568:	f8cd a000 	str.w	sl, [sp]
 800b56c:	464b      	mov	r3, r9
 800b56e:	aa03      	add	r2, sp, #12
 800b570:	4621      	mov	r1, r4
 800b572:	4640      	mov	r0, r8
 800b574:	f7ff fee6 	bl	800b344 <_printf_common>
 800b578:	3001      	adds	r0, #1
 800b57a:	d14a      	bne.n	800b612 <_printf_i+0x1f2>
 800b57c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b580:	b004      	add	sp, #16
 800b582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b586:	6823      	ldr	r3, [r4, #0]
 800b588:	f043 0320 	orr.w	r3, r3, #32
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	4833      	ldr	r0, [pc, #204]	@ (800b65c <_printf_i+0x23c>)
 800b590:	2778      	movs	r7, #120	@ 0x78
 800b592:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	6831      	ldr	r1, [r6, #0]
 800b59a:	061f      	lsls	r7, r3, #24
 800b59c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b5a0:	d402      	bmi.n	800b5a8 <_printf_i+0x188>
 800b5a2:	065f      	lsls	r7, r3, #25
 800b5a4:	bf48      	it	mi
 800b5a6:	b2ad      	uxthmi	r5, r5
 800b5a8:	6031      	str	r1, [r6, #0]
 800b5aa:	07d9      	lsls	r1, r3, #31
 800b5ac:	bf44      	itt	mi
 800b5ae:	f043 0320 	orrmi.w	r3, r3, #32
 800b5b2:	6023      	strmi	r3, [r4, #0]
 800b5b4:	b11d      	cbz	r5, 800b5be <_printf_i+0x19e>
 800b5b6:	2310      	movs	r3, #16
 800b5b8:	e7ac      	b.n	800b514 <_printf_i+0xf4>
 800b5ba:	4827      	ldr	r0, [pc, #156]	@ (800b658 <_printf_i+0x238>)
 800b5bc:	e7e9      	b.n	800b592 <_printf_i+0x172>
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	f023 0320 	bic.w	r3, r3, #32
 800b5c4:	6023      	str	r3, [r4, #0]
 800b5c6:	e7f6      	b.n	800b5b6 <_printf_i+0x196>
 800b5c8:	4616      	mov	r6, r2
 800b5ca:	e7bd      	b.n	800b548 <_printf_i+0x128>
 800b5cc:	6833      	ldr	r3, [r6, #0]
 800b5ce:	6825      	ldr	r5, [r4, #0]
 800b5d0:	6961      	ldr	r1, [r4, #20]
 800b5d2:	1d18      	adds	r0, r3, #4
 800b5d4:	6030      	str	r0, [r6, #0]
 800b5d6:	062e      	lsls	r6, r5, #24
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	d501      	bpl.n	800b5e0 <_printf_i+0x1c0>
 800b5dc:	6019      	str	r1, [r3, #0]
 800b5de:	e002      	b.n	800b5e6 <_printf_i+0x1c6>
 800b5e0:	0668      	lsls	r0, r5, #25
 800b5e2:	d5fb      	bpl.n	800b5dc <_printf_i+0x1bc>
 800b5e4:	8019      	strh	r1, [r3, #0]
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	6123      	str	r3, [r4, #16]
 800b5ea:	4616      	mov	r6, r2
 800b5ec:	e7bc      	b.n	800b568 <_printf_i+0x148>
 800b5ee:	6833      	ldr	r3, [r6, #0]
 800b5f0:	1d1a      	adds	r2, r3, #4
 800b5f2:	6032      	str	r2, [r6, #0]
 800b5f4:	681e      	ldr	r6, [r3, #0]
 800b5f6:	6862      	ldr	r2, [r4, #4]
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	f7f4 fe10 	bl	8000220 <memchr>
 800b600:	b108      	cbz	r0, 800b606 <_printf_i+0x1e6>
 800b602:	1b80      	subs	r0, r0, r6
 800b604:	6060      	str	r0, [r4, #4]
 800b606:	6863      	ldr	r3, [r4, #4]
 800b608:	6123      	str	r3, [r4, #16]
 800b60a:	2300      	movs	r3, #0
 800b60c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b610:	e7aa      	b.n	800b568 <_printf_i+0x148>
 800b612:	6923      	ldr	r3, [r4, #16]
 800b614:	4632      	mov	r2, r6
 800b616:	4649      	mov	r1, r9
 800b618:	4640      	mov	r0, r8
 800b61a:	47d0      	blx	sl
 800b61c:	3001      	adds	r0, #1
 800b61e:	d0ad      	beq.n	800b57c <_printf_i+0x15c>
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	079b      	lsls	r3, r3, #30
 800b624:	d413      	bmi.n	800b64e <_printf_i+0x22e>
 800b626:	68e0      	ldr	r0, [r4, #12]
 800b628:	9b03      	ldr	r3, [sp, #12]
 800b62a:	4298      	cmp	r0, r3
 800b62c:	bfb8      	it	lt
 800b62e:	4618      	movlt	r0, r3
 800b630:	e7a6      	b.n	800b580 <_printf_i+0x160>
 800b632:	2301      	movs	r3, #1
 800b634:	4632      	mov	r2, r6
 800b636:	4649      	mov	r1, r9
 800b638:	4640      	mov	r0, r8
 800b63a:	47d0      	blx	sl
 800b63c:	3001      	adds	r0, #1
 800b63e:	d09d      	beq.n	800b57c <_printf_i+0x15c>
 800b640:	3501      	adds	r5, #1
 800b642:	68e3      	ldr	r3, [r4, #12]
 800b644:	9903      	ldr	r1, [sp, #12]
 800b646:	1a5b      	subs	r3, r3, r1
 800b648:	42ab      	cmp	r3, r5
 800b64a:	dcf2      	bgt.n	800b632 <_printf_i+0x212>
 800b64c:	e7eb      	b.n	800b626 <_printf_i+0x206>
 800b64e:	2500      	movs	r5, #0
 800b650:	f104 0619 	add.w	r6, r4, #25
 800b654:	e7f5      	b.n	800b642 <_printf_i+0x222>
 800b656:	bf00      	nop
 800b658:	0800bd99 	.word	0x0800bd99
 800b65c:	0800bdaa 	.word	0x0800bdaa

0800b660 <__sflush_r>:
 800b660:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b668:	0716      	lsls	r6, r2, #28
 800b66a:	4605      	mov	r5, r0
 800b66c:	460c      	mov	r4, r1
 800b66e:	d454      	bmi.n	800b71a <__sflush_r+0xba>
 800b670:	684b      	ldr	r3, [r1, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	dc02      	bgt.n	800b67c <__sflush_r+0x1c>
 800b676:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b678:	2b00      	cmp	r3, #0
 800b67a:	dd48      	ble.n	800b70e <__sflush_r+0xae>
 800b67c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b67e:	2e00      	cmp	r6, #0
 800b680:	d045      	beq.n	800b70e <__sflush_r+0xae>
 800b682:	2300      	movs	r3, #0
 800b684:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b688:	682f      	ldr	r7, [r5, #0]
 800b68a:	6a21      	ldr	r1, [r4, #32]
 800b68c:	602b      	str	r3, [r5, #0]
 800b68e:	d030      	beq.n	800b6f2 <__sflush_r+0x92>
 800b690:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b692:	89a3      	ldrh	r3, [r4, #12]
 800b694:	0759      	lsls	r1, r3, #29
 800b696:	d505      	bpl.n	800b6a4 <__sflush_r+0x44>
 800b698:	6863      	ldr	r3, [r4, #4]
 800b69a:	1ad2      	subs	r2, r2, r3
 800b69c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b69e:	b10b      	cbz	r3, 800b6a4 <__sflush_r+0x44>
 800b6a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b6a2:	1ad2      	subs	r2, r2, r3
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6a8:	6a21      	ldr	r1, [r4, #32]
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	47b0      	blx	r6
 800b6ae:	1c43      	adds	r3, r0, #1
 800b6b0:	89a3      	ldrh	r3, [r4, #12]
 800b6b2:	d106      	bne.n	800b6c2 <__sflush_r+0x62>
 800b6b4:	6829      	ldr	r1, [r5, #0]
 800b6b6:	291d      	cmp	r1, #29
 800b6b8:	d82b      	bhi.n	800b712 <__sflush_r+0xb2>
 800b6ba:	4a2a      	ldr	r2, [pc, #168]	@ (800b764 <__sflush_r+0x104>)
 800b6bc:	410a      	asrs	r2, r1
 800b6be:	07d6      	lsls	r6, r2, #31
 800b6c0:	d427      	bmi.n	800b712 <__sflush_r+0xb2>
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	6062      	str	r2, [r4, #4]
 800b6c6:	04d9      	lsls	r1, r3, #19
 800b6c8:	6922      	ldr	r2, [r4, #16]
 800b6ca:	6022      	str	r2, [r4, #0]
 800b6cc:	d504      	bpl.n	800b6d8 <__sflush_r+0x78>
 800b6ce:	1c42      	adds	r2, r0, #1
 800b6d0:	d101      	bne.n	800b6d6 <__sflush_r+0x76>
 800b6d2:	682b      	ldr	r3, [r5, #0]
 800b6d4:	b903      	cbnz	r3, 800b6d8 <__sflush_r+0x78>
 800b6d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b6d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6da:	602f      	str	r7, [r5, #0]
 800b6dc:	b1b9      	cbz	r1, 800b70e <__sflush_r+0xae>
 800b6de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6e2:	4299      	cmp	r1, r3
 800b6e4:	d002      	beq.n	800b6ec <__sflush_r+0x8c>
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	f7ff fca0 	bl	800b02c <_free_r>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6f0:	e00d      	b.n	800b70e <__sflush_r+0xae>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	47b0      	blx	r6
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	1c50      	adds	r0, r2, #1
 800b6fc:	d1c9      	bne.n	800b692 <__sflush_r+0x32>
 800b6fe:	682b      	ldr	r3, [r5, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d0c6      	beq.n	800b692 <__sflush_r+0x32>
 800b704:	2b1d      	cmp	r3, #29
 800b706:	d001      	beq.n	800b70c <__sflush_r+0xac>
 800b708:	2b16      	cmp	r3, #22
 800b70a:	d11e      	bne.n	800b74a <__sflush_r+0xea>
 800b70c:	602f      	str	r7, [r5, #0]
 800b70e:	2000      	movs	r0, #0
 800b710:	e022      	b.n	800b758 <__sflush_r+0xf8>
 800b712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b716:	b21b      	sxth	r3, r3
 800b718:	e01b      	b.n	800b752 <__sflush_r+0xf2>
 800b71a:	690f      	ldr	r7, [r1, #16]
 800b71c:	2f00      	cmp	r7, #0
 800b71e:	d0f6      	beq.n	800b70e <__sflush_r+0xae>
 800b720:	0793      	lsls	r3, r2, #30
 800b722:	680e      	ldr	r6, [r1, #0]
 800b724:	bf08      	it	eq
 800b726:	694b      	ldreq	r3, [r1, #20]
 800b728:	600f      	str	r7, [r1, #0]
 800b72a:	bf18      	it	ne
 800b72c:	2300      	movne	r3, #0
 800b72e:	eba6 0807 	sub.w	r8, r6, r7
 800b732:	608b      	str	r3, [r1, #8]
 800b734:	f1b8 0f00 	cmp.w	r8, #0
 800b738:	dde9      	ble.n	800b70e <__sflush_r+0xae>
 800b73a:	6a21      	ldr	r1, [r4, #32]
 800b73c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b73e:	4643      	mov	r3, r8
 800b740:	463a      	mov	r2, r7
 800b742:	4628      	mov	r0, r5
 800b744:	47b0      	blx	r6
 800b746:	2800      	cmp	r0, #0
 800b748:	dc08      	bgt.n	800b75c <__sflush_r+0xfc>
 800b74a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b74e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b752:	81a3      	strh	r3, [r4, #12]
 800b754:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b75c:	4407      	add	r7, r0
 800b75e:	eba8 0800 	sub.w	r8, r8, r0
 800b762:	e7e7      	b.n	800b734 <__sflush_r+0xd4>
 800b764:	dfbffffe 	.word	0xdfbffffe

0800b768 <_fflush_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	690b      	ldr	r3, [r1, #16]
 800b76c:	4605      	mov	r5, r0
 800b76e:	460c      	mov	r4, r1
 800b770:	b913      	cbnz	r3, 800b778 <_fflush_r+0x10>
 800b772:	2500      	movs	r5, #0
 800b774:	4628      	mov	r0, r5
 800b776:	bd38      	pop	{r3, r4, r5, pc}
 800b778:	b118      	cbz	r0, 800b782 <_fflush_r+0x1a>
 800b77a:	6a03      	ldr	r3, [r0, #32]
 800b77c:	b90b      	cbnz	r3, 800b782 <_fflush_r+0x1a>
 800b77e:	f7ff fb05 	bl	800ad8c <__sinit>
 800b782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d0f3      	beq.n	800b772 <_fflush_r+0xa>
 800b78a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b78c:	07d0      	lsls	r0, r2, #31
 800b78e:	d404      	bmi.n	800b79a <_fflush_r+0x32>
 800b790:	0599      	lsls	r1, r3, #22
 800b792:	d402      	bmi.n	800b79a <_fflush_r+0x32>
 800b794:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b796:	f7ff fc38 	bl	800b00a <__retarget_lock_acquire_recursive>
 800b79a:	4628      	mov	r0, r5
 800b79c:	4621      	mov	r1, r4
 800b79e:	f7ff ff5f 	bl	800b660 <__sflush_r>
 800b7a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7a4:	07da      	lsls	r2, r3, #31
 800b7a6:	4605      	mov	r5, r0
 800b7a8:	d4e4      	bmi.n	800b774 <_fflush_r+0xc>
 800b7aa:	89a3      	ldrh	r3, [r4, #12]
 800b7ac:	059b      	lsls	r3, r3, #22
 800b7ae:	d4e1      	bmi.n	800b774 <_fflush_r+0xc>
 800b7b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7b2:	f7ff fc2b 	bl	800b00c <__retarget_lock_release_recursive>
 800b7b6:	e7dd      	b.n	800b774 <_fflush_r+0xc>

0800b7b8 <__sread>:
 800b7b8:	b510      	push	{r4, lr}
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c0:	f000 f978 	bl	800bab4 <_read_r>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	bfab      	itete	ge
 800b7c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b7ca:	89a3      	ldrhlt	r3, [r4, #12]
 800b7cc:	181b      	addge	r3, r3, r0
 800b7ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b7d2:	bfac      	ite	ge
 800b7d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b7d6:	81a3      	strhlt	r3, [r4, #12]
 800b7d8:	bd10      	pop	{r4, pc}

0800b7da <__swrite>:
 800b7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7de:	461f      	mov	r7, r3
 800b7e0:	898b      	ldrh	r3, [r1, #12]
 800b7e2:	05db      	lsls	r3, r3, #23
 800b7e4:	4605      	mov	r5, r0
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	4616      	mov	r6, r2
 800b7ea:	d505      	bpl.n	800b7f8 <__swrite+0x1e>
 800b7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7f0:	2302      	movs	r3, #2
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f000 f94c 	bl	800ba90 <_lseek_r>
 800b7f8:	89a3      	ldrh	r3, [r4, #12]
 800b7fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b802:	81a3      	strh	r3, [r4, #12]
 800b804:	4632      	mov	r2, r6
 800b806:	463b      	mov	r3, r7
 800b808:	4628      	mov	r0, r5
 800b80a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b80e:	f000 b963 	b.w	800bad8 <_write_r>

0800b812 <__sseek>:
 800b812:	b510      	push	{r4, lr}
 800b814:	460c      	mov	r4, r1
 800b816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b81a:	f000 f939 	bl	800ba90 <_lseek_r>
 800b81e:	1c43      	adds	r3, r0, #1
 800b820:	89a3      	ldrh	r3, [r4, #12]
 800b822:	bf15      	itete	ne
 800b824:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b826:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b82a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b82e:	81a3      	strheq	r3, [r4, #12]
 800b830:	bf18      	it	ne
 800b832:	81a3      	strhne	r3, [r4, #12]
 800b834:	bd10      	pop	{r4, pc}

0800b836 <__sclose>:
 800b836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b83a:	f000 b8f7 	b.w	800ba2c <_close_r>

0800b83e <__swbuf_r>:
 800b83e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b840:	460e      	mov	r6, r1
 800b842:	4614      	mov	r4, r2
 800b844:	4605      	mov	r5, r0
 800b846:	b118      	cbz	r0, 800b850 <__swbuf_r+0x12>
 800b848:	6a03      	ldr	r3, [r0, #32]
 800b84a:	b90b      	cbnz	r3, 800b850 <__swbuf_r+0x12>
 800b84c:	f7ff fa9e 	bl	800ad8c <__sinit>
 800b850:	69a3      	ldr	r3, [r4, #24]
 800b852:	60a3      	str	r3, [r4, #8]
 800b854:	89a3      	ldrh	r3, [r4, #12]
 800b856:	071a      	lsls	r2, r3, #28
 800b858:	d501      	bpl.n	800b85e <__swbuf_r+0x20>
 800b85a:	6923      	ldr	r3, [r4, #16]
 800b85c:	b943      	cbnz	r3, 800b870 <__swbuf_r+0x32>
 800b85e:	4621      	mov	r1, r4
 800b860:	4628      	mov	r0, r5
 800b862:	f000 f82b 	bl	800b8bc <__swsetup_r>
 800b866:	b118      	cbz	r0, 800b870 <__swbuf_r+0x32>
 800b868:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b86c:	4638      	mov	r0, r7
 800b86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	6922      	ldr	r2, [r4, #16]
 800b874:	1a98      	subs	r0, r3, r2
 800b876:	6963      	ldr	r3, [r4, #20]
 800b878:	b2f6      	uxtb	r6, r6
 800b87a:	4283      	cmp	r3, r0
 800b87c:	4637      	mov	r7, r6
 800b87e:	dc05      	bgt.n	800b88c <__swbuf_r+0x4e>
 800b880:	4621      	mov	r1, r4
 800b882:	4628      	mov	r0, r5
 800b884:	f7ff ff70 	bl	800b768 <_fflush_r>
 800b888:	2800      	cmp	r0, #0
 800b88a:	d1ed      	bne.n	800b868 <__swbuf_r+0x2a>
 800b88c:	68a3      	ldr	r3, [r4, #8]
 800b88e:	3b01      	subs	r3, #1
 800b890:	60a3      	str	r3, [r4, #8]
 800b892:	6823      	ldr	r3, [r4, #0]
 800b894:	1c5a      	adds	r2, r3, #1
 800b896:	6022      	str	r2, [r4, #0]
 800b898:	701e      	strb	r6, [r3, #0]
 800b89a:	6962      	ldr	r2, [r4, #20]
 800b89c:	1c43      	adds	r3, r0, #1
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d004      	beq.n	800b8ac <__swbuf_r+0x6e>
 800b8a2:	89a3      	ldrh	r3, [r4, #12]
 800b8a4:	07db      	lsls	r3, r3, #31
 800b8a6:	d5e1      	bpl.n	800b86c <__swbuf_r+0x2e>
 800b8a8:	2e0a      	cmp	r6, #10
 800b8aa:	d1df      	bne.n	800b86c <__swbuf_r+0x2e>
 800b8ac:	4621      	mov	r1, r4
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f7ff ff5a 	bl	800b768 <_fflush_r>
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	d0d9      	beq.n	800b86c <__swbuf_r+0x2e>
 800b8b8:	e7d6      	b.n	800b868 <__swbuf_r+0x2a>
	...

0800b8bc <__swsetup_r>:
 800b8bc:	b538      	push	{r3, r4, r5, lr}
 800b8be:	4b29      	ldr	r3, [pc, #164]	@ (800b964 <__swsetup_r+0xa8>)
 800b8c0:	4605      	mov	r5, r0
 800b8c2:	6818      	ldr	r0, [r3, #0]
 800b8c4:	460c      	mov	r4, r1
 800b8c6:	b118      	cbz	r0, 800b8d0 <__swsetup_r+0x14>
 800b8c8:	6a03      	ldr	r3, [r0, #32]
 800b8ca:	b90b      	cbnz	r3, 800b8d0 <__swsetup_r+0x14>
 800b8cc:	f7ff fa5e 	bl	800ad8c <__sinit>
 800b8d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8d4:	0719      	lsls	r1, r3, #28
 800b8d6:	d422      	bmi.n	800b91e <__swsetup_r+0x62>
 800b8d8:	06da      	lsls	r2, r3, #27
 800b8da:	d407      	bmi.n	800b8ec <__swsetup_r+0x30>
 800b8dc:	2209      	movs	r2, #9
 800b8de:	602a      	str	r2, [r5, #0]
 800b8e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8e4:	81a3      	strh	r3, [r4, #12]
 800b8e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8ea:	e033      	b.n	800b954 <__swsetup_r+0x98>
 800b8ec:	0758      	lsls	r0, r3, #29
 800b8ee:	d512      	bpl.n	800b916 <__swsetup_r+0x5a>
 800b8f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8f2:	b141      	cbz	r1, 800b906 <__swsetup_r+0x4a>
 800b8f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8f8:	4299      	cmp	r1, r3
 800b8fa:	d002      	beq.n	800b902 <__swsetup_r+0x46>
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	f7ff fb95 	bl	800b02c <_free_r>
 800b902:	2300      	movs	r3, #0
 800b904:	6363      	str	r3, [r4, #52]	@ 0x34
 800b906:	89a3      	ldrh	r3, [r4, #12]
 800b908:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b90c:	81a3      	strh	r3, [r4, #12]
 800b90e:	2300      	movs	r3, #0
 800b910:	6063      	str	r3, [r4, #4]
 800b912:	6923      	ldr	r3, [r4, #16]
 800b914:	6023      	str	r3, [r4, #0]
 800b916:	89a3      	ldrh	r3, [r4, #12]
 800b918:	f043 0308 	orr.w	r3, r3, #8
 800b91c:	81a3      	strh	r3, [r4, #12]
 800b91e:	6923      	ldr	r3, [r4, #16]
 800b920:	b94b      	cbnz	r3, 800b936 <__swsetup_r+0x7a>
 800b922:	89a3      	ldrh	r3, [r4, #12]
 800b924:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b928:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b92c:	d003      	beq.n	800b936 <__swsetup_r+0x7a>
 800b92e:	4621      	mov	r1, r4
 800b930:	4628      	mov	r0, r5
 800b932:	f000 f83f 	bl	800b9b4 <__smakebuf_r>
 800b936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b93a:	f013 0201 	ands.w	r2, r3, #1
 800b93e:	d00a      	beq.n	800b956 <__swsetup_r+0x9a>
 800b940:	2200      	movs	r2, #0
 800b942:	60a2      	str	r2, [r4, #8]
 800b944:	6962      	ldr	r2, [r4, #20]
 800b946:	4252      	negs	r2, r2
 800b948:	61a2      	str	r2, [r4, #24]
 800b94a:	6922      	ldr	r2, [r4, #16]
 800b94c:	b942      	cbnz	r2, 800b960 <__swsetup_r+0xa4>
 800b94e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b952:	d1c5      	bne.n	800b8e0 <__swsetup_r+0x24>
 800b954:	bd38      	pop	{r3, r4, r5, pc}
 800b956:	0799      	lsls	r1, r3, #30
 800b958:	bf58      	it	pl
 800b95a:	6962      	ldrpl	r2, [r4, #20]
 800b95c:	60a2      	str	r2, [r4, #8]
 800b95e:	e7f4      	b.n	800b94a <__swsetup_r+0x8e>
 800b960:	2000      	movs	r0, #0
 800b962:	e7f7      	b.n	800b954 <__swsetup_r+0x98>
 800b964:	2000001c 	.word	0x2000001c

0800b968 <__swhatbuf_r>:
 800b968:	b570      	push	{r4, r5, r6, lr}
 800b96a:	460c      	mov	r4, r1
 800b96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b970:	2900      	cmp	r1, #0
 800b972:	b096      	sub	sp, #88	@ 0x58
 800b974:	4615      	mov	r5, r2
 800b976:	461e      	mov	r6, r3
 800b978:	da0d      	bge.n	800b996 <__swhatbuf_r+0x2e>
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b980:	f04f 0100 	mov.w	r1, #0
 800b984:	bf14      	ite	ne
 800b986:	2340      	movne	r3, #64	@ 0x40
 800b988:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b98c:	2000      	movs	r0, #0
 800b98e:	6031      	str	r1, [r6, #0]
 800b990:	602b      	str	r3, [r5, #0]
 800b992:	b016      	add	sp, #88	@ 0x58
 800b994:	bd70      	pop	{r4, r5, r6, pc}
 800b996:	466a      	mov	r2, sp
 800b998:	f000 f858 	bl	800ba4c <_fstat_r>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	dbec      	blt.n	800b97a <__swhatbuf_r+0x12>
 800b9a0:	9901      	ldr	r1, [sp, #4]
 800b9a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b9a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b9aa:	4259      	negs	r1, r3
 800b9ac:	4159      	adcs	r1, r3
 800b9ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b9b2:	e7eb      	b.n	800b98c <__swhatbuf_r+0x24>

0800b9b4 <__smakebuf_r>:
 800b9b4:	898b      	ldrh	r3, [r1, #12]
 800b9b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9b8:	079d      	lsls	r5, r3, #30
 800b9ba:	4606      	mov	r6, r0
 800b9bc:	460c      	mov	r4, r1
 800b9be:	d507      	bpl.n	800b9d0 <__smakebuf_r+0x1c>
 800b9c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b9c4:	6023      	str	r3, [r4, #0]
 800b9c6:	6123      	str	r3, [r4, #16]
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	6163      	str	r3, [r4, #20]
 800b9cc:	b003      	add	sp, #12
 800b9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9d0:	ab01      	add	r3, sp, #4
 800b9d2:	466a      	mov	r2, sp
 800b9d4:	f7ff ffc8 	bl	800b968 <__swhatbuf_r>
 800b9d8:	9f00      	ldr	r7, [sp, #0]
 800b9da:	4605      	mov	r5, r0
 800b9dc:	4639      	mov	r1, r7
 800b9de:	4630      	mov	r0, r6
 800b9e0:	f7ff f8bc 	bl	800ab5c <_malloc_r>
 800b9e4:	b948      	cbnz	r0, 800b9fa <__smakebuf_r+0x46>
 800b9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9ea:	059a      	lsls	r2, r3, #22
 800b9ec:	d4ee      	bmi.n	800b9cc <__smakebuf_r+0x18>
 800b9ee:	f023 0303 	bic.w	r3, r3, #3
 800b9f2:	f043 0302 	orr.w	r3, r3, #2
 800b9f6:	81a3      	strh	r3, [r4, #12]
 800b9f8:	e7e2      	b.n	800b9c0 <__smakebuf_r+0xc>
 800b9fa:	89a3      	ldrh	r3, [r4, #12]
 800b9fc:	6020      	str	r0, [r4, #0]
 800b9fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba02:	81a3      	strh	r3, [r4, #12]
 800ba04:	9b01      	ldr	r3, [sp, #4]
 800ba06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba0a:	b15b      	cbz	r3, 800ba24 <__smakebuf_r+0x70>
 800ba0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba10:	4630      	mov	r0, r6
 800ba12:	f000 f82d 	bl	800ba70 <_isatty_r>
 800ba16:	b128      	cbz	r0, 800ba24 <__smakebuf_r+0x70>
 800ba18:	89a3      	ldrh	r3, [r4, #12]
 800ba1a:	f023 0303 	bic.w	r3, r3, #3
 800ba1e:	f043 0301 	orr.w	r3, r3, #1
 800ba22:	81a3      	strh	r3, [r4, #12]
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	431d      	orrs	r5, r3
 800ba28:	81a5      	strh	r5, [r4, #12]
 800ba2a:	e7cf      	b.n	800b9cc <__smakebuf_r+0x18>

0800ba2c <_close_r>:
 800ba2c:	b538      	push	{r3, r4, r5, lr}
 800ba2e:	4d06      	ldr	r5, [pc, #24]	@ (800ba48 <_close_r+0x1c>)
 800ba30:	2300      	movs	r3, #0
 800ba32:	4604      	mov	r4, r0
 800ba34:	4608      	mov	r0, r1
 800ba36:	602b      	str	r3, [r5, #0]
 800ba38:	f7f5 fd97 	bl	800156a <_close>
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	d102      	bne.n	800ba46 <_close_r+0x1a>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	b103      	cbz	r3, 800ba46 <_close_r+0x1a>
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	bd38      	pop	{r3, r4, r5, pc}
 800ba48:	20001510 	.word	0x20001510

0800ba4c <_fstat_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4d07      	ldr	r5, [pc, #28]	@ (800ba6c <_fstat_r+0x20>)
 800ba50:	2300      	movs	r3, #0
 800ba52:	4604      	mov	r4, r0
 800ba54:	4608      	mov	r0, r1
 800ba56:	4611      	mov	r1, r2
 800ba58:	602b      	str	r3, [r5, #0]
 800ba5a:	f7f5 fd92 	bl	8001582 <_fstat>
 800ba5e:	1c43      	adds	r3, r0, #1
 800ba60:	d102      	bne.n	800ba68 <_fstat_r+0x1c>
 800ba62:	682b      	ldr	r3, [r5, #0]
 800ba64:	b103      	cbz	r3, 800ba68 <_fstat_r+0x1c>
 800ba66:	6023      	str	r3, [r4, #0]
 800ba68:	bd38      	pop	{r3, r4, r5, pc}
 800ba6a:	bf00      	nop
 800ba6c:	20001510 	.word	0x20001510

0800ba70 <_isatty_r>:
 800ba70:	b538      	push	{r3, r4, r5, lr}
 800ba72:	4d06      	ldr	r5, [pc, #24]	@ (800ba8c <_isatty_r+0x1c>)
 800ba74:	2300      	movs	r3, #0
 800ba76:	4604      	mov	r4, r0
 800ba78:	4608      	mov	r0, r1
 800ba7a:	602b      	str	r3, [r5, #0]
 800ba7c:	f7f5 fd91 	bl	80015a2 <_isatty>
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	d102      	bne.n	800ba8a <_isatty_r+0x1a>
 800ba84:	682b      	ldr	r3, [r5, #0]
 800ba86:	b103      	cbz	r3, 800ba8a <_isatty_r+0x1a>
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
 800ba8c:	20001510 	.word	0x20001510

0800ba90 <_lseek_r>:
 800ba90:	b538      	push	{r3, r4, r5, lr}
 800ba92:	4d07      	ldr	r5, [pc, #28]	@ (800bab0 <_lseek_r+0x20>)
 800ba94:	4604      	mov	r4, r0
 800ba96:	4608      	mov	r0, r1
 800ba98:	4611      	mov	r1, r2
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	602a      	str	r2, [r5, #0]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	f7f5 fd8a 	bl	80015b8 <_lseek>
 800baa4:	1c43      	adds	r3, r0, #1
 800baa6:	d102      	bne.n	800baae <_lseek_r+0x1e>
 800baa8:	682b      	ldr	r3, [r5, #0]
 800baaa:	b103      	cbz	r3, 800baae <_lseek_r+0x1e>
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	bd38      	pop	{r3, r4, r5, pc}
 800bab0:	20001510 	.word	0x20001510

0800bab4 <_read_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4d07      	ldr	r5, [pc, #28]	@ (800bad4 <_read_r+0x20>)
 800bab8:	4604      	mov	r4, r0
 800baba:	4608      	mov	r0, r1
 800babc:	4611      	mov	r1, r2
 800babe:	2200      	movs	r2, #0
 800bac0:	602a      	str	r2, [r5, #0]
 800bac2:	461a      	mov	r2, r3
 800bac4:	f7f5 fd18 	bl	80014f8 <_read>
 800bac8:	1c43      	adds	r3, r0, #1
 800baca:	d102      	bne.n	800bad2 <_read_r+0x1e>
 800bacc:	682b      	ldr	r3, [r5, #0]
 800bace:	b103      	cbz	r3, 800bad2 <_read_r+0x1e>
 800bad0:	6023      	str	r3, [r4, #0]
 800bad2:	bd38      	pop	{r3, r4, r5, pc}
 800bad4:	20001510 	.word	0x20001510

0800bad8 <_write_r>:
 800bad8:	b538      	push	{r3, r4, r5, lr}
 800bada:	4d07      	ldr	r5, [pc, #28]	@ (800baf8 <_write_r+0x20>)
 800badc:	4604      	mov	r4, r0
 800bade:	4608      	mov	r0, r1
 800bae0:	4611      	mov	r1, r2
 800bae2:	2200      	movs	r2, #0
 800bae4:	602a      	str	r2, [r5, #0]
 800bae6:	461a      	mov	r2, r3
 800bae8:	f7f5 fd23 	bl	8001532 <_write>
 800baec:	1c43      	adds	r3, r0, #1
 800baee:	d102      	bne.n	800baf6 <_write_r+0x1e>
 800baf0:	682b      	ldr	r3, [r5, #0]
 800baf2:	b103      	cbz	r3, 800baf6 <_write_r+0x1e>
 800baf4:	6023      	str	r3, [r4, #0]
 800baf6:	bd38      	pop	{r3, r4, r5, pc}
 800baf8:	20001510 	.word	0x20001510

0800bafc <_init>:
 800bafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bafe:	bf00      	nop
 800bb00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb02:	bc08      	pop	{r3}
 800bb04:	469e      	mov	lr, r3
 800bb06:	4770      	bx	lr

0800bb08 <_fini>:
 800bb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb0a:	bf00      	nop
 800bb0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb0e:	bc08      	pop	{r3}
 800bb10:	469e      	mov	lr, r3
 800bb12:	4770      	bx	lr
