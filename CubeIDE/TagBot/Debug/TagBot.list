
TagBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd44  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  0800bf24  0800bf24  0000cf24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1e0  0800c1e0  0000e06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1e0  0800c1e0  0000d1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1e8  0800c1e8  0000e06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1e8  0800c1e8  0000d1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c1ec  0800c1ec  0000d1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800c1f0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f58  2000006c  0800c25c  0000e06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fc4  0800c25c  0000efc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a7f4  00000000  00000000  0000e09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c9a  00000000  00000000  00038890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022e8  00000000  00000000  0003e530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b08  00000000  00000000  00040818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262f0  00000000  00000000  00042320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bdc4  00000000  00000000  00068610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecf04  00000000  00000000  000943d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001812d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ad8  00000000  00000000  0018131c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0018adf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bf0c 	.word	0x0800bf0c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	0800bf0c 	.word	0x0800bf0c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ADXL343_Init>:
#define TAP_LATENT 0xC8 											// taping latency 250ms


//Function to initialize the accelerometer

int ADXL343_Init(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	uint8_t id = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71fb      	strb	r3, [r7, #7]

	// read the id of peripherique and check if is equal 0xE5
	// doesn't work if we switch uint to int
	ADXL343_ReadRegister(ADXL343_REG_DEVID, &id, 1);
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	2201      	movs	r2, #1
 80005be:	4619      	mov	r1, r3
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 f857 	bl	8000674 <ADXL343_ReadRegister>

	if (id != 0xE5) {
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2be5      	cmp	r3, #229	@ 0xe5
 80005ca:	d006      	beq.n	80005da <ADXL343_Init+0x2a>

		printf("ADXL343 no detected ! ID: %02X\r\n", id);
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	4619      	mov	r1, r3
 80005d0:	4815      	ldr	r0, [pc, #84]	@ (8000628 <ADXL343_Init+0x78>)
 80005d2:	f00a fe19 	bl	800b208 <iprintf>
		return 1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	e022      	b.n	8000620 <ADXL343_Init+0x70>
	}
	/* Tasks creations */
	ADXL343_TaskCreate(NULL);
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 f8b8 	bl	8000750 <ADXL343_TaskCreate>

	/* Configuration of registers */

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2110      	movs	r1, #16
 80005e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e8:	f003 fcf0 	bl	8003fcc <HAL_GPIO_WritePin>
	ADXL343_WriteRegister(ADXL343_REG_POWER_CTL, 0x04); 			// init the power control (sleep)
 80005ec:	2104      	movs	r1, #4
 80005ee:	202d      	movs	r0, #45	@ 0x2d
 80005f0:	f000 f86e 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_DATA_FORMAT, 0x08);  			// establish format for data :full resolution and ±2g ->0x08, 16g ->0x0B
 80005f4:	2108      	movs	r1, #8
 80005f6:	2031      	movs	r0, #49	@ 0x31
 80005f8:	f000 f86a 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_BW_RATE, 0X0B);
 80005fc:	210b      	movs	r1, #11
 80005fe:	202c      	movs	r0, #44	@ 0x2c
 8000600:	f000 f866 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_POWER_CTL, 0x08);  			// measurement mode of power control (active)
 8000604:	2108      	movs	r1, #8
 8000606:	202d      	movs	r0, #45	@ 0x2d
 8000608:	f000 f862 	bl	80006d0 <ADXL343_WriteRegister>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); 			// Desactiver NSS
 800060c:	2201      	movs	r2, #1
 800060e:	2110      	movs	r1, #16
 8000610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000614:	f003 fcda 	bl	8003fcc <HAL_GPIO_WritePin>


	printf("Initialization done\r\n");
 8000618:	4804      	ldr	r0, [pc, #16]	@ (800062c <ADXL343_Init+0x7c>)
 800061a:	f00a fe5d 	bl	800b2d8 <puts>
	return 0;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	0800bf24 	.word	0x0800bf24
 800062c:	0800bf48 	.word	0x0800bf48

08000630 <ADXL343_Configure>:

//Function to configure the accelerometer
void ADXL343_Configure(void){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	ADXL343_WriteRegister(ADXL343_REG_THRESH_TAP, TAP_THRESHOLD);  	// Set tap threshold : 2g ou 16g
 8000634:	2120      	movs	r1, #32
 8000636:	201d      	movs	r0, #29
 8000638:	f000 f84a 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_DUR, TAP_DURATION);         	// Set tap duration : 10ms
 800063c:	2110      	movs	r1, #16
 800063e:	2021      	movs	r0, #33	@ 0x21
 8000640:	f000 f846 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_LATENT, TAP_LATENT);
 8000644:	21c8      	movs	r1, #200	@ 0xc8
 8000646:	2022      	movs	r0, #34	@ 0x22
 8000648:	f000 f842 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_TAP_AXES, 0x07);				// Enable axe X Y Z for tap
 800064c:	2107      	movs	r1, #7
 800064e:	202a      	movs	r0, #42	@ 0x2a
 8000650:	f000 f83e 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_INT_ENABLE, 0x40);			// Enable interruption for single tap
 8000654:	2140      	movs	r1, #64	@ 0x40
 8000656:	202e      	movs	r0, #46	@ 0x2e
 8000658:	f000 f83a 	bl	80006d0 <ADXL343_WriteRegister>
	ADXL343_WriteRegister(ADXL343_REG_INT_MAP, 0x40);				// Enable interruption on pin INT1
 800065c:	2140      	movs	r1, #64	@ 0x40
 800065e:	202f      	movs	r0, #47	@ 0x2f
 8000660:	f000 f836 	bl	80006d0 <ADXL343_WriteRegister>
	printf("Configuration done\r\n");
 8000664:	4802      	ldr	r0, [pc, #8]	@ (8000670 <ADXL343_Configure+0x40>)
 8000666:	f00a fe37 	bl	800b2d8 <puts>

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	0800bf60 	.word	0x0800bf60

08000674 <ADXL343_ReadRegister>:

// Function to read from a register
void ADXL343_ReadRegister(uint8_t reg, int8_t* rx_data, size_t length) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	73fb      	strb	r3, [r7, #15]

	uint8_t tx_data = reg | 0x80; // MSB = 1 pour la lecture
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000688:	b2db      	uxtb	r3, r3
 800068a:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); 			// Activer NSS
 800068c:	2200      	movs	r2, #0
 800068e:	2110      	movs	r1, #16
 8000690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000694:	f003 fc9a 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &tx_data, 1, HAL_MAX_DELAY); 			// Envoyer l'adresse
 8000698:	f107 0117 	add.w	r1, r7, #23
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	2201      	movs	r2, #1
 80006a2:	480a      	ldr	r0, [pc, #40]	@ (80006cc <ADXL343_ReadRegister+0x58>)
 80006a4:	f004 feb9 	bl	800541a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)rx_data, 1, HAL_MAX_DELAY);  	// Lire la donnée
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	2201      	movs	r2, #1
 80006ae:	68b9      	ldr	r1, [r7, #8]
 80006b0:	4806      	ldr	r0, [pc, #24]	@ (80006cc <ADXL343_ReadRegister+0x58>)
 80006b2:	f005 f828 	bl	8005706 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   			// Désactiver NSS
 80006b6:	2201      	movs	r2, #1
 80006b8:	2110      	movs	r1, #16
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006be:	f003 fc85 	bl	8003fcc <HAL_GPIO_WritePin>


	//HAL_SPI_TransmitReceive(hspi, pTxData, pRxData, Size, Timeout); // a utiliser quand NSS hardware ioc enable
}
 80006c2:	bf00      	nop
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000c8c 	.word	0x20000c8c

080006d0 <ADXL343_WriteRegister>:


//Function to write in the register
void ADXL343_WriteRegister(uint8_t reg, uint8_t data) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = reg;	//register
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	733b      	strb	r3, [r7, #12]
	buffer[1] = data;	//data
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); 			// enable NSS (PA4)
 80006e8:	2200      	movs	r2, #0
 80006ea:	2110      	movs	r1, #16
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f0:	f003 fc6c 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, buffer, 2, HAL_MAX_DELAY); 			// Send data thanks to SPI
 80006f4:	f107 010c 	add.w	r1, r7, #12
 80006f8:	f04f 33ff 	mov.w	r3, #4294967295
 80006fc:	2202      	movs	r2, #2
 80006fe:	4806      	ldr	r0, [pc, #24]	@ (8000718 <ADXL343_WriteRegister+0x48>)
 8000700:	f004 fe8b 	bl	800541a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); 			// disable NSS (PA4)
 8000704:	2201      	movs	r2, #1
 8000706:	2110      	movs	r1, #16
 8000708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070c:	f003 fc5e 	bl	8003fcc <HAL_GPIO_WritePin>
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000c8c 	.word	0x20000c8c

0800071c <ADXL343_Task>:

	printf("calibration done offset x : %i, y : %i, z :%i\r\n", offsetx, offsety, offsetz);
}

void ADXL343_Task(void*unused )
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		uint8_t tap_status;
		ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1); //Renvoie la valeur du registre int_source
 8000724:	f107 030f 	add.w	r3, r7, #15
 8000728:	2201      	movs	r2, #1
 800072a:	4619      	mov	r1, r3
 800072c:	2030      	movs	r0, #48	@ 0x30
 800072e:	f7ff ffa1 	bl	8000674 <ADXL343_ReadRegister>

		if (tap_status & (1<<6)) {  // Tap for single tap
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0f3      	beq.n	8000724 <ADXL343_Task+0x8>
			printf("Tap detected by Task!\r\n");
 800073c:	4803      	ldr	r0, [pc, #12]	@ (800074c <ADXL343_Task+0x30>)
 800073e:	f00a fdcb 	bl	800b2d8 <puts>
			vTaskDelay(500);
 8000742:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000746:	f008 fec9 	bl	80094dc <vTaskDelay>
	{
 800074a:	e7eb      	b.n	8000724 <ADXL343_Task+0x8>
 800074c:	0800bfc8 	.word	0x0800bfc8

08000750 <ADXL343_TaskCreate>:


}

void ADXL343_TaskCreate(void * unused)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af02      	add	r7, sp, #8
 8000756:	6078      	str	r0, [r7, #4]
	xTaskCreate(ADXL343_Task, "tache ADXL343", 128, NULL, 256, NULL);
 8000758:	2300      	movs	r3, #0
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2300      	movs	r3, #0
 8000764:	2280      	movs	r2, #128	@ 0x80
 8000766:	4904      	ldr	r1, [pc, #16]	@ (8000778 <ADXL343_TaskCreate+0x28>)
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <ADXL343_TaskCreate+0x2c>)
 800076a:	f008 fd67 	bl	800923c <xTaskCreate>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	0800bfe0 	.word	0x0800bfe0
 800077c:	0800071d 	.word	0x0800071d

08000780 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	@ 0x30
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2220      	movs	r2, #32
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f00a fe7d 	bl	800b498 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800079e:	4b3a      	ldr	r3, [pc, #232]	@ (8000888 <MX_ADC1_Init+0x108>)
 80007a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007a6:	4b38      	ldr	r3, [pc, #224]	@ (8000888 <MX_ADC1_Init+0x108>)
 80007a8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ae:	4b36      	ldr	r3, [pc, #216]	@ (8000888 <MX_ADC1_Init+0x108>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b4:	4b34      	ldr	r3, [pc, #208]	@ (8000888 <MX_ADC1_Init+0x108>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007ba:	4b33      	ldr	r3, [pc, #204]	@ (8000888 <MX_ADC1_Init+0x108>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007c0:	4b31      	ldr	r3, [pc, #196]	@ (8000888 <MX_ADC1_Init+0x108>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c6:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <MX_ADC1_Init+0x108>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <MX_ADC1_Init+0x108>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000888 <MX_ADC1_Init+0x108>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80007d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <MX_ADC1_Init+0x108>)
 80007da:	2202      	movs	r2, #2
 80007dc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007de:	4b2a      	ldr	r3, [pc, #168]	@ (8000888 <MX_ADC1_Init+0x108>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80007e6:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <MX_ADC1_Init+0x108>)
 80007e8:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80007ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007ee:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <MX_ADC1_Init+0x108>)
 80007f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007f6:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <MX_ADC1_Init+0x108>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007fe:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <MX_ADC1_Init+0x108>)
 8000800:	2200      	movs	r2, #0
 8000802:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000804:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_ADC1_Init+0x108>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800080c:	481e      	ldr	r0, [pc, #120]	@ (8000888 <MX_ADC1_Init+0x108>)
 800080e:	f001 fee9 	bl	80025e4 <HAL_ADC_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000818:	f000 fdb6 	bl	8001388 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000820:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000824:	4619      	mov	r1, r3
 8000826:	4818      	ldr	r0, [pc, #96]	@ (8000888 <MX_ADC1_Init+0x108>)
 8000828:	f002 fe58 	bl	80034dc <HAL_ADCEx_MultiModeConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000832:	f000 fda9 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_ADC1_Init+0x10c>)
 8000838:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800083a:	2306      	movs	r3, #6
 800083c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800083e:	2304      	movs	r3, #4
 8000840:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000842:	237f      	movs	r3, #127	@ 0x7f
 8000844:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000846:	2304      	movs	r3, #4
 8000848:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	480d      	ldr	r0, [pc, #52]	@ (8000888 <MX_ADC1_Init+0x108>)
 8000854:	f002 f912 	bl	8002a7c <HAL_ADC_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800085e:	f000 fd93 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000862:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <MX_ADC1_Init+0x110>)
 8000864:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000866:	230c      	movs	r3, #12
 8000868:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	@ (8000888 <MX_ADC1_Init+0x108>)
 8000870:	f002 f904 	bl	8002a7c <HAL_ADC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800087a:	f000 fd85 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3730      	adds	r7, #48	@ 0x30
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000088 	.word	0x20000088
 800088c:	14f00020 	.word	0x14f00020
 8000890:	2e300800 	.word	0x2e300800

08000894 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089a:	463b      	mov	r3, r7
 800089c:	2220      	movs	r2, #32
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f00a fdf9 	bl	800b498 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008a6:	4b33      	ldr	r3, [pc, #204]	@ (8000974 <MX_ADC2_Init+0xe0>)
 80008a8:	4a33      	ldr	r2, [pc, #204]	@ (8000978 <MX_ADC2_Init+0xe4>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008ac:	4b31      	ldr	r3, [pc, #196]	@ (8000974 <MX_ADC2_Init+0xe0>)
 80008ae:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000974 <MX_ADC2_Init+0xe0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000974 <MX_ADC2_Init+0xe0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80008c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000974 <MX_ADC2_Init+0xe0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000974 <MX_ADC2_Init+0xe0>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008cc:	4b29      	ldr	r3, [pc, #164]	@ (8000974 <MX_ADC2_Init+0xe0>)
 80008ce:	2204      	movs	r2, #4
 80008d0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008d2:	4b28      	ldr	r3, [pc, #160]	@ (8000974 <MX_ADC2_Init+0xe0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008d8:	4b26      	ldr	r3, [pc, #152]	@ (8000974 <MX_ADC2_Init+0xe0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80008de:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <MX_ADC2_Init+0xe0>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008e4:	4b23      	ldr	r3, [pc, #140]	@ (8000974 <MX_ADC2_Init+0xe0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80008ec:	4b21      	ldr	r3, [pc, #132]	@ (8000974 <MX_ADC2_Init+0xe0>)
 80008ee:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80008f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <MX_ADC2_Init+0xe0>)
 80008f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <MX_ADC2_Init+0xe0>)
 80008fe:	2201      	movs	r2, #1
 8000900:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000904:	4b1b      	ldr	r3, [pc, #108]	@ (8000974 <MX_ADC2_Init+0xe0>)
 8000906:	2200      	movs	r2, #0
 8000908:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800090a:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <MX_ADC2_Init+0xe0>)
 800090c:	2200      	movs	r2, #0
 800090e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000912:	4818      	ldr	r0, [pc, #96]	@ (8000974 <MX_ADC2_Init+0xe0>)
 8000914:	f001 fe66 	bl	80025e4 <HAL_ADC_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800091e:	f000 fd33 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000922:	4b16      	ldr	r3, [pc, #88]	@ (800097c <MX_ADC2_Init+0xe8>)
 8000924:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000926:	2306      	movs	r3, #6
 8000928:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800092a:	2304      	movs	r3, #4
 800092c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800092e:	237f      	movs	r3, #127	@ 0x7f
 8000930:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000932:	2304      	movs	r3, #4
 8000934:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	4619      	mov	r1, r3
 800093e:	480d      	ldr	r0, [pc, #52]	@ (8000974 <MX_ADC2_Init+0xe0>)
 8000940:	f002 f89c 	bl	8002a7c <HAL_ADC_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800094a:	f000 fd1d 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800094e:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <MX_ADC2_Init+0xec>)
 8000950:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000952:	230c      	movs	r3, #12
 8000954:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000956:	463b      	mov	r3, r7
 8000958:	4619      	mov	r1, r3
 800095a:	4806      	ldr	r0, [pc, #24]	@ (8000974 <MX_ADC2_Init+0xe0>)
 800095c:	f002 f88e 	bl	8002a7c <HAL_ADC_ConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8000966:	f000 fd0f 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	3720      	adds	r7, #32
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000f4 	.word	0x200000f4
 8000978:	50000100 	.word	0x50000100
 800097c:	32601000 	.word	0x32601000
 8000980:	3ef08000 	.word	0x3ef08000

08000984 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b09c      	sub	sp, #112	@ 0x70
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800099c:	f107 0318 	add.w	r3, r7, #24
 80009a0:	2244      	movs	r2, #68	@ 0x44
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f00a fd77 	bl	800b498 <memset>
  if(adcHandle->Instance==ADC1)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80009b2:	d16a      	bne.n	8000a8a <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80009ba:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80009be:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	4618      	mov	r0, r3
 80009c6:	f004 fa8d 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009d0:	f000 fcda 	bl	8001388 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80009d4:	4b66      	ldr	r3, [pc, #408]	@ (8000b70 <HAL_ADC_MspInit+0x1ec>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	4a65      	ldr	r2, [pc, #404]	@ (8000b70 <HAL_ADC_MspInit+0x1ec>)
 80009dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009de:	4b64      	ldr	r3, [pc, #400]	@ (8000b70 <HAL_ADC_MspInit+0x1ec>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d10b      	bne.n	80009fe <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009e6:	4b63      	ldr	r3, [pc, #396]	@ (8000b74 <HAL_ADC_MspInit+0x1f0>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	4a62      	ldr	r2, [pc, #392]	@ (8000b74 <HAL_ADC_MspInit+0x1f0>)
 80009ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f2:	4b60      	ldr	r3, [pc, #384]	@ (8000b74 <HAL_ADC_MspInit+0x1f0>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b5d      	ldr	r3, [pc, #372]	@ (8000b74 <HAL_ADC_MspInit+0x1f0>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	4a5c      	ldr	r2, [pc, #368]	@ (8000b74 <HAL_ADC_MspInit+0x1f0>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0a:	4b5a      	ldr	r3, [pc, #360]	@ (8000b74 <HAL_ADC_MspInit+0x1f0>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CAPTEUR_DIST_N_Pin|CAPTEUR_DIST_W_Pin;
 8000a16:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4853      	ldr	r0, [pc, #332]	@ (8000b78 <HAL_ADC_MspInit+0x1f4>)
 8000a2c:	f003 f94c 	bl	8003cc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8000a30:	4b52      	ldr	r3, [pc, #328]	@ (8000b7c <HAL_ADC_MspInit+0x1f8>)
 8000a32:	4a53      	ldr	r2, [pc, #332]	@ (8000b80 <HAL_ADC_MspInit+0x1fc>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b51      	ldr	r3, [pc, #324]	@ (8000b7c <HAL_ADC_MspInit+0x1f8>)
 8000a38:	2205      	movs	r2, #5
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4f      	ldr	r3, [pc, #316]	@ (8000b7c <HAL_ADC_MspInit+0x1f8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4e      	ldr	r3, [pc, #312]	@ (8000b7c <HAL_ADC_MspInit+0x1f8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b4c      	ldr	r3, [pc, #304]	@ (8000b7c <HAL_ADC_MspInit+0x1f8>)
 8000a4a:	2280      	movs	r2, #128	@ 0x80
 8000a4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a4e:	4b4b      	ldr	r3, [pc, #300]	@ (8000b7c <HAL_ADC_MspInit+0x1f8>)
 8000a50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a56:	4b49      	ldr	r3, [pc, #292]	@ (8000b7c <HAL_ADC_MspInit+0x1f8>)
 8000a58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a5e:	4b47      	ldr	r3, [pc, #284]	@ (8000b7c <HAL_ADC_MspInit+0x1f8>)
 8000a60:	2220      	movs	r2, #32
 8000a62:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000a64:	4b45      	ldr	r3, [pc, #276]	@ (8000b7c <HAL_ADC_MspInit+0x1f8>)
 8000a66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a6c:	4843      	ldr	r0, [pc, #268]	@ (8000b7c <HAL_ADC_MspInit+0x1f8>)
 8000a6e:	f002 feb9 	bl	80037e4 <HAL_DMA_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000a78:	f000 fc86 	bl	8001388 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a3f      	ldr	r2, [pc, #252]	@ (8000b7c <HAL_ADC_MspInit+0x1f8>)
 8000a80:	655a      	str	r2, [r3, #84]	@ 0x54
 8000a82:	4a3e      	ldr	r2, [pc, #248]	@ (8000b7c <HAL_ADC_MspInit+0x1f8>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000a88:	e06e      	b.n	8000b68 <HAL_ADC_MspInit+0x1e4>
  else if(adcHandle->Instance==ADC2)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b84 <HAL_ADC_MspInit+0x200>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d169      	bne.n	8000b68 <HAL_ADC_MspInit+0x1e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a98:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a9a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a9e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa0:	f107 0318 	add.w	r3, r7, #24
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f004 fa1d 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 8000ab0:	f000 fc6a 	bl	8001388 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8000b70 <HAL_ADC_MspInit+0x1ec>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	4a2d      	ldr	r2, [pc, #180]	@ (8000b70 <HAL_ADC_MspInit+0x1ec>)
 8000abc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000abe:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <HAL_ADC_MspInit+0x1ec>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d10b      	bne.n	8000ade <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b74 <HAL_ADC_MspInit+0x1f0>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	4a2a      	ldr	r2, [pc, #168]	@ (8000b74 <HAL_ADC_MspInit+0x1f0>)
 8000acc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad2:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <HAL_ADC_MspInit+0x1f0>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <HAL_ADC_MspInit+0x1f0>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	4a24      	ldr	r2, [pc, #144]	@ (8000b74 <HAL_ADC_MspInit+0x1f0>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aea:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <HAL_ADC_MspInit+0x1f0>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CAPTEUR_DIST_S_Pin|CAPTEUR_DIST_E_Pin;
 8000af6:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000afa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afc:	2303      	movs	r3, #3
 8000afe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b08:	4619      	mov	r1, r3
 8000b0a:	481b      	ldr	r0, [pc, #108]	@ (8000b78 <HAL_ADC_MspInit+0x1f4>)
 8000b0c:	f003 f8dc 	bl	8003cc8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel1;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <HAL_ADC_MspInit+0x204>)
 8000b12:	4a1e      	ldr	r2, [pc, #120]	@ (8000b8c <HAL_ADC_MspInit+0x208>)
 8000b14:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	@ (8000b88 <HAL_ADC_MspInit+0x204>)
 8000b18:	2224      	movs	r2, #36	@ 0x24
 8000b1a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <HAL_ADC_MspInit+0x204>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b22:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <HAL_ADC_MspInit+0x204>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000b28:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <HAL_ADC_MspInit+0x204>)
 8000b2a:	2280      	movs	r2, #128	@ 0x80
 8000b2c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b2e:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <HAL_ADC_MspInit+0x204>)
 8000b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b34:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <HAL_ADC_MspInit+0x204>)
 8000b38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b3c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <HAL_ADC_MspInit+0x204>)
 8000b40:	2220      	movs	r2, #32
 8000b42:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8000b44:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <HAL_ADC_MspInit+0x204>)
 8000b46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000b4c:	480e      	ldr	r0, [pc, #56]	@ (8000b88 <HAL_ADC_MspInit+0x204>)
 8000b4e:	f002 fe49 	bl	80037e4 <HAL_DMA_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <HAL_ADC_MspInit+0x1d8>
      Error_Handler();
 8000b58:	f000 fc16 	bl	8001388 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <HAL_ADC_MspInit+0x204>)
 8000b60:	655a      	str	r2, [r3, #84]	@ 0x54
 8000b62:	4a09      	ldr	r2, [pc, #36]	@ (8000b88 <HAL_ADC_MspInit+0x204>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000b68:	bf00      	nop
 8000b6a:	3770      	adds	r7, #112	@ 0x70
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000220 	.word	0x20000220
 8000b74:	40021000 	.word	0x40021000
 8000b78:	48000400 	.word	0x48000400
 8000b7c:	20000160 	.word	0x20000160
 8000b80:	4002001c 	.word	0x4002001c
 8000b84:	50000100 	.word	0x50000100
 8000b88:	200001c0 	.word	0x200001c0
 8000b8c:	40020008 	.word	0x40020008

08000b90 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4a07      	ldr	r2, [pc, #28]	@ (8000bbc <vApplicationGetIdleTaskMemory+0x2c>)
 8000ba0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	4a06      	ldr	r2, [pc, #24]	@ (8000bc0 <vApplicationGetIdleTaskMemory+0x30>)
 8000ba6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2280      	movs	r2, #128	@ 0x80
 8000bac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bae:	bf00      	nop
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	200004c8 	.word	0x200004c8
 8000bc0:	20000568 	.word	0x20000568

08000bc4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4a07      	ldr	r2, [pc, #28]	@ (8000bf0 <vApplicationGetTimerTaskMemory+0x2c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	4a06      	ldr	r2, [pc, #24]	@ (8000bf4 <vApplicationGetTimerTaskMemory+0x30>)
 8000bda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000be2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	20000768 	.word	0x20000768
 8000bf4:	20000808 	.word	0x20000808

08000bf8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000bf8:	b5b0      	push	{r4, r5, r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <MX_FREERTOS_Init+0x30>)
 8000c00:	1d3c      	adds	r4, r7, #4
 8000c02:	461d      	mov	r5, r3
 8000c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f007 fca6 	bl	8008566 <osThreadCreate>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4a03      	ldr	r2, [pc, #12]	@ (8000c2c <MX_FREERTOS_Init+0x34>)
 8000c1e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bdb0      	pop	{r4, r5, r7, pc}
 8000c28:	0800bffc 	.word	0x0800bffc
 8000c2c:	20000224 	.word	0x20000224

08000c30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f007 fce0 	bl	80085fe <osDelay>
 8000c3e:	e7fb      	b.n	8000c38 <StartDefaultTask+0x8>

08000c40 <distSensor_initADC_DMA>:
uint32_t value_sud; 				// Valeur de sud (ADC2 Channel 12)


// function to init ADC1 and ADC2 (DMA)
void distSensor_initADC_DMA(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0

	HAL_ADC_Start_DMA(&hadc1, adc1_dma_buffer, ADC1_CHANNEL_COUNT);
 8000c44:	2202      	movs	r2, #2
 8000c46:	4907      	ldr	r1, [pc, #28]	@ (8000c64 <distSensor_initADC_DMA+0x24>)
 8000c48:	4807      	ldr	r0, [pc, #28]	@ (8000c68 <distSensor_initADC_DMA+0x28>)
 8000c4a:	f001 fe4f 	bl	80028ec <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, adc2_dma_buffer, ADC2_CHANNEL_COUNT);
 8000c4e:	2202      	movs	r2, #2
 8000c50:	4906      	ldr	r1, [pc, #24]	@ (8000c6c <distSensor_initADC_DMA+0x2c>)
 8000c52:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <distSensor_initADC_DMA+0x30>)
 8000c54:	f001 fe4a 	bl	80028ec <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim6);
 8000c58:	4806      	ldr	r0, [pc, #24]	@ (8000c74 <distSensor_initADC_DMA+0x34>)
 8000c5a:	f005 fabf 	bl	80061dc <HAL_TIM_Base_Start>


}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000c28 	.word	0x20000c28
 8000c68:	20000088 	.word	0x20000088
 8000c6c:	20000c30 	.word	0x20000c30
 8000c70:	200000f4 	.word	0x200000f4
 8000c74:	20000e24 	.word	0x20000e24

08000c78 <distSensor_Init_Sensor>:

void distSensor_Init_Sensor(DistSensor_handle_t * sensor,DistSensor_Position_t sensor_position)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	70fb      	strb	r3, [r7, #3]
	sensor->adc_ready = DistSensor_ADC_STATUS_NO_DATA;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	715a      	strb	r2, [r3, #5]
	sensor->sensor_position = sensor_position;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	78fa      	ldrb	r2, [r7, #3]
 8000c8e:	711a      	strb	r2, [r3, #4]
	sensor->sensor_detection_status = DistSensor_DETECT_FLOOR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
	sensor->sensor_value = 0;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	805a      	strh	r2, [r3, #2]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <distSensor_ReadADC_DMA>:
	return adc_value;   // Return the ADC value
}

// Function to read value on ADC1 and ADC2 (DMA)
HAL_StatusTypeDef distSensor_ReadADC_DMA(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

	if (Sens_W.adc_ready == DistSensor_ADC_STATUS_READY)
 8000cac:	4b34      	ldr	r3, [pc, #208]	@ (8000d80 <distSensor_ReadADC_DMA+0xd8>)
 8000cae:	795b      	ldrb	r3, [r3, #5]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d113      	bne.n	8000cde <distSensor_ReadADC_DMA+0x36>
	{
		Sens_W.sensor_value = adc1_dma_buffer[0];    		// Valeur de west (ADC1 Channel 5)
 8000cb6:	4b33      	ldr	r3, [pc, #204]	@ (8000d84 <distSensor_ReadADC_DMA+0xdc>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	4b30      	ldr	r3, [pc, #192]	@ (8000d80 <distSensor_ReadADC_DMA+0xd8>)
 8000cbe:	805a      	strh	r2, [r3, #2]
		if(Sens_W.sensor_value > VOID_TRESHOLD)
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d80 <distSensor_ReadADC_DMA+0xd8>)
 8000cc2:	885b      	ldrh	r3, [r3, #2]
 8000cc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000cc8:	d903      	bls.n	8000cd2 <distSensor_ReadADC_DMA+0x2a>
		{
			Sens_W.sensor_detection_status = DistSensor_DETECT_FLOOR;
 8000cca:	4b2d      	ldr	r3, [pc, #180]	@ (8000d80 <distSensor_ReadADC_DMA+0xd8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
 8000cd0:	e002      	b.n	8000cd8 <distSensor_ReadADC_DMA+0x30>
		}
		else
		{
			Sens_W.sensor_detection_status = DistSensor_DETECT_VOID;
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8000d80 <distSensor_ReadADC_DMA+0xd8>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
		}
		Sens_W.adc_ready = DistSensor_ADC_STATUS_NO_DATA;
 8000cd8:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <distSensor_ReadADC_DMA+0xd8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	715a      	strb	r2, [r3, #5]
	}

	if (Sens_N.adc_ready == DistSensor_ADC_STATUS_READY)
 8000cde:	4b2a      	ldr	r3, [pc, #168]	@ (8000d88 <distSensor_ReadADC_DMA+0xe0>)
 8000ce0:	795b      	ldrb	r3, [r3, #5]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d113      	bne.n	8000d10 <distSensor_ReadADC_DMA+0x68>
	{
		Sens_N.sensor_value = adc1_dma_buffer[1];   			// Valeur de nord (ADC1 Channel 11)
 8000ce8:	4b26      	ldr	r3, [pc, #152]	@ (8000d84 <distSensor_ReadADC_DMA+0xdc>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	4b26      	ldr	r3, [pc, #152]	@ (8000d88 <distSensor_ReadADC_DMA+0xe0>)
 8000cf0:	805a      	strh	r2, [r3, #2]
		if(Sens_N.sensor_value > VOID_TRESHOLD)
 8000cf2:	4b25      	ldr	r3, [pc, #148]	@ (8000d88 <distSensor_ReadADC_DMA+0xe0>)
 8000cf4:	885b      	ldrh	r3, [r3, #2]
 8000cf6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000cfa:	d903      	bls.n	8000d04 <distSensor_ReadADC_DMA+0x5c>
		{
			Sens_N.sensor_detection_status = DistSensor_DETECT_FLOOR;
 8000cfc:	4b22      	ldr	r3, [pc, #136]	@ (8000d88 <distSensor_ReadADC_DMA+0xe0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e002      	b.n	8000d0a <distSensor_ReadADC_DMA+0x62>
		}
		else
		{
			Sens_N.sensor_detection_status = DistSensor_DETECT_VOID;
 8000d04:	4b20      	ldr	r3, [pc, #128]	@ (8000d88 <distSensor_ReadADC_DMA+0xe0>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
		}
		Sens_N.adc_ready = DistSensor_ADC_STATUS_NO_DATA;
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <distSensor_ReadADC_DMA+0xe0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	715a      	strb	r2, [r3, #5]
	}



	if (Sens_S.adc_ready == DistSensor_ADC_STATUS_READY)
 8000d10:	4b1e      	ldr	r3, [pc, #120]	@ (8000d8c <distSensor_ReadADC_DMA+0xe4>)
 8000d12:	795b      	ldrb	r3, [r3, #5]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d113      	bne.n	8000d42 <distSensor_ReadADC_DMA+0x9a>
	{
		Sens_S.sensor_value = adc2_dma_buffer[0];   			// Valeur de sud (ADC2 Channel 12)
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <distSensor_ReadADC_DMA+0xe8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <distSensor_ReadADC_DMA+0xe4>)
 8000d22:	805a      	strh	r2, [r3, #2]
		if(Sens_S.sensor_value > VOID_TRESHOLD)
 8000d24:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <distSensor_ReadADC_DMA+0xe4>)
 8000d26:	885b      	ldrh	r3, [r3, #2]
 8000d28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d2c:	d903      	bls.n	8000d36 <distSensor_ReadADC_DMA+0x8e>
		{
			Sens_S.sensor_detection_status = DistSensor_DETECT_FLOOR;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <distSensor_ReadADC_DMA+0xe4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
 8000d34:	e002      	b.n	8000d3c <distSensor_ReadADC_DMA+0x94>
		}
		else
		{
			Sens_S.sensor_detection_status = DistSensor_DETECT_VOID;
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <distSensor_ReadADC_DMA+0xe4>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
		}
		Sens_S.adc_ready = DistSensor_ADC_STATUS_NO_DATA;
 8000d3c:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <distSensor_ReadADC_DMA+0xe4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	715a      	strb	r2, [r3, #5]
	}

	if (Sens_E.adc_ready == DistSensor_ADC_STATUS_READY)
 8000d42:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <distSensor_ReadADC_DMA+0xec>)
 8000d44:	795b      	ldrb	r3, [r3, #5]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d113      	bne.n	8000d74 <distSensor_ReadADC_DMA+0xcc>
	{
		Sens_E.sensor_value = adc2_dma_buffer[1];   			// Valeur de est (ADC2 Channel 15)
 8000d4c:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <distSensor_ReadADC_DMA+0xe8>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <distSensor_ReadADC_DMA+0xec>)
 8000d54:	805a      	strh	r2, [r3, #2]
		if(Sens_E.sensor_value > VOID_TRESHOLD)
 8000d56:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <distSensor_ReadADC_DMA+0xec>)
 8000d58:	885b      	ldrh	r3, [r3, #2]
 8000d5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d5e:	d903      	bls.n	8000d68 <distSensor_ReadADC_DMA+0xc0>
		{
			Sens_E.sensor_detection_status = DistSensor_DETECT_FLOOR;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <distSensor_ReadADC_DMA+0xec>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	e002      	b.n	8000d6e <distSensor_ReadADC_DMA+0xc6>
		}
		else
		{
			Sens_E.sensor_detection_status = DistSensor_DETECT_VOID;
 8000d68:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <distSensor_ReadADC_DMA+0xec>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
		}
		Sens_E.adc_ready = DistSensor_ADC_STATUS_NO_DATA;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <distSensor_ReadADC_DMA+0xec>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	715a      	strb	r2, [r3, #5]
	}
	return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	20000c18 	.word	0x20000c18
 8000d84:	20000c28 	.word	0x20000c28
 8000d88:	20000c08 	.word	0x20000c08
 8000d8c:	20000c10 	.word	0x20000c10
 8000d90:	20000c30 	.word	0x20000c30
 8000d94:	20000c20 	.word	0x20000c20

08000d98 <HAL_ADC_ConvCpltCallback>:



//Call Back for ADC1 and ADC2
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000da8:	d105      	bne.n	8000db6 <HAL_ADC_ConvCpltCallback+0x1e>
	{
		Sens_W.adc_ready = DistSensor_ADC_STATUS_READY;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <HAL_ADC_ConvCpltCallback+0x40>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	715a      	strb	r2, [r3, #5]
		Sens_N.adc_ready = DistSensor_ADC_STATUS_READY;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <HAL_ADC_ConvCpltCallback+0x44>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	715a      	strb	r2, [r3, #5]
	}

	if (hadc->Instance == ADC2)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a09      	ldr	r2, [pc, #36]	@ (8000de0 <HAL_ADC_ConvCpltCallback+0x48>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d105      	bne.n	8000dcc <HAL_ADC_ConvCpltCallback+0x34>
	{
		Sens_S.adc_ready = DistSensor_ADC_STATUS_READY;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	715a      	strb	r2, [r3, #5]
		Sens_E.adc_ready = DistSensor_ADC_STATUS_READY;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <HAL_ADC_ConvCpltCallback+0x50>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	715a      	strb	r2, [r3, #5]
	}
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	20000c18 	.word	0x20000c18
 8000ddc:	20000c08 	.word	0x20000c08
 8000de0:	50000100 	.word	0x50000100
 8000de4:	20000c10 	.word	0x20000c10
 8000de8:	20000c20 	.word	0x20000c20

08000dec <distSensor_Task>:



//
void distSensor_Task(void *unused)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	distSensor_Init_Sensor(&Sens_N, DistSensor_POSITION_NORD);
 8000df4:	2100      	movs	r1, #0
 8000df6:	4819      	ldr	r0, [pc, #100]	@ (8000e5c <distSensor_Task+0x70>)
 8000df8:	f7ff ff3e 	bl	8000c78 <distSensor_Init_Sensor>
	distSensor_Init_Sensor(&Sens_W, DistSensor_POSITION_WEST);
 8000dfc:	2103      	movs	r1, #3
 8000dfe:	4818      	ldr	r0, [pc, #96]	@ (8000e60 <distSensor_Task+0x74>)
 8000e00:	f7ff ff3a 	bl	8000c78 <distSensor_Init_Sensor>
	distSensor_Init_Sensor(&Sens_S, DistSensor_POSITION_SUD);
 8000e04:	2102      	movs	r1, #2
 8000e06:	4817      	ldr	r0, [pc, #92]	@ (8000e64 <distSensor_Task+0x78>)
 8000e08:	f7ff ff36 	bl	8000c78 <distSensor_Init_Sensor>
	distSensor_Init_Sensor(&Sens_E, DistSensor_POSITION_EAST);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4816      	ldr	r0, [pc, #88]	@ (8000e68 <distSensor_Task+0x7c>)
 8000e10:	f7ff ff32 	bl	8000c78 <distSensor_Init_Sensor>
	distSensor_initADC_DMA();
 8000e14:	f7ff ff14 	bl	8000c40 <distSensor_initADC_DMA>

	for (;;)
	{
		distSensor_ReadADC_DMA();
 8000e18:	f7ff ff46 	bl	8000ca8 <distSensor_ReadADC_DMA>

		if(Sens_N.sensor_detection_status == DistSensor_DETECT_VOID)
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <distSensor_Task+0x70>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d102      	bne.n	8000e2a <distSensor_Task+0x3e>
		{
			printf("North detect void\r\n");
 8000e24:	4811      	ldr	r0, [pc, #68]	@ (8000e6c <distSensor_Task+0x80>)
 8000e26:	f00a fa57 	bl	800b2d8 <puts>
		}
		if(Sens_W.sensor_detection_status == DistSensor_DETECT_VOID)
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <distSensor_Task+0x74>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d102      	bne.n	8000e38 <distSensor_Task+0x4c>
		{
			printf("West detect void\r\n");
 8000e32:	480f      	ldr	r0, [pc, #60]	@ (8000e70 <distSensor_Task+0x84>)
 8000e34:	f00a fa50 	bl	800b2d8 <puts>
		}
		if(Sens_S.sensor_detection_status == DistSensor_DETECT_VOID)
 8000e38:	4b0a      	ldr	r3, [pc, #40]	@ (8000e64 <distSensor_Task+0x78>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d102      	bne.n	8000e46 <distSensor_Task+0x5a>
		{
			printf("Sud detect void\r\n");
 8000e40:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <distSensor_Task+0x88>)
 8000e42:	f00a fa49 	bl	800b2d8 <puts>
		}
		if(Sens_E.sensor_detection_status == DistSensor_DETECT_VOID)
 8000e46:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <distSensor_Task+0x7c>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d102      	bne.n	8000e54 <distSensor_Task+0x68>
		{
			printf("East detect void\r\n");
 8000e4e:	480a      	ldr	r0, [pc, #40]	@ (8000e78 <distSensor_Task+0x8c>)
 8000e50:	f00a fa42 	bl	800b2d8 <puts>
		}

		vTaskDelay(100);
 8000e54:	2064      	movs	r0, #100	@ 0x64
 8000e56:	f008 fb41 	bl	80094dc <vTaskDelay>
		distSensor_ReadADC_DMA();
 8000e5a:	e7dd      	b.n	8000e18 <distSensor_Task+0x2c>
 8000e5c:	20000c08 	.word	0x20000c08
 8000e60:	20000c18 	.word	0x20000c18
 8000e64:	20000c10 	.word	0x20000c10
 8000e68:	20000c20 	.word	0x20000c20
 8000e6c:	0800c018 	.word	0x0800c018
 8000e70:	0800c02c 	.word	0x0800c02c
 8000e74:	0800c040 	.word	0x0800c040
 8000e78:	0800c054 	.word	0x0800c054

08000e7c <distSensor_TaskCreate>:

	}
}

void distSensor_TaskCreate(void*unused)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af02      	add	r7, sp, #8
 8000e82:	6078      	str	r0, [r7, #4]
	xTaskCreate(distSensor_Task, "distSensor_task", 128, NULL, 23, NULL);
 8000e84:	2300      	movs	r3, #0
 8000e86:	9301      	str	r3, [sp, #4]
 8000e88:	2317      	movs	r3, #23
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	2280      	movs	r2, #128	@ 0x80
 8000e90:	4903      	ldr	r1, [pc, #12]	@ (8000ea0 <distSensor_TaskCreate+0x24>)
 8000e92:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <distSensor_TaskCreate+0x28>)
 8000e94:	f008 f9d2 	bl	800923c <xTaskCreate>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	0800c068 	.word	0x0800c068
 8000ea4:	08000ded 	.word	0x08000ded

08000ea8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000eae:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <MX_DMA_Init+0x60>)
 8000eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eb2:	4a15      	ldr	r2, [pc, #84]	@ (8000f08 <MX_DMA_Init+0x60>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000eba:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <MX_DMA_Init+0x60>)
 8000ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <MX_DMA_Init+0x60>)
 8000ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eca:	4a0f      	ldr	r2, [pc, #60]	@ (8000f08 <MX_DMA_Init+0x60>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <MX_DMA_Init+0x60>)
 8000ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2105      	movs	r1, #5
 8000ee2:	200b      	movs	r0, #11
 8000ee4:	f002 fc56 	bl	8003794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ee8:	200b      	movs	r0, #11
 8000eea:	f002 fc6d 	bl	80037c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2105      	movs	r1, #5
 8000ef2:	200c      	movs	r0, #12
 8000ef4:	f002 fc4e 	bl	8003794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ef8:	200c      	movs	r0, #12
 8000efa:	f002 fc65 	bl	80037c8 <HAL_NVIC_EnableIRQ>

}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000

08000f0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	@ 0x28
 8000f10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	4b52      	ldr	r3, [pc, #328]	@ (800106c <MX_GPIO_Init+0x160>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f26:	4a51      	ldr	r2, [pc, #324]	@ (800106c <MX_GPIO_Init+0x160>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2e:	4b4f      	ldr	r3, [pc, #316]	@ (800106c <MX_GPIO_Init+0x160>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f3a:	4b4c      	ldr	r3, [pc, #304]	@ (800106c <MX_GPIO_Init+0x160>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3e:	4a4b      	ldr	r2, [pc, #300]	@ (800106c <MX_GPIO_Init+0x160>)
 8000f40:	f043 0320 	orr.w	r3, r3, #32
 8000f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f46:	4b49      	ldr	r3, [pc, #292]	@ (800106c <MX_GPIO_Init+0x160>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4a:	f003 0320 	and.w	r3, r3, #32
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b46      	ldr	r3, [pc, #280]	@ (800106c <MX_GPIO_Init+0x160>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f56:	4a45      	ldr	r2, [pc, #276]	@ (800106c <MX_GPIO_Init+0x160>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5e:	4b43      	ldr	r3, [pc, #268]	@ (800106c <MX_GPIO_Init+0x160>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4b40      	ldr	r3, [pc, #256]	@ (800106c <MX_GPIO_Init+0x160>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6e:	4a3f      	ldr	r2, [pc, #252]	@ (800106c <MX_GPIO_Init+0x160>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f76:	4b3d      	ldr	r3, [pc, #244]	@ (800106c <MX_GPIO_Init+0x160>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CHAT_Pin|LED_SOURIS_Pin|LIDAR_M_EN_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f246 0110 	movw	r1, #24592	@ 0x6010
 8000f88:	4839      	ldr	r0, [pc, #228]	@ (8001070 <MX_GPIO_Init+0x164>)
 8000f8a:	f003 f81f 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_1_Pin|USER_LED_2_Pin|Accelerometer_NSS_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2113      	movs	r1, #19
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f96:	f003 f819 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIDAR_DEV_EN_GPIO_Port, LIDAR_DEV_EN_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	4835      	ldr	r0, [pc, #212]	@ (8001074 <MX_GPIO_Init+0x168>)
 8000fa0:	f003 f814 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_CHAT_Pin LED_SOURIS_Pin LIDAR_M_EN_Pin */
  GPIO_InitStruct.Pin = LED_CHAT_Pin|LED_SOURIS_Pin|LIDAR_M_EN_Pin;
 8000fa4:	f246 0310 	movw	r3, #24592	@ 0x6010
 8000fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	482c      	ldr	r0, [pc, #176]	@ (8001070 <MX_GPIO_Init+0x164>)
 8000fbe:	f002 fe83 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BNT_CAT_MOUSE_Pin */
  GPIO_InitStruct.Pin = BNT_CAT_MOUSE_Pin;
 8000fc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fc8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BNT_CAT_MOUSE_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4825      	ldr	r0, [pc, #148]	@ (8001070 <MX_GPIO_Init+0x164>)
 8000fda:	f002 fe75 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_1_Pin USER_LED_2_Pin Accelerometer_NSS_Pin */
  GPIO_InitStruct.Pin = USER_LED_1_Pin|USER_LED_2_Pin|Accelerometer_NSS_Pin;
 8000fde:	2313      	movs	r3, #19
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff8:	f002 fe66 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Accelerometer_INT1_Pin Accelerometer_INT2_Pin */
  GPIO_InitStruct.Pin = Accelerometer_INT1_Pin|Accelerometer_INT2_Pin;
 8000ffc:	230c      	movs	r3, #12
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001000:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001014:	f002 fe58 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIDAR_DEV_EN_Pin */
  GPIO_InitStruct.Pin = LIDAR_DEV_EN_Pin;
 8001018:	2301      	movs	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LIDAR_DEV_EN_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	4811      	ldr	r0, [pc, #68]	@ (8001074 <MX_GPIO_Init+0x168>)
 8001030:	f002 fe4a 	bl	8003cc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2105      	movs	r1, #5
 8001038:	2008      	movs	r0, #8
 800103a:	f002 fbab 	bl	8003794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800103e:	2008      	movs	r0, #8
 8001040:	f002 fbc2 	bl	80037c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2105      	movs	r1, #5
 8001048:	2009      	movs	r0, #9
 800104a:	f002 fba3 	bl	8003794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800104e:	2009      	movs	r0, #9
 8001050:	f002 fbba 	bl	80037c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2105      	movs	r1, #5
 8001058:	2028      	movs	r0, #40	@ 0x28
 800105a:	f002 fb9b 	bl	8003794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800105e:	2028      	movs	r0, #40	@ 0x28
 8001060:	f002 fbb2 	bl	80037c8 <HAL_NVIC_EnableIRQ>

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	@ 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40021000 	.word	0x40021000
 8001070:	48000800 	.word	0x48000800
 8001074:	48000400 	.word	0x48000400

08001078 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800107c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ec <MX_I2C1_Init+0x74>)
 800107e:	4a1c      	ldr	r2, [pc, #112]	@ (80010f0 <MX_I2C1_Init+0x78>)
 8001080:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 8001082:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <MX_I2C1_Init+0x74>)
 8001084:	4a1b      	ldr	r2, [pc, #108]	@ (80010f4 <MX_I2C1_Init+0x7c>)
 8001086:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001088:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <MX_I2C1_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108e:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <MX_I2C1_Init+0x74>)
 8001090:	2201      	movs	r2, #1
 8001092:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001094:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <MX_I2C1_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800109a:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <MX_I2C1_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <MX_I2C1_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <MX_I2C1_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <MX_I2C1_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b2:	480e      	ldr	r0, [pc, #56]	@ (80010ec <MX_I2C1_Init+0x74>)
 80010b4:	f002 ffd4 	bl	8004060 <HAL_I2C_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010be:	f000 f963 	bl	8001388 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010c2:	2100      	movs	r1, #0
 80010c4:	4809      	ldr	r0, [pc, #36]	@ (80010ec <MX_I2C1_Init+0x74>)
 80010c6:	f003 f866 	bl	8004196 <HAL_I2CEx_ConfigAnalogFilter>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010d0:	f000 f95a 	bl	8001388 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010d4:	2100      	movs	r1, #0
 80010d6:	4805      	ldr	r0, [pc, #20]	@ (80010ec <MX_I2C1_Init+0x74>)
 80010d8:	f003 f8a8 	bl	800422c <HAL_I2CEx_ConfigDigitalFilter>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010e2:	f000 f951 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000c38 	.word	0x20000c38
 80010f0:	40005400 	.word	0x40005400
 80010f4:	40621236 	.word	0x40621236

080010f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b09c      	sub	sp, #112	@ 0x70
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	f107 0318 	add.w	r3, r7, #24
 8001114:	2244      	movs	r2, #68	@ 0x44
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f00a f9bd 	bl	800b498 <memset>
  if(i2cHandle->Instance==I2C1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a2e      	ldr	r2, [pc, #184]	@ (80011dc <HAL_I2C_MspInit+0xe4>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d154      	bne.n	80011d2 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001128:	2340      	movs	r3, #64	@ 0x40
 800112a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800112c:	2300      	movs	r3, #0
 800112e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001130:	f107 0318 	add.w	r3, r7, #24
 8001134:	4618      	mov	r0, r3
 8001136:	f003 fed5 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001140:	f000 f922 	bl	8001388 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <HAL_I2C_MspInit+0xe8>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001148:	4a25      	ldr	r2, [pc, #148]	@ (80011e0 <HAL_I2C_MspInit+0xe8>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001150:	4b23      	ldr	r3, [pc, #140]	@ (80011e0 <HAL_I2C_MspInit+0xe8>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115c:	4b20      	ldr	r3, [pc, #128]	@ (80011e0 <HAL_I2C_MspInit+0xe8>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001160:	4a1f      	ldr	r2, [pc, #124]	@ (80011e0 <HAL_I2C_MspInit+0xe8>)
 8001162:	f043 0302 	orr.w	r3, r3, #2
 8001166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001168:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <HAL_I2C_MspInit+0xe8>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001174:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001178:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800117a:	2312      	movs	r3, #18
 800117c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001186:	2304      	movs	r3, #4
 8001188:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001194:	f002 fd98 	bl	8003cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001198:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800119c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119e:	2312      	movs	r3, #18
 80011a0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011aa:	2304      	movs	r3, #4
 80011ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011b2:	4619      	mov	r1, r3
 80011b4:	480b      	ldr	r0, [pc, #44]	@ (80011e4 <HAL_I2C_MspInit+0xec>)
 80011b6:	f002 fd87 	bl	8003cc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <HAL_I2C_MspInit+0xe8>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011be:	4a08      	ldr	r2, [pc, #32]	@ (80011e0 <HAL_I2C_MspInit+0xe8>)
 80011c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_I2C_MspInit+0xe8>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011d2:	bf00      	nop
 80011d4:	3770      	adds	r7, #112	@ 0x70
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40005400 	.word	0x40005400
 80011e0:	40021000 	.word	0x40021000
 80011e4:	48000400 	.word	0x48000400

080011e8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80011f0:	1d39      	adds	r1, r7, #4
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	2201      	movs	r2, #1
 80011f8:	4803      	ldr	r0, [pc, #12]	@ (8001208 <__io_putchar+0x20>)
 80011fa:	f006 fb19 	bl	8007830 <HAL_UART_Transmit>
	return chr;
 80011fe:	687b      	ldr	r3, [r7, #4]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000ebc 	.word	0x20000ebc

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f000 ff71 	bl	80020f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 f84a 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f7ff fe78 	bl	8000f0c <MX_GPIO_Init>
  MX_DMA_Init();
 800121c:	f7ff fe44 	bl	8000ea8 <MX_DMA_Init>
  MX_UART4_Init();
 8001220:	f000 fe0a 	bl	8001e38 <MX_UART4_Init>
  MX_SPI1_Init();
 8001224:	f000 f8b6 	bl	8001394 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001228:	f000 fc36 	bl	8001a98 <MX_TIM4_Init>
  MX_ADC1_Init();
 800122c:	f7ff faa8 	bl	8000780 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001230:	f7ff fb30 	bl	8000894 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001234:	f000 fb06 	bl	8001844 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001238:	f000 fbd8 	bl	80019ec <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800123c:	f000 fe4c 	bl	8001ed8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001240:	f7ff ff1a 	bl	8001078 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001244:	f000 fc7e 	bl	8001b44 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001248:	f000 fcb2 	bl	8001bb0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	printf(" _____________________________\r\n");
 800124c:	4812      	ldr	r0, [pc, #72]	@ (8001298 <main+0x8c>)
 800124e:	f00a f843 	bl	800b2d8 <puts>
	printf("|                             |\r\n");
 8001252:	4812      	ldr	r0, [pc, #72]	@ (800129c <main+0x90>)
 8001254:	f00a f840 	bl	800b2d8 <puts>
	printf("|                             |\r\n");
 8001258:	4810      	ldr	r0, [pc, #64]	@ (800129c <main+0x90>)
 800125a:	f00a f83d 	bl	800b2d8 <puts>
	printf("|  WELCOME ON TAGBOT PROJECT  |\r\n");
 800125e:	4810      	ldr	r0, [pc, #64]	@ (80012a0 <main+0x94>)
 8001260:	f00a f83a 	bl	800b2d8 <puts>
	printf("|                             |\r\n");
 8001264:	480d      	ldr	r0, [pc, #52]	@ (800129c <main+0x90>)
 8001266:	f00a f837 	bl	800b2d8 <puts>
	printf("|_____________________________|\r\n");
 800126a:	480e      	ldr	r0, [pc, #56]	@ (80012a4 <main+0x98>)
 800126c:	f00a f834 	bl	800b2d8 <puts>

	/* Ce code initialise l'adc en dma*/
	distSensor_TaskCreate(NULL);
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff fe03 	bl	8000e7c <distSensor_TaskCreate>
	printf("Démarrage du test des capteurs de distance...\r\n");
 8001276:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <main+0x9c>)
 8001278:	f00a f82e 	bl	800b2d8 <puts>


	/* Code init l'accélérometre*/

	while(1 == ADXL343_Init()) {}
 800127c:	bf00      	nop
 800127e:	f7ff f997 	bl	80005b0 <ADXL343_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b01      	cmp	r3, #1
 8001286:	d0fa      	beq.n	800127e <main+0x72>
	ADXL343_Configure();
 8001288:	f7ff f9d2 	bl	8000630 <ADXL343_Configure>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800128c:	f7ff fcb4 	bl	8000bf8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001290:	f007 f962 	bl	8008558 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <main+0x88>
 8001298:	0800c078 	.word	0x0800c078
 800129c:	0800c098 	.word	0x0800c098
 80012a0:	0800c0bc 	.word	0x0800c0bc
 80012a4:	0800c0e0 	.word	0x0800c0e0
 80012a8:	0800c104 	.word	0x0800c104

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b094      	sub	sp, #80	@ 0x50
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	2238      	movs	r2, #56	@ 0x38
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f00a f8ec 	bl	800b498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f002 fff8 	bl	80042c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012dc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012de:	2302      	movs	r3, #2
 80012e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e2:	2303      	movs	r3, #3
 80012e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80012e6:	2304      	movs	r3, #4
 80012e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80012ea:	2355      	movs	r3, #85	@ 0x55
 80012ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ee:	2302      	movs	r3, #2
 80012f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012f2:	2302      	movs	r3, #2
 80012f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012f6:	2302      	movs	r3, #2
 80012f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fa:	f107 0318 	add.w	r3, r7, #24
 80012fe:	4618      	mov	r0, r3
 8001300:	f003 f894 	bl	800442c <HAL_RCC_OscConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800130a:	f000 f83d 	bl	8001388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130e:	230f      	movs	r3, #15
 8001310:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001312:	2303      	movs	r3, #3
 8001314:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2104      	movs	r1, #4
 8001326:	4618      	mov	r0, r3
 8001328:	f003 fb92 	bl	8004a50 <HAL_RCC_ClockConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001332:	f000 f829 	bl	8001388 <Error_Handler>
  }
}
 8001336:	bf00      	nop
 8001338:	3750      	adds	r7, #80	@ 0x50
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
	//	ADXL343_DetectTap();
	if(GPIO_Pin == BNT_CAT_MOUSE_Pin){
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001350:	d102      	bne.n	8001358 <HAL_GPIO_EXTI_Callback+0x18>
		printf("Button pushed\r\n");
 8001352:	4803      	ldr	r0, [pc, #12]	@ (8001360 <HAL_GPIO_EXTI_Callback+0x20>)
 8001354:	f009 ffc0 	bl	800b2d8 <puts>
	}
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	0800c134 	.word	0x0800c134

08001364 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a04      	ldr	r2, [pc, #16]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d101      	bne.n	800137a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001376:	f000 fed7 	bl	8002128 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40001400 	.word	0x40001400

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <Error_Handler+0x8>

08001394 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001398:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <MX_SPI1_Init+0x74>)
 800139a:	4a1c      	ldr	r2, [pc, #112]	@ (800140c <MX_SPI1_Init+0x78>)
 800139c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <MX_SPI1_Init+0x74>)
 80013a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013a6:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <MX_SPI1_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013ac:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <MX_SPI1_Init+0x74>)
 80013ae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80013b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013b4:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <MX_SPI1_Init+0x74>)
 80013b6:	2202      	movs	r2, #2
 80013b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <MX_SPI1_Init+0x74>)
 80013bc:	2201      	movs	r2, #1
 80013be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <MX_SPI1_Init+0x74>)
 80013c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <MX_SPI1_Init+0x74>)
 80013ca:	2230      	movs	r2, #48	@ 0x30
 80013cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <MX_SPI1_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <MX_SPI1_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013da:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <MX_SPI1_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013e0:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <MX_SPI1_Init+0x74>)
 80013e2:	2207      	movs	r2, #7
 80013e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <MX_SPI1_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013ec:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <MX_SPI1_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	@ (8001408 <MX_SPI1_Init+0x74>)
 80013f4:	f003 ff66 	bl	80052c4 <HAL_SPI_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013fe:	f7ff ffc3 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000c8c 	.word	0x20000c8c
 800140c:	40013000 	.word	0x40013000

08001410 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	@ 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a17      	ldr	r2, [pc, #92]	@ (800148c <HAL_SPI_MspInit+0x7c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d128      	bne.n	8001484 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001432:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <HAL_SPI_MspInit+0x80>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001436:	4a16      	ldr	r2, [pc, #88]	@ (8001490 <HAL_SPI_MspInit+0x80>)
 8001438:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800143c:	6613      	str	r3, [r2, #96]	@ 0x60
 800143e:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <HAL_SPI_MspInit+0x80>)
 8001440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001442:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <HAL_SPI_MspInit+0x80>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	4a10      	ldr	r2, [pc, #64]	@ (8001490 <HAL_SPI_MspInit+0x80>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <HAL_SPI_MspInit+0x80>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Accelerometer_SCK_Pin|Accelerometer_MISO_Pin|Accelerometer_MOSI_Pin;
 8001462:	23e0      	movs	r3, #224	@ 0xe0
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001472:	2305      	movs	r3, #5
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001480:	f002 fc22 	bl	8003cc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	@ 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40013000 	.word	0x40013000
 8001490:	40021000 	.word	0x40021000

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <HAL_MspInit+0x50>)
 800149c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800149e:	4a11      	ldr	r2, [pc, #68]	@ (80014e4 <HAL_MspInit+0x50>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <HAL_MspInit+0x50>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <HAL_MspInit+0x50>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b6:	4a0b      	ldr	r2, [pc, #44]	@ (80014e4 <HAL_MspInit+0x50>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <HAL_MspInit+0x50>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	210f      	movs	r1, #15
 80014ce:	f06f 0001 	mvn.w	r0, #1
 80014d2:	f002 f95f 	bl	8003794 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014d6:	f002 ff99 	bl	800440c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	@ 0x30
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80014f8:	4b2c      	ldr	r3, [pc, #176]	@ (80015ac <HAL_InitTick+0xc4>)
 80014fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fc:	4a2b      	ldr	r2, [pc, #172]	@ (80015ac <HAL_InitTick+0xc4>)
 80014fe:	f043 0320 	orr.w	r3, r3, #32
 8001502:	6593      	str	r3, [r2, #88]	@ 0x58
 8001504:	4b29      	ldr	r3, [pc, #164]	@ (80015ac <HAL_InitTick+0xc4>)
 8001506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001508:	f003 0320 	and.w	r3, r3, #32
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001510:	f107 020c 	add.w	r2, r7, #12
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f003 fc6c 	bl	8004df8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001520:	f003 fc3e 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 8001524:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001528:	4a21      	ldr	r2, [pc, #132]	@ (80015b0 <HAL_InitTick+0xc8>)
 800152a:	fba2 2303 	umull	r2, r3, r2, r3
 800152e:	0c9b      	lsrs	r3, r3, #18
 8001530:	3b01      	subs	r3, #1
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001534:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <HAL_InitTick+0xcc>)
 8001536:	4a20      	ldr	r2, [pc, #128]	@ (80015b8 <HAL_InitTick+0xd0>)
 8001538:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800153a:	4b1e      	ldr	r3, [pc, #120]	@ (80015b4 <HAL_InitTick+0xcc>)
 800153c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001540:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001542:	4a1c      	ldr	r2, [pc, #112]	@ (80015b4 <HAL_InitTick+0xcc>)
 8001544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001546:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001548:	4b1a      	ldr	r3, [pc, #104]	@ (80015b4 <HAL_InitTick+0xcc>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154e:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <HAL_InitTick+0xcc>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8001554:	4817      	ldr	r0, [pc, #92]	@ (80015b4 <HAL_InitTick+0xcc>)
 8001556:	f004 fde9 	bl	800612c <HAL_TIM_Base_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001560:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001568:	4812      	ldr	r0, [pc, #72]	@ (80015b4 <HAL_InitTick+0xcc>)
 800156a:	f004 fe99 	bl	80062a0 <HAL_TIM_Base_Start_IT>
 800156e:	4603      	mov	r3, r0
 8001570:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001574:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001578:	2b00      	cmp	r3, #0
 800157a:	d111      	bne.n	80015a0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800157c:	2037      	movs	r0, #55	@ 0x37
 800157e:	f002 f923 	bl	80037c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d808      	bhi.n	800159a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	2037      	movs	r0, #55	@ 0x37
 800158e:	f002 f901 	bl	8003794 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001592:	4a0a      	ldr	r2, [pc, #40]	@ (80015bc <HAL_InitTick+0xd4>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	e002      	b.n	80015a0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3730      	adds	r7, #48	@ 0x30
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40021000 	.word	0x40021000
 80015b0:	431bde83 	.word	0x431bde83
 80015b4:	20000cf0 	.word	0x20000cf0
 80015b8:	40001400 	.word	0x40001400
 80015bc:	20000004 	.word	0x20000004

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <NMI_Handler+0x4>

080015c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <MemManage_Handler+0x4>

080015d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
    // Read the INT_SOURCE register to clear the interrupt
    int8_t tap_status;
    ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE, &tap_status, 1);
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	2201      	movs	r2, #1
 8001602:	4619      	mov	r1, r3
 8001604:	2030      	movs	r0, #48	@ 0x30
 8001606:	f7ff f835 	bl	8000674 <ADXL343_ReadRegister>

	if (tap_status & (1<<6)) {  // Tap for single tap
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00a      	beq.n	800162e <EXTI2_IRQHandler+0x36>
		printf("Tap detected!\r\n");
 8001618:	4808      	ldr	r0, [pc, #32]	@ (800163c <EXTI2_IRQHandler+0x44>)
 800161a:	f009 fe5d 	bl	800b2d8 <puts>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800161e:	2101      	movs	r1, #1
 8001620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001624:	f002 fcea 	bl	8003ffc <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001628:	2064      	movs	r0, #100	@ 0x64
 800162a:	f000 fd9b 	bl	8002164 <HAL_Delay>
	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Accelerometer_INT1_Pin);
 800162e:	2004      	movs	r0, #4
 8001630:	f002 fcfe 	bl	8004030 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	0800c144 	.word	0x0800c144

08001640 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
//		printf("Tap detected!\r\n");
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
//		HAL_Delay(100);
//	}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Accelerometer_INT2_Pin);
 8001644:	2008      	movs	r0, #8
 8001646:	f002 fcf3 	bl	8004030 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001654:	4802      	ldr	r0, [pc, #8]	@ (8001660 <DMA1_Channel1_IRQHandler+0x10>)
 8001656:	f002 f9e8 	bl	8003a2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200001c0 	.word	0x200001c0

08001664 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001668:	4802      	ldr	r0, [pc, #8]	@ (8001674 <DMA1_Channel2_IRQHandler+0x10>)
 800166a:	f002 f9de 	bl	8003a2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000160 	.word	0x20000160

08001678 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800167c:	4802      	ldr	r0, [pc, #8]	@ (8001688 <TIM3_IRQHandler+0x10>)
 800167e:	f004 ff80 	bl	8006582 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000d8c 	.word	0x20000d8c

0800168c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <TIM4_IRQHandler+0x10>)
 8001692:	f004 ff76 	bl	8006582 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000dd8 	.word	0x20000dd8

080016a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BNT_CAT_MOUSE_Pin);
 80016a4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80016a8:	f002 fcc2 	bl	8004030 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <TIM6_DAC_IRQHandler+0x10>)
 80016b6:	f004 ff64 	bl	8006582 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000e24 	.word	0x20000e24

080016c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <TIM7_IRQHandler+0x10>)
 80016ca:	f004 ff5a 	bl	8006582 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000cf0 	.word	0x20000cf0

080016d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	e00a      	b.n	8001700 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016ea:	f3af 8000 	nop.w
 80016ee:	4601      	mov	r1, r0
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	60ba      	str	r2, [r7, #8]
 80016f6:	b2ca      	uxtb	r2, r1
 80016f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	dbf0      	blt.n	80016ea <_read+0x12>
  }

  return len;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	60f8      	str	r0, [r7, #12]
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	e009      	b.n	8001738 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	60ba      	str	r2, [r7, #8]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fd5b 	bl	80011e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	429a      	cmp	r2, r3
 800173e:	dbf1      	blt.n	8001724 <_write+0x12>
  }
  return len;
 8001740:	687b      	ldr	r3, [r7, #4]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <_close>:

int _close(int file)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001772:	605a      	str	r2, [r3, #4]
  return 0;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <_isatty>:

int _isatty(int file)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017bc:	4a14      	ldr	r2, [pc, #80]	@ (8001810 <_sbrk+0x5c>)
 80017be:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <_sbrk+0x60>)
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c8:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d102      	bne.n	80017d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <_sbrk+0x64>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	@ (800181c <_sbrk+0x68>)
 80017d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d207      	bcs.n	80017f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e4:	f009 ff0c 	bl	800b600 <__errno>
 80017e8:	4603      	mov	r3, r0
 80017ea:	220c      	movs	r2, #12
 80017ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
 80017f2:	e009      	b.n	8001808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f4:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fa:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	4a05      	ldr	r2, [pc, #20]	@ (8001818 <_sbrk+0x64>)
 8001804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001806:	68fb      	ldr	r3, [r7, #12]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20008000 	.word	0x20008000
 8001814:	00000400 	.word	0x00000400
 8001818:	20000d3c 	.word	0x20000d3c
 800181c:	20001fc8 	.word	0x20001fc8

08001820 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <SystemInit+0x20>)
 8001826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800182a:	4a05      	ldr	r2, [pc, #20]	@ (8001840 <SystemInit+0x20>)
 800182c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001830:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b09c      	sub	sp, #112	@ 0x70
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001864:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	615a      	str	r2, [r3, #20]
 8001876:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2234      	movs	r2, #52	@ 0x34
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f009 fe0a 	bl	800b498 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001884:	4b57      	ldr	r3, [pc, #348]	@ (80019e4 <MX_TIM1_Init+0x1a0>)
 8001886:	4a58      	ldr	r2, [pc, #352]	@ (80019e8 <MX_TIM1_Init+0x1a4>)
 8001888:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800188a:	4b56      	ldr	r3, [pc, #344]	@ (80019e4 <MX_TIM1_Init+0x1a0>)
 800188c:	2200      	movs	r2, #0
 800188e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001890:	4b54      	ldr	r3, [pc, #336]	@ (80019e4 <MX_TIM1_Init+0x1a0>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6799;
 8001896:	4b53      	ldr	r3, [pc, #332]	@ (80019e4 <MX_TIM1_Init+0x1a0>)
 8001898:	f641 228f 	movw	r2, #6799	@ 0x1a8f
 800189c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189e:	4b51      	ldr	r3, [pc, #324]	@ (80019e4 <MX_TIM1_Init+0x1a0>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018a4:	4b4f      	ldr	r3, [pc, #316]	@ (80019e4 <MX_TIM1_Init+0x1a0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018aa:	4b4e      	ldr	r3, [pc, #312]	@ (80019e4 <MX_TIM1_Init+0x1a0>)
 80018ac:	2280      	movs	r2, #128	@ 0x80
 80018ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018b0:	484c      	ldr	r0, [pc, #304]	@ (80019e4 <MX_TIM1_Init+0x1a0>)
 80018b2:	f004 fc3b 	bl	800612c <HAL_TIM_Base_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80018bc:	f7ff fd64 	bl	8001388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80018ca:	4619      	mov	r1, r3
 80018cc:	4845      	ldr	r0, [pc, #276]	@ (80019e4 <MX_TIM1_Init+0x1a0>)
 80018ce:	f005 f8bb 	bl	8006a48 <HAL_TIM_ConfigClockSource>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018d8:	f7ff fd56 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018dc:	4841      	ldr	r0, [pc, #260]	@ (80019e4 <MX_TIM1_Init+0x1a0>)
 80018de:	f004 fd49 	bl	8006374 <HAL_TIM_PWM_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018e8:	f7ff fd4e 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018f0:	2300      	movs	r3, #0
 80018f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018fc:	4619      	mov	r1, r3
 80018fe:	4839      	ldr	r0, [pc, #228]	@ (80019e4 <MX_TIM1_Init+0x1a0>)
 8001900:	f005 fdf2 	bl	80074e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800190a:	f7ff fd3d 	bl	8001388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190e:	2360      	movs	r3, #96	@ 0x60
 8001910:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001916:	2300      	movs	r3, #0
 8001918:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800191a:	2300      	movs	r3, #0
 800191c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800192a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800192e:	2200      	movs	r2, #0
 8001930:	4619      	mov	r1, r3
 8001932:	482c      	ldr	r0, [pc, #176]	@ (80019e4 <MX_TIM1_Init+0x1a0>)
 8001934:	f004 ff74 	bl	8006820 <HAL_TIM_PWM_ConfigChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800193e:	f7ff fd23 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001942:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001946:	2204      	movs	r2, #4
 8001948:	4619      	mov	r1, r3
 800194a:	4826      	ldr	r0, [pc, #152]	@ (80019e4 <MX_TIM1_Init+0x1a0>)
 800194c:	f004 ff68 	bl	8006820 <HAL_TIM_PWM_ConfigChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001956:	f7ff fd17 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800195a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800195e:	2208      	movs	r2, #8
 8001960:	4619      	mov	r1, r3
 8001962:	4820      	ldr	r0, [pc, #128]	@ (80019e4 <MX_TIM1_Init+0x1a0>)
 8001964:	f004 ff5c 	bl	8006820 <HAL_TIM_PWM_ConfigChannel>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800196e:	f7ff fd0b 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001972:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001976:	220c      	movs	r2, #12
 8001978:	4619      	mov	r1, r3
 800197a:	481a      	ldr	r0, [pc, #104]	@ (80019e4 <MX_TIM1_Init+0x1a0>)
 800197c:	f004 ff50 	bl	8006820 <HAL_TIM_PWM_ConfigChannel>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001986:	f7ff fcff 	bl	8001388 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800199e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80019ba:	2300      	movs	r3, #0
 80019bc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	4619      	mov	r1, r3
 80019c6:	4807      	ldr	r0, [pc, #28]	@ (80019e4 <MX_TIM1_Init+0x1a0>)
 80019c8:	f005 fe10 	bl	80075ec <HAL_TIMEx_ConfigBreakDeadTime>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 80019d2:	f7ff fcd9 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019d6:	4803      	ldr	r0, [pc, #12]	@ (80019e4 <MX_TIM1_Init+0x1a0>)
 80019d8:	f000 f9e4 	bl	8001da4 <HAL_TIM_MspPostInit>

}
 80019dc:	bf00      	nop
 80019de:	3770      	adds	r7, #112	@ 0x70
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000d40 	.word	0x20000d40
 80019e8:	40012c00 	.word	0x40012c00

080019ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	@ 0x30
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	2224      	movs	r2, #36	@ 0x24
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f009 fd4c 	bl	800b498 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a00:	463b      	mov	r3, r7
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a0a:	4b21      	ldr	r3, [pc, #132]	@ (8001a90 <MX_TIM3_Init+0xa4>)
 8001a0c:	4a21      	ldr	r2, [pc, #132]	@ (8001a94 <MX_TIM3_Init+0xa8>)
 8001a0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a10:	4b1f      	ldr	r3, [pc, #124]	@ (8001a90 <MX_TIM3_Init+0xa4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a16:	4b1e      	ldr	r3, [pc, #120]	@ (8001a90 <MX_TIM3_Init+0xa4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a90 <MX_TIM3_Init+0xa4>)
 8001a1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a24:	4b1a      	ldr	r3, [pc, #104]	@ (8001a90 <MX_TIM3_Init+0xa4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a2a:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <MX_TIM3_Init+0xa4>)
 8001a2c:	2280      	movs	r2, #128	@ 0x80
 8001a2e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a30:	2301      	movs	r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a44:	2300      	movs	r3, #0
 8001a46:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480d      	ldr	r0, [pc, #52]	@ (8001a90 <MX_TIM3_Init+0xa4>)
 8001a5c:	f004 fceb 	bl	8006436 <HAL_TIM_Encoder_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001a66:	f7ff fc8f 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a72:	463b      	mov	r3, r7
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	@ (8001a90 <MX_TIM3_Init+0xa4>)
 8001a78:	f005 fd36 	bl	80074e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a82:	f7ff fc81 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	3730      	adds	r7, #48	@ 0x30
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000d8c 	.word	0x20000d8c
 8001a94:	40000400 	.word	0x40000400

08001a98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08c      	sub	sp, #48	@ 0x30
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	2224      	movs	r2, #36	@ 0x24
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f009 fcf6 	bl	800b498 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aac:	463b      	mov	r3, r7
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ab6:	4b21      	ldr	r3, [pc, #132]	@ (8001b3c <MX_TIM4_Init+0xa4>)
 8001ab8:	4a21      	ldr	r2, [pc, #132]	@ (8001b40 <MX_TIM4_Init+0xa8>)
 8001aba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001abc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b3c <MX_TIM4_Init+0xa4>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b3c <MX_TIM4_Init+0xa4>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b3c <MX_TIM4_Init+0xa4>)
 8001aca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ace:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b3c <MX_TIM4_Init+0xa4>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ad6:	4b19      	ldr	r3, [pc, #100]	@ (8001b3c <MX_TIM4_Init+0xa4>)
 8001ad8:	2280      	movs	r2, #128	@ 0x80
 8001ada:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001af0:	2300      	movs	r3, #0
 8001af2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001af4:	2301      	movs	r3, #1
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	4619      	mov	r1, r3
 8001b06:	480d      	ldr	r0, [pc, #52]	@ (8001b3c <MX_TIM4_Init+0xa4>)
 8001b08:	f004 fc95 	bl	8006436 <HAL_TIM_Encoder_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001b12:	f7ff fc39 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b1e:	463b      	mov	r3, r7
 8001b20:	4619      	mov	r1, r3
 8001b22:	4806      	ldr	r0, [pc, #24]	@ (8001b3c <MX_TIM4_Init+0xa4>)
 8001b24:	f005 fce0 	bl	80074e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001b2e:	f7ff fc2b 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	3730      	adds	r7, #48	@ 0x30
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000dd8 	.word	0x20000dd8
 8001b40:	40000800 	.word	0x40000800

08001b44 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b54:	4b14      	ldr	r3, [pc, #80]	@ (8001ba8 <MX_TIM6_Init+0x64>)
 8001b56:	4a15      	ldr	r2, [pc, #84]	@ (8001bac <MX_TIM6_Init+0x68>)
 8001b58:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 8001b5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ba8 <MX_TIM6_Init+0x64>)
 8001b5c:	22a9      	movs	r2, #169	@ 0xa9
 8001b5e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b60:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <MX_TIM6_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001b66:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <MX_TIM6_Init+0x64>)
 8001b68:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b6c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <MX_TIM6_Init+0x64>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b74:	480c      	ldr	r0, [pc, #48]	@ (8001ba8 <MX_TIM6_Init+0x64>)
 8001b76:	f004 fad9 	bl	800612c <HAL_TIM_Base_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b80:	f7ff fc02 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b84:	2320      	movs	r3, #32
 8001b86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4805      	ldr	r0, [pc, #20]	@ (8001ba8 <MX_TIM6_Init+0x64>)
 8001b92:	f005 fca9 	bl	80074e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b9c:	f7ff fbf4 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000e24 	.word	0x20000e24
 8001bac:	40001000 	.word	0x40001000

08001bb0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001bb4:	4b10      	ldr	r3, [pc, #64]	@ (8001bf8 <MX_TIM16_Init+0x48>)
 8001bb6:	4a11      	ldr	r2, [pc, #68]	@ (8001bfc <MX_TIM16_Init+0x4c>)
 8001bb8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1699;
 8001bba:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf8 <MX_TIM16_Init+0x48>)
 8001bbc:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001bc0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf8 <MX_TIM16_Init+0x48>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <MX_TIM16_Init+0x48>)
 8001bca:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001bce:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <MX_TIM16_Init+0x48>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <MX_TIM16_Init+0x48>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <MX_TIM16_Init+0x48>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001be2:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <MX_TIM16_Init+0x48>)
 8001be4:	f004 faa2 	bl	800612c <HAL_TIM_Base_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001bee:	f7ff fbcb 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000e70 	.word	0x20000e70
 8001bfc:	40014400 	.word	0x40014400

08001c00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001c8c <HAL_TIM_Base_MspInit+0x8c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d10c      	bne.n	8001c2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c12:	4b1f      	ldr	r3, [pc, #124]	@ (8001c90 <HAL_TIM_Base_MspInit+0x90>)
 8001c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c16:	4a1e      	ldr	r2, [pc, #120]	@ (8001c90 <HAL_TIM_Base_MspInit+0x90>)
 8001c18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c90 <HAL_TIM_Base_MspInit+0x90>)
 8001c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001c2a:	e02a      	b.n	8001c82 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM6)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a18      	ldr	r2, [pc, #96]	@ (8001c94 <HAL_TIM_Base_MspInit+0x94>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d114      	bne.n	8001c60 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c36:	4b16      	ldr	r3, [pc, #88]	@ (8001c90 <HAL_TIM_Base_MspInit+0x90>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3a:	4a15      	ldr	r2, [pc, #84]	@ (8001c90 <HAL_TIM_Base_MspInit+0x90>)
 8001c3c:	f043 0310 	orr.w	r3, r3, #16
 8001c40:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c42:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <HAL_TIM_Base_MspInit+0x90>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2105      	movs	r1, #5
 8001c52:	2036      	movs	r0, #54	@ 0x36
 8001c54:	f001 fd9e 	bl	8003794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c58:	2036      	movs	r0, #54	@ 0x36
 8001c5a:	f001 fdb5 	bl	80037c8 <HAL_NVIC_EnableIRQ>
}
 8001c5e:	e010      	b.n	8001c82 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM16)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0c      	ldr	r2, [pc, #48]	@ (8001c98 <HAL_TIM_Base_MspInit+0x98>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d10b      	bne.n	8001c82 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_TIM_Base_MspInit+0x90>)
 8001c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c6e:	4a08      	ldr	r2, [pc, #32]	@ (8001c90 <HAL_TIM_Base_MspInit+0x90>)
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c74:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_TIM_Base_MspInit+0x90>)
 8001c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40012c00 	.word	0x40012c00
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40001000 	.word	0x40001000
 8001c98:	40014400 	.word	0x40014400

08001c9c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08c      	sub	sp, #48	@ 0x30
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a36      	ldr	r2, [pc, #216]	@ (8001d94 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d130      	bne.n	8001d20 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cbe:	4b36      	ldr	r3, [pc, #216]	@ (8001d98 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc2:	4a35      	ldr	r2, [pc, #212]	@ (8001d98 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cca:	4b33      	ldr	r3, [pc, #204]	@ (8001d98 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	61bb      	str	r3, [r7, #24]
 8001cd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd6:	4b30      	ldr	r3, [pc, #192]	@ (8001d98 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cda:	4a2f      	ldr	r2, [pc, #188]	@ (8001d98 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d98 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LIDAR_M_SCTR_Pin|ENCODER_RIGHT_A_Pin|ENCODER_RIGHT_B_Pin;
 8001cee:	2332      	movs	r3, #50	@ 0x32
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	4824      	ldr	r0, [pc, #144]	@ (8001d9c <HAL_TIM_Encoder_MspInit+0x100>)
 8001d0a:	f001 ffdd 	bl	8003cc8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2105      	movs	r1, #5
 8001d12:	201d      	movs	r0, #29
 8001d14:	f001 fd3e 	bl	8003794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d18:	201d      	movs	r0, #29
 8001d1a:	f001 fd55 	bl	80037c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d1e:	e034      	b.n	8001d8a <HAL_TIM_Encoder_MspInit+0xee>
  else if(tim_encoderHandle->Instance==TIM4)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1e      	ldr	r2, [pc, #120]	@ (8001da0 <HAL_TIM_Encoder_MspInit+0x104>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d12f      	bne.n	8001d8a <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001d98 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d36:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d46:	4a14      	ldr	r2, [pc, #80]	@ (8001d98 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d4e:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_LEFT_A_Pin|ENCODER_LEFT_B_Pin;
 8001d5a:	23c0      	movs	r3, #192	@ 0xc0
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6e:	f107 031c 	add.w	r3, r7, #28
 8001d72:	4619      	mov	r1, r3
 8001d74:	4809      	ldr	r0, [pc, #36]	@ (8001d9c <HAL_TIM_Encoder_MspInit+0x100>)
 8001d76:	f001 ffa7 	bl	8003cc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2105      	movs	r1, #5
 8001d7e:	201e      	movs	r0, #30
 8001d80:	f001 fd08 	bl	8003794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d84:	201e      	movs	r0, #30
 8001d86:	f001 fd1f 	bl	80037c8 <HAL_NVIC_EnableIRQ>
}
 8001d8a:	bf00      	nop
 8001d8c:	3730      	adds	r7, #48	@ 0x30
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40000400 	.word	0x40000400
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	48000400 	.word	0x48000400
 8001da0:	40000800 	.word	0x40000800

08001da4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e30 <HAL_TIM_MspPostInit+0x8c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d12f      	bne.n	8001e26 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <HAL_TIM_MspPostInit+0x90>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dca:	4a1a      	ldr	r2, [pc, #104]	@ (8001e34 <HAL_TIM_MspPostInit+0x90>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd2:	4b18      	ldr	r3, [pc, #96]	@ (8001e34 <HAL_TIM_MspPostInit+0x90>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = RIGHT_MOTOR_FWD_Pin|RIGHT_MOTOR_REV_Pin|LEFT_MOTOR_FWD_Pin;
 8001dde:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001de2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001df0:	2306      	movs	r3, #6
 8001df2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f107 030c 	add.w	r3, r7, #12
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dfe:	f001 ff63 	bl	8003cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEFT_MOTOR_REV_Pin;
 8001e02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8001e14:	230b      	movs	r3, #11
 8001e16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LEFT_MOTOR_REV_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e22:	f001 ff51 	bl	8003cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e26:	bf00      	nop
 8001e28:	3720      	adds	r7, #32
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40012c00 	.word	0x40012c00
 8001e34:	40021000 	.word	0x40021000

08001e38 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e3c:	4b24      	ldr	r3, [pc, #144]	@ (8001ed0 <MX_UART4_Init+0x98>)
 8001e3e:	4a25      	ldr	r2, [pc, #148]	@ (8001ed4 <MX_UART4_Init+0x9c>)
 8001e40:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e42:	4b23      	ldr	r3, [pc, #140]	@ (8001ed0 <MX_UART4_Init+0x98>)
 8001e44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e48:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ed0 <MX_UART4_Init+0x98>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e50:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed0 <MX_UART4_Init+0x98>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed0 <MX_UART4_Init+0x98>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed0 <MX_UART4_Init+0x98>)
 8001e5e:	220c      	movs	r2, #12
 8001e60:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e62:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <MX_UART4_Init+0x98>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e68:	4b19      	ldr	r3, [pc, #100]	@ (8001ed0 <MX_UART4_Init+0x98>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <MX_UART4_Init+0x98>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e74:	4b16      	ldr	r3, [pc, #88]	@ (8001ed0 <MX_UART4_Init+0x98>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <MX_UART4_Init+0x98>)
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001e80:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <MX_UART4_Init+0x98>)
 8001e82:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e86:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e88:	4811      	ldr	r0, [pc, #68]	@ (8001ed0 <MX_UART4_Init+0x98>)
 8001e8a:	f005 fc81 	bl	8007790 <HAL_UART_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_UART4_Init+0x60>
  {
    Error_Handler();
 8001e94:	f7ff fa78 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e98:	2100      	movs	r1, #0
 8001e9a:	480d      	ldr	r0, [pc, #52]	@ (8001ed0 <MX_UART4_Init+0x98>)
 8001e9c:	f006 fa7a 	bl	8008394 <HAL_UARTEx_SetTxFifoThreshold>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8001ea6:	f7ff fa6f 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4808      	ldr	r0, [pc, #32]	@ (8001ed0 <MX_UART4_Init+0x98>)
 8001eae:	f006 faaf 	bl	8008410 <HAL_UARTEx_SetRxFifoThreshold>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_UART4_Init+0x84>
  {
    Error_Handler();
 8001eb8:	f7ff fa66 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001ebc:	4804      	ldr	r0, [pc, #16]	@ (8001ed0 <MX_UART4_Init+0x98>)
 8001ebe:	f006 fa30 	bl	8008322 <HAL_UARTEx_DisableFifoMode>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_UART4_Init+0x94>
  {
    Error_Handler();
 8001ec8:	f7ff fa5e 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000ebc 	.word	0x20000ebc
 8001ed4:	40004c00 	.word	0x40004c00

08001ed8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001edc:	4b22      	ldr	r3, [pc, #136]	@ (8001f68 <MX_USART3_UART_Init+0x90>)
 8001ede:	4a23      	ldr	r2, [pc, #140]	@ (8001f6c <MX_USART3_UART_Init+0x94>)
 8001ee0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ee2:	4b21      	ldr	r3, [pc, #132]	@ (8001f68 <MX_USART3_UART_Init+0x90>)
 8001ee4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ee8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eea:	4b1f      	ldr	r3, [pc, #124]	@ (8001f68 <MX_USART3_UART_Init+0x90>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <MX_USART3_UART_Init+0x90>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f68 <MX_USART3_UART_Init+0x90>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001efc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <MX_USART3_UART_Init+0x90>)
 8001efe:	220c      	movs	r2, #12
 8001f00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f02:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <MX_USART3_UART_Init+0x90>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f08:	4b17      	ldr	r3, [pc, #92]	@ (8001f68 <MX_USART3_UART_Init+0x90>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f0e:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <MX_USART3_UART_Init+0x90>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f14:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <MX_USART3_UART_Init+0x90>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f1a:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <MX_USART3_UART_Init+0x90>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f20:	4811      	ldr	r0, [pc, #68]	@ (8001f68 <MX_USART3_UART_Init+0x90>)
 8001f22:	f005 fc35 	bl	8007790 <HAL_UART_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f2c:	f7ff fa2c 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f30:	2100      	movs	r1, #0
 8001f32:	480d      	ldr	r0, [pc, #52]	@ (8001f68 <MX_USART3_UART_Init+0x90>)
 8001f34:	f006 fa2e 	bl	8008394 <HAL_UARTEx_SetTxFifoThreshold>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f3e:	f7ff fa23 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f42:	2100      	movs	r1, #0
 8001f44:	4808      	ldr	r0, [pc, #32]	@ (8001f68 <MX_USART3_UART_Init+0x90>)
 8001f46:	f006 fa63 	bl	8008410 <HAL_UARTEx_SetRxFifoThreshold>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f50:	f7ff fa1a 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f54:	4804      	ldr	r0, [pc, #16]	@ (8001f68 <MX_USART3_UART_Init+0x90>)
 8001f56:	f006 f9e4 	bl	8008322 <HAL_UARTEx_DisableFifoMode>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f60:	f7ff fa12 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000f50 	.word	0x20000f50
 8001f6c:	40004800 	.word	0x40004800

08001f70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b09c      	sub	sp, #112	@ 0x70
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f88:	f107 0318 	add.w	r3, r7, #24
 8001f8c:	2244      	movs	r2, #68	@ 0x44
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f009 fa81 	bl	800b498 <memset>
  if(uartHandle->Instance==UART4)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a3d      	ldr	r2, [pc, #244]	@ (8002090 <HAL_UART_MspInit+0x120>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d137      	bne.n	8002010 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa8:	f107 0318 	add.w	r3, r7, #24
 8001fac:	4618      	mov	r0, r3
 8001fae:	f002 ff99 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fb8:	f7ff f9e6 	bl	8001388 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001fbc:	4b35      	ldr	r3, [pc, #212]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc0:	4a34      	ldr	r2, [pc, #208]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8001fc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001fc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fc8:	4b32      	ldr	r3, [pc, #200]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fe0:	4b2c      	ldr	r3, [pc, #176]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001fec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ff0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001ffe:	2305      	movs	r3, #5
 8002000:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002002:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002006:	4619      	mov	r1, r3
 8002008:	4823      	ldr	r0, [pc, #140]	@ (8002098 <HAL_UART_MspInit+0x128>)
 800200a:	f001 fe5d 	bl	8003cc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800200e:	e03b      	b.n	8002088 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a21      	ldr	r2, [pc, #132]	@ (800209c <HAL_UART_MspInit+0x12c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d136      	bne.n	8002088 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800201a:	2304      	movs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	4618      	mov	r0, r3
 8002028:	f002 ff5c 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8002032:	f7ff f9a9 	bl	8001388 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002036:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203a:	4a16      	ldr	r2, [pc, #88]	@ (8002094 <HAL_UART_MspInit+0x124>)
 800203c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002040:	6593      	str	r3, [r2, #88]	@ 0x58
 8002042:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002046:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204e:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002052:	4a10      	ldr	r2, [pc, #64]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800205a:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <HAL_UART_MspInit+0x124>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_INPUT_Pin|LIDAR_OUTPUT_Pin;
 8002066:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800206a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002078:	2307      	movs	r3, #7
 800207a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002080:	4619      	mov	r1, r3
 8002082:	4807      	ldr	r0, [pc, #28]	@ (80020a0 <HAL_UART_MspInit+0x130>)
 8002084:	f001 fe20 	bl	8003cc8 <HAL_GPIO_Init>
}
 8002088:	bf00      	nop
 800208a:	3770      	adds	r7, #112	@ 0x70
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40004c00 	.word	0x40004c00
 8002094:	40021000 	.word	0x40021000
 8002098:	48000800 	.word	0x48000800
 800209c:	40004800 	.word	0x40004800
 80020a0:	48000400 	.word	0x48000400

080020a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020a4:	480d      	ldr	r0, [pc, #52]	@ (80020dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80020a8:	f7ff fbba 	bl	8001820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020ac:	480c      	ldr	r0, [pc, #48]	@ (80020e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80020ae:	490d      	ldr	r1, [pc, #52]	@ (80020e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020b0:	4a0d      	ldr	r2, [pc, #52]	@ (80020e8 <LoopForever+0xe>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020b4:	e002      	b.n	80020bc <LoopCopyDataInit>

080020b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ba:	3304      	adds	r3, #4

080020bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c0:	d3f9      	bcc.n	80020b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c2:	4a0a      	ldr	r2, [pc, #40]	@ (80020ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80020c4:	4c0a      	ldr	r4, [pc, #40]	@ (80020f0 <LoopForever+0x16>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c8:	e001      	b.n	80020ce <LoopFillZerobss>

080020ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020cc:	3204      	adds	r2, #4

080020ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d0:	d3fb      	bcc.n	80020ca <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80020d2:	f009 fa9b 	bl	800b60c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020d6:	f7ff f899 	bl	800120c <main>

080020da <LoopForever>:

LoopForever:
    b LoopForever
 80020da:	e7fe      	b.n	80020da <LoopForever>
  ldr   r0, =_estack
 80020dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80020e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80020e8:	0800c1f0 	.word	0x0800c1f0
  ldr r2, =_sbss
 80020ec:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80020f0:	20001fc4 	.word	0x20001fc4

080020f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020f4:	e7fe      	b.n	80020f4 <ADC1_2_IRQHandler>

080020f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002100:	2003      	movs	r0, #3
 8002102:	f001 fb3c 	bl	800377e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002106:	200f      	movs	r0, #15
 8002108:	f7ff f9ee 	bl	80014e8 <HAL_InitTick>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	71fb      	strb	r3, [r7, #7]
 8002116:	e001      	b.n	800211c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002118:	f7ff f9bc 	bl	8001494 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800211c:	79fb      	ldrb	r3, [r7, #7]

}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <HAL_IncTick+0x1c>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <HAL_IncTick+0x20>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4413      	add	r3, r2
 8002136:	4a03      	ldr	r2, [pc, #12]	@ (8002144 <HAL_IncTick+0x1c>)
 8002138:	6013      	str	r3, [r2, #0]
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	20000fe4 	.word	0x20000fe4
 8002148:	20000008 	.word	0x20000008

0800214c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return uwTick;
 8002150:	4b03      	ldr	r3, [pc, #12]	@ (8002160 <HAL_GetTick+0x14>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000fe4 	.word	0x20000fe4

08002164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff ffee 	bl	800214c <HAL_GetTick>
 8002170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d004      	beq.n	8002188 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800217e:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <HAL_Delay+0x40>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4413      	add	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002188:	bf00      	nop
 800218a:	f7ff ffdf 	bl	800214c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	429a      	cmp	r2, r3
 8002198:	d8f7      	bhi.n	800218a <HAL_Delay+0x26>
  {
  }
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000008 	.word	0x20000008

080021a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	609a      	str	r2, [r3, #8]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	609a      	str	r2, [r3, #8]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3360      	adds	r3, #96	@ 0x60
 8002222:	461a      	mov	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <LL_ADC_SetOffset+0x44>)
 8002232:	4013      	ands	r3, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	4313      	orrs	r3, r2
 8002240:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002248:	bf00      	nop
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	03fff000 	.word	0x03fff000

08002258 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3360      	adds	r3, #96	@ 0x60
 8002266:	461a      	mov	r2, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3360      	adds	r3, #96	@ 0x60
 8002294:	461a      	mov	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022ae:	bf00      	nop
 80022b0:	371c      	adds	r7, #28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b087      	sub	sp, #28
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3360      	adds	r3, #96	@ 0x60
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	431a      	orrs	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80022e4:	bf00      	nop
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3360      	adds	r3, #96	@ 0x60
 8002300:	461a      	mov	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	431a      	orrs	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800231a:	bf00      	nop
 800231c:	371c      	adds	r7, #28
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	615a      	str	r2, [r3, #20]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002372:	b480      	push	{r7}
 8002374:	b087      	sub	sp, #28
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3330      	adds	r3, #48	@ 0x30
 8002382:	461a      	mov	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	4413      	add	r3, r2
 8002390:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	211f      	movs	r1, #31
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	401a      	ands	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	0e9b      	lsrs	r3, r3, #26
 80023aa:	f003 011f 	and.w	r1, r3, #31
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	431a      	orrs	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b087      	sub	sp, #28
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3314      	adds	r3, #20
 80023da:	461a      	mov	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	0e5b      	lsrs	r3, r3, #25
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	4413      	add	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	0d1b      	lsrs	r3, r3, #20
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	2107      	movs	r1, #7
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	401a      	ands	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	0d1b      	lsrs	r3, r3, #20
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	431a      	orrs	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002414:	bf00      	nop
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002438:	43db      	mvns	r3, r3
 800243a:	401a      	ands	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f003 0318 	and.w	r3, r3, #24
 8002442:	4908      	ldr	r1, [pc, #32]	@ (8002464 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002444:	40d9      	lsrs	r1, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	400b      	ands	r3, r1
 800244a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244e:	431a      	orrs	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	0007ffff 	.word	0x0007ffff

08002468 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 031f 	and.w	r3, r3, #31
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002494:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6093      	str	r3, [r2, #8]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024bc:	d101      	bne.n	80024c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80024e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002508:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800250c:	d101      	bne.n	8002512 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002530:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <LL_ADC_IsEnabled+0x18>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <LL_ADC_IsEnabled+0x1a>
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800257e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002582:	f043 0204 	orr.w	r2, r3, #4
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d101      	bne.n	80025ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d101      	bne.n	80025d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b089      	sub	sp, #36	@ 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e167      	b.n	80028ce <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7fe f9b9 	bl	8000984 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff3f 	bl	80024a8 <LL_ADC_IsDeepPowerDownEnabled>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff25 	bl	8002484 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ff5a 	bl	80024f8 <LL_ADC_IsInternalRegulatorEnabled>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d115      	bne.n	8002676 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff ff3e 	bl	80024d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002654:	4ba0      	ldr	r3, [pc, #640]	@ (80028d8 <HAL_ADC_Init+0x2f4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	4aa0      	ldr	r2, [pc, #640]	@ (80028dc <HAL_ADC_Init+0x2f8>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	3301      	adds	r3, #1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002668:	e002      	b.n	8002670 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3b01      	subs	r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f9      	bne.n	800266a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff ff3c 	bl	80024f8 <LL_ADC_IsInternalRegulatorEnabled>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10d      	bne.n	80026a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268a:	f043 0210 	orr.w	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002696:	f043 0201 	orr.w	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ff75 	bl	8002596 <LL_ADC_REG_IsConversionOngoing>
 80026ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 8100 	bne.w	80028bc <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f040 80fc 	bne.w	80028bc <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80026cc:	f043 0202 	orr.w	r2, r3, #2
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff35 	bl	8002548 <LL_ADC_IsEnabled>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d111      	bne.n	8002708 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80026e8:	f7ff ff2e 	bl	8002548 <LL_ADC_IsEnabled>
 80026ec:	4604      	mov	r4, r0
 80026ee:	487c      	ldr	r0, [pc, #496]	@ (80028e0 <HAL_ADC_Init+0x2fc>)
 80026f0:	f7ff ff2a 	bl	8002548 <LL_ADC_IsEnabled>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4323      	orrs	r3, r4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d105      	bne.n	8002708 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4619      	mov	r1, r3
 8002702:	4878      	ldr	r0, [pc, #480]	@ (80028e4 <HAL_ADC_Init+0x300>)
 8002704:	f7ff fd50 	bl	80021a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7f5b      	ldrb	r3, [r3, #29]
 800270c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002712:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002718:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800271e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002726:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002732:	2b01      	cmp	r3, #1
 8002734:	d106      	bne.n	8002744 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273a:	3b01      	subs	r3, #1
 800273c:	045b      	lsls	r3, r3, #17
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002748:	2b00      	cmp	r3, #0
 800274a:	d009      	beq.n	8002760 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002750:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002758:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	4b60      	ldr	r3, [pc, #384]	@ (80028e8 <HAL_ADC_Init+0x304>)
 8002768:	4013      	ands	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	69b9      	ldr	r1, [r7, #24]
 8002770:	430b      	orrs	r3, r1
 8002772:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ff14 	bl	80025bc <LL_ADC_INJ_IsConversionOngoing>
 8002794:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d16d      	bne.n	8002878 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d16a      	bne.n	8002878 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027a6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80027ae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027be:	f023 0302 	bic.w	r3, r3, #2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	69b9      	ldr	r1, [r7, #24]
 80027c8:	430b      	orrs	r3, r1
 80027ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d017      	beq.n	8002804 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80027e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027ec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6911      	ldr	r1, [r2, #16]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	430b      	orrs	r3, r1
 80027fe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002802:	e013      	b.n	800282c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002812:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002824:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002828:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002832:	2b01      	cmp	r3, #1
 8002834:	d118      	bne.n	8002868 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002840:	f023 0304 	bic.w	r3, r3, #4
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800284c:	4311      	orrs	r1, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002852:	4311      	orrs	r1, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002858:	430a      	orrs	r2, r1
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0201 	orr.w	r2, r2, #1
 8002864:	611a      	str	r2, [r3, #16]
 8002866:	e007      	b.n	8002878 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d10c      	bne.n	800289a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	f023 010f 	bic.w	r1, r3, #15
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	1e5a      	subs	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	631a      	str	r2, [r3, #48]	@ 0x30
 8002898:	e007      	b.n	80028aa <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 020f 	bic.w	r2, r2, #15
 80028a8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ae:	f023 0303 	bic.w	r3, r3, #3
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028ba:	e007      	b.n	80028cc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c0:	f043 0210 	orr.w	r2, r3, #16
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3724      	adds	r7, #36	@ 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd90      	pop	{r4, r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000000 	.word	0x20000000
 80028dc:	053e2d63 	.word	0x053e2d63
 80028e0:	50000100 	.word	0x50000100
 80028e4:	50000300 	.word	0x50000300
 80028e8:	fff04007 	.word	0xfff04007

080028ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028f8:	4851      	ldr	r0, [pc, #324]	@ (8002a40 <HAL_ADC_Start_DMA+0x154>)
 80028fa:	f7ff fdb5 	bl	8002468 <LL_ADC_GetMultimode>
 80028fe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fe46 	bl	8002596 <LL_ADC_REG_IsConversionOngoing>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	f040 808f 	bne.w	8002a30 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_ADC_Start_DMA+0x34>
 800291c:	2302      	movs	r3, #2
 800291e:	e08a      	b.n	8002a36 <HAL_ADC_Start_DMA+0x14a>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b05      	cmp	r3, #5
 8002932:	d002      	beq.n	800293a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	2b09      	cmp	r3, #9
 8002938:	d173      	bne.n	8002a22 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fc8e 	bl	800325c <ADC_Enable>
 8002940:	4603      	mov	r3, r0
 8002942:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002944:	7dfb      	ldrb	r3, [r7, #23]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d166      	bne.n	8002a18 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a38      	ldr	r2, [pc, #224]	@ (8002a44 <HAL_ADC_Start_DMA+0x158>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d002      	beq.n	800296e <HAL_ADC_Start_DMA+0x82>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	e001      	b.n	8002972 <HAL_ADC_Start_DMA+0x86>
 800296e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	4293      	cmp	r3, r2
 8002978:	d002      	beq.n	8002980 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d105      	bne.n	800298c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002984:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002990:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d006      	beq.n	80029a6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299c:	f023 0206 	bic.w	r2, r3, #6
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	661a      	str	r2, [r3, #96]	@ 0x60
 80029a4:	e002      	b.n	80029ac <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b0:	4a25      	ldr	r2, [pc, #148]	@ (8002a48 <HAL_ADC_Start_DMA+0x15c>)
 80029b2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b8:	4a24      	ldr	r2, [pc, #144]	@ (8002a4c <HAL_ADC_Start_DMA+0x160>)
 80029ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c0:	4a23      	ldr	r2, [pc, #140]	@ (8002a50 <HAL_ADC_Start_DMA+0x164>)
 80029c2:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	221c      	movs	r2, #28
 80029ca:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0210 	orr.w	r2, r2, #16
 80029e2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3340      	adds	r3, #64	@ 0x40
 80029fe:	4619      	mov	r1, r3
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f000 ff96 	bl	8003934 <HAL_DMA_Start_IT>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fdac 	bl	800256e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002a16:	e00d      	b.n	8002a34 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002a20:	e008      	b.n	8002a34 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002a2e:	e001      	b.n	8002a34 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a30:	2302      	movs	r3, #2
 8002a32:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	50000300 	.word	0x50000300
 8002a44:	50000100 	.word	0x50000100
 8002a48:	08003369 	.word	0x08003369
 8002a4c:	08003441 	.word	0x08003441
 8002a50:	0800345d 	.word	0x0800345d

08002a54 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b0b6      	sub	sp, #216	@ 0xd8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x22>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e3c8      	b.n	8003230 <HAL_ADC_ConfigChannel+0x7b4>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fd73 	bl	8002596 <LL_ADC_REG_IsConversionOngoing>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f040 83ad 	bne.w	8003212 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	6859      	ldr	r1, [r3, #4]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	f7ff fc54 	bl	8002372 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fd61 	bl	8002596 <LL_ADC_REG_IsConversionOngoing>
 8002ad4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fd6d 	bl	80025bc <LL_ADC_INJ_IsConversionOngoing>
 8002ae2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ae6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 81d9 	bne.w	8002ea2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002af0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f040 81d4 	bne.w	8002ea2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b02:	d10f      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f7ff fc5b 	bl	80023ca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fc02 	bl	8002326 <LL_ADC_SetSamplingTimeCommonConfig>
 8002b22:	e00e      	b.n	8002b42 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	6819      	ldr	r1, [r3, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	461a      	mov	r2, r3
 8002b32:	f7ff fc4a 	bl	80023ca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fbf2 	bl	8002326 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	08db      	lsrs	r3, r3, #3
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d022      	beq.n	8002baa <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	6919      	ldr	r1, [r3, #16]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b74:	f7ff fb4c 	bl	8002210 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	6919      	ldr	r1, [r3, #16]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	461a      	mov	r2, r3
 8002b86:	f7ff fb98 	bl	80022ba <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d102      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x124>
 8002b9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b9e:	e000      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x126>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f7ff fba4 	bl	80022f0 <LL_ADC_SetOffsetSaturation>
 8002ba8:	e17b      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fb51 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x15a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fb46 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	0e9b      	lsrs	r3, r3, #26
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	e01e      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x198>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2100      	movs	r1, #0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fb3b 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002c04:	2320      	movs	r3, #32
 8002c06:	e004      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002c08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x1b0>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	0e9b      	lsrs	r3, r3, #26
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	e018      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x1e2>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002c40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002c48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002c50:	2320      	movs	r3, #32
 8002c52:	e004      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002c54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d106      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2200      	movs	r2, #0
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fb0a 	bl	8002284 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2101      	movs	r1, #1
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff faee 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x220>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fae3 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002c92:	4603      	mov	r3, r0
 8002c94:	0e9b      	lsrs	r3, r3, #26
 8002c96:	f003 021f 	and.w	r2, r3, #31
 8002c9a:	e01e      	b.n	8002cda <HAL_ADC_ConfigChannel+0x25e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fad8 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002cc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002cca:	2320      	movs	r3, #32
 8002ccc:	e004      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002cce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d105      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x276>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	0e9b      	lsrs	r3, r3, #26
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	e018      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x2a8>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002d06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002d0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002d16:	2320      	movs	r3, #32
 8002d18:	e004      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002d1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d106      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2101      	movs	r1, #1
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff faa7 	bl	8002284 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fa8b 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x2e6>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2102      	movs	r1, #2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fa80 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	0e9b      	lsrs	r3, r3, #26
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	e01e      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x324>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2102      	movs	r1, #2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fa75 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002d80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002d88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002d90:	2320      	movs	r3, #32
 8002d92:	e004      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002d94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d98:	fab3 f383 	clz	r3, r3
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d105      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x33c>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0e9b      	lsrs	r3, r3, #26
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	e016      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x36a>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002dca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002dd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002dd8:	2320      	movs	r3, #32
 8002dda:	e004      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d106      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2200      	movs	r2, #0
 8002df0:	2102      	movs	r1, #2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fa46 	bl	8002284 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2103      	movs	r1, #3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fa2a 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10a      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x3a8>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2103      	movs	r1, #3
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fa1f 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	0e9b      	lsrs	r3, r3, #26
 8002e1e:	f003 021f 	and.w	r2, r3, #31
 8002e22:	e017      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x3d8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2103      	movs	r1, #3
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fa14 	bl	8002258 <LL_ADC_GetOffsetChannel>
 8002e30:	4603      	mov	r3, r0
 8002e32:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002e3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e3e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002e40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002e46:	2320      	movs	r3, #32
 8002e48:	e003      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002e4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e4c:	fab3 f383 	clz	r3, r3
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d105      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x3f0>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	0e9b      	lsrs	r3, r3, #26
 8002e66:	f003 031f 	and.w	r3, r3, #31
 8002e6a:	e011      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x414>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002e7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002e7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002e84:	2320      	movs	r3, #32
 8002e86:	e003      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002e88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d106      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2103      	movs	r1, #3
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff f9f1 	bl	8002284 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff fb4e 	bl	8002548 <LL_ADC_IsEnabled>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f040 8140 	bne.w	8003134 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	6819      	ldr	r1, [r3, #0]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f7ff faad 	bl	8002420 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4a8f      	ldr	r2, [pc, #572]	@ (8003108 <HAL_ADC_ConfigChannel+0x68c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	f040 8131 	bne.w	8003134 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10b      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x47e>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	0e9b      	lsrs	r3, r3, #26
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2b09      	cmp	r3, #9
 8002ef0:	bf94      	ite	ls
 8002ef2:	2301      	movls	r3, #1
 8002ef4:	2300      	movhi	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	e019      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x4b2>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002f08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f0a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002f0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002f12:	2320      	movs	r3, #32
 8002f14:	e003      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002f16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f18:	fab3 f383 	clz	r3, r3
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	2b09      	cmp	r3, #9
 8002f26:	bf94      	ite	ls
 8002f28:	2301      	movls	r3, #1
 8002f2a:	2300      	movhi	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d079      	beq.n	8003026 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x4d2>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	0e9b      	lsrs	r3, r3, #26
 8002f44:	3301      	adds	r3, #1
 8002f46:	069b      	lsls	r3, r3, #26
 8002f48:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f4c:	e015      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x4fe>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f5e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002f66:	2320      	movs	r3, #32
 8002f68:	e003      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	069b      	lsls	r3, r3, #26
 8002f76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x51e>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	0e9b      	lsrs	r3, r3, #26
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	2101      	movs	r1, #1
 8002f94:	fa01 f303 	lsl.w	r3, r1, r3
 8002f98:	e017      	b.n	8002fca <HAL_ADC_ConfigChannel+0x54e>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002faa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002fac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002fb2:	2320      	movs	r3, #32
 8002fb4:	e003      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fb8:	fab3 f383 	clz	r3, r3
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	ea42 0103 	orr.w	r1, r2, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x574>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	0e9b      	lsrs	r3, r3, #26
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f003 021f 	and.w	r2, r3, #31
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	4413      	add	r3, r2
 8002fec:	051b      	lsls	r3, r3, #20
 8002fee:	e018      	b.n	8003022 <HAL_ADC_ConfigChannel+0x5a6>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003000:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003008:	2320      	movs	r3, #32
 800300a:	e003      	b.n	8003014 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800300c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	3301      	adds	r3, #1
 8003016:	f003 021f 	and.w	r2, r3, #31
 800301a:	4613      	mov	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4413      	add	r3, r2
 8003020:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003022:	430b      	orrs	r3, r1
 8003024:	e081      	b.n	800312a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302e:	2b00      	cmp	r3, #0
 8003030:	d107      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x5c6>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	0e9b      	lsrs	r3, r3, #26
 8003038:	3301      	adds	r3, #1
 800303a:	069b      	lsls	r3, r3, #26
 800303c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003040:	e015      	b.n	800306e <HAL_ADC_ConfigChannel+0x5f2>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304a:	fa93 f3a3 	rbit	r3, r3
 800304e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003052:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800305a:	2320      	movs	r3, #32
 800305c:	e003      	b.n	8003066 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800305e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003060:	fab3 f383 	clz	r3, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	3301      	adds	r3, #1
 8003068:	069b      	lsls	r3, r3, #26
 800306a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <HAL_ADC_ConfigChannel+0x612>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	0e9b      	lsrs	r3, r3, #26
 8003080:	3301      	adds	r3, #1
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	2101      	movs	r1, #1
 8003088:	fa01 f303 	lsl.w	r3, r1, r3
 800308c:	e017      	b.n	80030be <HAL_ADC_ConfigChannel+0x642>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	61fb      	str	r3, [r7, #28]
  return result;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80030a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80030a6:	2320      	movs	r3, #32
 80030a8:	e003      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	fab3 f383 	clz	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	3301      	adds	r3, #1
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	ea42 0103 	orr.w	r1, r2, r3
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10d      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x66e>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	0e9b      	lsrs	r3, r3, #26
 80030d4:	3301      	adds	r3, #1
 80030d6:	f003 021f 	and.w	r2, r3, #31
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	3b1e      	subs	r3, #30
 80030e2:	051b      	lsls	r3, r3, #20
 80030e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030e8:	e01e      	b.n	8003128 <HAL_ADC_ConfigChannel+0x6ac>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	fa93 f3a3 	rbit	r3, r3
 80030f6:	613b      	str	r3, [r7, #16]
  return result;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d104      	bne.n	800310c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003102:	2320      	movs	r3, #32
 8003104:	e006      	b.n	8003114 <HAL_ADC_ConfigChannel+0x698>
 8003106:	bf00      	nop
 8003108:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	fab3 f383 	clz	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	3301      	adds	r3, #1
 8003116:	f003 021f 	and.w	r2, r3, #31
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	3b1e      	subs	r3, #30
 8003122:	051b      	lsls	r3, r3, #20
 8003124:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003128:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800312e:	4619      	mov	r1, r3
 8003130:	f7ff f94b 	bl	80023ca <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b3f      	ldr	r3, [pc, #252]	@ (8003238 <HAL_ADC_ConfigChannel+0x7bc>)
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d071      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003140:	483e      	ldr	r0, [pc, #248]	@ (800323c <HAL_ADC_ConfigChannel+0x7c0>)
 8003142:	f7ff f857 	bl	80021f4 <LL_ADC_GetCommonPathInternalCh>
 8003146:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a3c      	ldr	r2, [pc, #240]	@ (8003240 <HAL_ADC_ConfigChannel+0x7c4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d004      	beq.n	800315e <HAL_ADC_ConfigChannel+0x6e2>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a3a      	ldr	r2, [pc, #232]	@ (8003244 <HAL_ADC_ConfigChannel+0x7c8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d127      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800315e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003162:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d121      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003172:	d157      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003174:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003178:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800317c:	4619      	mov	r1, r3
 800317e:	482f      	ldr	r0, [pc, #188]	@ (800323c <HAL_ADC_ConfigChannel+0x7c0>)
 8003180:	f7ff f825 	bl	80021ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003184:	4b30      	ldr	r3, [pc, #192]	@ (8003248 <HAL_ADC_ConfigChannel+0x7cc>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	099b      	lsrs	r3, r3, #6
 800318a:	4a30      	ldr	r2, [pc, #192]	@ (800324c <HAL_ADC_ConfigChannel+0x7d0>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	099b      	lsrs	r3, r3, #6
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	4613      	mov	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800319e:	e002      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f9      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ac:	e03a      	b.n	8003224 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a27      	ldr	r2, [pc, #156]	@ (8003250 <HAL_ADC_ConfigChannel+0x7d4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d113      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10d      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a22      	ldr	r2, [pc, #136]	@ (8003254 <HAL_ADC_ConfigChannel+0x7d8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d02a      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031d6:	4619      	mov	r1, r3
 80031d8:	4818      	ldr	r0, [pc, #96]	@ (800323c <HAL_ADC_ConfigChannel+0x7c0>)
 80031da:	f7fe fff8 	bl	80021ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031de:	e021      	b.n	8003224 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003258 <HAL_ADC_ConfigChannel+0x7dc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d11c      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d116      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a16      	ldr	r2, [pc, #88]	@ (8003254 <HAL_ADC_ConfigChannel+0x7d8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d011      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003200:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003204:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003208:	4619      	mov	r1, r3
 800320a:	480c      	ldr	r0, [pc, #48]	@ (800323c <HAL_ADC_ConfigChannel+0x7c0>)
 800320c:	f7fe ffdf 	bl	80021ce <LL_ADC_SetCommonPathInternalCh>
 8003210:	e008      	b.n	8003224 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003216:	f043 0220 	orr.w	r2, r3, #32
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800322c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003230:	4618      	mov	r0, r3
 8003232:	37d8      	adds	r7, #216	@ 0xd8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	80080000 	.word	0x80080000
 800323c:	50000300 	.word	0x50000300
 8003240:	c3210000 	.word	0xc3210000
 8003244:	90c00010 	.word	0x90c00010
 8003248:	20000000 	.word	0x20000000
 800324c:	053e2d63 	.word	0x053e2d63
 8003250:	c7520000 	.word	0xc7520000
 8003254:	50000100 	.word	0x50000100
 8003258:	cb840000 	.word	0xcb840000

0800325c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003264:	2300      	movs	r3, #0
 8003266:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff f96b 	bl	8002548 <LL_ADC_IsEnabled>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d169      	bne.n	800334c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	4b36      	ldr	r3, [pc, #216]	@ (8003358 <ADC_Enable+0xfc>)
 8003280:	4013      	ands	r3, r2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00d      	beq.n	80032a2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328a:	f043 0210 	orr.w	r2, r3, #16
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003296:	f043 0201 	orr.w	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e055      	b.n	800334e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff f93a 	bl	8002520 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032ac:	482b      	ldr	r0, [pc, #172]	@ (800335c <ADC_Enable+0x100>)
 80032ae:	f7fe ffa1 	bl	80021f4 <LL_ADC_GetCommonPathInternalCh>
 80032b2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80032b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032bc:	4b28      	ldr	r3, [pc, #160]	@ (8003360 <ADC_Enable+0x104>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	099b      	lsrs	r3, r3, #6
 80032c2:	4a28      	ldr	r2, [pc, #160]	@ (8003364 <ADC_Enable+0x108>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	099b      	lsrs	r3, r3, #6
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032d6:	e002      	b.n	80032de <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	3b01      	subs	r3, #1
 80032dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f9      	bne.n	80032d8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032e4:	f7fe ff32 	bl	800214c <HAL_GetTick>
 80032e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ea:	e028      	b.n	800333e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff f929 	bl	8002548 <LL_ADC_IsEnabled>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d104      	bne.n	8003306 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff f90d 	bl	8002520 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003306:	f7fe ff21 	bl	800214c <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d914      	bls.n	800333e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b01      	cmp	r3, #1
 8003320:	d00d      	beq.n	800333e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003326:	f043 0210 	orr.w	r2, r3, #16
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003332:	f043 0201 	orr.w	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e007      	b.n	800334e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d1cf      	bne.n	80032ec <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	8000003f 	.word	0x8000003f
 800335c:	50000300 	.word	0x50000300
 8003360:	20000000 	.word	0x20000000
 8003364:	053e2d63 	.word	0x053e2d63

08003368 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003374:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800337e:	2b00      	cmp	r3, #0
 8003380:	d14b      	bne.n	800341a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003386:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d021      	beq.n	80033e0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fe ffd3 	bl	800234c <LL_ADC_REG_IsTriggerSourceSWStart>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d032      	beq.n	8003412 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d12b      	bne.n	8003412 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d11f      	bne.n	8003412 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80033de:	e018      	b.n	8003412 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d111      	bne.n	8003412 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d105      	bne.n	8003412 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340a:	f043 0201 	orr.w	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f7fd fcc0 	bl	8000d98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003418:	e00e      	b.n	8003438 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f7ff fb1e 	bl	8002a68 <HAL_ADC_ErrorCallback>
}
 800342c:	e004      	b.n	8003438 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
}
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f7ff fb00 	bl	8002a54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003454:	bf00      	nop
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003468:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800347a:	f043 0204 	orr.w	r2, r3, #4
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f7ff faf0 	bl	8002a68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <LL_ADC_IsEnabled>:
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <LL_ADC_IsEnabled+0x18>
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <LL_ADC_IsEnabled+0x1a>
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d101      	bne.n	80034ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b0a1      	sub	sp, #132	@ 0x84
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e08b      	b.n	8003612 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003502:	2300      	movs	r3, #0
 8003504:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003506:	2300      	movs	r3, #0
 8003508:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003512:	d102      	bne.n	800351a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003514:	4b41      	ldr	r3, [pc, #260]	@ (800361c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	e001      	b.n	800351e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800351a:	2300      	movs	r3, #0
 800351c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10b      	bne.n	800353c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e06a      	b.n	8003612 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff ffb9 	bl	80034b6 <LL_ADC_REG_IsConversionOngoing>
 8003544:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff ffb3 	bl	80034b6 <LL_ADC_REG_IsConversionOngoing>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d14c      	bne.n	80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003556:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003558:	2b00      	cmp	r3, #0
 800355a:	d149      	bne.n	80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800355c:	4b30      	ldr	r3, [pc, #192]	@ (8003620 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800355e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d028      	beq.n	80035ba <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003568:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6859      	ldr	r1, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800357a:	035b      	lsls	r3, r3, #13
 800357c:	430b      	orrs	r3, r1
 800357e:	431a      	orrs	r2, r3
 8003580:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003582:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003584:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003588:	f7ff ff82 	bl	8003490 <LL_ADC_IsEnabled>
 800358c:	4604      	mov	r4, r0
 800358e:	4823      	ldr	r0, [pc, #140]	@ (800361c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003590:	f7ff ff7e 	bl	8003490 <LL_ADC_IsEnabled>
 8003594:	4603      	mov	r3, r0
 8003596:	4323      	orrs	r3, r4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d133      	bne.n	8003604 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800359c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80035a4:	f023 030f 	bic.w	r3, r3, #15
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	6811      	ldr	r1, [r2, #0]
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	6892      	ldr	r2, [r2, #8]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	431a      	orrs	r2, r3
 80035b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035b6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035b8:	e024      	b.n	8003604 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80035ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035c6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80035ca:	f7ff ff61 	bl	8003490 <LL_ADC_IsEnabled>
 80035ce:	4604      	mov	r4, r0
 80035d0:	4812      	ldr	r0, [pc, #72]	@ (800361c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80035d2:	f7ff ff5d 	bl	8003490 <LL_ADC_IsEnabled>
 80035d6:	4603      	mov	r3, r0
 80035d8:	4323      	orrs	r3, r4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d112      	bne.n	8003604 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80035e6:	f023 030f 	bic.w	r3, r3, #15
 80035ea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80035ec:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035ee:	e009      	b.n	8003604 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f4:	f043 0220 	orr.w	r2, r3, #32
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003602:	e000      	b.n	8003606 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003604:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800360e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003612:	4618      	mov	r0, r3
 8003614:	3784      	adds	r7, #132	@ 0x84
 8003616:	46bd      	mov	sp, r7
 8003618:	bd90      	pop	{r4, r7, pc}
 800361a:	bf00      	nop
 800361c:	50000100 	.word	0x50000100
 8003620:	50000300 	.word	0x50000300

08003624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003634:	4b0c      	ldr	r3, [pc, #48]	@ (8003668 <__NVIC_SetPriorityGrouping+0x44>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003640:	4013      	ands	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800364c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003656:	4a04      	ldr	r2, [pc, #16]	@ (8003668 <__NVIC_SetPriorityGrouping+0x44>)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	60d3      	str	r3, [r2, #12]
}
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003670:	4b04      	ldr	r3, [pc, #16]	@ (8003684 <__NVIC_GetPriorityGrouping+0x18>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	0a1b      	lsrs	r3, r3, #8
 8003676:	f003 0307 	and.w	r3, r3, #7
}
 800367a:	4618      	mov	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003696:	2b00      	cmp	r3, #0
 8003698:	db0b      	blt.n	80036b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	f003 021f 	and.w	r2, r3, #31
 80036a0:	4907      	ldr	r1, [pc, #28]	@ (80036c0 <__NVIC_EnableIRQ+0x38>)
 80036a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	2001      	movs	r0, #1
 80036aa:	fa00 f202 	lsl.w	r2, r0, r2
 80036ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	e000e100 	.word	0xe000e100

080036c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	6039      	str	r1, [r7, #0]
 80036ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	db0a      	blt.n	80036ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	490c      	ldr	r1, [pc, #48]	@ (8003710 <__NVIC_SetPriority+0x4c>)
 80036de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e2:	0112      	lsls	r2, r2, #4
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	440b      	add	r3, r1
 80036e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036ec:	e00a      	b.n	8003704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	4908      	ldr	r1, [pc, #32]	@ (8003714 <__NVIC_SetPriority+0x50>)
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	3b04      	subs	r3, #4
 80036fc:	0112      	lsls	r2, r2, #4
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	440b      	add	r3, r1
 8003702:	761a      	strb	r2, [r3, #24]
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	e000e100 	.word	0xe000e100
 8003714:	e000ed00 	.word	0xe000ed00

08003718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003718:	b480      	push	{r7}
 800371a:	b089      	sub	sp, #36	@ 0x24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f1c3 0307 	rsb	r3, r3, #7
 8003732:	2b04      	cmp	r3, #4
 8003734:	bf28      	it	cs
 8003736:	2304      	movcs	r3, #4
 8003738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	3304      	adds	r3, #4
 800373e:	2b06      	cmp	r3, #6
 8003740:	d902      	bls.n	8003748 <NVIC_EncodePriority+0x30>
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	3b03      	subs	r3, #3
 8003746:	e000      	b.n	800374a <NVIC_EncodePriority+0x32>
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800374c:	f04f 32ff 	mov.w	r2, #4294967295
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43da      	mvns	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	401a      	ands	r2, r3
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003760:	f04f 31ff 	mov.w	r1, #4294967295
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	fa01 f303 	lsl.w	r3, r1, r3
 800376a:	43d9      	mvns	r1, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003770:	4313      	orrs	r3, r2
         );
}
 8003772:	4618      	mov	r0, r3
 8003774:	3724      	adds	r7, #36	@ 0x24
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff ff4c 	bl	8003624 <__NVIC_SetPriorityGrouping>
}
 800378c:	bf00      	nop
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037a2:	f7ff ff63 	bl	800366c <__NVIC_GetPriorityGrouping>
 80037a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	6978      	ldr	r0, [r7, #20]
 80037ae:	f7ff ffb3 	bl	8003718 <NVIC_EncodePriority>
 80037b2:	4602      	mov	r2, r0
 80037b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff ff82 	bl	80036c4 <__NVIC_SetPriority>
}
 80037c0:	bf00      	nop
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff ff56 	bl	8003688 <__NVIC_EnableIRQ>
}
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e08d      	b.n	8003912 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	4b47      	ldr	r3, [pc, #284]	@ (800391c <HAL_DMA_Init+0x138>)
 80037fe:	429a      	cmp	r2, r3
 8003800:	d80f      	bhi.n	8003822 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	4b45      	ldr	r3, [pc, #276]	@ (8003920 <HAL_DMA_Init+0x13c>)
 800380a:	4413      	add	r3, r2
 800380c:	4a45      	ldr	r2, [pc, #276]	@ (8003924 <HAL_DMA_Init+0x140>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	009a      	lsls	r2, r3, #2
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a42      	ldr	r2, [pc, #264]	@ (8003928 <HAL_DMA_Init+0x144>)
 800381e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003820:	e00e      	b.n	8003840 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	4b40      	ldr	r3, [pc, #256]	@ (800392c <HAL_DMA_Init+0x148>)
 800382a:	4413      	add	r3, r2
 800382c:	4a3d      	ldr	r2, [pc, #244]	@ (8003924 <HAL_DMA_Init+0x140>)
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	009a      	lsls	r2, r3, #2
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a3c      	ldr	r2, [pc, #240]	@ (8003930 <HAL_DMA_Init+0x14c>)
 800383e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800385a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003864:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800387c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f9b6 	bl	8003c04 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038a0:	d102      	bne.n	80038a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038bc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d010      	beq.n	80038e8 <HAL_DMA_Init+0x104>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d80c      	bhi.n	80038e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f9d6 	bl	8003c80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	e008      	b.n	80038fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40020407 	.word	0x40020407
 8003920:	bffdfff8 	.word	0xbffdfff8
 8003924:	cccccccd 	.word	0xcccccccd
 8003928:	40020000 	.word	0x40020000
 800392c:	bffdfbf8 	.word	0xbffdfbf8
 8003930:	40020400 	.word	0x40020400

08003934 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_DMA_Start_IT+0x20>
 8003950:	2302      	movs	r3, #2
 8003952:	e066      	b.n	8003a22 <HAL_DMA_Start_IT+0xee>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b01      	cmp	r3, #1
 8003966:	d155      	bne.n	8003a14 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0201 	bic.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f8fb 	bl	8003b88 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 020e 	orr.w	r2, r2, #14
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	e00f      	b.n	80039cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0204 	bic.w	r2, r2, #4
 80039ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 020a 	orr.w	r2, r2, #10
 80039ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d007      	beq.n	80039ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a00:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0201 	orr.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e005      	b.n	8003a20 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d026      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x7a>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d021      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d107      	bne.n	8003a7e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0204 	bic.w	r2, r2, #4
 8003a7c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a82:	f003 021f 	and.w	r2, r3, #31
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	2104      	movs	r1, #4
 8003a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a90:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d071      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003aa2:	e06c      	b.n	8003b7e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	2202      	movs	r2, #2
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d02e      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d029      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 020a 	bic.w	r2, r2, #10
 8003ade:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aec:	f003 021f 	and.w	r2, r3, #31
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	2102      	movs	r1, #2
 8003af6:	fa01 f202 	lsl.w	r2, r1, r2
 8003afa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d038      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b14:	e033      	b.n	8003b7e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	2208      	movs	r2, #8
 8003b20:	409a      	lsls	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d02a      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d025      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 020e 	bic.w	r2, r2, #14
 8003b42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b48:	f003 021f 	and.w	r2, r3, #31
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b50:	2101      	movs	r1, #1
 8003b52:	fa01 f202 	lsl.w	r2, r1, r2
 8003b56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d004      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b7e:	bf00      	nop
 8003b80:	bf00      	nop
}
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b9e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d004      	beq.n	8003bb2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003bb0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb6:	f003 021f 	and.w	r2, r3, #31
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b10      	cmp	r3, #16
 8003bd4:	d108      	bne.n	8003be8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003be6:	e007      	b.n	8003bf8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	60da      	str	r2, [r3, #12]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	4b16      	ldr	r3, [pc, #88]	@ (8003c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d802      	bhi.n	8003c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003c18:	4b15      	ldr	r3, [pc, #84]	@ (8003c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	e001      	b.n	8003c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003c1e:	4b15      	ldr	r3, [pc, #84]	@ (8003c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003c20:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	3b08      	subs	r3, #8
 8003c2e:	4a12      	ldr	r2, [pc, #72]	@ (8003c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3c:	089b      	lsrs	r3, r3, #2
 8003c3e:	009a      	lsls	r2, r3, #2
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4413      	add	r3, r2
 8003c44:	461a      	mov	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	2201      	movs	r2, #1
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003c5e:	bf00      	nop
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40020407 	.word	0x40020407
 8003c70:	40020800 	.word	0x40020800
 8003c74:	40020820 	.word	0x40020820
 8003c78:	cccccccd 	.word	0xcccccccd
 8003c7c:	40020880 	.word	0x40020880

08003c80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c94:	4413      	add	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	461a      	mov	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a08      	ldr	r2, [pc, #32]	@ (8003cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ca2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	f003 031f 	and.w	r3, r3, #31
 8003cac:	2201      	movs	r2, #1
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	1000823f 	.word	0x1000823f
 8003cc4:	40020940 	.word	0x40020940

08003cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cd6:	e15a      	b.n	8003f8e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	2101      	movs	r1, #1
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 814c 	beq.w	8003f88 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d005      	beq.n	8003d08 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d130      	bne.n	8003d6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	2203      	movs	r2, #3
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d3e:	2201      	movs	r2, #1
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	43db      	mvns	r3, r3
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	091b      	lsrs	r3, r3, #4
 8003d54:	f003 0201 	and.w	r2, r3, #1
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d017      	beq.n	8003da6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	2203      	movs	r2, #3
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d123      	bne.n	8003dfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	08da      	lsrs	r2, r3, #3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3208      	adds	r2, #8
 8003dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	220f      	movs	r2, #15
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	691a      	ldr	r2, [r3, #16]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	08da      	lsrs	r2, r3, #3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3208      	adds	r2, #8
 8003df4:	6939      	ldr	r1, [r7, #16]
 8003df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	2203      	movs	r2, #3
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 0203 	and.w	r2, r3, #3
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 80a6 	beq.w	8003f88 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e3c:	4b5b      	ldr	r3, [pc, #364]	@ (8003fac <HAL_GPIO_Init+0x2e4>)
 8003e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e40:	4a5a      	ldr	r2, [pc, #360]	@ (8003fac <HAL_GPIO_Init+0x2e4>)
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e48:	4b58      	ldr	r3, [pc, #352]	@ (8003fac <HAL_GPIO_Init+0x2e4>)
 8003e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e54:	4a56      	ldr	r2, [pc, #344]	@ (8003fb0 <HAL_GPIO_Init+0x2e8>)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	089b      	lsrs	r3, r3, #2
 8003e5a:	3302      	adds	r3, #2
 8003e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	220f      	movs	r2, #15
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4013      	ands	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e7e:	d01f      	beq.n	8003ec0 <HAL_GPIO_Init+0x1f8>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a4c      	ldr	r2, [pc, #304]	@ (8003fb4 <HAL_GPIO_Init+0x2ec>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d019      	beq.n	8003ebc <HAL_GPIO_Init+0x1f4>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a4b      	ldr	r2, [pc, #300]	@ (8003fb8 <HAL_GPIO_Init+0x2f0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d013      	beq.n	8003eb8 <HAL_GPIO_Init+0x1f0>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a4a      	ldr	r2, [pc, #296]	@ (8003fbc <HAL_GPIO_Init+0x2f4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00d      	beq.n	8003eb4 <HAL_GPIO_Init+0x1ec>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a49      	ldr	r2, [pc, #292]	@ (8003fc0 <HAL_GPIO_Init+0x2f8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d007      	beq.n	8003eb0 <HAL_GPIO_Init+0x1e8>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a48      	ldr	r2, [pc, #288]	@ (8003fc4 <HAL_GPIO_Init+0x2fc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d101      	bne.n	8003eac <HAL_GPIO_Init+0x1e4>
 8003ea8:	2305      	movs	r3, #5
 8003eaa:	e00a      	b.n	8003ec2 <HAL_GPIO_Init+0x1fa>
 8003eac:	2306      	movs	r3, #6
 8003eae:	e008      	b.n	8003ec2 <HAL_GPIO_Init+0x1fa>
 8003eb0:	2304      	movs	r3, #4
 8003eb2:	e006      	b.n	8003ec2 <HAL_GPIO_Init+0x1fa>
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e004      	b.n	8003ec2 <HAL_GPIO_Init+0x1fa>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e002      	b.n	8003ec2 <HAL_GPIO_Init+0x1fa>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <HAL_GPIO_Init+0x1fa>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	f002 0203 	and.w	r2, r2, #3
 8003ec8:	0092      	lsls	r2, r2, #2
 8003eca:	4093      	lsls	r3, r2
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ed2:	4937      	ldr	r1, [pc, #220]	@ (8003fb0 <HAL_GPIO_Init+0x2e8>)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	3302      	adds	r3, #2
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ee0:	4b39      	ldr	r3, [pc, #228]	@ (8003fc8 <HAL_GPIO_Init+0x300>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4013      	ands	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f04:	4a30      	ldr	r2, [pc, #192]	@ (8003fc8 <HAL_GPIO_Init+0x300>)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8003fc8 <HAL_GPIO_Init+0x300>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f2e:	4a26      	ldr	r2, [pc, #152]	@ (8003fc8 <HAL_GPIO_Init+0x300>)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f34:	4b24      	ldr	r3, [pc, #144]	@ (8003fc8 <HAL_GPIO_Init+0x300>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f58:	4a1b      	ldr	r2, [pc, #108]	@ (8003fc8 <HAL_GPIO_Init+0x300>)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc8 <HAL_GPIO_Init+0x300>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f82:	4a11      	ldr	r2, [pc, #68]	@ (8003fc8 <HAL_GPIO_Init+0x300>)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	fa22 f303 	lsr.w	r3, r2, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f47f ae9d 	bne.w	8003cd8 <HAL_GPIO_Init+0x10>
  }
}
 8003f9e:	bf00      	nop
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	48000400 	.word	0x48000400
 8003fb8:	48000800 	.word	0x48000800
 8003fbc:	48000c00 	.word	0x48000c00
 8003fc0:	48001000 	.word	0x48001000
 8003fc4:	48001400 	.word	0x48001400
 8003fc8:	40010400 	.word	0x40010400

08003fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	807b      	strh	r3, [r7, #2]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fdc:	787b      	ldrb	r3, [r7, #1]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fe2:	887a      	ldrh	r2, [r7, #2]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fe8:	e002      	b.n	8003ff0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fea:	887a      	ldrh	r2, [r7, #2]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800400e:	887a      	ldrh	r2, [r7, #2]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4013      	ands	r3, r2
 8004014:	041a      	lsls	r2, r3, #16
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	43d9      	mvns	r1, r3
 800401a:	887b      	ldrh	r3, [r7, #2]
 800401c:	400b      	ands	r3, r1
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	619a      	str	r2, [r3, #24]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800403a:	4b08      	ldr	r3, [pc, #32]	@ (800405c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	4013      	ands	r3, r2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d006      	beq.n	8004054 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004046:	4a05      	ldr	r2, [pc, #20]	@ (800405c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fd f976 	bl	8001340 <HAL_GPIO_EXTI_Callback>
  }
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40010400 	.word	0x40010400

08004060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e08d      	b.n	800418e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fd f836 	bl	80010f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2224      	movs	r2, #36	@ 0x24
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80040b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d107      	bne.n	80040da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	e006      	b.n	80040e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80040e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d108      	bne.n	8004102 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040fe:	605a      	str	r2, [r3, #4]
 8004100:	e007      	b.n	8004112 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004110:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004124:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004134:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69d9      	ldr	r1, [r3, #28]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d138      	bne.n	800421e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e032      	b.n	8004220 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2224      	movs	r2, #36	@ 0x24
 80041c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041e8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	e000      	b.n	8004220 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800421e:	2302      	movs	r3, #2
  }
}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b20      	cmp	r3, #32
 8004240:	d139      	bne.n	80042b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800424c:	2302      	movs	r3, #2
 800424e:	e033      	b.n	80042b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2224      	movs	r2, #36	@ 0x24
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0201 	bic.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800427e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0201 	orr.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	e000      	b.n	80042b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042b6:	2302      	movs	r3, #2
  }
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d141      	bne.n	8004356 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042d2:	4b4b      	ldr	r3, [pc, #300]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042de:	d131      	bne.n	8004344 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042e0:	4b47      	ldr	r3, [pc, #284]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042e6:	4a46      	ldr	r2, [pc, #280]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042f0:	4b43      	ldr	r3, [pc, #268]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042f8:	4a41      	ldr	r2, [pc, #260]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004300:	4b40      	ldr	r3, [pc, #256]	@ (8004404 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2232      	movs	r2, #50	@ 0x32
 8004306:	fb02 f303 	mul.w	r3, r2, r3
 800430a:	4a3f      	ldr	r2, [pc, #252]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	0c9b      	lsrs	r3, r3, #18
 8004312:	3301      	adds	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004316:	e002      	b.n	800431e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3b01      	subs	r3, #1
 800431c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800431e:	4b38      	ldr	r3, [pc, #224]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800432a:	d102      	bne.n	8004332 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f2      	bne.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004332:	4b33      	ldr	r3, [pc, #204]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800433a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800433e:	d158      	bne.n	80043f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e057      	b.n	80043f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004344:	4b2e      	ldr	r3, [pc, #184]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800434a:	4a2d      	ldr	r2, [pc, #180]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004350:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004354:	e04d      	b.n	80043f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800435c:	d141      	bne.n	80043e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800435e:	4b28      	ldr	r3, [pc, #160]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800436a:	d131      	bne.n	80043d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800436c:	4b24      	ldr	r3, [pc, #144]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800436e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004372:	4a23      	ldr	r2, [pc, #140]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004378:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800437c:	4b20      	ldr	r3, [pc, #128]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004384:	4a1e      	ldr	r2, [pc, #120]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004386:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800438a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800438c:	4b1d      	ldr	r3, [pc, #116]	@ (8004404 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2232      	movs	r2, #50	@ 0x32
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	4a1c      	ldr	r2, [pc, #112]	@ (8004408 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004398:	fba2 2303 	umull	r2, r3, r2, r3
 800439c:	0c9b      	lsrs	r3, r3, #18
 800439e:	3301      	adds	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043a2:	e002      	b.n	80043aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043aa:	4b15      	ldr	r3, [pc, #84]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043b6:	d102      	bne.n	80043be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f2      	bne.n	80043a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043be:	4b10      	ldr	r3, [pc, #64]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ca:	d112      	bne.n	80043f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e011      	b.n	80043f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80043e0:	e007      	b.n	80043f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043e2:	4b07      	ldr	r3, [pc, #28]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043ea:	4a05      	ldr	r2, [pc, #20]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	40007000 	.word	0x40007000
 8004404:	20000000 	.word	0x20000000
 8004408:	431bde83 	.word	0x431bde83

0800440c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004410:	4b05      	ldr	r3, [pc, #20]	@ (8004428 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	4a04      	ldr	r2, [pc, #16]	@ (8004428 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004416:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800441a:	6093      	str	r3, [r2, #8]
}
 800441c:	bf00      	nop
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40007000 	.word	0x40007000

0800442c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e2fe      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d075      	beq.n	8004536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800444a:	4b97      	ldr	r3, [pc, #604]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004454:	4b94      	ldr	r3, [pc, #592]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	2b0c      	cmp	r3, #12
 8004462:	d102      	bne.n	800446a <HAL_RCC_OscConfig+0x3e>
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	2b03      	cmp	r3, #3
 8004468:	d002      	beq.n	8004470 <HAL_RCC_OscConfig+0x44>
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	2b08      	cmp	r3, #8
 800446e:	d10b      	bne.n	8004488 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004470:	4b8d      	ldr	r3, [pc, #564]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d05b      	beq.n	8004534 <HAL_RCC_OscConfig+0x108>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d157      	bne.n	8004534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e2d9      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004490:	d106      	bne.n	80044a0 <HAL_RCC_OscConfig+0x74>
 8004492:	4b85      	ldr	r3, [pc, #532]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a84      	ldr	r2, [pc, #528]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 8004498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01d      	b.n	80044dc <HAL_RCC_OscConfig+0xb0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x98>
 80044aa:	4b7f      	ldr	r3, [pc, #508]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a7e      	ldr	r2, [pc, #504]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b7c      	ldr	r3, [pc, #496]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a7b      	ldr	r2, [pc, #492]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0xb0>
 80044c4:	4b78      	ldr	r3, [pc, #480]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a77      	ldr	r2, [pc, #476]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b75      	ldr	r3, [pc, #468]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a74      	ldr	r2, [pc, #464]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fd fe32 	bl	800214c <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fd fe2e 	bl	800214c <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	@ 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e29e      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044fe:	4b6a      	ldr	r3, [pc, #424]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0xc0>
 800450a:	e014      	b.n	8004536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fd fe1e 	bl	800214c <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004514:	f7fd fe1a 	bl	800214c <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	@ 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e28a      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004526:	4b60      	ldr	r3, [pc, #384]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0xe8>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d075      	beq.n	800462e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004542:	4b59      	ldr	r3, [pc, #356]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800454c:	4b56      	ldr	r3, [pc, #344]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2b0c      	cmp	r3, #12
 800455a:	d102      	bne.n	8004562 <HAL_RCC_OscConfig+0x136>
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d002      	beq.n	8004568 <HAL_RCC_OscConfig+0x13c>
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	2b04      	cmp	r3, #4
 8004566:	d11f      	bne.n	80045a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004568:	4b4f      	ldr	r3, [pc, #316]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_RCC_OscConfig+0x154>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e25d      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004580:	4b49      	ldr	r3, [pc, #292]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	061b      	lsls	r3, r3, #24
 800458e:	4946      	ldr	r1, [pc, #280]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 8004590:	4313      	orrs	r3, r2
 8004592:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004594:	4b45      	ldr	r3, [pc, #276]	@ (80046ac <HAL_RCC_OscConfig+0x280>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f7fc ffa5 	bl	80014e8 <HAL_InitTick>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d043      	beq.n	800462c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e249      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d023      	beq.n	80045f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045b0:	4b3d      	ldr	r3, [pc, #244]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a3c      	ldr	r2, [pc, #240]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 80045b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fd fdc6 	bl	800214c <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c4:	f7fd fdc2 	bl	800214c <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e232      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d6:	4b34      	ldr	r3, [pc, #208]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e2:	4b31      	ldr	r3, [pc, #196]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	061b      	lsls	r3, r3, #24
 80045f0:	492d      	ldr	r1, [pc, #180]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	604b      	str	r3, [r1, #4]
 80045f6:	e01a      	b.n	800462e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045f8:	4b2b      	ldr	r3, [pc, #172]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a2a      	ldr	r2, [pc, #168]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 80045fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7fd fda2 	bl	800214c <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460c:	f7fd fd9e 	bl	800214c <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e20e      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800461e:	4b22      	ldr	r3, [pc, #136]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f0      	bne.n	800460c <HAL_RCC_OscConfig+0x1e0>
 800462a:	e000      	b.n	800462e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800462c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d041      	beq.n	80046be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d01c      	beq.n	800467c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004642:	4b19      	ldr	r3, [pc, #100]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 8004644:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004648:	4a17      	ldr	r2, [pc, #92]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004652:	f7fd fd7b 	bl	800214c <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800465a:	f7fd fd77 	bl	800214c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e1e7      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800466c:	4b0e      	ldr	r3, [pc, #56]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 800466e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0ef      	beq.n	800465a <HAL_RCC_OscConfig+0x22e>
 800467a:	e020      	b.n	80046be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800467c:	4b0a      	ldr	r3, [pc, #40]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 800467e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004682:	4a09      	ldr	r2, [pc, #36]	@ (80046a8 <HAL_RCC_OscConfig+0x27c>)
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468c:	f7fd fd5e 	bl	800214c <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004692:	e00d      	b.n	80046b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004694:	f7fd fd5a 	bl	800214c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d906      	bls.n	80046b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e1ca      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046b0:	4b8c      	ldr	r3, [pc, #560]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 80046b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1ea      	bne.n	8004694 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 80a6 	beq.w	8004818 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046cc:	2300      	movs	r3, #0
 80046ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046d0:	4b84      	ldr	r3, [pc, #528]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 80046d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_RCC_OscConfig+0x2b4>
 80046dc:	2301      	movs	r3, #1
 80046de:	e000      	b.n	80046e2 <HAL_RCC_OscConfig+0x2b6>
 80046e0:	2300      	movs	r3, #0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00d      	beq.n	8004702 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e6:	4b7f      	ldr	r3, [pc, #508]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 80046e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ea:	4a7e      	ldr	r2, [pc, #504]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80046f2:	4b7c      	ldr	r3, [pc, #496]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 80046f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046fe:	2301      	movs	r3, #1
 8004700:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004702:	4b79      	ldr	r3, [pc, #484]	@ (80048e8 <HAL_RCC_OscConfig+0x4bc>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d118      	bne.n	8004740 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800470e:	4b76      	ldr	r3, [pc, #472]	@ (80048e8 <HAL_RCC_OscConfig+0x4bc>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a75      	ldr	r2, [pc, #468]	@ (80048e8 <HAL_RCC_OscConfig+0x4bc>)
 8004714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471a:	f7fd fd17 	bl	800214c <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004722:	f7fd fd13 	bl	800214c <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e183      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004734:	4b6c      	ldr	r3, [pc, #432]	@ (80048e8 <HAL_RCC_OscConfig+0x4bc>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d108      	bne.n	800475a <HAL_RCC_OscConfig+0x32e>
 8004748:	4b66      	ldr	r3, [pc, #408]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474e:	4a65      	ldr	r2, [pc, #404]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004758:	e024      	b.n	80047a4 <HAL_RCC_OscConfig+0x378>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2b05      	cmp	r3, #5
 8004760:	d110      	bne.n	8004784 <HAL_RCC_OscConfig+0x358>
 8004762:	4b60      	ldr	r3, [pc, #384]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004768:	4a5e      	ldr	r2, [pc, #376]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 800476a:	f043 0304 	orr.w	r3, r3, #4
 800476e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004772:	4b5c      	ldr	r3, [pc, #368]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004778:	4a5a      	ldr	r2, [pc, #360]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 800477a:	f043 0301 	orr.w	r3, r3, #1
 800477e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004782:	e00f      	b.n	80047a4 <HAL_RCC_OscConfig+0x378>
 8004784:	4b57      	ldr	r3, [pc, #348]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478a:	4a56      	ldr	r2, [pc, #344]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004794:	4b53      	ldr	r3, [pc, #332]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800479a:	4a52      	ldr	r2, [pc, #328]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 800479c:	f023 0304 	bic.w	r3, r3, #4
 80047a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d016      	beq.n	80047da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ac:	f7fd fcce 	bl	800214c <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b4:	f7fd fcca 	bl	800214c <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e138      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ca:	4b46      	ldr	r3, [pc, #280]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 80047cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0ed      	beq.n	80047b4 <HAL_RCC_OscConfig+0x388>
 80047d8:	e015      	b.n	8004806 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047da:	f7fd fcb7 	bl	800214c <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047e0:	e00a      	b.n	80047f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e2:	f7fd fcb3 	bl	800214c <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e121      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047f8:	4b3a      	ldr	r3, [pc, #232]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1ed      	bne.n	80047e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004806:	7ffb      	ldrb	r3, [r7, #31]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d105      	bne.n	8004818 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800480c:	4b35      	ldr	r3, [pc, #212]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 800480e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004810:	4a34      	ldr	r2, [pc, #208]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 8004812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004816:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d03c      	beq.n	800489e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d01c      	beq.n	8004866 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800482c:	4b2d      	ldr	r3, [pc, #180]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 800482e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004832:	4a2c      	ldr	r2, [pc, #176]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483c:	f7fd fc86 	bl	800214c <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004844:	f7fd fc82 	bl	800214c <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e0f2      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004856:	4b23      	ldr	r3, [pc, #140]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 8004858:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0ef      	beq.n	8004844 <HAL_RCC_OscConfig+0x418>
 8004864:	e01b      	b.n	800489e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004866:	4b1f      	ldr	r3, [pc, #124]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 8004868:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800486c:	4a1d      	ldr	r2, [pc, #116]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004876:	f7fd fc69 	bl	800214c <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800487e:	f7fd fc65 	bl	800214c <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e0d5      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004890:	4b14      	ldr	r3, [pc, #80]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 8004892:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1ef      	bne.n	800487e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 80c9 	beq.w	8004a3a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048a8:	4b0e      	ldr	r3, [pc, #56]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	f000 8083 	beq.w	80049bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d15e      	bne.n	800497c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048be:	4b09      	ldr	r3, [pc, #36]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a08      	ldr	r2, [pc, #32]	@ (80048e4 <HAL_RCC_OscConfig+0x4b8>)
 80048c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ca:	f7fd fc3f 	bl	800214c <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048d0:	e00c      	b.n	80048ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d2:	f7fd fc3b 	bl	800214c <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d905      	bls.n	80048ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e0ab      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
 80048e4:	40021000 	.word	0x40021000
 80048e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ec:	4b55      	ldr	r3, [pc, #340]	@ (8004a44 <HAL_RCC_OscConfig+0x618>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1ec      	bne.n	80048d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048f8:	4b52      	ldr	r3, [pc, #328]	@ (8004a44 <HAL_RCC_OscConfig+0x618>)
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	4b52      	ldr	r3, [pc, #328]	@ (8004a48 <HAL_RCC_OscConfig+0x61c>)
 80048fe:	4013      	ands	r3, r2
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6a11      	ldr	r1, [r2, #32]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004908:	3a01      	subs	r2, #1
 800490a:	0112      	lsls	r2, r2, #4
 800490c:	4311      	orrs	r1, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004912:	0212      	lsls	r2, r2, #8
 8004914:	4311      	orrs	r1, r2
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800491a:	0852      	lsrs	r2, r2, #1
 800491c:	3a01      	subs	r2, #1
 800491e:	0552      	lsls	r2, r2, #21
 8004920:	4311      	orrs	r1, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004926:	0852      	lsrs	r2, r2, #1
 8004928:	3a01      	subs	r2, #1
 800492a:	0652      	lsls	r2, r2, #25
 800492c:	4311      	orrs	r1, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004932:	06d2      	lsls	r2, r2, #27
 8004934:	430a      	orrs	r2, r1
 8004936:	4943      	ldr	r1, [pc, #268]	@ (8004a44 <HAL_RCC_OscConfig+0x618>)
 8004938:	4313      	orrs	r3, r2
 800493a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800493c:	4b41      	ldr	r3, [pc, #260]	@ (8004a44 <HAL_RCC_OscConfig+0x618>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a40      	ldr	r2, [pc, #256]	@ (8004a44 <HAL_RCC_OscConfig+0x618>)
 8004942:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004946:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004948:	4b3e      	ldr	r3, [pc, #248]	@ (8004a44 <HAL_RCC_OscConfig+0x618>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	4a3d      	ldr	r2, [pc, #244]	@ (8004a44 <HAL_RCC_OscConfig+0x618>)
 800494e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004952:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fd fbfa 	bl	800214c <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495c:	f7fd fbf6 	bl	800214c <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e066      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800496e:	4b35      	ldr	r3, [pc, #212]	@ (8004a44 <HAL_RCC_OscConfig+0x618>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0x530>
 800497a:	e05e      	b.n	8004a3a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497c:	4b31      	ldr	r3, [pc, #196]	@ (8004a44 <HAL_RCC_OscConfig+0x618>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a30      	ldr	r2, [pc, #192]	@ (8004a44 <HAL_RCC_OscConfig+0x618>)
 8004982:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004988:	f7fd fbe0 	bl	800214c <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004990:	f7fd fbdc 	bl	800214c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e04c      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a2:	4b28      	ldr	r3, [pc, #160]	@ (8004a44 <HAL_RCC_OscConfig+0x618>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80049ae:	4b25      	ldr	r3, [pc, #148]	@ (8004a44 <HAL_RCC_OscConfig+0x618>)
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	4924      	ldr	r1, [pc, #144]	@ (8004a44 <HAL_RCC_OscConfig+0x618>)
 80049b4:	4b25      	ldr	r3, [pc, #148]	@ (8004a4c <HAL_RCC_OscConfig+0x620>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	60cb      	str	r3, [r1, #12]
 80049ba:	e03e      	b.n	8004a3a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e039      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80049c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a44 <HAL_RCC_OscConfig+0x618>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f003 0203 	and.w	r2, r3, #3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d12c      	bne.n	8004a36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e6:	3b01      	subs	r3, #1
 80049e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d123      	bne.n	8004a36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d11b      	bne.n	8004a36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a08:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d113      	bne.n	8004a36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d109      	bne.n	8004a36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a2c:	085b      	lsrs	r3, r3, #1
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d001      	beq.n	8004a3a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3720      	adds	r7, #32
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40021000 	.word	0x40021000
 8004a48:	019f800c 	.word	0x019f800c
 8004a4c:	feeefffc 	.word	0xfeeefffc

08004a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e11e      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a68:	4b91      	ldr	r3, [pc, #580]	@ (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 030f 	and.w	r3, r3, #15
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d910      	bls.n	8004a98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	4b8e      	ldr	r3, [pc, #568]	@ (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 020f 	bic.w	r2, r3, #15
 8004a7e:	498c      	ldr	r1, [pc, #560]	@ (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a86:	4b8a      	ldr	r3, [pc, #552]	@ (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e106      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d073      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d129      	bne.n	8004b00 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aac:	4b81      	ldr	r3, [pc, #516]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0f4      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004abc:	f000 f9ce 	bl	8004e5c <RCC_GetSysClockFreqFromPLLSource>
 8004ac0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	4a7c      	ldr	r2, [pc, #496]	@ (8004cb8 <HAL_RCC_ClockConfig+0x268>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d93f      	bls.n	8004b4a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004aca:	4b7a      	ldr	r3, [pc, #488]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d033      	beq.n	8004b4a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d12f      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004aea:	4b72      	ldr	r3, [pc, #456]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004af2:	4a70      	ldr	r2, [pc, #448]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004af8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004afa:	2380      	movs	r3, #128	@ 0x80
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	e024      	b.n	8004b4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d107      	bne.n	8004b18 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b08:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d109      	bne.n	8004b28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0c6      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b18:	4b66      	ldr	r3, [pc, #408]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0be      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b28:	f000 f8ce 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004b2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	4a61      	ldr	r2, [pc, #388]	@ (8004cb8 <HAL_RCC_ClockConfig+0x268>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d909      	bls.n	8004b4a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b36:	4b5f      	ldr	r3, [pc, #380]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b3e:	4a5d      	ldr	r2, [pc, #372]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b44:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b46:	2380      	movs	r3, #128	@ 0x80
 8004b48:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f023 0203 	bic.w	r2, r3, #3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	4957      	ldr	r1, [pc, #348]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5c:	f7fd faf6 	bl	800214c <HAL_GetTick>
 8004b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b64:	f7fd faf2 	bl	800214c <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e095      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7a:	4b4e      	ldr	r3, [pc, #312]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 020c 	and.w	r2, r3, #12
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d1eb      	bne.n	8004b64 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d023      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ba4:	4b43      	ldr	r3, [pc, #268]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	4a42      	ldr	r2, [pc, #264]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004baa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004bae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004bbc:	4b3d      	ldr	r3, [pc, #244]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004bc4:	4a3b      	ldr	r2, [pc, #236]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004bc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004bca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bcc:	4b39      	ldr	r3, [pc, #228]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	4936      	ldr	r1, [pc, #216]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	608b      	str	r3, [r1, #8]
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2b80      	cmp	r3, #128	@ 0x80
 8004be4:	d105      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004be6:	4b33      	ldr	r3, [pc, #204]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	4a32      	ldr	r2, [pc, #200]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004bec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bf0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d21d      	bcs.n	8004c3c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c00:	4b2b      	ldr	r3, [pc, #172]	@ (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f023 020f 	bic.w	r2, r3, #15
 8004c08:	4929      	ldr	r1, [pc, #164]	@ (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c10:	f7fd fa9c 	bl	800214c <HAL_GetTick>
 8004c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c16:	e00a      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c18:	f7fd fa98 	bl	800214c <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e03b      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2e:	4b20      	ldr	r3, [pc, #128]	@ (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d1ed      	bne.n	8004c18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d008      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c48:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	4917      	ldr	r1, [pc, #92]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c66:	4b13      	ldr	r3, [pc, #76]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	490f      	ldr	r1, [pc, #60]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c7a:	f000 f825 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb4 <HAL_RCC_ClockConfig+0x264>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	091b      	lsrs	r3, r3, #4
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	490c      	ldr	r1, [pc, #48]	@ (8004cbc <HAL_RCC_ClockConfig+0x26c>)
 8004c8c:	5ccb      	ldrb	r3, [r1, r3]
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	fa22 f303 	lsr.w	r3, r2, r3
 8004c96:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc0 <HAL_RCC_ClockConfig+0x270>)
 8004c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc4 <HAL_RCC_ClockConfig+0x274>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fc fc22 	bl	80014e8 <HAL_InitTick>
 8004ca4:	4603      	mov	r3, r0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40022000 	.word	0x40022000
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	04c4b400 	.word	0x04c4b400
 8004cbc:	0800c16c 	.word	0x0800c16c
 8004cc0:	20000000 	.word	0x20000000
 8004cc4:	20000004 	.word	0x20000004

08004cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004cce:	4b2c      	ldr	r3, [pc, #176]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d102      	bne.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cda:	4b2a      	ldr	r3, [pc, #168]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cdc:	613b      	str	r3, [r7, #16]
 8004cde:	e047      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ce0:	4b27      	ldr	r3, [pc, #156]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 030c 	and.w	r3, r3, #12
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d102      	bne.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cec:	4b25      	ldr	r3, [pc, #148]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	e03e      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004cf2:	4b23      	ldr	r3, [pc, #140]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 030c 	and.w	r3, r3, #12
 8004cfa:	2b0c      	cmp	r3, #12
 8004cfc:	d136      	bne.n	8004d6c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cfe:	4b20      	ldr	r3, [pc, #128]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d08:	4b1d      	ldr	r3, [pc, #116]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	3301      	adds	r3, #1
 8004d14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d10c      	bne.n	8004d36 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d1c:	4a19      	ldr	r2, [pc, #100]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d24:	4a16      	ldr	r2, [pc, #88]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d26:	68d2      	ldr	r2, [r2, #12]
 8004d28:	0a12      	lsrs	r2, r2, #8
 8004d2a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	617b      	str	r3, [r7, #20]
      break;
 8004d34:	e00c      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d36:	4a13      	ldr	r2, [pc, #76]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3e:	4a10      	ldr	r2, [pc, #64]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d40:	68d2      	ldr	r2, [r2, #12]
 8004d42:	0a12      	lsrs	r2, r2, #8
 8004d44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d48:	fb02 f303 	mul.w	r3, r2, r3
 8004d4c:	617b      	str	r3, [r7, #20]
      break;
 8004d4e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d50:	4b0b      	ldr	r3, [pc, #44]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	0e5b      	lsrs	r3, r3, #25
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	e001      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d70:	693b      	ldr	r3, [r7, #16]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	40021000 	.word	0x40021000
 8004d84:	00f42400 	.word	0x00f42400

08004d88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d8c:	4b03      	ldr	r3, [pc, #12]	@ (8004d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	20000000 	.word	0x20000000

08004da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004da4:	f7ff fff0 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004da8:	4602      	mov	r2, r0
 8004daa:	4b06      	ldr	r3, [pc, #24]	@ (8004dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	0a1b      	lsrs	r3, r3, #8
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	4904      	ldr	r1, [pc, #16]	@ (8004dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004db6:	5ccb      	ldrb	r3, [r1, r3]
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	0800c17c 	.word	0x0800c17c

08004dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004dd0:	f7ff ffda 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	0adb      	lsrs	r3, r3, #11
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	4904      	ldr	r1, [pc, #16]	@ (8004df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004de2:	5ccb      	ldrb	r3, [r1, r3]
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40021000 	.word	0x40021000
 8004df4:	0800c17c 	.word	0x0800c17c

08004df8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	220f      	movs	r2, #15
 8004e06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004e08:	4b12      	ldr	r3, [pc, #72]	@ (8004e54 <HAL_RCC_GetClockConfig+0x5c>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 0203 	and.w	r2, r3, #3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004e14:	4b0f      	ldr	r3, [pc, #60]	@ (8004e54 <HAL_RCC_GetClockConfig+0x5c>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004e20:	4b0c      	ldr	r3, [pc, #48]	@ (8004e54 <HAL_RCC_GetClockConfig+0x5c>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004e2c:	4b09      	ldr	r3, [pc, #36]	@ (8004e54 <HAL_RCC_GetClockConfig+0x5c>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	08db      	lsrs	r3, r3, #3
 8004e32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004e3a:	4b07      	ldr	r3, [pc, #28]	@ (8004e58 <HAL_RCC_GetClockConfig+0x60>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 020f 	and.w	r2, r3, #15
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	601a      	str	r2, [r3, #0]
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40022000 	.word	0x40022000

08004e5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e62:	4b1e      	ldr	r3, [pc, #120]	@ (8004edc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004edc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	3301      	adds	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d10c      	bne.n	8004e9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e80:	4a17      	ldr	r2, [pc, #92]	@ (8004ee0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	4a14      	ldr	r2, [pc, #80]	@ (8004edc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e8a:	68d2      	ldr	r2, [r2, #12]
 8004e8c:	0a12      	lsrs	r2, r2, #8
 8004e8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e92:	fb02 f303 	mul.w	r3, r2, r3
 8004e96:	617b      	str	r3, [r7, #20]
    break;
 8004e98:	e00c      	b.n	8004eb4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e9a:	4a11      	ldr	r2, [pc, #68]	@ (8004ee0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8004edc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ea4:	68d2      	ldr	r2, [r2, #12]
 8004ea6:	0a12      	lsrs	r2, r2, #8
 8004ea8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004eac:	fb02 f303 	mul.w	r3, r2, r3
 8004eb0:	617b      	str	r3, [r7, #20]
    break;
 8004eb2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004eb4:	4b09      	ldr	r3, [pc, #36]	@ (8004edc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	0e5b      	lsrs	r3, r3, #25
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ecc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ece:	687b      	ldr	r3, [r7, #4]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	00f42400 	.word	0x00f42400

08004ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004eec:	2300      	movs	r3, #0
 8004eee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 8098 	beq.w	8005032 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f02:	2300      	movs	r3, #0
 8004f04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f06:	4b43      	ldr	r3, [pc, #268]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10d      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f12:	4b40      	ldr	r3, [pc, #256]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f16:	4a3f      	ldr	r2, [pc, #252]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f26:	60bb      	str	r3, [r7, #8]
 8004f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f2e:	4b3a      	ldr	r3, [pc, #232]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a39      	ldr	r2, [pc, #228]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f3a:	f7fd f907 	bl	800214c <HAL_GetTick>
 8004f3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f40:	e009      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f42:	f7fd f903 	bl	800214c <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d902      	bls.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	74fb      	strb	r3, [r7, #19]
        break;
 8004f54:	e005      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f56:	4b30      	ldr	r3, [pc, #192]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0ef      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004f62:	7cfb      	ldrb	r3, [r7, #19]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d159      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f68:	4b2a      	ldr	r3, [pc, #168]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d01e      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d019      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f84:	4b23      	ldr	r3, [pc, #140]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f90:	4b20      	ldr	r3, [pc, #128]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f96:	4a1f      	ldr	r2, [pc, #124]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fb0:	4a18      	ldr	r2, [pc, #96]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d016      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc2:	f7fd f8c3 	bl	800214c <HAL_GetTick>
 8004fc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fc8:	e00b      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fca:	f7fd f8bf 	bl	800214c <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d902      	bls.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	74fb      	strb	r3, [r7, #19]
            break;
 8004fe0:	e006      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0ec      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ff0:	7cfb      	ldrb	r3, [r7, #19]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10b      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ff6:	4b07      	ldr	r3, [pc, #28]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ffc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005004:	4903      	ldr	r1, [pc, #12]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800500c:	e008      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800500e:	7cfb      	ldrb	r3, [r7, #19]
 8005010:	74bb      	strb	r3, [r7, #18]
 8005012:	e005      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005014:	40021000 	.word	0x40021000
 8005018:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501c:	7cfb      	ldrb	r3, [r7, #19]
 800501e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005020:	7c7b      	ldrb	r3, [r7, #17]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d105      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005026:	4ba6      	ldr	r3, [pc, #664]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800502a:	4aa5      	ldr	r2, [pc, #660]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800502c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005030:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800503e:	4ba0      	ldr	r3, [pc, #640]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005044:	f023 0203 	bic.w	r2, r3, #3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	499c      	ldr	r1, [pc, #624]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005060:	4b97      	ldr	r3, [pc, #604]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005066:	f023 020c 	bic.w	r2, r3, #12
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	4994      	ldr	r1, [pc, #592]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005082:	4b8f      	ldr	r3, [pc, #572]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005088:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	498b      	ldr	r1, [pc, #556]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050a4:	4b86      	ldr	r3, [pc, #536]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	4983      	ldr	r1, [pc, #524]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050c6:	4b7e      	ldr	r3, [pc, #504]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	497a      	ldr	r1, [pc, #488]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050e8:	4b75      	ldr	r3, [pc, #468]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	4972      	ldr	r1, [pc, #456]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800510a:	4b6d      	ldr	r3, [pc, #436]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005110:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	4969      	ldr	r1, [pc, #420]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800512c:	4b64      	ldr	r3, [pc, #400]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005132:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	4961      	ldr	r1, [pc, #388]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800514e:	4b5c      	ldr	r3, [pc, #368]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005154:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	4958      	ldr	r1, [pc, #352]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800516c:	2b00      	cmp	r3, #0
 800516e:	d015      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005170:	4b53      	ldr	r3, [pc, #332]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005176:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517e:	4950      	ldr	r1, [pc, #320]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800518e:	d105      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005190:	4b4b      	ldr	r3, [pc, #300]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4a4a      	ldr	r2, [pc, #296]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005196:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800519a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d015      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051a8:	4b45      	ldr	r3, [pc, #276]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b6:	4942      	ldr	r1, [pc, #264]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051c6:	d105      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051c8:	4b3d      	ldr	r3, [pc, #244]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4a3c      	ldr	r2, [pc, #240]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051d2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d015      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051e0:	4b37      	ldr	r3, [pc, #220]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ee:	4934      	ldr	r1, [pc, #208]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051fe:	d105      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005200:	4b2f      	ldr	r3, [pc, #188]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4a2e      	ldr	r2, [pc, #184]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800520a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d015      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005218:	4b29      	ldr	r3, [pc, #164]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005226:	4926      	ldr	r1, [pc, #152]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005232:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005236:	d105      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005238:	4b21      	ldr	r3, [pc, #132]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4a20      	ldr	r2, [pc, #128]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005242:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d015      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005250:	4b1b      	ldr	r3, [pc, #108]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005256:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525e:	4918      	ldr	r1, [pc, #96]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800526e:	d105      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005270:	4b13      	ldr	r3, [pc, #76]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	4a12      	ldr	r2, [pc, #72]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800527a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d015      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005288:	4b0d      	ldr	r3, [pc, #52]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005296:	490a      	ldr	r1, [pc, #40]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052a6:	d105      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052a8:	4b05      	ldr	r3, [pc, #20]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4a04      	ldr	r2, [pc, #16]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80052b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40021000 	.word	0x40021000

080052c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e09d      	b.n	8005412 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d108      	bne.n	80052f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052e6:	d009      	beq.n	80052fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	61da      	str	r2, [r3, #28]
 80052ee:	e005      	b.n	80052fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fc f87a 	bl	8001410 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005332:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800533c:	d902      	bls.n	8005344 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	e002      	b.n	800534a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005344:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005348:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005352:	d007      	beq.n	8005364 <HAL_SPI_Init+0xa0>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800535c:	d002      	beq.n	8005364 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a6:	ea42 0103 	orr.w	r1, r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	0c1b      	lsrs	r3, r3, #16
 80053c0:	f003 0204 	and.w	r2, r3, #4
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	431a      	orrs	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80053e0:	ea42 0103 	orr.w	r1, r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005400:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b088      	sub	sp, #32
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	603b      	str	r3, [r7, #0]
 8005426:	4613      	mov	r3, r2
 8005428:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800542a:	f7fc fe8f 	bl	800214c <HAL_GetTick>
 800542e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b01      	cmp	r3, #1
 800543e:	d001      	beq.n	8005444 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005440:	2302      	movs	r3, #2
 8005442:	e15c      	b.n	80056fe <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_SPI_Transmit+0x36>
 800544a:	88fb      	ldrh	r3, [r7, #6]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e154      	b.n	80056fe <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_SPI_Transmit+0x48>
 800545e:	2302      	movs	r3, #2
 8005460:	e14d      	b.n	80056fe <HAL_SPI_Transmit+0x2e4>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2203      	movs	r2, #3
 800546e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	88fa      	ldrh	r2, [r7, #6]
 8005482:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	88fa      	ldrh	r2, [r7, #6]
 8005488:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054b4:	d10f      	bne.n	80054d6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e0:	2b40      	cmp	r3, #64	@ 0x40
 80054e2:	d007      	beq.n	80054f4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054fc:	d952      	bls.n	80055a4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_SPI_Transmit+0xf2>
 8005506:	8b7b      	ldrh	r3, [r7, #26]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d145      	bne.n	8005598 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005510:	881a      	ldrh	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551c:	1c9a      	adds	r2, r3, #2
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005530:	e032      	b.n	8005598 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b02      	cmp	r3, #2
 800553e:	d112      	bne.n	8005566 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005544:	881a      	ldrh	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005550:	1c9a      	adds	r2, r3, #2
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005564:	e018      	b.n	8005598 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005566:	f7fc fdf1 	bl	800214c <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d803      	bhi.n	800557e <HAL_SPI_Transmit+0x164>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d102      	bne.n	8005584 <HAL_SPI_Transmit+0x16a>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d109      	bne.n	8005598 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e0b2      	b.n	80056fe <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1c7      	bne.n	8005532 <HAL_SPI_Transmit+0x118>
 80055a2:	e083      	b.n	80056ac <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_SPI_Transmit+0x198>
 80055ac:	8b7b      	ldrh	r3, [r7, #26]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d177      	bne.n	80056a2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d912      	bls.n	80055e2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c0:	881a      	ldrh	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055cc:	1c9a      	adds	r2, r3, #2
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b02      	subs	r3, #2
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055e0:	e05f      	b.n	80056a2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	330c      	adds	r3, #12
 80055ec:	7812      	ldrb	r2, [r2, #0]
 80055ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005608:	e04b      	b.n	80056a2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b02      	cmp	r3, #2
 8005616:	d12b      	bne.n	8005670 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b01      	cmp	r3, #1
 8005620:	d912      	bls.n	8005648 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005626:	881a      	ldrh	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005632:	1c9a      	adds	r2, r3, #2
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b02      	subs	r3, #2
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005646:	e02c      	b.n	80056a2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	7812      	ldrb	r2, [r2, #0]
 8005654:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800566e:	e018      	b.n	80056a2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005670:	f7fc fd6c 	bl	800214c <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d803      	bhi.n	8005688 <HAL_SPI_Transmit+0x26e>
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d102      	bne.n	800568e <HAL_SPI_Transmit+0x274>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d109      	bne.n	80056a2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e02d      	b.n	80056fe <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1ae      	bne.n	800560a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056ac:	69fa      	ldr	r2, [r7, #28]
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fcf5 	bl	80060a0 <SPI_EndRxTxTransaction>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80056fc:	2300      	movs	r3, #0
  }
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3720      	adds	r7, #32
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b088      	sub	sp, #32
 800570a:	af02      	add	r7, sp, #8
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	603b      	str	r3, [r7, #0]
 8005712:	4613      	mov	r3, r2
 8005714:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b01      	cmp	r3, #1
 8005720:	d001      	beq.n	8005726 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005722:	2302      	movs	r3, #2
 8005724:	e123      	b.n	800596e <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <HAL_SPI_Receive+0x2c>
 800572c:	88fb      	ldrh	r3, [r7, #6]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e11b      	b.n	800596e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800573e:	d112      	bne.n	8005766 <HAL_SPI_Receive+0x60>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10e      	bne.n	8005766 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2204      	movs	r2, #4
 800574c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005750:	88fa      	ldrh	r2, [r7, #6]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	4613      	mov	r3, r2
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	68b9      	ldr	r1, [r7, #8]
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 f90a 	bl	8005976 <HAL_SPI_TransmitReceive>
 8005762:	4603      	mov	r3, r0
 8005764:	e103      	b.n	800596e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005766:	f7fc fcf1 	bl	800214c <HAL_GetTick>
 800576a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <HAL_SPI_Receive+0x74>
 8005776:	2302      	movs	r3, #2
 8005778:	e0f9      	b.n	800596e <HAL_SPI_Receive+0x268>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2204      	movs	r2, #4
 8005786:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	88fa      	ldrh	r2, [r7, #6]
 800579a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	88fa      	ldrh	r2, [r7, #6]
 80057a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057cc:	d908      	bls.n	80057e0 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80057dc:	605a      	str	r2, [r3, #4]
 80057de:	e007      	b.n	80057f0 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057ee:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057f8:	d10f      	bne.n	800581a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005808:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005818:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005824:	2b40      	cmp	r3, #64	@ 0x40
 8005826:	d007      	beq.n	8005838 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005836:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005840:	d875      	bhi.n	800592e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005842:	e037      	b.n	80058b4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b01      	cmp	r3, #1
 8005850:	d117      	bne.n	8005882 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f103 020c 	add.w	r2, r3, #12
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585e:	7812      	ldrb	r2, [r2, #0]
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005880:	e018      	b.n	80058b4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005882:	f7fc fc63 	bl	800214c <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d803      	bhi.n	800589a <HAL_SPI_Receive+0x194>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005898:	d102      	bne.n	80058a0 <HAL_SPI_Receive+0x19a>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d109      	bne.n	80058b4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e05c      	b.n	800596e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1c1      	bne.n	8005844 <HAL_SPI_Receive+0x13e>
 80058c0:	e03b      	b.n	800593a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d115      	bne.n	80058fc <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058da:	b292      	uxth	r2, r2
 80058dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e2:	1c9a      	adds	r2, r3, #2
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80058fa:	e018      	b.n	800592e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058fc:	f7fc fc26 	bl	800214c <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	429a      	cmp	r2, r3
 800590a:	d803      	bhi.n	8005914 <HAL_SPI_Receive+0x20e>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005912:	d102      	bne.n	800591a <HAL_SPI_Receive+0x214>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d109      	bne.n	800592e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e01f      	b.n	800596e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1c3      	bne.n	80058c2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 fb56 	bl	8005ff0 <SPI_EndRxTransaction>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2220      	movs	r2, #32
 800594e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e000      	b.n	800596e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800596c:	2300      	movs	r3, #0
  }
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b08a      	sub	sp, #40	@ 0x28
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
 8005982:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005984:	2301      	movs	r3, #1
 8005986:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005988:	f7fc fbe0 	bl	800214c <HAL_GetTick>
 800598c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005994:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800599c:	887b      	ldrh	r3, [r7, #2]
 800599e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80059a0:	887b      	ldrh	r3, [r7, #2]
 80059a2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059a4:	7ffb      	ldrb	r3, [r7, #31]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d00c      	beq.n	80059c4 <HAL_SPI_TransmitReceive+0x4e>
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059b0:	d106      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d102      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x4a>
 80059ba:	7ffb      	ldrb	r3, [r7, #31]
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d001      	beq.n	80059c4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80059c0:	2302      	movs	r3, #2
 80059c2:	e1f3      	b.n	8005dac <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d005      	beq.n	80059d6 <HAL_SPI_TransmitReceive+0x60>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <HAL_SPI_TransmitReceive+0x60>
 80059d0:	887b      	ldrh	r3, [r7, #2]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e1e8      	b.n	8005dac <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d101      	bne.n	80059e8 <HAL_SPI_TransmitReceive+0x72>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e1e1      	b.n	8005dac <HAL_SPI_TransmitReceive+0x436>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d003      	beq.n	8005a04 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2205      	movs	r2, #5
 8005a00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	887a      	ldrh	r2, [r7, #2]
 8005a14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	887a      	ldrh	r2, [r7, #2]
 8005a1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	887a      	ldrh	r2, [r7, #2]
 8005a2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	887a      	ldrh	r2, [r7, #2]
 8005a30:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a46:	d802      	bhi.n	8005a4e <HAL_SPI_TransmitReceive+0xd8>
 8005a48:	8abb      	ldrh	r3, [r7, #20]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d908      	bls.n	8005a60 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a5c:	605a      	str	r2, [r3, #4]
 8005a5e:	e007      	b.n	8005a70 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a6e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a7a:	2b40      	cmp	r3, #64	@ 0x40
 8005a7c:	d007      	beq.n	8005a8e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a96:	f240 8083 	bls.w	8005ba0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <HAL_SPI_TransmitReceive+0x132>
 8005aa2:	8afb      	ldrh	r3, [r7, #22]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d16f      	bne.n	8005b88 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aac:	881a      	ldrh	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab8:	1c9a      	adds	r2, r3, #2
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005acc:	e05c      	b.n	8005b88 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d11b      	bne.n	8005b14 <HAL_SPI_TransmitReceive+0x19e>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d016      	beq.n	8005b14 <HAL_SPI_TransmitReceive+0x19e>
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d113      	bne.n	8005b14 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af0:	881a      	ldrh	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afc:	1c9a      	adds	r2, r3, #2
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d11c      	bne.n	8005b5c <HAL_SPI_TransmitReceive+0x1e6>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d016      	beq.n	8005b5c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b38:	b292      	uxth	r2, r2
 8005b3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b40:	1c9a      	adds	r2, r3, #2
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b5c:	f7fc faf6 	bl	800214c <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d80d      	bhi.n	8005b88 <HAL_SPI_TransmitReceive+0x212>
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b72:	d009      	beq.n	8005b88 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e111      	b.n	8005dac <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d19d      	bne.n	8005ace <HAL_SPI_TransmitReceive+0x158>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d197      	bne.n	8005ace <HAL_SPI_TransmitReceive+0x158>
 8005b9e:	e0e5      	b.n	8005d6c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <HAL_SPI_TransmitReceive+0x23a>
 8005ba8:	8afb      	ldrh	r3, [r7, #22]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	f040 80d1 	bne.w	8005d52 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d912      	bls.n	8005be0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbe:	881a      	ldrh	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bca:	1c9a      	adds	r2, r3, #2
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	3b02      	subs	r3, #2
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005bde:	e0b8      	b.n	8005d52 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	330c      	adds	r3, #12
 8005bea:	7812      	ldrb	r2, [r2, #0]
 8005bec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c06:	e0a4      	b.n	8005d52 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d134      	bne.n	8005c80 <HAL_SPI_TransmitReceive+0x30a>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d02f      	beq.n	8005c80 <HAL_SPI_TransmitReceive+0x30a>
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d12c      	bne.n	8005c80 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d912      	bls.n	8005c56 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c34:	881a      	ldrh	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c40:	1c9a      	adds	r2, r3, #2
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	3b02      	subs	r3, #2
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c54:	e012      	b.n	8005c7c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	330c      	adds	r3, #12
 8005c60:	7812      	ldrb	r2, [r2, #0]
 8005c62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d148      	bne.n	8005d20 <HAL_SPI_TransmitReceive+0x3aa>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d042      	beq.n	8005d20 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d923      	bls.n	8005cee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb0:	b292      	uxth	r2, r2
 8005cb2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb8:	1c9a      	adds	r2, r3, #2
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b02      	subs	r3, #2
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d81f      	bhi.n	8005d1c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005cea:	605a      	str	r2, [r3, #4]
 8005cec:	e016      	b.n	8005d1c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f103 020c 	add.w	r2, r3, #12
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfa:	7812      	ldrb	r2, [r2, #0]
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d20:	f7fc fa14 	bl	800214c <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d803      	bhi.n	8005d38 <HAL_SPI_TransmitReceive+0x3c2>
 8005d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d36:	d102      	bne.n	8005d3e <HAL_SPI_TransmitReceive+0x3c8>
 8005d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d109      	bne.n	8005d52 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e02c      	b.n	8005dac <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f47f af55 	bne.w	8005c08 <HAL_SPI_TransmitReceive+0x292>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f47f af4e 	bne.w	8005c08 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d6c:	6a3a      	ldr	r2, [r7, #32]
 8005d6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 f995 	bl	80060a0 <SPI_EndRxTxTransaction>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e00e      	b.n	8005dac <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e000      	b.n	8005dac <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005daa:	2300      	movs	r3, #0
  }
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3728      	adds	r7, #40	@ 0x28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005dc4:	f7fc f9c2 	bl	800214c <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dd4:	f7fc f9ba 	bl	800214c <HAL_GetTick>
 8005dd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dda:	4b39      	ldr	r3, [pc, #228]	@ (8005ec0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	015b      	lsls	r3, r3, #5
 8005de0:	0d1b      	lsrs	r3, r3, #20
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	fb02 f303 	mul.w	r3, r2, r3
 8005de8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dea:	e054      	b.n	8005e96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df2:	d050      	beq.n	8005e96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005df4:	f7fc f9aa 	bl	800214c <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d902      	bls.n	8005e0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d13d      	bne.n	8005e86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e22:	d111      	bne.n	8005e48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e2c:	d004      	beq.n	8005e38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e36:	d107      	bne.n	8005e48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e50:	d10f      	bne.n	8005e72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e017      	b.n	8005eb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	bf0c      	ite	eq
 8005ea6:	2301      	moveq	r3, #1
 8005ea8:	2300      	movne	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d19b      	bne.n	8005dec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000000 	.word	0x20000000

08005ec4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08a      	sub	sp, #40	@ 0x28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ed6:	f7fc f939 	bl	800214c <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ede:	1a9b      	subs	r3, r3, r2
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005ee6:	f7fc f931 	bl	800214c <HAL_GetTick>
 8005eea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	330c      	adds	r3, #12
 8005ef2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ef4:	4b3d      	ldr	r3, [pc, #244]	@ (8005fec <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	00da      	lsls	r2, r3, #3
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	0d1b      	lsrs	r3, r3, #20
 8005f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f06:	fb02 f303 	mul.w	r3, r2, r3
 8005f0a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f0c:	e060      	b.n	8005fd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f14:	d107      	bne.n	8005f26 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d104      	bne.n	8005f26 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f24:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2c:	d050      	beq.n	8005fd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f2e:	f7fc f90d 	bl	800214c <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d902      	bls.n	8005f44 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d13d      	bne.n	8005fc0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f5c:	d111      	bne.n	8005f82 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f66:	d004      	beq.n	8005f72 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f70:	d107      	bne.n	8005f82 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f8a:	d10f      	bne.n	8005fac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005faa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e010      	b.n	8005fe2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d196      	bne.n	8005f0e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3728      	adds	r7, #40	@ 0x28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	20000000 	.word	0x20000000

08005ff0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af02      	add	r7, sp, #8
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006004:	d111      	bne.n	800602a <SPI_EndRxTransaction+0x3a>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800600e:	d004      	beq.n	800601a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006018:	d107      	bne.n	800602a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006028:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2200      	movs	r2, #0
 8006032:	2180      	movs	r1, #128	@ 0x80
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7ff febd 	bl	8005db4 <SPI_WaitFlagStateUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d007      	beq.n	8006050 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006044:	f043 0220 	orr.w	r2, r3, #32
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e023      	b.n	8006098 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006058:	d11d      	bne.n	8006096 <SPI_EndRxTransaction+0xa6>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006062:	d004      	beq.n	800606e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800606c:	d113      	bne.n	8006096 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2200      	movs	r2, #0
 8006076:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f7ff ff22 	bl	8005ec4 <SPI_WaitFifoStateUntilTimeout>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d007      	beq.n	8006096 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800608a:	f043 0220 	orr.w	r2, r3, #32
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e000      	b.n	8006098 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7ff ff03 	bl	8005ec4 <SPI_WaitFifoStateUntilTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d007      	beq.n	80060d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c8:	f043 0220 	orr.w	r2, r3, #32
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e027      	b.n	8006124 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2200      	movs	r2, #0
 80060dc:	2180      	movs	r1, #128	@ 0x80
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f7ff fe68 	bl	8005db4 <SPI_WaitFlagStateUntilTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d007      	beq.n	80060fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ee:	f043 0220 	orr.w	r2, r3, #32
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e014      	b.n	8006124 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2200      	movs	r2, #0
 8006102:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f7ff fedc 	bl	8005ec4 <SPI_WaitFifoStateUntilTimeout>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d007      	beq.n	8006122 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006116:	f043 0220 	orr.w	r2, r3, #32
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e000      	b.n	8006124 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e049      	b.n	80061d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7fb fd54 	bl	8001c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3304      	adds	r3, #4
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f000 fd8e 	bl	8006c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
	...

080061dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d001      	beq.n	80061f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e042      	b.n	800627a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a21      	ldr	r2, [pc, #132]	@ (8006288 <HAL_TIM_Base_Start+0xac>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d018      	beq.n	8006238 <HAL_TIM_Base_Start+0x5c>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800620e:	d013      	beq.n	8006238 <HAL_TIM_Base_Start+0x5c>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1d      	ldr	r2, [pc, #116]	@ (800628c <HAL_TIM_Base_Start+0xb0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00e      	beq.n	8006238 <HAL_TIM_Base_Start+0x5c>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1c      	ldr	r2, [pc, #112]	@ (8006290 <HAL_TIM_Base_Start+0xb4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d009      	beq.n	8006238 <HAL_TIM_Base_Start+0x5c>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1a      	ldr	r2, [pc, #104]	@ (8006294 <HAL_TIM_Base_Start+0xb8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d004      	beq.n	8006238 <HAL_TIM_Base_Start+0x5c>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a19      	ldr	r2, [pc, #100]	@ (8006298 <HAL_TIM_Base_Start+0xbc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d115      	bne.n	8006264 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689a      	ldr	r2, [r3, #8]
 800623e:	4b17      	ldr	r3, [pc, #92]	@ (800629c <HAL_TIM_Base_Start+0xc0>)
 8006240:	4013      	ands	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2b06      	cmp	r3, #6
 8006248:	d015      	beq.n	8006276 <HAL_TIM_Base_Start+0x9a>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006250:	d011      	beq.n	8006276 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0201 	orr.w	r2, r2, #1
 8006260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006262:	e008      	b.n	8006276 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0201 	orr.w	r2, r2, #1
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	e000      	b.n	8006278 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006276:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	40012c00 	.word	0x40012c00
 800628c:	40000400 	.word	0x40000400
 8006290:	40000800 	.word	0x40000800
 8006294:	40013400 	.word	0x40013400
 8006298:	40014000 	.word	0x40014000
 800629c:	00010007 	.word	0x00010007

080062a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d001      	beq.n	80062b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e04a      	b.n	800634e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0201 	orr.w	r2, r2, #1
 80062ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a21      	ldr	r2, [pc, #132]	@ (800635c <HAL_TIM_Base_Start_IT+0xbc>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d018      	beq.n	800630c <HAL_TIM_Base_Start_IT+0x6c>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e2:	d013      	beq.n	800630c <HAL_TIM_Base_Start_IT+0x6c>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006360 <HAL_TIM_Base_Start_IT+0xc0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00e      	beq.n	800630c <HAL_TIM_Base_Start_IT+0x6c>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006364 <HAL_TIM_Base_Start_IT+0xc4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d009      	beq.n	800630c <HAL_TIM_Base_Start_IT+0x6c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006368 <HAL_TIM_Base_Start_IT+0xc8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d004      	beq.n	800630c <HAL_TIM_Base_Start_IT+0x6c>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a19      	ldr	r2, [pc, #100]	@ (800636c <HAL_TIM_Base_Start_IT+0xcc>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d115      	bne.n	8006338 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	4b17      	ldr	r3, [pc, #92]	@ (8006370 <HAL_TIM_Base_Start_IT+0xd0>)
 8006314:	4013      	ands	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b06      	cmp	r3, #6
 800631c:	d015      	beq.n	800634a <HAL_TIM_Base_Start_IT+0xaa>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006324:	d011      	beq.n	800634a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0201 	orr.w	r2, r2, #1
 8006334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006336:	e008      	b.n	800634a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0201 	orr.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	e000      	b.n	800634c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	40012c00 	.word	0x40012c00
 8006360:	40000400 	.word	0x40000400
 8006364:	40000800 	.word	0x40000800
 8006368:	40013400 	.word	0x40013400
 800636c:	40014000 	.word	0x40014000
 8006370:	00010007 	.word	0x00010007

08006374 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e049      	b.n	800641a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d106      	bne.n	80063a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f841 	bl	8006422 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3304      	adds	r3, #4
 80063b0:	4619      	mov	r1, r3
 80063b2:	4610      	mov	r0, r2
 80063b4:	f000 fc6a 	bl	8006c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b086      	sub	sp, #24
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e097      	b.n	800657a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fb fc1c 	bl	8001c9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800647a:	f023 0307 	bic.w	r3, r3, #7
 800647e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3304      	adds	r3, #4
 8006488:	4619      	mov	r1, r3
 800648a:	4610      	mov	r0, r2
 800648c:	f000 fbfe 	bl	8006c8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064b8:	f023 0303 	bic.w	r3, r3, #3
 80064bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	021b      	lsls	r3, r3, #8
 80064c8:	4313      	orrs	r3, r2
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80064d6:	f023 030c 	bic.w	r3, r3, #12
 80064da:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	021b      	lsls	r3, r3, #8
 80064f2:	4313      	orrs	r3, r2
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	011a      	lsls	r2, r3, #4
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	031b      	lsls	r3, r3, #12
 8006506:	4313      	orrs	r3, r2
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4313      	orrs	r3, r2
 800650c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006514:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800651c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	4313      	orrs	r3, r2
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b084      	sub	sp, #16
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d020      	beq.n	80065e6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d01b      	beq.n	80065e6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f06f 0202 	mvn.w	r2, #2
 80065b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	f003 0303 	and.w	r3, r3, #3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fb3f 	bl	8006c50 <HAL_TIM_IC_CaptureCallback>
 80065d2:	e005      	b.n	80065e0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fb31 	bl	8006c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fb42 	bl	8006c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d020      	beq.n	8006632 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d01b      	beq.n	8006632 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f06f 0204 	mvn.w	r2, #4
 8006602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2202      	movs	r2, #2
 8006608:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fb19 	bl	8006c50 <HAL_TIM_IC_CaptureCallback>
 800661e:	e005      	b.n	800662c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fb0b 	bl	8006c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fb1c 	bl	8006c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d020      	beq.n	800667e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f003 0308 	and.w	r3, r3, #8
 8006642:	2b00      	cmp	r3, #0
 8006644:	d01b      	beq.n	800667e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f06f 0208 	mvn.w	r2, #8
 800664e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2204      	movs	r2, #4
 8006654:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	f003 0303 	and.w	r3, r3, #3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 faf3 	bl	8006c50 <HAL_TIM_IC_CaptureCallback>
 800666a:	e005      	b.n	8006678 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fae5 	bl	8006c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 faf6 	bl	8006c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f003 0310 	and.w	r3, r3, #16
 8006684:	2b00      	cmp	r3, #0
 8006686:	d020      	beq.n	80066ca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f003 0310 	and.w	r3, r3, #16
 800668e:	2b00      	cmp	r3, #0
 8006690:	d01b      	beq.n	80066ca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f06f 0210 	mvn.w	r2, #16
 800669a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2208      	movs	r2, #8
 80066a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 facd 	bl	8006c50 <HAL_TIM_IC_CaptureCallback>
 80066b6:	e005      	b.n	80066c4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fabf 	bl	8006c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fad0 	bl	8006c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00c      	beq.n	80066ee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d007      	beq.n	80066ee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f06f 0201 	mvn.w	r2, #1
 80066e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7fa fe3b 	bl	8001364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d104      	bne.n	8006702 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00c      	beq.n	800671c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006708:	2b00      	cmp	r3, #0
 800670a:	d007      	beq.n	800671c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fffe 	bl	8007718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00c      	beq.n	8006740 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800672c:	2b00      	cmp	r3, #0
 800672e:	d007      	beq.n	8006740 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fff6 	bl	800772c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00c      	beq.n	8006764 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	d007      	beq.n	8006764 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800675c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fa8a 	bl	8006c78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00c      	beq.n	8006788 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f003 0320 	and.w	r3, r3, #32
 8006774:	2b00      	cmp	r3, #0
 8006776:	d007      	beq.n	8006788 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f06f 0220 	mvn.w	r2, #32
 8006780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 ffbe 	bl	8007704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00c      	beq.n	80067ac <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d007      	beq.n	80067ac <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80067a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 ffca 	bl	8007740 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00c      	beq.n	80067d0 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d007      	beq.n	80067d0 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80067c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 ffc2 	bl	8007754 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00c      	beq.n	80067f4 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d007      	beq.n	80067f4 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80067ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 ffba 	bl	8007768 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00c      	beq.n	8006818 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d007      	beq.n	8006818 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 ffb2 	bl	800777c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006818:	bf00      	nop
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800682c:	2300      	movs	r3, #0
 800682e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800683a:	2302      	movs	r3, #2
 800683c:	e0ff      	b.n	8006a3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b14      	cmp	r3, #20
 800684a:	f200 80f0 	bhi.w	8006a2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800684e:	a201      	add	r2, pc, #4	@ (adr r2, 8006854 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006854:	080068a9 	.word	0x080068a9
 8006858:	08006a2f 	.word	0x08006a2f
 800685c:	08006a2f 	.word	0x08006a2f
 8006860:	08006a2f 	.word	0x08006a2f
 8006864:	080068e9 	.word	0x080068e9
 8006868:	08006a2f 	.word	0x08006a2f
 800686c:	08006a2f 	.word	0x08006a2f
 8006870:	08006a2f 	.word	0x08006a2f
 8006874:	0800692b 	.word	0x0800692b
 8006878:	08006a2f 	.word	0x08006a2f
 800687c:	08006a2f 	.word	0x08006a2f
 8006880:	08006a2f 	.word	0x08006a2f
 8006884:	0800696b 	.word	0x0800696b
 8006888:	08006a2f 	.word	0x08006a2f
 800688c:	08006a2f 	.word	0x08006a2f
 8006890:	08006a2f 	.word	0x08006a2f
 8006894:	080069ad 	.word	0x080069ad
 8006898:	08006a2f 	.word	0x08006a2f
 800689c:	08006a2f 	.word	0x08006a2f
 80068a0:	08006a2f 	.word	0x08006a2f
 80068a4:	080069ed 	.word	0x080069ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68b9      	ldr	r1, [r7, #8]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fa88 	bl	8006dc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699a      	ldr	r2, [r3, #24]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 0208 	orr.w	r2, r2, #8
 80068c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	699a      	ldr	r2, [r3, #24]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0204 	bic.w	r2, r2, #4
 80068d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6999      	ldr	r1, [r3, #24]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	691a      	ldr	r2, [r3, #16]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	619a      	str	r2, [r3, #24]
      break;
 80068e6:	e0a5      	b.n	8006a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 faf8 	bl	8006ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699a      	ldr	r2, [r3, #24]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699a      	ldr	r2, [r3, #24]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6999      	ldr	r1, [r3, #24]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	021a      	lsls	r2, r3, #8
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	619a      	str	r2, [r3, #24]
      break;
 8006928:	e084      	b.n	8006a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68b9      	ldr	r1, [r7, #8]
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fb61 	bl	8006ff8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69da      	ldr	r2, [r3, #28]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f042 0208 	orr.w	r2, r2, #8
 8006944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69da      	ldr	r2, [r3, #28]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0204 	bic.w	r2, r2, #4
 8006954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69d9      	ldr	r1, [r3, #28]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	691a      	ldr	r2, [r3, #16]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	61da      	str	r2, [r3, #28]
      break;
 8006968:	e064      	b.n	8006a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	4618      	mov	r0, r3
 8006972:	f000 fbc9 	bl	8007108 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69da      	ldr	r2, [r3, #28]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69da      	ldr	r2, [r3, #28]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69d9      	ldr	r1, [r3, #28]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	021a      	lsls	r2, r3, #8
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	61da      	str	r2, [r3, #28]
      break;
 80069aa:	e043      	b.n	8006a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68b9      	ldr	r1, [r7, #8]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fc32 	bl	800721c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0208 	orr.w	r2, r2, #8
 80069c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0204 	bic.w	r2, r2, #4
 80069d6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	691a      	ldr	r2, [r3, #16]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80069ea:	e023      	b.n	8006a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68b9      	ldr	r1, [r7, #8]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 fc76 	bl	80072e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a16:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	021a      	lsls	r2, r3, #8
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006a2c:	e002      	b.n	8006a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	75fb      	strb	r3, [r7, #23]
      break;
 8006a32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop

08006a48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d101      	bne.n	8006a64 <HAL_TIM_ConfigClockSource+0x1c>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e0de      	b.n	8006c22 <HAL_TIM_ConfigClockSource+0x1da>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006a82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a63      	ldr	r2, [pc, #396]	@ (8006c2c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	f000 80a9 	beq.w	8006bf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006aa4:	4a61      	ldr	r2, [pc, #388]	@ (8006c2c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	f200 80ae 	bhi.w	8006c08 <HAL_TIM_ConfigClockSource+0x1c0>
 8006aac:	4a60      	ldr	r2, [pc, #384]	@ (8006c30 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	f000 80a1 	beq.w	8006bf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ab4:	4a5e      	ldr	r2, [pc, #376]	@ (8006c30 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	f200 80a6 	bhi.w	8006c08 <HAL_TIM_ConfigClockSource+0x1c0>
 8006abc:	4a5d      	ldr	r2, [pc, #372]	@ (8006c34 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	f000 8099 	beq.w	8006bf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ac4:	4a5b      	ldr	r2, [pc, #364]	@ (8006c34 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	f200 809e 	bhi.w	8006c08 <HAL_TIM_ConfigClockSource+0x1c0>
 8006acc:	4a5a      	ldr	r2, [pc, #360]	@ (8006c38 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	f000 8091 	beq.w	8006bf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ad4:	4a58      	ldr	r2, [pc, #352]	@ (8006c38 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	f200 8096 	bhi.w	8006c08 <HAL_TIM_ConfigClockSource+0x1c0>
 8006adc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006ae0:	f000 8089 	beq.w	8006bf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ae4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006ae8:	f200 808e 	bhi.w	8006c08 <HAL_TIM_ConfigClockSource+0x1c0>
 8006aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006af0:	d03e      	beq.n	8006b70 <HAL_TIM_ConfigClockSource+0x128>
 8006af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006af6:	f200 8087 	bhi.w	8006c08 <HAL_TIM_ConfigClockSource+0x1c0>
 8006afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006afe:	f000 8086 	beq.w	8006c0e <HAL_TIM_ConfigClockSource+0x1c6>
 8006b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b06:	d87f      	bhi.n	8006c08 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b08:	2b70      	cmp	r3, #112	@ 0x70
 8006b0a:	d01a      	beq.n	8006b42 <HAL_TIM_ConfigClockSource+0xfa>
 8006b0c:	2b70      	cmp	r3, #112	@ 0x70
 8006b0e:	d87b      	bhi.n	8006c08 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b10:	2b60      	cmp	r3, #96	@ 0x60
 8006b12:	d050      	beq.n	8006bb6 <HAL_TIM_ConfigClockSource+0x16e>
 8006b14:	2b60      	cmp	r3, #96	@ 0x60
 8006b16:	d877      	bhi.n	8006c08 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b18:	2b50      	cmp	r3, #80	@ 0x50
 8006b1a:	d03c      	beq.n	8006b96 <HAL_TIM_ConfigClockSource+0x14e>
 8006b1c:	2b50      	cmp	r3, #80	@ 0x50
 8006b1e:	d873      	bhi.n	8006c08 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b20:	2b40      	cmp	r3, #64	@ 0x40
 8006b22:	d058      	beq.n	8006bd6 <HAL_TIM_ConfigClockSource+0x18e>
 8006b24:	2b40      	cmp	r3, #64	@ 0x40
 8006b26:	d86f      	bhi.n	8006c08 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b28:	2b30      	cmp	r3, #48	@ 0x30
 8006b2a:	d064      	beq.n	8006bf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b2c:	2b30      	cmp	r3, #48	@ 0x30
 8006b2e:	d86b      	bhi.n	8006c08 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b30:	2b20      	cmp	r3, #32
 8006b32:	d060      	beq.n	8006bf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d867      	bhi.n	8006c08 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d05c      	beq.n	8006bf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b3c:	2b10      	cmp	r3, #16
 8006b3e:	d05a      	beq.n	8006bf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b40:	e062      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b52:	f000 fca9 	bl	80074a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	609a      	str	r2, [r3, #8]
      break;
 8006b6e:	e04f      	b.n	8006c10 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b80:	f000 fc92 	bl	80074a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b92:	609a      	str	r2, [r3, #8]
      break;
 8006b94:	e03c      	b.n	8006c10 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f000 fc04 	bl	80073b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2150      	movs	r1, #80	@ 0x50
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 fc5d 	bl	800746e <TIM_ITRx_SetConfig>
      break;
 8006bb4:	e02c      	b.n	8006c10 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f000 fc23 	bl	800740e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2160      	movs	r1, #96	@ 0x60
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 fc4d 	bl	800746e <TIM_ITRx_SetConfig>
      break;
 8006bd4:	e01c      	b.n	8006c10 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006be2:	461a      	mov	r2, r3
 8006be4:	f000 fbe4 	bl	80073b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2140      	movs	r1, #64	@ 0x40
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fc3d 	bl	800746e <TIM_ITRx_SetConfig>
      break;
 8006bf4:	e00c      	b.n	8006c10 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4610      	mov	r0, r2
 8006c02:	f000 fc34 	bl	800746e <TIM_ITRx_SetConfig>
      break;
 8006c06:	e003      	b.n	8006c10 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c0c:	e000      	b.n	8006c10 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006c0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	00100070 	.word	0x00100070
 8006c30:	00100040 	.word	0x00100040
 8006c34:	00100030 	.word	0x00100030
 8006c38:	00100020 	.word	0x00100020

08006c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a42      	ldr	r2, [pc, #264]	@ (8006da8 <TIM_Base_SetConfig+0x11c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00f      	beq.n	8006cc4 <TIM_Base_SetConfig+0x38>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006caa:	d00b      	beq.n	8006cc4 <TIM_Base_SetConfig+0x38>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a3f      	ldr	r2, [pc, #252]	@ (8006dac <TIM_Base_SetConfig+0x120>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d007      	beq.n	8006cc4 <TIM_Base_SetConfig+0x38>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a3e      	ldr	r2, [pc, #248]	@ (8006db0 <TIM_Base_SetConfig+0x124>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d003      	beq.n	8006cc4 <TIM_Base_SetConfig+0x38>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a3d      	ldr	r2, [pc, #244]	@ (8006db4 <TIM_Base_SetConfig+0x128>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d108      	bne.n	8006cd6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a33      	ldr	r2, [pc, #204]	@ (8006da8 <TIM_Base_SetConfig+0x11c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d01b      	beq.n	8006d16 <TIM_Base_SetConfig+0x8a>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ce4:	d017      	beq.n	8006d16 <TIM_Base_SetConfig+0x8a>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a30      	ldr	r2, [pc, #192]	@ (8006dac <TIM_Base_SetConfig+0x120>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d013      	beq.n	8006d16 <TIM_Base_SetConfig+0x8a>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a2f      	ldr	r2, [pc, #188]	@ (8006db0 <TIM_Base_SetConfig+0x124>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d00f      	beq.n	8006d16 <TIM_Base_SetConfig+0x8a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8006db4 <TIM_Base_SetConfig+0x128>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d00b      	beq.n	8006d16 <TIM_Base_SetConfig+0x8a>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a2d      	ldr	r2, [pc, #180]	@ (8006db8 <TIM_Base_SetConfig+0x12c>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d007      	beq.n	8006d16 <TIM_Base_SetConfig+0x8a>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a2c      	ldr	r2, [pc, #176]	@ (8006dbc <TIM_Base_SetConfig+0x130>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d003      	beq.n	8006d16 <TIM_Base_SetConfig+0x8a>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a2b      	ldr	r2, [pc, #172]	@ (8006dc0 <TIM_Base_SetConfig+0x134>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d108      	bne.n	8006d28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a16      	ldr	r2, [pc, #88]	@ (8006da8 <TIM_Base_SetConfig+0x11c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d00f      	beq.n	8006d74 <TIM_Base_SetConfig+0xe8>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a17      	ldr	r2, [pc, #92]	@ (8006db4 <TIM_Base_SetConfig+0x128>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00b      	beq.n	8006d74 <TIM_Base_SetConfig+0xe8>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a16      	ldr	r2, [pc, #88]	@ (8006db8 <TIM_Base_SetConfig+0x12c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d007      	beq.n	8006d74 <TIM_Base_SetConfig+0xe8>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a15      	ldr	r2, [pc, #84]	@ (8006dbc <TIM_Base_SetConfig+0x130>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d003      	beq.n	8006d74 <TIM_Base_SetConfig+0xe8>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a14      	ldr	r2, [pc, #80]	@ (8006dc0 <TIM_Base_SetConfig+0x134>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d103      	bne.n	8006d7c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d105      	bne.n	8006d9a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	f023 0201 	bic.w	r2, r3, #1
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	611a      	str	r2, [r3, #16]
  }
}
 8006d9a:	bf00      	nop
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40012c00 	.word	0x40012c00
 8006dac:	40000400 	.word	0x40000400
 8006db0:	40000800 	.word	0x40000800
 8006db4:	40013400 	.word	0x40013400
 8006db8:	40014000 	.word	0x40014000
 8006dbc:	40014400 	.word	0x40014400
 8006dc0:	40014800 	.word	0x40014800

08006dc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	f023 0201 	bic.w	r2, r3, #1
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0303 	bic.w	r3, r3, #3
 8006dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f023 0302 	bic.w	r3, r3, #2
 8006e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8006ed0 <TIM_OC1_SetConfig+0x10c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d00f      	beq.n	8006e44 <TIM_OC1_SetConfig+0x80>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a2b      	ldr	r2, [pc, #172]	@ (8006ed4 <TIM_OC1_SetConfig+0x110>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d00b      	beq.n	8006e44 <TIM_OC1_SetConfig+0x80>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8006ed8 <TIM_OC1_SetConfig+0x114>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d007      	beq.n	8006e44 <TIM_OC1_SetConfig+0x80>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a29      	ldr	r2, [pc, #164]	@ (8006edc <TIM_OC1_SetConfig+0x118>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d003      	beq.n	8006e44 <TIM_OC1_SetConfig+0x80>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a28      	ldr	r2, [pc, #160]	@ (8006ee0 <TIM_OC1_SetConfig+0x11c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d10c      	bne.n	8006e5e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f023 0308 	bic.w	r3, r3, #8
 8006e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f023 0304 	bic.w	r3, r3, #4
 8006e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a1b      	ldr	r2, [pc, #108]	@ (8006ed0 <TIM_OC1_SetConfig+0x10c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d00f      	beq.n	8006e86 <TIM_OC1_SetConfig+0xc2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a1a      	ldr	r2, [pc, #104]	@ (8006ed4 <TIM_OC1_SetConfig+0x110>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d00b      	beq.n	8006e86 <TIM_OC1_SetConfig+0xc2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a19      	ldr	r2, [pc, #100]	@ (8006ed8 <TIM_OC1_SetConfig+0x114>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d007      	beq.n	8006e86 <TIM_OC1_SetConfig+0xc2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a18      	ldr	r2, [pc, #96]	@ (8006edc <TIM_OC1_SetConfig+0x118>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d003      	beq.n	8006e86 <TIM_OC1_SetConfig+0xc2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a17      	ldr	r2, [pc, #92]	@ (8006ee0 <TIM_OC1_SetConfig+0x11c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d111      	bne.n	8006eaa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	621a      	str	r2, [r3, #32]
}
 8006ec4:	bf00      	nop
 8006ec6:	371c      	adds	r7, #28
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	40012c00 	.word	0x40012c00
 8006ed4:	40013400 	.word	0x40013400
 8006ed8:	40014000 	.word	0x40014000
 8006edc:	40014400 	.word	0x40014400
 8006ee0:	40014800 	.word	0x40014800

08006ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	f023 0210 	bic.w	r2, r3, #16
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	021b      	lsls	r3, r3, #8
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f023 0320 	bic.w	r3, r3, #32
 8006f32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a28      	ldr	r2, [pc, #160]	@ (8006fe4 <TIM_OC2_SetConfig+0x100>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d003      	beq.n	8006f50 <TIM_OC2_SetConfig+0x6c>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a27      	ldr	r2, [pc, #156]	@ (8006fe8 <TIM_OC2_SetConfig+0x104>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d10d      	bne.n	8006f6c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	011b      	lsls	r3, r3, #4
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8006fe4 <TIM_OC2_SetConfig+0x100>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d00f      	beq.n	8006f94 <TIM_OC2_SetConfig+0xb0>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a1c      	ldr	r2, [pc, #112]	@ (8006fe8 <TIM_OC2_SetConfig+0x104>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d00b      	beq.n	8006f94 <TIM_OC2_SetConfig+0xb0>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8006fec <TIM_OC2_SetConfig+0x108>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d007      	beq.n	8006f94 <TIM_OC2_SetConfig+0xb0>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a1a      	ldr	r2, [pc, #104]	@ (8006ff0 <TIM_OC2_SetConfig+0x10c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d003      	beq.n	8006f94 <TIM_OC2_SetConfig+0xb0>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a19      	ldr	r2, [pc, #100]	@ (8006ff4 <TIM_OC2_SetConfig+0x110>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d113      	bne.n	8006fbc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	621a      	str	r2, [r3, #32]
}
 8006fd6:	bf00      	nop
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40012c00 	.word	0x40012c00
 8006fe8:	40013400 	.word	0x40013400
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40014400 	.word	0x40014400
 8006ff4:	40014800 	.word	0x40014800

08006ff8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800702a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0303 	bic.w	r3, r3, #3
 8007032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	4313      	orrs	r3, r2
 800703c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	021b      	lsls	r3, r3, #8
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	4313      	orrs	r3, r2
 8007050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a27      	ldr	r2, [pc, #156]	@ (80070f4 <TIM_OC3_SetConfig+0xfc>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d003      	beq.n	8007062 <TIM_OC3_SetConfig+0x6a>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a26      	ldr	r2, [pc, #152]	@ (80070f8 <TIM_OC3_SetConfig+0x100>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d10d      	bne.n	800707e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007068:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	021b      	lsls	r3, r3, #8
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	4313      	orrs	r3, r2
 8007074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800707c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a1c      	ldr	r2, [pc, #112]	@ (80070f4 <TIM_OC3_SetConfig+0xfc>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d00f      	beq.n	80070a6 <TIM_OC3_SetConfig+0xae>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a1b      	ldr	r2, [pc, #108]	@ (80070f8 <TIM_OC3_SetConfig+0x100>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d00b      	beq.n	80070a6 <TIM_OC3_SetConfig+0xae>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a1a      	ldr	r2, [pc, #104]	@ (80070fc <TIM_OC3_SetConfig+0x104>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d007      	beq.n	80070a6 <TIM_OC3_SetConfig+0xae>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a19      	ldr	r2, [pc, #100]	@ (8007100 <TIM_OC3_SetConfig+0x108>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d003      	beq.n	80070a6 <TIM_OC3_SetConfig+0xae>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a18      	ldr	r2, [pc, #96]	@ (8007104 <TIM_OC3_SetConfig+0x10c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d113      	bne.n	80070ce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	621a      	str	r2, [r3, #32]
}
 80070e8:	bf00      	nop
 80070ea:	371c      	adds	r7, #28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	40012c00 	.word	0x40012c00
 80070f8:	40013400 	.word	0x40013400
 80070fc:	40014000 	.word	0x40014000
 8007100:	40014400 	.word	0x40014400
 8007104:	40014800 	.word	0x40014800

08007108 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800713a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	031b      	lsls	r3, r3, #12
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a28      	ldr	r2, [pc, #160]	@ (8007208 <TIM_OC4_SetConfig+0x100>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d003      	beq.n	8007174 <TIM_OC4_SetConfig+0x6c>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a27      	ldr	r2, [pc, #156]	@ (800720c <TIM_OC4_SetConfig+0x104>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d10d      	bne.n	8007190 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800717a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	031b      	lsls	r3, r3, #12
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	4313      	orrs	r3, r2
 8007186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800718e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a1d      	ldr	r2, [pc, #116]	@ (8007208 <TIM_OC4_SetConfig+0x100>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d00f      	beq.n	80071b8 <TIM_OC4_SetConfig+0xb0>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a1c      	ldr	r2, [pc, #112]	@ (800720c <TIM_OC4_SetConfig+0x104>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d00b      	beq.n	80071b8 <TIM_OC4_SetConfig+0xb0>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a1b      	ldr	r2, [pc, #108]	@ (8007210 <TIM_OC4_SetConfig+0x108>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d007      	beq.n	80071b8 <TIM_OC4_SetConfig+0xb0>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a1a      	ldr	r2, [pc, #104]	@ (8007214 <TIM_OC4_SetConfig+0x10c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d003      	beq.n	80071b8 <TIM_OC4_SetConfig+0xb0>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a19      	ldr	r2, [pc, #100]	@ (8007218 <TIM_OC4_SetConfig+0x110>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d113      	bne.n	80071e0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	019b      	lsls	r3, r3, #6
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	019b      	lsls	r3, r3, #6
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	4313      	orrs	r3, r2
 80071de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	621a      	str	r2, [r3, #32]
}
 80071fa:	bf00      	nop
 80071fc:	371c      	adds	r7, #28
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	40012c00 	.word	0x40012c00
 800720c:	40013400 	.word	0x40013400
 8007210:	40014000 	.word	0x40014000
 8007214:	40014400 	.word	0x40014400
 8007218:	40014800 	.word	0x40014800

0800721c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800724a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800724e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007260:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	041b      	lsls	r3, r3, #16
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	4313      	orrs	r3, r2
 800726c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a17      	ldr	r2, [pc, #92]	@ (80072d0 <TIM_OC5_SetConfig+0xb4>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d00f      	beq.n	8007296 <TIM_OC5_SetConfig+0x7a>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a16      	ldr	r2, [pc, #88]	@ (80072d4 <TIM_OC5_SetConfig+0xb8>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d00b      	beq.n	8007296 <TIM_OC5_SetConfig+0x7a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a15      	ldr	r2, [pc, #84]	@ (80072d8 <TIM_OC5_SetConfig+0xbc>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d007      	beq.n	8007296 <TIM_OC5_SetConfig+0x7a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a14      	ldr	r2, [pc, #80]	@ (80072dc <TIM_OC5_SetConfig+0xc0>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d003      	beq.n	8007296 <TIM_OC5_SetConfig+0x7a>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a13      	ldr	r2, [pc, #76]	@ (80072e0 <TIM_OC5_SetConfig+0xc4>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d109      	bne.n	80072aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800729c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	021b      	lsls	r3, r3, #8
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	621a      	str	r2, [r3, #32]
}
 80072c4:	bf00      	nop
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	40012c00 	.word	0x40012c00
 80072d4:	40013400 	.word	0x40013400
 80072d8:	40014000 	.word	0x40014000
 80072dc:	40014400 	.word	0x40014400
 80072e0:	40014800 	.word	0x40014800

080072e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800730a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800732a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	051b      	lsls	r3, r3, #20
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	4313      	orrs	r3, r2
 8007336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a18      	ldr	r2, [pc, #96]	@ (800739c <TIM_OC6_SetConfig+0xb8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d00f      	beq.n	8007360 <TIM_OC6_SetConfig+0x7c>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a17      	ldr	r2, [pc, #92]	@ (80073a0 <TIM_OC6_SetConfig+0xbc>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d00b      	beq.n	8007360 <TIM_OC6_SetConfig+0x7c>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a16      	ldr	r2, [pc, #88]	@ (80073a4 <TIM_OC6_SetConfig+0xc0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d007      	beq.n	8007360 <TIM_OC6_SetConfig+0x7c>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a15      	ldr	r2, [pc, #84]	@ (80073a8 <TIM_OC6_SetConfig+0xc4>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d003      	beq.n	8007360 <TIM_OC6_SetConfig+0x7c>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a14      	ldr	r2, [pc, #80]	@ (80073ac <TIM_OC6_SetConfig+0xc8>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d109      	bne.n	8007374 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007366:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	029b      	lsls	r3, r3, #10
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	4313      	orrs	r3, r2
 8007372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	621a      	str	r2, [r3, #32]
}
 800738e:	bf00      	nop
 8007390:	371c      	adds	r7, #28
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	40012c00 	.word	0x40012c00
 80073a0:	40013400 	.word	0x40013400
 80073a4:	40014000 	.word	0x40014000
 80073a8:	40014400 	.word	0x40014400
 80073ac:	40014800 	.word	0x40014800

080073b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	f023 0201 	bic.w	r2, r3, #1
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f023 030a 	bic.w	r3, r3, #10
 80073ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	621a      	str	r2, [r3, #32]
}
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800740e:	b480      	push	{r7}
 8007410:	b087      	sub	sp, #28
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	f023 0210 	bic.w	r2, r3, #16
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007438:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	031b      	lsls	r3, r3, #12
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	4313      	orrs	r3, r2
 8007442:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800744a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	621a      	str	r2, [r3, #32]
}
 8007462:	bf00      	nop
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800746e:	b480      	push	{r7}
 8007470:	b085      	sub	sp, #20
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4313      	orrs	r3, r2
 8007490:	f043 0307 	orr.w	r3, r3, #7
 8007494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	609a      	str	r2, [r3, #8]
}
 800749c:	bf00      	nop
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	021a      	lsls	r2, r3, #8
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	431a      	orrs	r2, r3
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	609a      	str	r2, [r3, #8]
}
 80074dc:	bf00      	nop
 80074de:	371c      	adds	r7, #28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d101      	bne.n	8007500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074fc:	2302      	movs	r3, #2
 80074fe:	e065      	b.n	80075cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a2c      	ldr	r2, [pc, #176]	@ (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d004      	beq.n	8007534 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a2b      	ldr	r2, [pc, #172]	@ (80075dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d108      	bne.n	8007546 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800753a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	4313      	orrs	r3, r2
 8007544:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800754c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007550:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	4313      	orrs	r3, r2
 800755a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a1b      	ldr	r2, [pc, #108]	@ (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d018      	beq.n	80075a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007576:	d013      	beq.n	80075a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a18      	ldr	r2, [pc, #96]	@ (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d00e      	beq.n	80075a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a17      	ldr	r2, [pc, #92]	@ (80075e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d009      	beq.n	80075a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a12      	ldr	r2, [pc, #72]	@ (80075dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d004      	beq.n	80075a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a13      	ldr	r2, [pc, #76]	@ (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d10c      	bne.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	40012c00 	.word	0x40012c00
 80075dc:	40013400 	.word	0x40013400
 80075e0:	40000400 	.word	0x40000400
 80075e4:	40000800 	.word	0x40000800
 80075e8:	40014000 	.word	0x40014000

080075ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007604:	2302      	movs	r3, #2
 8007606:	e073      	b.n	80076f0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	4313      	orrs	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4313      	orrs	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	4313      	orrs	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	4313      	orrs	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766e:	4313      	orrs	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	041b      	lsls	r3, r3, #16
 800767e:	4313      	orrs	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	4313      	orrs	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a19      	ldr	r2, [pc, #100]	@ (80076fc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d004      	beq.n	80076a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a18      	ldr	r2, [pc, #96]	@ (8007700 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d11c      	bne.n	80076de <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ae:	051b      	lsls	r3, r3, #20
 80076b0:	4313      	orrs	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	40012c00 	.word	0x40012c00
 8007700:	40013400 	.word	0x40013400

08007704 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e042      	b.n	8007828 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d106      	bne.n	80077ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7fa fbdb 	bl	8001f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2224      	movs	r2, #36	@ 0x24
 80077be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0201 	bic.w	r2, r2, #1
 80077d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fb82 	bl	8007ee4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f8b3 	bl	800794c <UART_SetConfig>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d101      	bne.n	80077f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e01b      	b.n	8007828 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689a      	ldr	r2, [r3, #8]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800780e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 0201 	orr.w	r2, r2, #1
 800781e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fc01 	bl	8008028 <UART_CheckIdleState>
 8007826:	4603      	mov	r3, r0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08a      	sub	sp, #40	@ 0x28
 8007834:	af02      	add	r7, sp, #8
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	4613      	mov	r3, r2
 800783e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007846:	2b20      	cmp	r3, #32
 8007848:	d17b      	bne.n	8007942 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <HAL_UART_Transmit+0x26>
 8007850:	88fb      	ldrh	r3, [r7, #6]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e074      	b.n	8007944 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2221      	movs	r2, #33	@ 0x21
 8007866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800786a:	f7fa fc6f 	bl	800214c <HAL_GetTick>
 800786e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	88fa      	ldrh	r2, [r7, #6]
 8007874:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	88fa      	ldrh	r2, [r7, #6]
 800787c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007888:	d108      	bne.n	800789c <HAL_UART_Transmit+0x6c>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d104      	bne.n	800789c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007892:	2300      	movs	r3, #0
 8007894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	61bb      	str	r3, [r7, #24]
 800789a:	e003      	b.n	80078a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078a0:	2300      	movs	r3, #0
 80078a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078a4:	e030      	b.n	8007908 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2200      	movs	r2, #0
 80078ae:	2180      	movs	r1, #128	@ 0x80
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 fc63 	bl	800817c <UART_WaitOnFlagUntilTimeout>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d005      	beq.n	80078c8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2220      	movs	r2, #32
 80078c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e03d      	b.n	8007944 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10b      	bne.n	80078e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	3302      	adds	r3, #2
 80078e2:	61bb      	str	r3, [r7, #24]
 80078e4:	e007      	b.n	80078f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	781a      	ldrb	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	3301      	adds	r3, #1
 80078f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	3b01      	subs	r3, #1
 8007900:	b29a      	uxth	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800790e:	b29b      	uxth	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1c8      	bne.n	80078a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	2200      	movs	r2, #0
 800791c:	2140      	movs	r1, #64	@ 0x40
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 fc2c 	bl	800817c <UART_WaitOnFlagUntilTimeout>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d005      	beq.n	8007936 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2220      	movs	r2, #32
 800792e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e006      	b.n	8007944 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2220      	movs	r2, #32
 800793a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	e000      	b.n	8007944 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007942:	2302      	movs	r3, #2
  }
}
 8007944:	4618      	mov	r0, r3
 8007946:	3720      	adds	r7, #32
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800794c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007950:	b08c      	sub	sp, #48	@ 0x30
 8007952:	af00      	add	r7, sp, #0
 8007954:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	431a      	orrs	r2, r3
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	431a      	orrs	r2, r3
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	69db      	ldr	r3, [r3, #28]
 8007970:	4313      	orrs	r3, r2
 8007972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	4bab      	ldr	r3, [pc, #684]	@ (8007c28 <UART_SetConfig+0x2dc>)
 800797c:	4013      	ands	r3, r2
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	6812      	ldr	r2, [r2, #0]
 8007982:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007984:	430b      	orrs	r3, r1
 8007986:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4aa0      	ldr	r2, [pc, #640]	@ (8007c2c <UART_SetConfig+0x2e0>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d004      	beq.n	80079b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079b4:	4313      	orrs	r3, r2
 80079b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80079c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	6812      	ldr	r2, [r2, #0]
 80079ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079cc:	430b      	orrs	r3, r1
 80079ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d6:	f023 010f 	bic.w	r1, r3, #15
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a91      	ldr	r2, [pc, #580]	@ (8007c30 <UART_SetConfig+0x2e4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d125      	bne.n	8007a3c <UART_SetConfig+0xf0>
 80079f0:	4b90      	ldr	r3, [pc, #576]	@ (8007c34 <UART_SetConfig+0x2e8>)
 80079f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d81a      	bhi.n	8007a34 <UART_SetConfig+0xe8>
 80079fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007a04 <UART_SetConfig+0xb8>)
 8007a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a04:	08007a15 	.word	0x08007a15
 8007a08:	08007a25 	.word	0x08007a25
 8007a0c:	08007a1d 	.word	0x08007a1d
 8007a10:	08007a2d 	.word	0x08007a2d
 8007a14:	2301      	movs	r3, #1
 8007a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a1a:	e0d6      	b.n	8007bca <UART_SetConfig+0x27e>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a22:	e0d2      	b.n	8007bca <UART_SetConfig+0x27e>
 8007a24:	2304      	movs	r3, #4
 8007a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a2a:	e0ce      	b.n	8007bca <UART_SetConfig+0x27e>
 8007a2c:	2308      	movs	r3, #8
 8007a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a32:	e0ca      	b.n	8007bca <UART_SetConfig+0x27e>
 8007a34:	2310      	movs	r3, #16
 8007a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a3a:	e0c6      	b.n	8007bca <UART_SetConfig+0x27e>
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a7d      	ldr	r2, [pc, #500]	@ (8007c38 <UART_SetConfig+0x2ec>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d138      	bne.n	8007ab8 <UART_SetConfig+0x16c>
 8007a46:	4b7b      	ldr	r3, [pc, #492]	@ (8007c34 <UART_SetConfig+0x2e8>)
 8007a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a4c:	f003 030c 	and.w	r3, r3, #12
 8007a50:	2b0c      	cmp	r3, #12
 8007a52:	d82d      	bhi.n	8007ab0 <UART_SetConfig+0x164>
 8007a54:	a201      	add	r2, pc, #4	@ (adr r2, 8007a5c <UART_SetConfig+0x110>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007a91 	.word	0x08007a91
 8007a60:	08007ab1 	.word	0x08007ab1
 8007a64:	08007ab1 	.word	0x08007ab1
 8007a68:	08007ab1 	.word	0x08007ab1
 8007a6c:	08007aa1 	.word	0x08007aa1
 8007a70:	08007ab1 	.word	0x08007ab1
 8007a74:	08007ab1 	.word	0x08007ab1
 8007a78:	08007ab1 	.word	0x08007ab1
 8007a7c:	08007a99 	.word	0x08007a99
 8007a80:	08007ab1 	.word	0x08007ab1
 8007a84:	08007ab1 	.word	0x08007ab1
 8007a88:	08007ab1 	.word	0x08007ab1
 8007a8c:	08007aa9 	.word	0x08007aa9
 8007a90:	2300      	movs	r3, #0
 8007a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a96:	e098      	b.n	8007bca <UART_SetConfig+0x27e>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a9e:	e094      	b.n	8007bca <UART_SetConfig+0x27e>
 8007aa0:	2304      	movs	r3, #4
 8007aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aa6:	e090      	b.n	8007bca <UART_SetConfig+0x27e>
 8007aa8:	2308      	movs	r3, #8
 8007aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aae:	e08c      	b.n	8007bca <UART_SetConfig+0x27e>
 8007ab0:	2310      	movs	r3, #16
 8007ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ab6:	e088      	b.n	8007bca <UART_SetConfig+0x27e>
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a5f      	ldr	r2, [pc, #380]	@ (8007c3c <UART_SetConfig+0x2f0>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d125      	bne.n	8007b0e <UART_SetConfig+0x1c2>
 8007ac2:	4b5c      	ldr	r3, [pc, #368]	@ (8007c34 <UART_SetConfig+0x2e8>)
 8007ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ac8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007acc:	2b30      	cmp	r3, #48	@ 0x30
 8007ace:	d016      	beq.n	8007afe <UART_SetConfig+0x1b2>
 8007ad0:	2b30      	cmp	r3, #48	@ 0x30
 8007ad2:	d818      	bhi.n	8007b06 <UART_SetConfig+0x1ba>
 8007ad4:	2b20      	cmp	r3, #32
 8007ad6:	d00a      	beq.n	8007aee <UART_SetConfig+0x1a2>
 8007ad8:	2b20      	cmp	r3, #32
 8007ada:	d814      	bhi.n	8007b06 <UART_SetConfig+0x1ba>
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <UART_SetConfig+0x19a>
 8007ae0:	2b10      	cmp	r3, #16
 8007ae2:	d008      	beq.n	8007af6 <UART_SetConfig+0x1aa>
 8007ae4:	e00f      	b.n	8007b06 <UART_SetConfig+0x1ba>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aec:	e06d      	b.n	8007bca <UART_SetConfig+0x27e>
 8007aee:	2302      	movs	r3, #2
 8007af0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007af4:	e069      	b.n	8007bca <UART_SetConfig+0x27e>
 8007af6:	2304      	movs	r3, #4
 8007af8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007afc:	e065      	b.n	8007bca <UART_SetConfig+0x27e>
 8007afe:	2308      	movs	r3, #8
 8007b00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b04:	e061      	b.n	8007bca <UART_SetConfig+0x27e>
 8007b06:	2310      	movs	r3, #16
 8007b08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b0c:	e05d      	b.n	8007bca <UART_SetConfig+0x27e>
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a4b      	ldr	r2, [pc, #300]	@ (8007c40 <UART_SetConfig+0x2f4>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d125      	bne.n	8007b64 <UART_SetConfig+0x218>
 8007b18:	4b46      	ldr	r3, [pc, #280]	@ (8007c34 <UART_SetConfig+0x2e8>)
 8007b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b22:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b24:	d016      	beq.n	8007b54 <UART_SetConfig+0x208>
 8007b26:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b28:	d818      	bhi.n	8007b5c <UART_SetConfig+0x210>
 8007b2a:	2b80      	cmp	r3, #128	@ 0x80
 8007b2c:	d00a      	beq.n	8007b44 <UART_SetConfig+0x1f8>
 8007b2e:	2b80      	cmp	r3, #128	@ 0x80
 8007b30:	d814      	bhi.n	8007b5c <UART_SetConfig+0x210>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d002      	beq.n	8007b3c <UART_SetConfig+0x1f0>
 8007b36:	2b40      	cmp	r3, #64	@ 0x40
 8007b38:	d008      	beq.n	8007b4c <UART_SetConfig+0x200>
 8007b3a:	e00f      	b.n	8007b5c <UART_SetConfig+0x210>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b42:	e042      	b.n	8007bca <UART_SetConfig+0x27e>
 8007b44:	2302      	movs	r3, #2
 8007b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b4a:	e03e      	b.n	8007bca <UART_SetConfig+0x27e>
 8007b4c:	2304      	movs	r3, #4
 8007b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b52:	e03a      	b.n	8007bca <UART_SetConfig+0x27e>
 8007b54:	2308      	movs	r3, #8
 8007b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b5a:	e036      	b.n	8007bca <UART_SetConfig+0x27e>
 8007b5c:	2310      	movs	r3, #16
 8007b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b62:	e032      	b.n	8007bca <UART_SetConfig+0x27e>
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a30      	ldr	r2, [pc, #192]	@ (8007c2c <UART_SetConfig+0x2e0>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d12a      	bne.n	8007bc4 <UART_SetConfig+0x278>
 8007b6e:	4b31      	ldr	r3, [pc, #196]	@ (8007c34 <UART_SetConfig+0x2e8>)
 8007b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007b78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b7c:	d01a      	beq.n	8007bb4 <UART_SetConfig+0x268>
 8007b7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b82:	d81b      	bhi.n	8007bbc <UART_SetConfig+0x270>
 8007b84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b88:	d00c      	beq.n	8007ba4 <UART_SetConfig+0x258>
 8007b8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b8e:	d815      	bhi.n	8007bbc <UART_SetConfig+0x270>
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <UART_SetConfig+0x250>
 8007b94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b98:	d008      	beq.n	8007bac <UART_SetConfig+0x260>
 8007b9a:	e00f      	b.n	8007bbc <UART_SetConfig+0x270>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ba2:	e012      	b.n	8007bca <UART_SetConfig+0x27e>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007baa:	e00e      	b.n	8007bca <UART_SetConfig+0x27e>
 8007bac:	2304      	movs	r3, #4
 8007bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bb2:	e00a      	b.n	8007bca <UART_SetConfig+0x27e>
 8007bb4:	2308      	movs	r3, #8
 8007bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bba:	e006      	b.n	8007bca <UART_SetConfig+0x27e>
 8007bbc:	2310      	movs	r3, #16
 8007bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bc2:	e002      	b.n	8007bca <UART_SetConfig+0x27e>
 8007bc4:	2310      	movs	r3, #16
 8007bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a17      	ldr	r2, [pc, #92]	@ (8007c2c <UART_SetConfig+0x2e0>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	f040 80a8 	bne.w	8007d26 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007bda:	2b08      	cmp	r3, #8
 8007bdc:	d834      	bhi.n	8007c48 <UART_SetConfig+0x2fc>
 8007bde:	a201      	add	r2, pc, #4	@ (adr r2, 8007be4 <UART_SetConfig+0x298>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007c09 	.word	0x08007c09
 8007be8:	08007c49 	.word	0x08007c49
 8007bec:	08007c11 	.word	0x08007c11
 8007bf0:	08007c49 	.word	0x08007c49
 8007bf4:	08007c17 	.word	0x08007c17
 8007bf8:	08007c49 	.word	0x08007c49
 8007bfc:	08007c49 	.word	0x08007c49
 8007c00:	08007c49 	.word	0x08007c49
 8007c04:	08007c1f 	.word	0x08007c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c08:	f7fd f8ca 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 8007c0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c0e:	e021      	b.n	8007c54 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c10:	4b0c      	ldr	r3, [pc, #48]	@ (8007c44 <UART_SetConfig+0x2f8>)
 8007c12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c14:	e01e      	b.n	8007c54 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c16:	f7fd f857 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8007c1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c1c:	e01a      	b.n	8007c54 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c24:	e016      	b.n	8007c54 <UART_SetConfig+0x308>
 8007c26:	bf00      	nop
 8007c28:	cfff69f3 	.word	0xcfff69f3
 8007c2c:	40008000 	.word	0x40008000
 8007c30:	40013800 	.word	0x40013800
 8007c34:	40021000 	.word	0x40021000
 8007c38:	40004400 	.word	0x40004400
 8007c3c:	40004800 	.word	0x40004800
 8007c40:	40004c00 	.word	0x40004c00
 8007c44:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007c52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 812a 	beq.w	8007eb0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c60:	4a9e      	ldr	r2, [pc, #632]	@ (8007edc <UART_SetConfig+0x590>)
 8007c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c66:	461a      	mov	r2, r3
 8007c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c6e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	4613      	mov	r3, r2
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	4413      	add	r3, r2
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d305      	bcc.n	8007c8c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d903      	bls.n	8007c94 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c92:	e10d      	b.n	8007eb0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c96:	2200      	movs	r2, #0
 8007c98:	60bb      	str	r3, [r7, #8]
 8007c9a:	60fa      	str	r2, [r7, #12]
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca0:	4a8e      	ldr	r2, [pc, #568]	@ (8007edc <UART_SetConfig+0x590>)
 8007ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	2200      	movs	r2, #0
 8007caa:	603b      	str	r3, [r7, #0]
 8007cac:	607a      	str	r2, [r7, #4]
 8007cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007cb6:	f7f8 fb03 	bl	80002c0 <__aeabi_uldivmod>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	f04f 0200 	mov.w	r2, #0
 8007cc6:	f04f 0300 	mov.w	r3, #0
 8007cca:	020b      	lsls	r3, r1, #8
 8007ccc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cd0:	0202      	lsls	r2, r0, #8
 8007cd2:	6979      	ldr	r1, [r7, #20]
 8007cd4:	6849      	ldr	r1, [r1, #4]
 8007cd6:	0849      	lsrs	r1, r1, #1
 8007cd8:	2000      	movs	r0, #0
 8007cda:	460c      	mov	r4, r1
 8007cdc:	4605      	mov	r5, r0
 8007cde:	eb12 0804 	adds.w	r8, r2, r4
 8007ce2:	eb43 0905 	adc.w	r9, r3, r5
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	469a      	mov	sl, r3
 8007cee:	4693      	mov	fp, r2
 8007cf0:	4652      	mov	r2, sl
 8007cf2:	465b      	mov	r3, fp
 8007cf4:	4640      	mov	r0, r8
 8007cf6:	4649      	mov	r1, r9
 8007cf8:	f7f8 fae2 	bl	80002c0 <__aeabi_uldivmod>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4613      	mov	r3, r2
 8007d02:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d0a:	d308      	bcc.n	8007d1e <UART_SetConfig+0x3d2>
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d12:	d204      	bcs.n	8007d1e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6a3a      	ldr	r2, [r7, #32]
 8007d1a:	60da      	str	r2, [r3, #12]
 8007d1c:	e0c8      	b.n	8007eb0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d24:	e0c4      	b.n	8007eb0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d2e:	d167      	bne.n	8007e00 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007d30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	d828      	bhi.n	8007d8a <UART_SetConfig+0x43e>
 8007d38:	a201      	add	r2, pc, #4	@ (adr r2, 8007d40 <UART_SetConfig+0x3f4>)
 8007d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3e:	bf00      	nop
 8007d40:	08007d65 	.word	0x08007d65
 8007d44:	08007d6d 	.word	0x08007d6d
 8007d48:	08007d75 	.word	0x08007d75
 8007d4c:	08007d8b 	.word	0x08007d8b
 8007d50:	08007d7b 	.word	0x08007d7b
 8007d54:	08007d8b 	.word	0x08007d8b
 8007d58:	08007d8b 	.word	0x08007d8b
 8007d5c:	08007d8b 	.word	0x08007d8b
 8007d60:	08007d83 	.word	0x08007d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d64:	f7fd f81c 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 8007d68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d6a:	e014      	b.n	8007d96 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d6c:	f7fd f82e 	bl	8004dcc <HAL_RCC_GetPCLK2Freq>
 8007d70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d72:	e010      	b.n	8007d96 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d74:	4b5a      	ldr	r3, [pc, #360]	@ (8007ee0 <UART_SetConfig+0x594>)
 8007d76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d78:	e00d      	b.n	8007d96 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d7a:	f7fc ffa5 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8007d7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d80:	e009      	b.n	8007d96 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d88:	e005      	b.n	8007d96 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 8089 	beq.w	8007eb0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da2:	4a4e      	ldr	r2, [pc, #312]	@ (8007edc <UART_SetConfig+0x590>)
 8007da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007da8:	461a      	mov	r2, r3
 8007daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007db0:	005a      	lsls	r2, r3, #1
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	085b      	lsrs	r3, r3, #1
 8007db8:	441a      	add	r2, r3
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	2b0f      	cmp	r3, #15
 8007dc8:	d916      	bls.n	8007df8 <UART_SetConfig+0x4ac>
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dd0:	d212      	bcs.n	8007df8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f023 030f 	bic.w	r3, r3, #15
 8007dda:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	8bfb      	ldrh	r3, [r7, #30]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	8bfa      	ldrh	r2, [r7, #30]
 8007df4:	60da      	str	r2, [r3, #12]
 8007df6:	e05b      	b.n	8007eb0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007dfe:	e057      	b.n	8007eb0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e04:	2b08      	cmp	r3, #8
 8007e06:	d828      	bhi.n	8007e5a <UART_SetConfig+0x50e>
 8007e08:	a201      	add	r2, pc, #4	@ (adr r2, 8007e10 <UART_SetConfig+0x4c4>)
 8007e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0e:	bf00      	nop
 8007e10:	08007e35 	.word	0x08007e35
 8007e14:	08007e3d 	.word	0x08007e3d
 8007e18:	08007e45 	.word	0x08007e45
 8007e1c:	08007e5b 	.word	0x08007e5b
 8007e20:	08007e4b 	.word	0x08007e4b
 8007e24:	08007e5b 	.word	0x08007e5b
 8007e28:	08007e5b 	.word	0x08007e5b
 8007e2c:	08007e5b 	.word	0x08007e5b
 8007e30:	08007e53 	.word	0x08007e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e34:	f7fc ffb4 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 8007e38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e3a:	e014      	b.n	8007e66 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e3c:	f7fc ffc6 	bl	8004dcc <HAL_RCC_GetPCLK2Freq>
 8007e40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e42:	e010      	b.n	8007e66 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e44:	4b26      	ldr	r3, [pc, #152]	@ (8007ee0 <UART_SetConfig+0x594>)
 8007e46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e48:	e00d      	b.n	8007e66 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e4a:	f7fc ff3d 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8007e4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e50:	e009      	b.n	8007e66 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e58:	e005      	b.n	8007e66 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e64:	bf00      	nop
    }

    if (pclk != 0U)
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d021      	beq.n	8007eb0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e70:	4a1a      	ldr	r2, [pc, #104]	@ (8007edc <UART_SetConfig+0x590>)
 8007e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e76:	461a      	mov	r2, r3
 8007e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	085b      	lsrs	r3, r3, #1
 8007e84:	441a      	add	r2, r3
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	2b0f      	cmp	r3, #15
 8007e94:	d909      	bls.n	8007eaa <UART_SetConfig+0x55e>
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e9c:	d205      	bcs.n	8007eaa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	60da      	str	r2, [r3, #12]
 8007ea8:	e002      	b.n	8007eb0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007ecc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3730      	adds	r7, #48	@ 0x30
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eda:	bf00      	nop
 8007edc:	0800c184 	.word	0x0800c184
 8007ee0:	00f42400 	.word	0x00f42400

08007ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef0:	f003 0308 	and.w	r3, r3, #8
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00a      	beq.n	8007f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00a      	beq.n	8007f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f56:	f003 0304 	and.w	r3, r3, #4
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00a      	beq.n	8007f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00a      	beq.n	8007f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9a:	f003 0320 	and.w	r3, r3, #32
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00a      	beq.n	8007fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01a      	beq.n	8007ffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fe2:	d10a      	bne.n	8007ffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00a      	beq.n	800801c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	605a      	str	r2, [r3, #4]
  }
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b098      	sub	sp, #96	@ 0x60
 800802c:	af02      	add	r7, sp, #8
 800802e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008038:	f7fa f888 	bl	800214c <HAL_GetTick>
 800803c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0308 	and.w	r3, r3, #8
 8008048:	2b08      	cmp	r3, #8
 800804a:	d12f      	bne.n	80080ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800804c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008054:	2200      	movs	r2, #0
 8008056:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f88e 	bl	800817c <UART_WaitOnFlagUntilTimeout>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d022      	beq.n	80080ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806e:	e853 3f00 	ldrex	r3, [r3]
 8008072:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800807a:	653b      	str	r3, [r7, #80]	@ 0x50
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	461a      	mov	r2, r3
 8008082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008084:	647b      	str	r3, [r7, #68]	@ 0x44
 8008086:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008088:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800808a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800808c:	e841 2300 	strex	r3, r2, [r1]
 8008090:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1e6      	bne.n	8008066 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2220      	movs	r2, #32
 800809c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e063      	b.n	8008174 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0304 	and.w	r3, r3, #4
 80080b6:	2b04      	cmp	r3, #4
 80080b8:	d149      	bne.n	800814e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080c2:	2200      	movs	r2, #0
 80080c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f857 	bl	800817c <UART_WaitOnFlagUntilTimeout>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d03c      	beq.n	800814e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080dc:	e853 3f00 	ldrex	r3, [r3]
 80080e0:	623b      	str	r3, [r7, #32]
   return(result);
 80080e2:	6a3b      	ldr	r3, [r7, #32]
 80080e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80080f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080fa:	e841 2300 	strex	r3, r2, [r1]
 80080fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1e6      	bne.n	80080d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3308      	adds	r3, #8
 800810c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	e853 3f00 	ldrex	r3, [r3]
 8008114:	60fb      	str	r3, [r7, #12]
   return(result);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f023 0301 	bic.w	r3, r3, #1
 800811c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3308      	adds	r3, #8
 8008124:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008126:	61fa      	str	r2, [r7, #28]
 8008128:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812a:	69b9      	ldr	r1, [r7, #24]
 800812c:	69fa      	ldr	r2, [r7, #28]
 800812e:	e841 2300 	strex	r3, r2, [r1]
 8008132:	617b      	str	r3, [r7, #20]
   return(result);
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e5      	bne.n	8008106 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2220      	movs	r2, #32
 800813e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e012      	b.n	8008174 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2220      	movs	r2, #32
 8008152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2220      	movs	r2, #32
 800815a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3758      	adds	r7, #88	@ 0x58
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	603b      	str	r3, [r7, #0]
 8008188:	4613      	mov	r3, r2
 800818a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800818c:	e04f      	b.n	800822e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008194:	d04b      	beq.n	800822e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008196:	f7f9 ffd9 	bl	800214c <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d302      	bcc.n	80081ac <UART_WaitOnFlagUntilTimeout+0x30>
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d101      	bne.n	80081b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e04e      	b.n	800824e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 0304 	and.w	r3, r3, #4
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d037      	beq.n	800822e <UART_WaitOnFlagUntilTimeout+0xb2>
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2b80      	cmp	r3, #128	@ 0x80
 80081c2:	d034      	beq.n	800822e <UART_WaitOnFlagUntilTimeout+0xb2>
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2b40      	cmp	r3, #64	@ 0x40
 80081c8:	d031      	beq.n	800822e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	f003 0308 	and.w	r3, r3, #8
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d110      	bne.n	80081fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2208      	movs	r2, #8
 80081de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 f838 	bl	8008256 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2208      	movs	r2, #8
 80081ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e029      	b.n	800824e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	69db      	ldr	r3, [r3, #28]
 8008200:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008204:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008208:	d111      	bne.n	800822e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008212:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 f81e 	bl	8008256 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2220      	movs	r2, #32
 800821e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e00f      	b.n	800824e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69da      	ldr	r2, [r3, #28]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	4013      	ands	r3, r2
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	429a      	cmp	r2, r3
 800823c:	bf0c      	ite	eq
 800823e:	2301      	moveq	r3, #1
 8008240:	2300      	movne	r3, #0
 8008242:	b2db      	uxtb	r3, r3
 8008244:	461a      	mov	r2, r3
 8008246:	79fb      	ldrb	r3, [r7, #7]
 8008248:	429a      	cmp	r2, r3
 800824a:	d0a0      	beq.n	800818e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008256:	b480      	push	{r7}
 8008258:	b095      	sub	sp, #84	@ 0x54
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008266:	e853 3f00 	ldrex	r3, [r3]
 800826a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800826c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	461a      	mov	r2, r3
 800827a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800827c:	643b      	str	r3, [r7, #64]	@ 0x40
 800827e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008280:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008282:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008284:	e841 2300 	strex	r3, r2, [r1]
 8008288:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800828a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1e6      	bne.n	800825e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3308      	adds	r3, #8
 8008296:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008298:	6a3b      	ldr	r3, [r7, #32]
 800829a:	e853 3f00 	ldrex	r3, [r3]
 800829e:	61fb      	str	r3, [r7, #28]
   return(result);
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082a6:	f023 0301 	bic.w	r3, r3, #1
 80082aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3308      	adds	r3, #8
 80082b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082bc:	e841 2300 	strex	r3, r2, [r1]
 80082c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1e3      	bne.n	8008290 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d118      	bne.n	8008302 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	e853 3f00 	ldrex	r3, [r3]
 80082dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f023 0310 	bic.w	r3, r3, #16
 80082e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082ee:	61bb      	str	r3, [r7, #24]
 80082f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f2:	6979      	ldr	r1, [r7, #20]
 80082f4:	69ba      	ldr	r2, [r7, #24]
 80082f6:	e841 2300 	strex	r3, r2, [r1]
 80082fa:	613b      	str	r3, [r7, #16]
   return(result);
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1e6      	bne.n	80082d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2220      	movs	r2, #32
 8008306:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008316:	bf00      	nop
 8008318:	3754      	adds	r7, #84	@ 0x54
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008322:	b480      	push	{r7}
 8008324:	b085      	sub	sp, #20
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008330:	2b01      	cmp	r3, #1
 8008332:	d101      	bne.n	8008338 <HAL_UARTEx_DisableFifoMode+0x16>
 8008334:	2302      	movs	r3, #2
 8008336:	e027      	b.n	8008388 <HAL_UARTEx_DisableFifoMode+0x66>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2224      	movs	r2, #36	@ 0x24
 8008344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 0201 	bic.w	r2, r2, #1
 800835e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008366:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2220      	movs	r2, #32
 800837a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d101      	bne.n	80083ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80083a8:	2302      	movs	r3, #2
 80083aa:	e02d      	b.n	8008408 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2224      	movs	r2, #36	@ 0x24
 80083b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f022 0201 	bic.w	r2, r2, #1
 80083d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f84f 	bl	800848c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008420:	2b01      	cmp	r3, #1
 8008422:	d101      	bne.n	8008428 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008424:	2302      	movs	r3, #2
 8008426:	e02d      	b.n	8008484 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2224      	movs	r2, #36	@ 0x24
 8008434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f022 0201 	bic.w	r2, r2, #1
 800844e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f811 	bl	800848c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2220      	movs	r2, #32
 8008476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008498:	2b00      	cmp	r3, #0
 800849a:	d108      	bne.n	80084ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80084ac:	e031      	b.n	8008512 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80084ae:	2308      	movs	r3, #8
 80084b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084b2:	2308      	movs	r3, #8
 80084b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	0e5b      	lsrs	r3, r3, #25
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	f003 0307 	and.w	r3, r3, #7
 80084c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	0f5b      	lsrs	r3, r3, #29
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	f003 0307 	and.w	r3, r3, #7
 80084d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	7b3a      	ldrb	r2, [r7, #12]
 80084da:	4911      	ldr	r1, [pc, #68]	@ (8008520 <UARTEx_SetNbDataToProcess+0x94>)
 80084dc:	5c8a      	ldrb	r2, [r1, r2]
 80084de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084e2:	7b3a      	ldrb	r2, [r7, #12]
 80084e4:	490f      	ldr	r1, [pc, #60]	@ (8008524 <UARTEx_SetNbDataToProcess+0x98>)
 80084e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
 80084f6:	7b7a      	ldrb	r2, [r7, #13]
 80084f8:	4909      	ldr	r1, [pc, #36]	@ (8008520 <UARTEx_SetNbDataToProcess+0x94>)
 80084fa:	5c8a      	ldrb	r2, [r1, r2]
 80084fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008500:	7b7a      	ldrb	r2, [r7, #13]
 8008502:	4908      	ldr	r1, [pc, #32]	@ (8008524 <UARTEx_SetNbDataToProcess+0x98>)
 8008504:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008506:	fb93 f3f2 	sdiv	r3, r3, r2
 800850a:	b29a      	uxth	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008512:	bf00      	nop
 8008514:	3714      	adds	r7, #20
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	0800c19c 	.word	0x0800c19c
 8008524:	0800c1a4 	.word	0x0800c1a4

08008528 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008532:	2300      	movs	r3, #0
 8008534:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800853a:	2b84      	cmp	r3, #132	@ 0x84
 800853c:	d005      	beq.n	800854a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800853e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4413      	add	r3, r2
 8008546:	3303      	adds	r3, #3
 8008548:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800854a:	68fb      	ldr	r3, [r7, #12]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800855c:	f000 fff4 	bl	8009548 <vTaskStartScheduler>
  
  return osOK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	bd80      	pop	{r7, pc}

08008566 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008568:	b089      	sub	sp, #36	@ 0x24
 800856a:	af04      	add	r7, sp, #16
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	695b      	ldr	r3, [r3, #20]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d020      	beq.n	80085ba <osThreadCreate+0x54>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d01c      	beq.n	80085ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685c      	ldr	r4, [r3, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	691e      	ldr	r6, [r3, #16]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008592:	4618      	mov	r0, r3
 8008594:	f7ff ffc8 	bl	8008528 <makeFreeRtosPriority>
 8008598:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085a2:	9202      	str	r2, [sp, #8]
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	9100      	str	r1, [sp, #0]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	4632      	mov	r2, r6
 80085ac:	4629      	mov	r1, r5
 80085ae:	4620      	mov	r0, r4
 80085b0:	f000 fde4 	bl	800917c <xTaskCreateStatic>
 80085b4:	4603      	mov	r3, r0
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	e01c      	b.n	80085f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685c      	ldr	r4, [r3, #4]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085c6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7ff ffaa 	bl	8008528 <makeFreeRtosPriority>
 80085d4:	4602      	mov	r2, r0
 80085d6:	f107 030c 	add.w	r3, r7, #12
 80085da:	9301      	str	r3, [sp, #4]
 80085dc:	9200      	str	r2, [sp, #0]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	4632      	mov	r2, r6
 80085e2:	4629      	mov	r1, r5
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 fe29 	bl	800923c <xTaskCreate>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d001      	beq.n	80085f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80085f0:	2300      	movs	r3, #0
 80085f2:	e000      	b.n	80085f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80085f4:	68fb      	ldr	r3, [r7, #12]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <osDelay+0x16>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	e000      	b.n	8008616 <osDelay+0x18>
 8008614:	2301      	movs	r3, #1
 8008616:	4618      	mov	r0, r3
 8008618:	f000 ff60 	bl	80094dc <vTaskDelay>
  
  return osOK;
 800861c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008626:	b480      	push	{r7}
 8008628:	b083      	sub	sp, #12
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f103 0208 	add.w	r2, r3, #8
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f04f 32ff 	mov.w	r2, #4294967295
 800863e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f103 0208 	add.w	r2, r3, #8
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f103 0208 	add.w	r2, r3, #8
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800865a:	bf00      	nop
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008666:	b480      	push	{r7}
 8008668:	b083      	sub	sp, #12
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	1c5a      	adds	r2, r3, #1
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	601a      	str	r2, [r3, #0]
}
 80086bc:	bf00      	nop
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086de:	d103      	bne.n	80086e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	60fb      	str	r3, [r7, #12]
 80086e6:	e00c      	b.n	8008702 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	3308      	adds	r3, #8
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	e002      	b.n	80086f6 <vListInsert+0x2e>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d2f6      	bcs.n	80086f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	601a      	str	r2, [r3, #0]
}
 800872e:	bf00      	nop
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800873a:	b480      	push	{r7}
 800873c:	b085      	sub	sp, #20
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	6892      	ldr	r2, [r2, #8]
 8008750:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	6852      	ldr	r2, [r2, #4]
 800875a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	429a      	cmp	r2, r3
 8008764:	d103      	bne.n	800876e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	689a      	ldr	r2, [r3, #8]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	1e5a      	subs	r2, r3, #1
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
	...

08008790 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10b      	bne.n	80087bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80087b6:	bf00      	nop
 80087b8:	bf00      	nop
 80087ba:	e7fd      	b.n	80087b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80087bc:	f002 f8a4 	bl	800a908 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087c8:	68f9      	ldr	r1, [r7, #12]
 80087ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087cc:	fb01 f303 	mul.w	r3, r1, r3
 80087d0:	441a      	add	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ec:	3b01      	subs	r3, #1
 80087ee:	68f9      	ldr	r1, [r7, #12]
 80087f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087f2:	fb01 f303 	mul.w	r3, r1, r3
 80087f6:	441a      	add	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	22ff      	movs	r2, #255	@ 0xff
 8008800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	22ff      	movs	r2, #255	@ 0xff
 8008808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d114      	bne.n	800883c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d01a      	beq.n	8008850 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3310      	adds	r3, #16
 800881e:	4618      	mov	r0, r3
 8008820:	f001 f92e 	bl	8009a80 <xTaskRemoveFromEventList>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d012      	beq.n	8008850 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800882a:	4b0d      	ldr	r3, [pc, #52]	@ (8008860 <xQueueGenericReset+0xd0>)
 800882c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	e009      	b.n	8008850 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3310      	adds	r3, #16
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff fef0 	bl	8008626 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3324      	adds	r3, #36	@ 0x24
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff feeb 	bl	8008626 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008850:	f002 f88c 	bl	800a96c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008854:	2301      	movs	r3, #1
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	e000ed04 	.word	0xe000ed04

08008864 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008864:	b580      	push	{r7, lr}
 8008866:	b08e      	sub	sp, #56	@ 0x38
 8008868:	af02      	add	r7, sp, #8
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
 8008870:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10b      	bne.n	8008890 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887c:	f383 8811 	msr	BASEPRI, r3
 8008880:	f3bf 8f6f 	isb	sy
 8008884:	f3bf 8f4f 	dsb	sy
 8008888:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800888a:	bf00      	nop
 800888c:	bf00      	nop
 800888e:	e7fd      	b.n	800888c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10b      	bne.n	80088ae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80088a8:	bf00      	nop
 80088aa:	bf00      	nop
 80088ac:	e7fd      	b.n	80088aa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <xQueueGenericCreateStatic+0x56>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <xQueueGenericCreateStatic+0x5a>
 80088ba:	2301      	movs	r3, #1
 80088bc:	e000      	b.n	80088c0 <xQueueGenericCreateStatic+0x5c>
 80088be:	2300      	movs	r3, #0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10b      	bne.n	80088dc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	623b      	str	r3, [r7, #32]
}
 80088d6:	bf00      	nop
 80088d8:	bf00      	nop
 80088da:	e7fd      	b.n	80088d8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d102      	bne.n	80088e8 <xQueueGenericCreateStatic+0x84>
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <xQueueGenericCreateStatic+0x88>
 80088e8:	2301      	movs	r3, #1
 80088ea:	e000      	b.n	80088ee <xQueueGenericCreateStatic+0x8a>
 80088ec:	2300      	movs	r3, #0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10b      	bne.n	800890a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	61fb      	str	r3, [r7, #28]
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop
 8008908:	e7fd      	b.n	8008906 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800890a:	2348      	movs	r3, #72	@ 0x48
 800890c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2b48      	cmp	r3, #72	@ 0x48
 8008912:	d00b      	beq.n	800892c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	61bb      	str	r3, [r7, #24]
}
 8008926:	bf00      	nop
 8008928:	bf00      	nop
 800892a:	e7fd      	b.n	8008928 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800892c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00d      	beq.n	8008954 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893a:	2201      	movs	r2, #1
 800893c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008940:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	4613      	mov	r3, r2
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	68b9      	ldr	r1, [r7, #8]
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f000 f805 	bl	800895e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008956:	4618      	mov	r0, r3
 8008958:	3730      	adds	r7, #48	@ 0x30
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	60f8      	str	r0, [r7, #12]
 8008966:	60b9      	str	r1, [r7, #8]
 8008968:	607a      	str	r2, [r7, #4]
 800896a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d103      	bne.n	800897a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	69ba      	ldr	r2, [r7, #24]
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	e002      	b.n	8008980 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800898c:	2101      	movs	r1, #1
 800898e:	69b8      	ldr	r0, [r7, #24]
 8008990:	f7ff fefe 	bl	8008790 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008994:	bf00      	nop
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b08e      	sub	sp, #56	@ 0x38
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
 80089a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80089aa:	2300      	movs	r3, #0
 80089ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80089b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10b      	bne.n	80089d0 <xQueueGenericSend+0x34>
	__asm volatile
 80089b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089ca:	bf00      	nop
 80089cc:	bf00      	nop
 80089ce:	e7fd      	b.n	80089cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d103      	bne.n	80089de <xQueueGenericSend+0x42>
 80089d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <xQueueGenericSend+0x46>
 80089de:	2301      	movs	r3, #1
 80089e0:	e000      	b.n	80089e4 <xQueueGenericSend+0x48>
 80089e2:	2300      	movs	r3, #0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10b      	bne.n	8008a00 <xQueueGenericSend+0x64>
	__asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089fa:	bf00      	nop
 80089fc:	bf00      	nop
 80089fe:	e7fd      	b.n	80089fc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d103      	bne.n	8008a0e <xQueueGenericSend+0x72>
 8008a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d101      	bne.n	8008a12 <xQueueGenericSend+0x76>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e000      	b.n	8008a14 <xQueueGenericSend+0x78>
 8008a12:	2300      	movs	r3, #0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10b      	bne.n	8008a30 <xQueueGenericSend+0x94>
	__asm volatile
 8008a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1c:	f383 8811 	msr	BASEPRI, r3
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	623b      	str	r3, [r7, #32]
}
 8008a2a:	bf00      	nop
 8008a2c:	bf00      	nop
 8008a2e:	e7fd      	b.n	8008a2c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a30:	f001 f9ec 	bl	8009e0c <xTaskGetSchedulerState>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d102      	bne.n	8008a40 <xQueueGenericSend+0xa4>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <xQueueGenericSend+0xa8>
 8008a40:	2301      	movs	r3, #1
 8008a42:	e000      	b.n	8008a46 <xQueueGenericSend+0xaa>
 8008a44:	2300      	movs	r3, #0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10b      	bne.n	8008a62 <xQueueGenericSend+0xc6>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	61fb      	str	r3, [r7, #28]
}
 8008a5c:	bf00      	nop
 8008a5e:	bf00      	nop
 8008a60:	e7fd      	b.n	8008a5e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a62:	f001 ff51 	bl	800a908 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d302      	bcc.n	8008a78 <xQueueGenericSend+0xdc>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d129      	bne.n	8008acc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	68b9      	ldr	r1, [r7, #8]
 8008a7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a7e:	f000 fa0f 	bl	8008ea0 <prvCopyDataToQueue>
 8008a82:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d010      	beq.n	8008aae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8e:	3324      	adds	r3, #36	@ 0x24
 8008a90:	4618      	mov	r0, r3
 8008a92:	f000 fff5 	bl	8009a80 <xTaskRemoveFromEventList>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d013      	beq.n	8008ac4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a9c:	4b3f      	ldr	r3, [pc, #252]	@ (8008b9c <xQueueGenericSend+0x200>)
 8008a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	e00a      	b.n	8008ac4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d007      	beq.n	8008ac4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ab4:	4b39      	ldr	r3, [pc, #228]	@ (8008b9c <xQueueGenericSend+0x200>)
 8008ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008aba:	601a      	str	r2, [r3, #0]
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ac4:	f001 ff52 	bl	800a96c <vPortExitCritical>
				return pdPASS;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e063      	b.n	8008b94 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d103      	bne.n	8008ada <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ad2:	f001 ff4b 	bl	800a96c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	e05c      	b.n	8008b94 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d106      	bne.n	8008aee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ae0:	f107 0314 	add.w	r3, r7, #20
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f001 f82f 	bl	8009b48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008aea:	2301      	movs	r3, #1
 8008aec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008aee:	f001 ff3d 	bl	800a96c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008af2:	f000 fd99 	bl	8009628 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008af6:	f001 ff07 	bl	800a908 <vPortEnterCritical>
 8008afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b00:	b25b      	sxtb	r3, r3
 8008b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b06:	d103      	bne.n	8008b10 <xQueueGenericSend+0x174>
 8008b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b16:	b25b      	sxtb	r3, r3
 8008b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1c:	d103      	bne.n	8008b26 <xQueueGenericSend+0x18a>
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b26:	f001 ff21 	bl	800a96c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b2a:	1d3a      	adds	r2, r7, #4
 8008b2c:	f107 0314 	add.w	r3, r7, #20
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f001 f81e 	bl	8009b74 <xTaskCheckForTimeOut>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d124      	bne.n	8008b88 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b40:	f000 faa6 	bl	8009090 <prvIsQueueFull>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d018      	beq.n	8008b7c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4c:	3310      	adds	r3, #16
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	4611      	mov	r1, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 ff42 	bl	80099dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b5a:	f000 fa31 	bl	8008fc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b5e:	f000 fd71 	bl	8009644 <xTaskResumeAll>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f47f af7c 	bne.w	8008a62 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b9c <xQueueGenericSend+0x200>)
 8008b6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b70:	601a      	str	r2, [r3, #0]
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	e772      	b.n	8008a62 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b7e:	f000 fa1f 	bl	8008fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b82:	f000 fd5f 	bl	8009644 <xTaskResumeAll>
 8008b86:	e76c      	b.n	8008a62 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b8a:	f000 fa19 	bl	8008fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b8e:	f000 fd59 	bl	8009644 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3738      	adds	r7, #56	@ 0x38
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	e000ed04 	.word	0xe000ed04

08008ba0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b090      	sub	sp, #64	@ 0x40
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
 8008bac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10b      	bne.n	8008bd0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bbc:	f383 8811 	msr	BASEPRI, r3
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008bca:	bf00      	nop
 8008bcc:	bf00      	nop
 8008bce:	e7fd      	b.n	8008bcc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d103      	bne.n	8008bde <xQueueGenericSendFromISR+0x3e>
 8008bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <xQueueGenericSendFromISR+0x42>
 8008bde:	2301      	movs	r3, #1
 8008be0:	e000      	b.n	8008be4 <xQueueGenericSendFromISR+0x44>
 8008be2:	2300      	movs	r3, #0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10b      	bne.n	8008c00 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008bfa:	bf00      	nop
 8008bfc:	bf00      	nop
 8008bfe:	e7fd      	b.n	8008bfc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d103      	bne.n	8008c0e <xQueueGenericSendFromISR+0x6e>
 8008c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d101      	bne.n	8008c12 <xQueueGenericSendFromISR+0x72>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <xQueueGenericSendFromISR+0x74>
 8008c12:	2300      	movs	r3, #0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10b      	bne.n	8008c30 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	623b      	str	r3, [r7, #32]
}
 8008c2a:	bf00      	nop
 8008c2c:	bf00      	nop
 8008c2e:	e7fd      	b.n	8008c2c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c30:	f001 ff4a 	bl	800aac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c34:	f3ef 8211 	mrs	r2, BASEPRI
 8008c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3c:	f383 8811 	msr	BASEPRI, r3
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	61fa      	str	r2, [r7, #28]
 8008c4a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c4c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c4e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d302      	bcc.n	8008c62 <xQueueGenericSendFromISR+0xc2>
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d12f      	bne.n	8008cc2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	68b9      	ldr	r1, [r7, #8]
 8008c76:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c78:	f000 f912 	bl	8008ea0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c7c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c84:	d112      	bne.n	8008cac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d016      	beq.n	8008cbc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c90:	3324      	adds	r3, #36	@ 0x24
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 fef4 	bl	8009a80 <xTaskRemoveFromEventList>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00e      	beq.n	8008cbc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00b      	beq.n	8008cbc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	601a      	str	r2, [r3, #0]
 8008caa:	e007      	b.n	8008cbc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008cac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	b25a      	sxtb	r2, r3
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008cc0:	e001      	b.n	8008cc6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cc8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008cd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3740      	adds	r7, #64	@ 0x40
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b08c      	sub	sp, #48	@ 0x30
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10b      	bne.n	8008d0e <xQueueReceive+0x32>
	__asm volatile
 8008cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cfa:	f383 8811 	msr	BASEPRI, r3
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	623b      	str	r3, [r7, #32]
}
 8008d08:	bf00      	nop
 8008d0a:	bf00      	nop
 8008d0c:	e7fd      	b.n	8008d0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d103      	bne.n	8008d1c <xQueueReceive+0x40>
 8008d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <xQueueReceive+0x44>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e000      	b.n	8008d22 <xQueueReceive+0x46>
 8008d20:	2300      	movs	r3, #0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10b      	bne.n	8008d3e <xQueueReceive+0x62>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	61fb      	str	r3, [r7, #28]
}
 8008d38:	bf00      	nop
 8008d3a:	bf00      	nop
 8008d3c:	e7fd      	b.n	8008d3a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d3e:	f001 f865 	bl	8009e0c <xTaskGetSchedulerState>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d102      	bne.n	8008d4e <xQueueReceive+0x72>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <xQueueReceive+0x76>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e000      	b.n	8008d54 <xQueueReceive+0x78>
 8008d52:	2300      	movs	r3, #0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10b      	bne.n	8008d70 <xQueueReceive+0x94>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	61bb      	str	r3, [r7, #24]
}
 8008d6a:	bf00      	nop
 8008d6c:	bf00      	nop
 8008d6e:	e7fd      	b.n	8008d6c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d70:	f001 fdca 	bl	800a908 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d78:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d01f      	beq.n	8008dc0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d80:	68b9      	ldr	r1, [r7, #8]
 8008d82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d84:	f000 f8f6 	bl	8008f74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8a:	1e5a      	subs	r2, r3, #1
 8008d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00f      	beq.n	8008db8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9a:	3310      	adds	r3, #16
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f000 fe6f 	bl	8009a80 <xTaskRemoveFromEventList>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d007      	beq.n	8008db8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008da8:	4b3c      	ldr	r3, [pc, #240]	@ (8008e9c <xQueueReceive+0x1c0>)
 8008daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	f3bf 8f4f 	dsb	sy
 8008db4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008db8:	f001 fdd8 	bl	800a96c <vPortExitCritical>
				return pdPASS;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e069      	b.n	8008e94 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d103      	bne.n	8008dce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008dc6:	f001 fdd1 	bl	800a96c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e062      	b.n	8008e94 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d106      	bne.n	8008de2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dd4:	f107 0310 	add.w	r3, r7, #16
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 feb5 	bl	8009b48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dde:	2301      	movs	r3, #1
 8008de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008de2:	f001 fdc3 	bl	800a96c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008de6:	f000 fc1f 	bl	8009628 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dea:	f001 fd8d 	bl	800a908 <vPortEnterCritical>
 8008dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008df4:	b25b      	sxtb	r3, r3
 8008df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfa:	d103      	bne.n	8008e04 <xQueueReceive+0x128>
 8008dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e0a:	b25b      	sxtb	r3, r3
 8008e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e10:	d103      	bne.n	8008e1a <xQueueReceive+0x13e>
 8008e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e1a:	f001 fda7 	bl	800a96c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e1e:	1d3a      	adds	r2, r7, #4
 8008e20:	f107 0310 	add.w	r3, r7, #16
 8008e24:	4611      	mov	r1, r2
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 fea4 	bl	8009b74 <xTaskCheckForTimeOut>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d123      	bne.n	8008e7a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e34:	f000 f916 	bl	8009064 <prvIsQueueEmpty>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d017      	beq.n	8008e6e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e40:	3324      	adds	r3, #36	@ 0x24
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	4611      	mov	r1, r2
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 fdc8 	bl	80099dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e4e:	f000 f8b7 	bl	8008fc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e52:	f000 fbf7 	bl	8009644 <xTaskResumeAll>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d189      	bne.n	8008d70 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8008e9c <xQueueReceive+0x1c0>)
 8008e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	e780      	b.n	8008d70 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e70:	f000 f8a6 	bl	8008fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e74:	f000 fbe6 	bl	8009644 <xTaskResumeAll>
 8008e78:	e77a      	b.n	8008d70 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e7c:	f000 f8a0 	bl	8008fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e80:	f000 fbe0 	bl	8009644 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e86:	f000 f8ed 	bl	8009064 <prvIsQueueEmpty>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f43f af6f 	beq.w	8008d70 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3730      	adds	r7, #48	@ 0x30
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	e000ed04 	.word	0xe000ed04

08008ea0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008eac:	2300      	movs	r3, #0
 8008eae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d10d      	bne.n	8008eda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d14d      	bne.n	8008f62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 ffbc 	bl	8009e48 <xTaskPriorityDisinherit>
 8008ed0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	609a      	str	r2, [r3, #8]
 8008ed8:	e043      	b.n	8008f62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d119      	bne.n	8008f14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6858      	ldr	r0, [r3, #4]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee8:	461a      	mov	r2, r3
 8008eea:	68b9      	ldr	r1, [r7, #8]
 8008eec:	f002 fbb5 	bl	800b65a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef8:	441a      	add	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d32b      	bcc.n	8008f62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	605a      	str	r2, [r3, #4]
 8008f12:	e026      	b.n	8008f62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	68d8      	ldr	r0, [r3, #12]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	68b9      	ldr	r1, [r7, #8]
 8008f20:	f002 fb9b 	bl	800b65a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f2c:	425b      	negs	r3, r3
 8008f2e:	441a      	add	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	68da      	ldr	r2, [r3, #12]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d207      	bcs.n	8008f50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	689a      	ldr	r2, [r3, #8]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f48:	425b      	negs	r3, r3
 8008f4a:	441a      	add	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d105      	bne.n	8008f62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d002      	beq.n	8008f62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	1c5a      	adds	r2, r3, #1
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f6a:	697b      	ldr	r3, [r7, #20]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3718      	adds	r7, #24
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d018      	beq.n	8008fb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68da      	ldr	r2, [r3, #12]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f8e:	441a      	add	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68da      	ldr	r2, [r3, #12]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d303      	bcc.n	8008fa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68d9      	ldr	r1, [r3, #12]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	6838      	ldr	r0, [r7, #0]
 8008fb4:	f002 fb51 	bl	800b65a <memcpy>
	}
}
 8008fb8:	bf00      	nop
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fc8:	f001 fc9e 	bl	800a908 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fd4:	e011      	b.n	8008ffa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d012      	beq.n	8009004 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	3324      	adds	r3, #36	@ 0x24
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 fd4c 	bl	8009a80 <xTaskRemoveFromEventList>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fee:	f000 fe25 	bl	8009c3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ff2:	7bfb      	ldrb	r3, [r7, #15]
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	dce9      	bgt.n	8008fd6 <prvUnlockQueue+0x16>
 8009002:	e000      	b.n	8009006 <prvUnlockQueue+0x46>
					break;
 8009004:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	22ff      	movs	r2, #255	@ 0xff
 800900a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800900e:	f001 fcad 	bl	800a96c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009012:	f001 fc79 	bl	800a908 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800901c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800901e:	e011      	b.n	8009044 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d012      	beq.n	800904e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	3310      	adds	r3, #16
 800902c:	4618      	mov	r0, r3
 800902e:	f000 fd27 	bl	8009a80 <xTaskRemoveFromEventList>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009038:	f000 fe00 	bl	8009c3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800903c:	7bbb      	ldrb	r3, [r7, #14]
 800903e:	3b01      	subs	r3, #1
 8009040:	b2db      	uxtb	r3, r3
 8009042:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009048:	2b00      	cmp	r3, #0
 800904a:	dce9      	bgt.n	8009020 <prvUnlockQueue+0x60>
 800904c:	e000      	b.n	8009050 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800904e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	22ff      	movs	r2, #255	@ 0xff
 8009054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009058:	f001 fc88 	bl	800a96c <vPortExitCritical>
}
 800905c:	bf00      	nop
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800906c:	f001 fc4c 	bl	800a908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009074:	2b00      	cmp	r3, #0
 8009076:	d102      	bne.n	800907e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009078:	2301      	movs	r3, #1
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	e001      	b.n	8009082 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800907e:	2300      	movs	r3, #0
 8009080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009082:	f001 fc73 	bl	800a96c <vPortExitCritical>

	return xReturn;
 8009086:	68fb      	ldr	r3, [r7, #12]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009098:	f001 fc36 	bl	800a908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d102      	bne.n	80090ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090a8:	2301      	movs	r3, #1
 80090aa:	60fb      	str	r3, [r7, #12]
 80090ac:	e001      	b.n	80090b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090ae:	2300      	movs	r3, #0
 80090b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090b2:	f001 fc5b 	bl	800a96c <vPortExitCritical>

	return xReturn;
 80090b6:	68fb      	ldr	r3, [r7, #12]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090ca:	2300      	movs	r3, #0
 80090cc:	60fb      	str	r3, [r7, #12]
 80090ce:	e014      	b.n	80090fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090d0:	4a0f      	ldr	r2, [pc, #60]	@ (8009110 <vQueueAddToRegistry+0x50>)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10b      	bne.n	80090f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090dc:	490c      	ldr	r1, [pc, #48]	@ (8009110 <vQueueAddToRegistry+0x50>)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090e6:	4a0a      	ldr	r2, [pc, #40]	@ (8009110 <vQueueAddToRegistry+0x50>)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	00db      	lsls	r3, r3, #3
 80090ec:	4413      	add	r3, r2
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090f2:	e006      	b.n	8009102 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	3301      	adds	r3, #1
 80090f8:	60fb      	str	r3, [r7, #12]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2b07      	cmp	r3, #7
 80090fe:	d9e7      	bls.n	80090d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009100:	bf00      	nop
 8009102:	bf00      	nop
 8009104:	3714      	adds	r7, #20
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	20000fe8 	.word	0x20000fe8

08009114 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009124:	f001 fbf0 	bl	800a908 <vPortEnterCritical>
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800912e:	b25b      	sxtb	r3, r3
 8009130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009134:	d103      	bne.n	800913e <vQueueWaitForMessageRestricted+0x2a>
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009144:	b25b      	sxtb	r3, r3
 8009146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914a:	d103      	bne.n	8009154 <vQueueWaitForMessageRestricted+0x40>
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009154:	f001 fc0a 	bl	800a96c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800915c:	2b00      	cmp	r3, #0
 800915e:	d106      	bne.n	800916e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	3324      	adds	r3, #36	@ 0x24
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	68b9      	ldr	r1, [r7, #8]
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fc5d 	bl	8009a28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800916e:	6978      	ldr	r0, [r7, #20]
 8009170:	f7ff ff26 	bl	8008fc0 <prvUnlockQueue>
	}
 8009174:	bf00      	nop
 8009176:	3718      	adds	r7, #24
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800917c:	b580      	push	{r7, lr}
 800917e:	b08e      	sub	sp, #56	@ 0x38
 8009180:	af04      	add	r7, sp, #16
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
 8009188:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800918a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10b      	bne.n	80091a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	623b      	str	r3, [r7, #32]
}
 80091a2:	bf00      	nop
 80091a4:	bf00      	nop
 80091a6:	e7fd      	b.n	80091a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10b      	bne.n	80091c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80091ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	61fb      	str	r3, [r7, #28]
}
 80091c0:	bf00      	nop
 80091c2:	bf00      	nop
 80091c4:	e7fd      	b.n	80091c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091c6:	23a0      	movs	r3, #160	@ 0xa0
 80091c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	2ba0      	cmp	r3, #160	@ 0xa0
 80091ce:	d00b      	beq.n	80091e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	61bb      	str	r3, [r7, #24]
}
 80091e2:	bf00      	nop
 80091e4:	bf00      	nop
 80091e6:	e7fd      	b.n	80091e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d01e      	beq.n	800922e <xTaskCreateStatic+0xb2>
 80091f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d01b      	beq.n	800922e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009202:	2202      	movs	r2, #2
 8009204:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009208:	2300      	movs	r3, #0
 800920a:	9303      	str	r3, [sp, #12]
 800920c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920e:	9302      	str	r3, [sp, #8]
 8009210:	f107 0314 	add.w	r3, r7, #20
 8009214:	9301      	str	r3, [sp, #4]
 8009216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	68b9      	ldr	r1, [r7, #8]
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f000 f851 	bl	80092c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009226:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009228:	f000 f8ee 	bl	8009408 <prvAddNewTaskToReadyList>
 800922c:	e001      	b.n	8009232 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800922e:	2300      	movs	r3, #0
 8009230:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009232:	697b      	ldr	r3, [r7, #20]
	}
 8009234:	4618      	mov	r0, r3
 8009236:	3728      	adds	r7, #40	@ 0x28
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08c      	sub	sp, #48	@ 0x30
 8009240:	af04      	add	r7, sp, #16
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	603b      	str	r3, [r7, #0]
 8009248:	4613      	mov	r3, r2
 800924a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800924c:	88fb      	ldrh	r3, [r7, #6]
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4618      	mov	r0, r3
 8009252:	f001 fc7b 	bl	800ab4c <pvPortMalloc>
 8009256:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00e      	beq.n	800927c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800925e:	20a0      	movs	r0, #160	@ 0xa0
 8009260:	f001 fc74 	bl	800ab4c <pvPortMalloc>
 8009264:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d003      	beq.n	8009274 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	631a      	str	r2, [r3, #48]	@ 0x30
 8009272:	e005      	b.n	8009280 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009274:	6978      	ldr	r0, [r7, #20]
 8009276:	f001 fd37 	bl	800ace8 <vPortFree>
 800927a:	e001      	b.n	8009280 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800927c:	2300      	movs	r3, #0
 800927e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d017      	beq.n	80092b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800928e:	88fa      	ldrh	r2, [r7, #6]
 8009290:	2300      	movs	r3, #0
 8009292:	9303      	str	r3, [sp, #12]
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	9302      	str	r3, [sp, #8]
 8009298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800929a:	9301      	str	r3, [sp, #4]
 800929c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	68b9      	ldr	r1, [r7, #8]
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 f80f 	bl	80092c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092aa:	69f8      	ldr	r0, [r7, #28]
 80092ac:	f000 f8ac 	bl	8009408 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092b0:	2301      	movs	r3, #1
 80092b2:	61bb      	str	r3, [r7, #24]
 80092b4:	e002      	b.n	80092bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092b6:	f04f 33ff 	mov.w	r3, #4294967295
 80092ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092bc:	69bb      	ldr	r3, [r7, #24]
	}
 80092be:	4618      	mov	r0, r3
 80092c0:	3720      	adds	r7, #32
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b088      	sub	sp, #32
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
 80092d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092e0:	3b01      	subs	r3, #1
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4413      	add	r3, r2
 80092e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	f023 0307 	bic.w	r3, r3, #7
 80092ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	f003 0307 	and.w	r3, r3, #7
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00b      	beq.n	8009312 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	617b      	str	r3, [r7, #20]
}
 800930c:	bf00      	nop
 800930e:	bf00      	nop
 8009310:	e7fd      	b.n	800930e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d01f      	beq.n	8009358 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009318:	2300      	movs	r3, #0
 800931a:	61fb      	str	r3, [r7, #28]
 800931c:	e012      	b.n	8009344 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	4413      	add	r3, r2
 8009324:	7819      	ldrb	r1, [r3, #0]
 8009326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	4413      	add	r3, r2
 800932c:	3334      	adds	r3, #52	@ 0x34
 800932e:	460a      	mov	r2, r1
 8009330:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	4413      	add	r3, r2
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d006      	beq.n	800934c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	3301      	adds	r3, #1
 8009342:	61fb      	str	r3, [r7, #28]
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	2b0f      	cmp	r3, #15
 8009348:	d9e9      	bls.n	800931e <prvInitialiseNewTask+0x56>
 800934a:	e000      	b.n	800934e <prvInitialiseNewTask+0x86>
			{
				break;
 800934c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800934e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009356:	e003      	b.n	8009360 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935a:	2200      	movs	r2, #0
 800935c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009362:	2b06      	cmp	r3, #6
 8009364:	d901      	bls.n	800936a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009366:	2306      	movs	r3, #6
 8009368:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800936e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009374:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009378:	2200      	movs	r2, #0
 800937a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	3304      	adds	r3, #4
 8009380:	4618      	mov	r0, r3
 8009382:	f7ff f970 	bl	8008666 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009388:	3318      	adds	r3, #24
 800938a:	4618      	mov	r0, r3
 800938c:	f7ff f96b 	bl	8008666 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009394:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009398:	f1c3 0207 	rsb	r2, r3, #7
 800939c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a8:	2200      	movs	r2, #0
 80093aa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	334c      	adds	r3, #76	@ 0x4c
 80093ba:	224c      	movs	r2, #76	@ 0x4c
 80093bc:	2100      	movs	r1, #0
 80093be:	4618      	mov	r0, r3
 80093c0:	f002 f86a 	bl	800b498 <memset>
 80093c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c6:	4a0d      	ldr	r2, [pc, #52]	@ (80093fc <prvInitialiseNewTask+0x134>)
 80093c8:	651a      	str	r2, [r3, #80]	@ 0x50
 80093ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093cc:	4a0c      	ldr	r2, [pc, #48]	@ (8009400 <prvInitialiseNewTask+0x138>)
 80093ce:	655a      	str	r2, [r3, #84]	@ 0x54
 80093d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d2:	4a0c      	ldr	r2, [pc, #48]	@ (8009404 <prvInitialiseNewTask+0x13c>)
 80093d4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	68f9      	ldr	r1, [r7, #12]
 80093da:	69b8      	ldr	r0, [r7, #24]
 80093dc:	f001 f960 	bl	800a6a0 <pxPortInitialiseStack>
 80093e0:	4602      	mov	r2, r0
 80093e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093f2:	bf00      	nop
 80093f4:	3720      	adds	r7, #32
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20001e80 	.word	0x20001e80
 8009400:	20001ee8 	.word	0x20001ee8
 8009404:	20001f50 	.word	0x20001f50

08009408 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009410:	f001 fa7a 	bl	800a908 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009414:	4b2a      	ldr	r3, [pc, #168]	@ (80094c0 <prvAddNewTaskToReadyList+0xb8>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3301      	adds	r3, #1
 800941a:	4a29      	ldr	r2, [pc, #164]	@ (80094c0 <prvAddNewTaskToReadyList+0xb8>)
 800941c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800941e:	4b29      	ldr	r3, [pc, #164]	@ (80094c4 <prvAddNewTaskToReadyList+0xbc>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d109      	bne.n	800943a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009426:	4a27      	ldr	r2, [pc, #156]	@ (80094c4 <prvAddNewTaskToReadyList+0xbc>)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800942c:	4b24      	ldr	r3, [pc, #144]	@ (80094c0 <prvAddNewTaskToReadyList+0xb8>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d110      	bne.n	8009456 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009434:	f000 fc26 	bl	8009c84 <prvInitialiseTaskLists>
 8009438:	e00d      	b.n	8009456 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800943a:	4b23      	ldr	r3, [pc, #140]	@ (80094c8 <prvAddNewTaskToReadyList+0xc0>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d109      	bne.n	8009456 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009442:	4b20      	ldr	r3, [pc, #128]	@ (80094c4 <prvAddNewTaskToReadyList+0xbc>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800944c:	429a      	cmp	r2, r3
 800944e:	d802      	bhi.n	8009456 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009450:	4a1c      	ldr	r2, [pc, #112]	@ (80094c4 <prvAddNewTaskToReadyList+0xbc>)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009456:	4b1d      	ldr	r3, [pc, #116]	@ (80094cc <prvAddNewTaskToReadyList+0xc4>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3301      	adds	r3, #1
 800945c:	4a1b      	ldr	r2, [pc, #108]	@ (80094cc <prvAddNewTaskToReadyList+0xc4>)
 800945e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009464:	2201      	movs	r2, #1
 8009466:	409a      	lsls	r2, r3
 8009468:	4b19      	ldr	r3, [pc, #100]	@ (80094d0 <prvAddNewTaskToReadyList+0xc8>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4313      	orrs	r3, r2
 800946e:	4a18      	ldr	r2, [pc, #96]	@ (80094d0 <prvAddNewTaskToReadyList+0xc8>)
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4a15      	ldr	r2, [pc, #84]	@ (80094d4 <prvAddNewTaskToReadyList+0xcc>)
 8009480:	441a      	add	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	3304      	adds	r3, #4
 8009486:	4619      	mov	r1, r3
 8009488:	4610      	mov	r0, r2
 800948a:	f7ff f8f9 	bl	8008680 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800948e:	f001 fa6d 	bl	800a96c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009492:	4b0d      	ldr	r3, [pc, #52]	@ (80094c8 <prvAddNewTaskToReadyList+0xc0>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00e      	beq.n	80094b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800949a:	4b0a      	ldr	r3, [pc, #40]	@ (80094c4 <prvAddNewTaskToReadyList+0xbc>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d207      	bcs.n	80094b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094a8:	4b0b      	ldr	r3, [pc, #44]	@ (80094d8 <prvAddNewTaskToReadyList+0xd0>)
 80094aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094b8:	bf00      	nop
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	20001128 	.word	0x20001128
 80094c4:	20001028 	.word	0x20001028
 80094c8:	20001134 	.word	0x20001134
 80094cc:	20001144 	.word	0x20001144
 80094d0:	20001130 	.word	0x20001130
 80094d4:	2000102c 	.word	0x2000102c
 80094d8:	e000ed04 	.word	0xe000ed04

080094dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094e4:	2300      	movs	r3, #0
 80094e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d018      	beq.n	8009520 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094ee:	4b14      	ldr	r3, [pc, #80]	@ (8009540 <vTaskDelay+0x64>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00b      	beq.n	800950e <vTaskDelay+0x32>
	__asm volatile
 80094f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094fa:	f383 8811 	msr	BASEPRI, r3
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	60bb      	str	r3, [r7, #8]
}
 8009508:	bf00      	nop
 800950a:	bf00      	nop
 800950c:	e7fd      	b.n	800950a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800950e:	f000 f88b 	bl	8009628 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009512:	2100      	movs	r1, #0
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fd1f 	bl	8009f58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800951a:	f000 f893 	bl	8009644 <xTaskResumeAll>
 800951e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d107      	bne.n	8009536 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009526:	4b07      	ldr	r3, [pc, #28]	@ (8009544 <vTaskDelay+0x68>)
 8009528:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800952c:	601a      	str	r2, [r3, #0]
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009536:	bf00      	nop
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20001150 	.word	0x20001150
 8009544:	e000ed04 	.word	0xe000ed04

08009548 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b08a      	sub	sp, #40	@ 0x28
 800954c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800954e:	2300      	movs	r3, #0
 8009550:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009552:	2300      	movs	r3, #0
 8009554:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009556:	463a      	mov	r2, r7
 8009558:	1d39      	adds	r1, r7, #4
 800955a:	f107 0308 	add.w	r3, r7, #8
 800955e:	4618      	mov	r0, r3
 8009560:	f7f7 fb16 	bl	8000b90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	9202      	str	r2, [sp, #8]
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	2300      	movs	r3, #0
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	2300      	movs	r3, #0
 8009574:	460a      	mov	r2, r1
 8009576:	4924      	ldr	r1, [pc, #144]	@ (8009608 <vTaskStartScheduler+0xc0>)
 8009578:	4824      	ldr	r0, [pc, #144]	@ (800960c <vTaskStartScheduler+0xc4>)
 800957a:	f7ff fdff 	bl	800917c <xTaskCreateStatic>
 800957e:	4603      	mov	r3, r0
 8009580:	4a23      	ldr	r2, [pc, #140]	@ (8009610 <vTaskStartScheduler+0xc8>)
 8009582:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009584:	4b22      	ldr	r3, [pc, #136]	@ (8009610 <vTaskStartScheduler+0xc8>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800958c:	2301      	movs	r3, #1
 800958e:	617b      	str	r3, [r7, #20]
 8009590:	e001      	b.n	8009596 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009592:	2300      	movs	r3, #0
 8009594:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d102      	bne.n	80095a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800959c:	f000 fd42 	bl	800a024 <xTimerCreateTimerTask>
 80095a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d11b      	bne.n	80095e0 <vTaskStartScheduler+0x98>
	__asm volatile
 80095a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ac:	f383 8811 	msr	BASEPRI, r3
 80095b0:	f3bf 8f6f 	isb	sy
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	613b      	str	r3, [r7, #16]
}
 80095ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80095bc:	4b15      	ldr	r3, [pc, #84]	@ (8009614 <vTaskStartScheduler+0xcc>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	334c      	adds	r3, #76	@ 0x4c
 80095c2:	4a15      	ldr	r2, [pc, #84]	@ (8009618 <vTaskStartScheduler+0xd0>)
 80095c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095c6:	4b15      	ldr	r3, [pc, #84]	@ (800961c <vTaskStartScheduler+0xd4>)
 80095c8:	f04f 32ff 	mov.w	r2, #4294967295
 80095cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095ce:	4b14      	ldr	r3, [pc, #80]	@ (8009620 <vTaskStartScheduler+0xd8>)
 80095d0:	2201      	movs	r2, #1
 80095d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095d4:	4b13      	ldr	r3, [pc, #76]	@ (8009624 <vTaskStartScheduler+0xdc>)
 80095d6:	2200      	movs	r2, #0
 80095d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095da:	f001 f8f1 	bl	800a7c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095de:	e00f      	b.n	8009600 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e6:	d10b      	bne.n	8009600 <vTaskStartScheduler+0xb8>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	60fb      	str	r3, [r7, #12]
}
 80095fa:	bf00      	nop
 80095fc:	bf00      	nop
 80095fe:	e7fd      	b.n	80095fc <vTaskStartScheduler+0xb4>
}
 8009600:	bf00      	nop
 8009602:	3718      	adds	r7, #24
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	0800c154 	.word	0x0800c154
 800960c:	08009c55 	.word	0x08009c55
 8009610:	2000114c 	.word	0x2000114c
 8009614:	20001028 	.word	0x20001028
 8009618:	2000001c 	.word	0x2000001c
 800961c:	20001148 	.word	0x20001148
 8009620:	20001134 	.word	0x20001134
 8009624:	2000112c 	.word	0x2000112c

08009628 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009628:	b480      	push	{r7}
 800962a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800962c:	4b04      	ldr	r3, [pc, #16]	@ (8009640 <vTaskSuspendAll+0x18>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	3301      	adds	r3, #1
 8009632:	4a03      	ldr	r2, [pc, #12]	@ (8009640 <vTaskSuspendAll+0x18>)
 8009634:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009636:	bf00      	nop
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	20001150 	.word	0x20001150

08009644 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800964a:	2300      	movs	r3, #0
 800964c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800964e:	2300      	movs	r3, #0
 8009650:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009652:	4b42      	ldr	r3, [pc, #264]	@ (800975c <xTaskResumeAll+0x118>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10b      	bne.n	8009672 <xTaskResumeAll+0x2e>
	__asm volatile
 800965a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965e:	f383 8811 	msr	BASEPRI, r3
 8009662:	f3bf 8f6f 	isb	sy
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	603b      	str	r3, [r7, #0]
}
 800966c:	bf00      	nop
 800966e:	bf00      	nop
 8009670:	e7fd      	b.n	800966e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009672:	f001 f949 	bl	800a908 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009676:	4b39      	ldr	r3, [pc, #228]	@ (800975c <xTaskResumeAll+0x118>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3b01      	subs	r3, #1
 800967c:	4a37      	ldr	r2, [pc, #220]	@ (800975c <xTaskResumeAll+0x118>)
 800967e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009680:	4b36      	ldr	r3, [pc, #216]	@ (800975c <xTaskResumeAll+0x118>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d161      	bne.n	800974c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009688:	4b35      	ldr	r3, [pc, #212]	@ (8009760 <xTaskResumeAll+0x11c>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d05d      	beq.n	800974c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009690:	e02e      	b.n	80096f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009692:	4b34      	ldr	r3, [pc, #208]	@ (8009764 <xTaskResumeAll+0x120>)
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3318      	adds	r3, #24
 800969e:	4618      	mov	r0, r3
 80096a0:	f7ff f84b 	bl	800873a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	3304      	adds	r3, #4
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7ff f846 	bl	800873a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096b2:	2201      	movs	r2, #1
 80096b4:	409a      	lsls	r2, r3
 80096b6:	4b2c      	ldr	r3, [pc, #176]	@ (8009768 <xTaskResumeAll+0x124>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	4a2a      	ldr	r2, [pc, #168]	@ (8009768 <xTaskResumeAll+0x124>)
 80096be:	6013      	str	r3, [r2, #0]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096c4:	4613      	mov	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	4a27      	ldr	r2, [pc, #156]	@ (800976c <xTaskResumeAll+0x128>)
 80096ce:	441a      	add	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	3304      	adds	r3, #4
 80096d4:	4619      	mov	r1, r3
 80096d6:	4610      	mov	r0, r2
 80096d8:	f7fe ffd2 	bl	8008680 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096e0:	4b23      	ldr	r3, [pc, #140]	@ (8009770 <xTaskResumeAll+0x12c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d302      	bcc.n	80096f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80096ea:	4b22      	ldr	r3, [pc, #136]	@ (8009774 <xTaskResumeAll+0x130>)
 80096ec:	2201      	movs	r2, #1
 80096ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096f0:	4b1c      	ldr	r3, [pc, #112]	@ (8009764 <xTaskResumeAll+0x120>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1cc      	bne.n	8009692 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096fe:	f000 fb65 	bl	8009dcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009702:	4b1d      	ldr	r3, [pc, #116]	@ (8009778 <xTaskResumeAll+0x134>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d010      	beq.n	8009730 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800970e:	f000 f847 	bl	80097a0 <xTaskIncrementTick>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d002      	beq.n	800971e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009718:	4b16      	ldr	r3, [pc, #88]	@ (8009774 <xTaskResumeAll+0x130>)
 800971a:	2201      	movs	r2, #1
 800971c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	3b01      	subs	r3, #1
 8009722:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1f1      	bne.n	800970e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800972a:	4b13      	ldr	r3, [pc, #76]	@ (8009778 <xTaskResumeAll+0x134>)
 800972c:	2200      	movs	r2, #0
 800972e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009730:	4b10      	ldr	r3, [pc, #64]	@ (8009774 <xTaskResumeAll+0x130>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d009      	beq.n	800974c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009738:	2301      	movs	r3, #1
 800973a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800973c:	4b0f      	ldr	r3, [pc, #60]	@ (800977c <xTaskResumeAll+0x138>)
 800973e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009742:	601a      	str	r2, [r3, #0]
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800974c:	f001 f90e 	bl	800a96c <vPortExitCritical>

	return xAlreadyYielded;
 8009750:	68bb      	ldr	r3, [r7, #8]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	20001150 	.word	0x20001150
 8009760:	20001128 	.word	0x20001128
 8009764:	200010e8 	.word	0x200010e8
 8009768:	20001130 	.word	0x20001130
 800976c:	2000102c 	.word	0x2000102c
 8009770:	20001028 	.word	0x20001028
 8009774:	2000113c 	.word	0x2000113c
 8009778:	20001138 	.word	0x20001138
 800977c:	e000ed04 	.word	0xe000ed04

08009780 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009786:	4b05      	ldr	r3, [pc, #20]	@ (800979c <xTaskGetTickCount+0x1c>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800978c:	687b      	ldr	r3, [r7, #4]
}
 800978e:	4618      	mov	r0, r3
 8009790:	370c      	adds	r7, #12
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	2000112c 	.word	0x2000112c

080097a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80097a6:	2300      	movs	r3, #0
 80097a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097aa:	4b4f      	ldr	r3, [pc, #316]	@ (80098e8 <xTaskIncrementTick+0x148>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f040 808f 	bne.w	80098d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097b4:	4b4d      	ldr	r3, [pc, #308]	@ (80098ec <xTaskIncrementTick+0x14c>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3301      	adds	r3, #1
 80097ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097bc:	4a4b      	ldr	r2, [pc, #300]	@ (80098ec <xTaskIncrementTick+0x14c>)
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d121      	bne.n	800980c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80097c8:	4b49      	ldr	r3, [pc, #292]	@ (80098f0 <xTaskIncrementTick+0x150>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00b      	beq.n	80097ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80097d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	603b      	str	r3, [r7, #0]
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop
 80097e8:	e7fd      	b.n	80097e6 <xTaskIncrementTick+0x46>
 80097ea:	4b41      	ldr	r3, [pc, #260]	@ (80098f0 <xTaskIncrementTick+0x150>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	60fb      	str	r3, [r7, #12]
 80097f0:	4b40      	ldr	r3, [pc, #256]	@ (80098f4 <xTaskIncrementTick+0x154>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a3e      	ldr	r2, [pc, #248]	@ (80098f0 <xTaskIncrementTick+0x150>)
 80097f6:	6013      	str	r3, [r2, #0]
 80097f8:	4a3e      	ldr	r2, [pc, #248]	@ (80098f4 <xTaskIncrementTick+0x154>)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6013      	str	r3, [r2, #0]
 80097fe:	4b3e      	ldr	r3, [pc, #248]	@ (80098f8 <xTaskIncrementTick+0x158>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3301      	adds	r3, #1
 8009804:	4a3c      	ldr	r2, [pc, #240]	@ (80098f8 <xTaskIncrementTick+0x158>)
 8009806:	6013      	str	r3, [r2, #0]
 8009808:	f000 fae0 	bl	8009dcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800980c:	4b3b      	ldr	r3, [pc, #236]	@ (80098fc <xTaskIncrementTick+0x15c>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	429a      	cmp	r2, r3
 8009814:	d348      	bcc.n	80098a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009816:	4b36      	ldr	r3, [pc, #216]	@ (80098f0 <xTaskIncrementTick+0x150>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d104      	bne.n	800982a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009820:	4b36      	ldr	r3, [pc, #216]	@ (80098fc <xTaskIncrementTick+0x15c>)
 8009822:	f04f 32ff 	mov.w	r2, #4294967295
 8009826:	601a      	str	r2, [r3, #0]
					break;
 8009828:	e03e      	b.n	80098a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800982a:	4b31      	ldr	r3, [pc, #196]	@ (80098f0 <xTaskIncrementTick+0x150>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800983a:	693a      	ldr	r2, [r7, #16]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	429a      	cmp	r2, r3
 8009840:	d203      	bcs.n	800984a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009842:	4a2e      	ldr	r2, [pc, #184]	@ (80098fc <xTaskIncrementTick+0x15c>)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009848:	e02e      	b.n	80098a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	3304      	adds	r3, #4
 800984e:	4618      	mov	r0, r3
 8009850:	f7fe ff73 	bl	800873a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009858:	2b00      	cmp	r3, #0
 800985a:	d004      	beq.n	8009866 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	3318      	adds	r3, #24
 8009860:	4618      	mov	r0, r3
 8009862:	f7fe ff6a 	bl	800873a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986a:	2201      	movs	r2, #1
 800986c:	409a      	lsls	r2, r3
 800986e:	4b24      	ldr	r3, [pc, #144]	@ (8009900 <xTaskIncrementTick+0x160>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4313      	orrs	r3, r2
 8009874:	4a22      	ldr	r2, [pc, #136]	@ (8009900 <xTaskIncrementTick+0x160>)
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800987c:	4613      	mov	r3, r2
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4a1f      	ldr	r2, [pc, #124]	@ (8009904 <xTaskIncrementTick+0x164>)
 8009886:	441a      	add	r2, r3
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	3304      	adds	r3, #4
 800988c:	4619      	mov	r1, r3
 800988e:	4610      	mov	r0, r2
 8009890:	f7fe fef6 	bl	8008680 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009898:	4b1b      	ldr	r3, [pc, #108]	@ (8009908 <xTaskIncrementTick+0x168>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800989e:	429a      	cmp	r2, r3
 80098a0:	d3b9      	bcc.n	8009816 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80098a2:	2301      	movs	r3, #1
 80098a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098a6:	e7b6      	b.n	8009816 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098a8:	4b17      	ldr	r3, [pc, #92]	@ (8009908 <xTaskIncrementTick+0x168>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ae:	4915      	ldr	r1, [pc, #84]	@ (8009904 <xTaskIncrementTick+0x164>)
 80098b0:	4613      	mov	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	440b      	add	r3, r1
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d901      	bls.n	80098c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80098c0:	2301      	movs	r3, #1
 80098c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098c4:	4b11      	ldr	r3, [pc, #68]	@ (800990c <xTaskIncrementTick+0x16c>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d007      	beq.n	80098dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80098cc:	2301      	movs	r3, #1
 80098ce:	617b      	str	r3, [r7, #20]
 80098d0:	e004      	b.n	80098dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80098d2:	4b0f      	ldr	r3, [pc, #60]	@ (8009910 <xTaskIncrementTick+0x170>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3301      	adds	r3, #1
 80098d8:	4a0d      	ldr	r2, [pc, #52]	@ (8009910 <xTaskIncrementTick+0x170>)
 80098da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098dc:	697b      	ldr	r3, [r7, #20]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3718      	adds	r7, #24
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	20001150 	.word	0x20001150
 80098ec:	2000112c 	.word	0x2000112c
 80098f0:	200010e0 	.word	0x200010e0
 80098f4:	200010e4 	.word	0x200010e4
 80098f8:	20001140 	.word	0x20001140
 80098fc:	20001148 	.word	0x20001148
 8009900:	20001130 	.word	0x20001130
 8009904:	2000102c 	.word	0x2000102c
 8009908:	20001028 	.word	0x20001028
 800990c:	2000113c 	.word	0x2000113c
 8009910:	20001138 	.word	0x20001138

08009914 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009914:	b480      	push	{r7}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800991a:	4b2a      	ldr	r3, [pc, #168]	@ (80099c4 <vTaskSwitchContext+0xb0>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009922:	4b29      	ldr	r3, [pc, #164]	@ (80099c8 <vTaskSwitchContext+0xb4>)
 8009924:	2201      	movs	r2, #1
 8009926:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009928:	e045      	b.n	80099b6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800992a:	4b27      	ldr	r3, [pc, #156]	@ (80099c8 <vTaskSwitchContext+0xb4>)
 800992c:	2200      	movs	r2, #0
 800992e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009930:	4b26      	ldr	r3, [pc, #152]	@ (80099cc <vTaskSwitchContext+0xb8>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	fab3 f383 	clz	r3, r3
 800993c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800993e:	7afb      	ldrb	r3, [r7, #11]
 8009940:	f1c3 031f 	rsb	r3, r3, #31
 8009944:	617b      	str	r3, [r7, #20]
 8009946:	4922      	ldr	r1, [pc, #136]	@ (80099d0 <vTaskSwitchContext+0xbc>)
 8009948:	697a      	ldr	r2, [r7, #20]
 800994a:	4613      	mov	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	440b      	add	r3, r1
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10b      	bne.n	8009972 <vTaskSwitchContext+0x5e>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	607b      	str	r3, [r7, #4]
}
 800996c:	bf00      	nop
 800996e:	bf00      	nop
 8009970:	e7fd      	b.n	800996e <vTaskSwitchContext+0x5a>
 8009972:	697a      	ldr	r2, [r7, #20]
 8009974:	4613      	mov	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	4a14      	ldr	r2, [pc, #80]	@ (80099d0 <vTaskSwitchContext+0xbc>)
 800997e:	4413      	add	r3, r2
 8009980:	613b      	str	r3, [r7, #16]
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	685a      	ldr	r2, [r3, #4]
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	605a      	str	r2, [r3, #4]
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	3308      	adds	r3, #8
 8009994:	429a      	cmp	r2, r3
 8009996:	d104      	bne.n	80099a2 <vTaskSwitchContext+0x8e>
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	685a      	ldr	r2, [r3, #4]
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	605a      	str	r2, [r3, #4]
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	4a0a      	ldr	r2, [pc, #40]	@ (80099d4 <vTaskSwitchContext+0xc0>)
 80099aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099ac:	4b09      	ldr	r3, [pc, #36]	@ (80099d4 <vTaskSwitchContext+0xc0>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	334c      	adds	r3, #76	@ 0x4c
 80099b2:	4a09      	ldr	r2, [pc, #36]	@ (80099d8 <vTaskSwitchContext+0xc4>)
 80099b4:	6013      	str	r3, [r2, #0]
}
 80099b6:	bf00      	nop
 80099b8:	371c      	adds	r7, #28
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	20001150 	.word	0x20001150
 80099c8:	2000113c 	.word	0x2000113c
 80099cc:	20001130 	.word	0x20001130
 80099d0:	2000102c 	.word	0x2000102c
 80099d4:	20001028 	.word	0x20001028
 80099d8:	2000001c 	.word	0x2000001c

080099dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10b      	bne.n	8009a04 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80099ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f0:	f383 8811 	msr	BASEPRI, r3
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	f3bf 8f4f 	dsb	sy
 80099fc:	60fb      	str	r3, [r7, #12]
}
 80099fe:	bf00      	nop
 8009a00:	bf00      	nop
 8009a02:	e7fd      	b.n	8009a00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a04:	4b07      	ldr	r3, [pc, #28]	@ (8009a24 <vTaskPlaceOnEventList+0x48>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	3318      	adds	r3, #24
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f7fe fe5b 	bl	80086c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a12:	2101      	movs	r1, #1
 8009a14:	6838      	ldr	r0, [r7, #0]
 8009a16:	f000 fa9f 	bl	8009f58 <prvAddCurrentTaskToDelayedList>
}
 8009a1a:	bf00      	nop
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20001028 	.word	0x20001028

08009a28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10b      	bne.n	8009a52 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	617b      	str	r3, [r7, #20]
}
 8009a4c:	bf00      	nop
 8009a4e:	bf00      	nop
 8009a50:	e7fd      	b.n	8009a4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a52:	4b0a      	ldr	r3, [pc, #40]	@ (8009a7c <vTaskPlaceOnEventListRestricted+0x54>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3318      	adds	r3, #24
 8009a58:	4619      	mov	r1, r3
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f7fe fe10 	bl	8008680 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d002      	beq.n	8009a6c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009a66:	f04f 33ff 	mov.w	r3, #4294967295
 8009a6a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a6c:	6879      	ldr	r1, [r7, #4]
 8009a6e:	68b8      	ldr	r0, [r7, #8]
 8009a70:	f000 fa72 	bl	8009f58 <prvAddCurrentTaskToDelayedList>
	}
 8009a74:	bf00      	nop
 8009a76:	3718      	adds	r7, #24
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	20001028 	.word	0x20001028

08009a80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10b      	bne.n	8009aae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9a:	f383 8811 	msr	BASEPRI, r3
 8009a9e:	f3bf 8f6f 	isb	sy
 8009aa2:	f3bf 8f4f 	dsb	sy
 8009aa6:	60fb      	str	r3, [r7, #12]
}
 8009aa8:	bf00      	nop
 8009aaa:	bf00      	nop
 8009aac:	e7fd      	b.n	8009aaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	3318      	adds	r3, #24
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fe fe41 	bl	800873a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8009b30 <xTaskRemoveFromEventList+0xb0>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d11c      	bne.n	8009afa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7fe fe38 	bl	800873a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ace:	2201      	movs	r2, #1
 8009ad0:	409a      	lsls	r2, r3
 8009ad2:	4b18      	ldr	r3, [pc, #96]	@ (8009b34 <xTaskRemoveFromEventList+0xb4>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	4a16      	ldr	r2, [pc, #88]	@ (8009b34 <xTaskRemoveFromEventList+0xb4>)
 8009ada:	6013      	str	r3, [r2, #0]
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4a13      	ldr	r2, [pc, #76]	@ (8009b38 <xTaskRemoveFromEventList+0xb8>)
 8009aea:	441a      	add	r2, r3
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	3304      	adds	r3, #4
 8009af0:	4619      	mov	r1, r3
 8009af2:	4610      	mov	r0, r2
 8009af4:	f7fe fdc4 	bl	8008680 <vListInsertEnd>
 8009af8:	e005      	b.n	8009b06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	3318      	adds	r3, #24
 8009afe:	4619      	mov	r1, r3
 8009b00:	480e      	ldr	r0, [pc, #56]	@ (8009b3c <xTaskRemoveFromEventList+0xbc>)
 8009b02:	f7fe fdbd 	bl	8008680 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b40 <xTaskRemoveFromEventList+0xc0>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d905      	bls.n	8009b20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b14:	2301      	movs	r3, #1
 8009b16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b18:	4b0a      	ldr	r3, [pc, #40]	@ (8009b44 <xTaskRemoveFromEventList+0xc4>)
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	e001      	b.n	8009b24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009b20:	2300      	movs	r3, #0
 8009b22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b24:	697b      	ldr	r3, [r7, #20]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3718      	adds	r7, #24
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	20001150 	.word	0x20001150
 8009b34:	20001130 	.word	0x20001130
 8009b38:	2000102c 	.word	0x2000102c
 8009b3c:	200010e8 	.word	0x200010e8
 8009b40:	20001028 	.word	0x20001028
 8009b44:	2000113c 	.word	0x2000113c

08009b48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b50:	4b06      	ldr	r3, [pc, #24]	@ (8009b6c <vTaskInternalSetTimeOutState+0x24>)
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b58:	4b05      	ldr	r3, [pc, #20]	@ (8009b70 <vTaskInternalSetTimeOutState+0x28>)
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	605a      	str	r2, [r3, #4]
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	20001140 	.word	0x20001140
 8009b70:	2000112c 	.word	0x2000112c

08009b74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b088      	sub	sp, #32
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10b      	bne.n	8009b9c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	613b      	str	r3, [r7, #16]
}
 8009b96:	bf00      	nop
 8009b98:	bf00      	nop
 8009b9a:	e7fd      	b.n	8009b98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10b      	bne.n	8009bba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	60fb      	str	r3, [r7, #12]
}
 8009bb4:	bf00      	nop
 8009bb6:	bf00      	nop
 8009bb8:	e7fd      	b.n	8009bb6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009bba:	f000 fea5 	bl	800a908 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8009c34 <xTaskCheckForTimeOut+0xc0>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	69ba      	ldr	r2, [r7, #24]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd6:	d102      	bne.n	8009bde <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	61fb      	str	r3, [r7, #28]
 8009bdc:	e023      	b.n	8009c26 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	4b15      	ldr	r3, [pc, #84]	@ (8009c38 <xTaskCheckForTimeOut+0xc4>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d007      	beq.n	8009bfa <xTaskCheckForTimeOut+0x86>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	69ba      	ldr	r2, [r7, #24]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d302      	bcc.n	8009bfa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	61fb      	str	r3, [r7, #28]
 8009bf8:	e015      	b.n	8009c26 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	697a      	ldr	r2, [r7, #20]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d20b      	bcs.n	8009c1c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	1ad2      	subs	r2, r2, r3
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff ff99 	bl	8009b48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c16:	2300      	movs	r3, #0
 8009c18:	61fb      	str	r3, [r7, #28]
 8009c1a:	e004      	b.n	8009c26 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c22:	2301      	movs	r3, #1
 8009c24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c26:	f000 fea1 	bl	800a96c <vPortExitCritical>

	return xReturn;
 8009c2a:	69fb      	ldr	r3, [r7, #28]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3720      	adds	r7, #32
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	2000112c 	.word	0x2000112c
 8009c38:	20001140 	.word	0x20001140

08009c3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c40:	4b03      	ldr	r3, [pc, #12]	@ (8009c50 <vTaskMissedYield+0x14>)
 8009c42:	2201      	movs	r2, #1
 8009c44:	601a      	str	r2, [r3, #0]
}
 8009c46:	bf00      	nop
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	2000113c 	.word	0x2000113c

08009c54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c5c:	f000 f852 	bl	8009d04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c60:	4b06      	ldr	r3, [pc, #24]	@ (8009c7c <prvIdleTask+0x28>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d9f9      	bls.n	8009c5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c68:	4b05      	ldr	r3, [pc, #20]	@ (8009c80 <prvIdleTask+0x2c>)
 8009c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c78:	e7f0      	b.n	8009c5c <prvIdleTask+0x8>
 8009c7a:	bf00      	nop
 8009c7c:	2000102c 	.word	0x2000102c
 8009c80:	e000ed04 	.word	0xe000ed04

08009c84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	607b      	str	r3, [r7, #4]
 8009c8e:	e00c      	b.n	8009caa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	4613      	mov	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	4a12      	ldr	r2, [pc, #72]	@ (8009ce4 <prvInitialiseTaskLists+0x60>)
 8009c9c:	4413      	add	r3, r2
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fe fcc1 	bl	8008626 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	607b      	str	r3, [r7, #4]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b06      	cmp	r3, #6
 8009cae:	d9ef      	bls.n	8009c90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009cb0:	480d      	ldr	r0, [pc, #52]	@ (8009ce8 <prvInitialiseTaskLists+0x64>)
 8009cb2:	f7fe fcb8 	bl	8008626 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009cb6:	480d      	ldr	r0, [pc, #52]	@ (8009cec <prvInitialiseTaskLists+0x68>)
 8009cb8:	f7fe fcb5 	bl	8008626 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009cbc:	480c      	ldr	r0, [pc, #48]	@ (8009cf0 <prvInitialiseTaskLists+0x6c>)
 8009cbe:	f7fe fcb2 	bl	8008626 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009cc2:	480c      	ldr	r0, [pc, #48]	@ (8009cf4 <prvInitialiseTaskLists+0x70>)
 8009cc4:	f7fe fcaf 	bl	8008626 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009cc8:	480b      	ldr	r0, [pc, #44]	@ (8009cf8 <prvInitialiseTaskLists+0x74>)
 8009cca:	f7fe fcac 	bl	8008626 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cce:	4b0b      	ldr	r3, [pc, #44]	@ (8009cfc <prvInitialiseTaskLists+0x78>)
 8009cd0:	4a05      	ldr	r2, [pc, #20]	@ (8009ce8 <prvInitialiseTaskLists+0x64>)
 8009cd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8009d00 <prvInitialiseTaskLists+0x7c>)
 8009cd6:	4a05      	ldr	r2, [pc, #20]	@ (8009cec <prvInitialiseTaskLists+0x68>)
 8009cd8:	601a      	str	r2, [r3, #0]
}
 8009cda:	bf00      	nop
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	2000102c 	.word	0x2000102c
 8009ce8:	200010b8 	.word	0x200010b8
 8009cec:	200010cc 	.word	0x200010cc
 8009cf0:	200010e8 	.word	0x200010e8
 8009cf4:	200010fc 	.word	0x200010fc
 8009cf8:	20001114 	.word	0x20001114
 8009cfc:	200010e0 	.word	0x200010e0
 8009d00:	200010e4 	.word	0x200010e4

08009d04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d0a:	e019      	b.n	8009d40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d0c:	f000 fdfc 	bl	800a908 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d10:	4b10      	ldr	r3, [pc, #64]	@ (8009d54 <prvCheckTasksWaitingTermination+0x50>)
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7fe fd0c 	bl	800873a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d22:	4b0d      	ldr	r3, [pc, #52]	@ (8009d58 <prvCheckTasksWaitingTermination+0x54>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	4a0b      	ldr	r2, [pc, #44]	@ (8009d58 <prvCheckTasksWaitingTermination+0x54>)
 8009d2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d5c <prvCheckTasksWaitingTermination+0x58>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	3b01      	subs	r3, #1
 8009d32:	4a0a      	ldr	r2, [pc, #40]	@ (8009d5c <prvCheckTasksWaitingTermination+0x58>)
 8009d34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d36:	f000 fe19 	bl	800a96c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f810 	bl	8009d60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d40:	4b06      	ldr	r3, [pc, #24]	@ (8009d5c <prvCheckTasksWaitingTermination+0x58>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1e1      	bne.n	8009d0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d48:	bf00      	nop
 8009d4a:	bf00      	nop
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	200010fc 	.word	0x200010fc
 8009d58:	20001128 	.word	0x20001128
 8009d5c:	20001110 	.word	0x20001110

08009d60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	334c      	adds	r3, #76	@ 0x4c
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f001 fbab 	bl	800b4c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d108      	bne.n	8009d8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 ffb1 	bl	800ace8 <vPortFree>
				vPortFree( pxTCB );
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 ffae 	bl	800ace8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d8c:	e019      	b.n	8009dc2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d103      	bne.n	8009da0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 ffa5 	bl	800ace8 <vPortFree>
	}
 8009d9e:	e010      	b.n	8009dc2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d00b      	beq.n	8009dc2 <prvDeleteTCB+0x62>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	60fb      	str	r3, [r7, #12]
}
 8009dbc:	bf00      	nop
 8009dbe:	bf00      	nop
 8009dc0:	e7fd      	b.n	8009dbe <prvDeleteTCB+0x5e>
	}
 8009dc2:	bf00      	nop
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
	...

08009dcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8009e04 <prvResetNextTaskUnblockTime+0x38>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d104      	bne.n	8009de6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8009e08 <prvResetNextTaskUnblockTime+0x3c>)
 8009dde:	f04f 32ff 	mov.w	r2, #4294967295
 8009de2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009de4:	e008      	b.n	8009df8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009de6:	4b07      	ldr	r3, [pc, #28]	@ (8009e04 <prvResetNextTaskUnblockTime+0x38>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	4a04      	ldr	r2, [pc, #16]	@ (8009e08 <prvResetNextTaskUnblockTime+0x3c>)
 8009df6:	6013      	str	r3, [r2, #0]
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	200010e0 	.word	0x200010e0
 8009e08:	20001148 	.word	0x20001148

08009e0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e12:	4b0b      	ldr	r3, [pc, #44]	@ (8009e40 <xTaskGetSchedulerState+0x34>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d102      	bne.n	8009e20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	607b      	str	r3, [r7, #4]
 8009e1e:	e008      	b.n	8009e32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e20:	4b08      	ldr	r3, [pc, #32]	@ (8009e44 <xTaskGetSchedulerState+0x38>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d102      	bne.n	8009e2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e28:	2302      	movs	r3, #2
 8009e2a:	607b      	str	r3, [r7, #4]
 8009e2c:	e001      	b.n	8009e32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e32:	687b      	ldr	r3, [r7, #4]
	}
 8009e34:	4618      	mov	r0, r3
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	20001134 	.word	0x20001134
 8009e44:	20001150 	.word	0x20001150

08009e48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b086      	sub	sp, #24
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e54:	2300      	movs	r3, #0
 8009e56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d070      	beq.n	8009f40 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8009f4c <xTaskPriorityDisinherit+0x104>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d00b      	beq.n	8009e80 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	60fb      	str	r3, [r7, #12]
}
 8009e7a:	bf00      	nop
 8009e7c:	bf00      	nop
 8009e7e:	e7fd      	b.n	8009e7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10b      	bne.n	8009ea0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	60bb      	str	r3, [r7, #8]
}
 8009e9a:	bf00      	nop
 8009e9c:	bf00      	nop
 8009e9e:	e7fd      	b.n	8009e9c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ea4:	1e5a      	subs	r2, r3, #1
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d044      	beq.n	8009f40 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d140      	bne.n	8009f40 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fe fc39 	bl	800873a <uxListRemove>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d115      	bne.n	8009efa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ed2:	491f      	ldr	r1, [pc, #124]	@ (8009f50 <xTaskPriorityDisinherit+0x108>)
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	440b      	add	r3, r1
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10a      	bne.n	8009efa <xTaskPriorityDisinherit+0xb2>
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee8:	2201      	movs	r2, #1
 8009eea:	fa02 f303 	lsl.w	r3, r2, r3
 8009eee:	43da      	mvns	r2, r3
 8009ef0:	4b18      	ldr	r3, [pc, #96]	@ (8009f54 <xTaskPriorityDisinherit+0x10c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	4a17      	ldr	r2, [pc, #92]	@ (8009f54 <xTaskPriorityDisinherit+0x10c>)
 8009ef8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f06:	f1c3 0207 	rsb	r2, r3, #7
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f12:	2201      	movs	r2, #1
 8009f14:	409a      	lsls	r2, r3
 8009f16:	4b0f      	ldr	r3, [pc, #60]	@ (8009f54 <xTaskPriorityDisinherit+0x10c>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8009f54 <xTaskPriorityDisinherit+0x10c>)
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f24:	4613      	mov	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4413      	add	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4a08      	ldr	r2, [pc, #32]	@ (8009f50 <xTaskPriorityDisinherit+0x108>)
 8009f2e:	441a      	add	r2, r3
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	3304      	adds	r3, #4
 8009f34:	4619      	mov	r1, r3
 8009f36:	4610      	mov	r0, r2
 8009f38:	f7fe fba2 	bl	8008680 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f40:	697b      	ldr	r3, [r7, #20]
	}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3718      	adds	r7, #24
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	20001028 	.word	0x20001028
 8009f50:	2000102c 	.word	0x2000102c
 8009f54:	20001130 	.word	0x20001130

08009f58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f62:	4b29      	ldr	r3, [pc, #164]	@ (800a008 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f68:	4b28      	ldr	r3, [pc, #160]	@ (800a00c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	3304      	adds	r3, #4
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fe fbe3 	bl	800873a <uxListRemove>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10b      	bne.n	8009f92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009f7a:	4b24      	ldr	r3, [pc, #144]	@ (800a00c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f80:	2201      	movs	r2, #1
 8009f82:	fa02 f303 	lsl.w	r3, r2, r3
 8009f86:	43da      	mvns	r2, r3
 8009f88:	4b21      	ldr	r3, [pc, #132]	@ (800a010 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	4a20      	ldr	r2, [pc, #128]	@ (800a010 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f98:	d10a      	bne.n	8009fb0 <prvAddCurrentTaskToDelayedList+0x58>
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d007      	beq.n	8009fb0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800a00c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	481a      	ldr	r0, [pc, #104]	@ (800a014 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009faa:	f7fe fb69 	bl	8008680 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009fae:	e026      	b.n	8009ffe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009fb8:	4b14      	ldr	r3, [pc, #80]	@ (800a00c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d209      	bcs.n	8009fdc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fc8:	4b13      	ldr	r3, [pc, #76]	@ (800a018 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800a00c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	3304      	adds	r3, #4
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	f7fe fb77 	bl	80086c8 <vListInsert>
}
 8009fda:	e010      	b.n	8009ffe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800a01c <prvAddCurrentTaskToDelayedList+0xc4>)
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800a00c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	4610      	mov	r0, r2
 8009fea:	f7fe fb6d 	bl	80086c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009fee:	4b0c      	ldr	r3, [pc, #48]	@ (800a020 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d202      	bcs.n	8009ffe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009ff8:	4a09      	ldr	r2, [pc, #36]	@ (800a020 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	6013      	str	r3, [r2, #0]
}
 8009ffe:	bf00      	nop
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	2000112c 	.word	0x2000112c
 800a00c:	20001028 	.word	0x20001028
 800a010:	20001130 	.word	0x20001130
 800a014:	20001114 	.word	0x20001114
 800a018:	200010e4 	.word	0x200010e4
 800a01c:	200010e0 	.word	0x200010e0
 800a020:	20001148 	.word	0x20001148

0800a024 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b08a      	sub	sp, #40	@ 0x28
 800a028:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a02a:	2300      	movs	r3, #0
 800a02c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a02e:	f000 faf7 	bl	800a620 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a032:	4b1d      	ldr	r3, [pc, #116]	@ (800a0a8 <xTimerCreateTimerTask+0x84>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d021      	beq.n	800a07e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a03a:	2300      	movs	r3, #0
 800a03c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a03e:	2300      	movs	r3, #0
 800a040:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a042:	1d3a      	adds	r2, r7, #4
 800a044:	f107 0108 	add.w	r1, r7, #8
 800a048:	f107 030c 	add.w	r3, r7, #12
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7f6 fdb9 	bl	8000bc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	9202      	str	r2, [sp, #8]
 800a05a:	9301      	str	r3, [sp, #4]
 800a05c:	2302      	movs	r3, #2
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	2300      	movs	r3, #0
 800a062:	460a      	mov	r2, r1
 800a064:	4911      	ldr	r1, [pc, #68]	@ (800a0ac <xTimerCreateTimerTask+0x88>)
 800a066:	4812      	ldr	r0, [pc, #72]	@ (800a0b0 <xTimerCreateTimerTask+0x8c>)
 800a068:	f7ff f888 	bl	800917c <xTaskCreateStatic>
 800a06c:	4603      	mov	r3, r0
 800a06e:	4a11      	ldr	r2, [pc, #68]	@ (800a0b4 <xTimerCreateTimerTask+0x90>)
 800a070:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a072:	4b10      	ldr	r3, [pc, #64]	@ (800a0b4 <xTimerCreateTimerTask+0x90>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a07a:	2301      	movs	r3, #1
 800a07c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10b      	bne.n	800a09c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a088:	f383 8811 	msr	BASEPRI, r3
 800a08c:	f3bf 8f6f 	isb	sy
 800a090:	f3bf 8f4f 	dsb	sy
 800a094:	613b      	str	r3, [r7, #16]
}
 800a096:	bf00      	nop
 800a098:	bf00      	nop
 800a09a:	e7fd      	b.n	800a098 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a09c:	697b      	ldr	r3, [r7, #20]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3718      	adds	r7, #24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	20001184 	.word	0x20001184
 800a0ac:	0800c15c 	.word	0x0800c15c
 800a0b0:	0800a1f1 	.word	0x0800a1f1
 800a0b4:	20001188 	.word	0x20001188

0800a0b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08a      	sub	sp, #40	@ 0x28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
 800a0c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10b      	bne.n	800a0e8 <xTimerGenericCommand+0x30>
	__asm volatile
 800a0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	623b      	str	r3, [r7, #32]
}
 800a0e2:	bf00      	nop
 800a0e4:	bf00      	nop
 800a0e6:	e7fd      	b.n	800a0e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a0e8:	4b19      	ldr	r3, [pc, #100]	@ (800a150 <xTimerGenericCommand+0x98>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d02a      	beq.n	800a146 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	2b05      	cmp	r3, #5
 800a100:	dc18      	bgt.n	800a134 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a102:	f7ff fe83 	bl	8009e0c <xTaskGetSchedulerState>
 800a106:	4603      	mov	r3, r0
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d109      	bne.n	800a120 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a10c:	4b10      	ldr	r3, [pc, #64]	@ (800a150 <xTimerGenericCommand+0x98>)
 800a10e:	6818      	ldr	r0, [r3, #0]
 800a110:	f107 0114 	add.w	r1, r7, #20
 800a114:	2300      	movs	r3, #0
 800a116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a118:	f7fe fc40 	bl	800899c <xQueueGenericSend>
 800a11c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a11e:	e012      	b.n	800a146 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a120:	4b0b      	ldr	r3, [pc, #44]	@ (800a150 <xTimerGenericCommand+0x98>)
 800a122:	6818      	ldr	r0, [r3, #0]
 800a124:	f107 0114 	add.w	r1, r7, #20
 800a128:	2300      	movs	r3, #0
 800a12a:	2200      	movs	r2, #0
 800a12c:	f7fe fc36 	bl	800899c <xQueueGenericSend>
 800a130:	6278      	str	r0, [r7, #36]	@ 0x24
 800a132:	e008      	b.n	800a146 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a134:	4b06      	ldr	r3, [pc, #24]	@ (800a150 <xTimerGenericCommand+0x98>)
 800a136:	6818      	ldr	r0, [r3, #0]
 800a138:	f107 0114 	add.w	r1, r7, #20
 800a13c:	2300      	movs	r3, #0
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	f7fe fd2e 	bl	8008ba0 <xQueueGenericSendFromISR>
 800a144:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3728      	adds	r7, #40	@ 0x28
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	20001184 	.word	0x20001184

0800a154 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b088      	sub	sp, #32
 800a158:	af02      	add	r7, sp, #8
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a15e:	4b23      	ldr	r3, [pc, #140]	@ (800a1ec <prvProcessExpiredTimer+0x98>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	3304      	adds	r3, #4
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fe fae4 	bl	800873a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a178:	f003 0304 	and.w	r3, r3, #4
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d023      	beq.n	800a1c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	699a      	ldr	r2, [r3, #24]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	18d1      	adds	r1, r2, r3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	6978      	ldr	r0, [r7, #20]
 800a18e:	f000 f8d5 	bl	800a33c <prvInsertTimerInActiveList>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d020      	beq.n	800a1da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a198:	2300      	movs	r3, #0
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	2300      	movs	r3, #0
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	6978      	ldr	r0, [r7, #20]
 800a1a4:	f7ff ff88 	bl	800a0b8 <xTimerGenericCommand>
 800a1a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d114      	bne.n	800a1da <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a1b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	60fb      	str	r3, [r7, #12]
}
 800a1c2:	bf00      	nop
 800a1c4:	bf00      	nop
 800a1c6:	e7fd      	b.n	800a1c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a1ce:	f023 0301 	bic.w	r3, r3, #1
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	6978      	ldr	r0, [r7, #20]
 800a1e0:	4798      	blx	r3
}
 800a1e2:	bf00      	nop
 800a1e4:	3718      	adds	r7, #24
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	2000117c 	.word	0x2000117c

0800a1f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1f8:	f107 0308 	add.w	r3, r7, #8
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f000 f859 	bl	800a2b4 <prvGetNextExpireTime>
 800a202:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	4619      	mov	r1, r3
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f000 f805 	bl	800a218 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a20e:	f000 f8d7 	bl	800a3c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a212:	bf00      	nop
 800a214:	e7f0      	b.n	800a1f8 <prvTimerTask+0x8>
	...

0800a218 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a222:	f7ff fa01 	bl	8009628 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a226:	f107 0308 	add.w	r3, r7, #8
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 f866 	bl	800a2fc <prvSampleTimeNow>
 800a230:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d130      	bne.n	800a29a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10a      	bne.n	800a254 <prvProcessTimerOrBlockTask+0x3c>
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	429a      	cmp	r2, r3
 800a244:	d806      	bhi.n	800a254 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a246:	f7ff f9fd 	bl	8009644 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a24a:	68f9      	ldr	r1, [r7, #12]
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f7ff ff81 	bl	800a154 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a252:	e024      	b.n	800a29e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d008      	beq.n	800a26c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a25a:	4b13      	ldr	r3, [pc, #76]	@ (800a2a8 <prvProcessTimerOrBlockTask+0x90>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <prvProcessTimerOrBlockTask+0x50>
 800a264:	2301      	movs	r3, #1
 800a266:	e000      	b.n	800a26a <prvProcessTimerOrBlockTask+0x52>
 800a268:	2300      	movs	r3, #0
 800a26a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a26c:	4b0f      	ldr	r3, [pc, #60]	@ (800a2ac <prvProcessTimerOrBlockTask+0x94>)
 800a26e:	6818      	ldr	r0, [r3, #0]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	4619      	mov	r1, r3
 800a27a:	f7fe ff4b 	bl	8009114 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a27e:	f7ff f9e1 	bl	8009644 <xTaskResumeAll>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10a      	bne.n	800a29e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a288:	4b09      	ldr	r3, [pc, #36]	@ (800a2b0 <prvProcessTimerOrBlockTask+0x98>)
 800a28a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	f3bf 8f6f 	isb	sy
}
 800a298:	e001      	b.n	800a29e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a29a:	f7ff f9d3 	bl	8009644 <xTaskResumeAll>
}
 800a29e:	bf00      	nop
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	20001180 	.word	0x20001180
 800a2ac:	20001184 	.word	0x20001184
 800a2b0:	e000ed04 	.word	0xe000ed04

0800a2b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a2bc:	4b0e      	ldr	r3, [pc, #56]	@ (800a2f8 <prvGetNextExpireTime+0x44>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d101      	bne.n	800a2ca <prvGetNextExpireTime+0x16>
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	e000      	b.n	800a2cc <prvGetNextExpireTime+0x18>
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d105      	bne.n	800a2e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2d8:	4b07      	ldr	r3, [pc, #28]	@ (800a2f8 <prvGetNextExpireTime+0x44>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	60fb      	str	r3, [r7, #12]
 800a2e2:	e001      	b.n	800a2e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	2000117c 	.word	0x2000117c

0800a2fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a304:	f7ff fa3c 	bl	8009780 <xTaskGetTickCount>
 800a308:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a30a:	4b0b      	ldr	r3, [pc, #44]	@ (800a338 <prvSampleTimeNow+0x3c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	429a      	cmp	r2, r3
 800a312:	d205      	bcs.n	800a320 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a314:	f000 f91e 	bl	800a554 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	e002      	b.n	800a326 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a326:	4a04      	ldr	r2, [pc, #16]	@ (800a338 <prvSampleTimeNow+0x3c>)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a32c:	68fb      	ldr	r3, [r7, #12]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	2000118c 	.word	0x2000118c

0800a33c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
 800a348:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a34a:	2300      	movs	r3, #0
 800a34c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	68ba      	ldr	r2, [r7, #8]
 800a352:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d812      	bhi.n	800a388 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	1ad2      	subs	r2, r2, r3
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d302      	bcc.n	800a376 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a370:	2301      	movs	r3, #1
 800a372:	617b      	str	r3, [r7, #20]
 800a374:	e01b      	b.n	800a3ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a376:	4b10      	ldr	r3, [pc, #64]	@ (800a3b8 <prvInsertTimerInActiveList+0x7c>)
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3304      	adds	r3, #4
 800a37e:	4619      	mov	r1, r3
 800a380:	4610      	mov	r0, r2
 800a382:	f7fe f9a1 	bl	80086c8 <vListInsert>
 800a386:	e012      	b.n	800a3ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d206      	bcs.n	800a39e <prvInsertTimerInActiveList+0x62>
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	429a      	cmp	r2, r3
 800a396:	d302      	bcc.n	800a39e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a398:	2301      	movs	r3, #1
 800a39a:	617b      	str	r3, [r7, #20]
 800a39c:	e007      	b.n	800a3ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a39e:	4b07      	ldr	r3, [pc, #28]	@ (800a3bc <prvInsertTimerInActiveList+0x80>)
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	f7fe f98d 	bl	80086c8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a3ae:	697b      	ldr	r3, [r7, #20]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	20001180 	.word	0x20001180
 800a3bc:	2000117c 	.word	0x2000117c

0800a3c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b08c      	sub	sp, #48	@ 0x30
 800a3c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3c6:	e0b2      	b.n	800a52e <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f2c0 80af 	blt.w	800a52e <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d004      	beq.n	800a3e6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3de:	3304      	adds	r3, #4
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fe f9aa 	bl	800873a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3e6:	1d3b      	adds	r3, r7, #4
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7ff ff87 	bl	800a2fc <prvSampleTimeNow>
 800a3ee:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	2b09      	cmp	r3, #9
 800a3f4:	f200 8098 	bhi.w	800a528 <prvProcessReceivedCommands+0x168>
 800a3f8:	a201      	add	r2, pc, #4	@ (adr r2, 800a400 <prvProcessReceivedCommands+0x40>)
 800a3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3fe:	bf00      	nop
 800a400:	0800a429 	.word	0x0800a429
 800a404:	0800a429 	.word	0x0800a429
 800a408:	0800a429 	.word	0x0800a429
 800a40c:	0800a49f 	.word	0x0800a49f
 800a410:	0800a4b3 	.word	0x0800a4b3
 800a414:	0800a4ff 	.word	0x0800a4ff
 800a418:	0800a429 	.word	0x0800a429
 800a41c:	0800a429 	.word	0x0800a429
 800a420:	0800a49f 	.word	0x0800a49f
 800a424:	0800a4b3 	.word	0x0800a4b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a42e:	f043 0301 	orr.w	r3, r3, #1
 800a432:	b2da      	uxtb	r2, r3
 800a434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43e:	699b      	ldr	r3, [r3, #24]
 800a440:	18d1      	adds	r1, r2, r3
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6a3a      	ldr	r2, [r7, #32]
 800a446:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a448:	f7ff ff78 	bl	800a33c <prvInsertTimerInActiveList>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d06c      	beq.n	800a52c <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a454:	6a1b      	ldr	r3, [r3, #32]
 800a456:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a458:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a460:	f003 0304 	and.w	r3, r3, #4
 800a464:	2b00      	cmp	r3, #0
 800a466:	d061      	beq.n	800a52c <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46c:	699b      	ldr	r3, [r3, #24]
 800a46e:	441a      	add	r2, r3
 800a470:	2300      	movs	r3, #0
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	2300      	movs	r3, #0
 800a476:	2100      	movs	r1, #0
 800a478:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a47a:	f7ff fe1d 	bl	800a0b8 <xTimerGenericCommand>
 800a47e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d152      	bne.n	800a52c <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	61bb      	str	r3, [r7, #24]
}
 800a498:	bf00      	nop
 800a49a:	bf00      	nop
 800a49c:	e7fd      	b.n	800a49a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a4a4:	f023 0301 	bic.w	r3, r3, #1
 800a4a8:	b2da      	uxtb	r2, r3
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800a4b0:	e03d      	b.n	800a52e <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a4b8:	f043 0301 	orr.w	r3, r3, #1
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4cc:	699b      	ldr	r3, [r3, #24]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d10b      	bne.n	800a4ea <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800a4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d6:	f383 8811 	msr	BASEPRI, r3
 800a4da:	f3bf 8f6f 	isb	sy
 800a4de:	f3bf 8f4f 	dsb	sy
 800a4e2:	617b      	str	r3, [r7, #20]
}
 800a4e4:	bf00      	nop
 800a4e6:	bf00      	nop
 800a4e8:	e7fd      	b.n	800a4e6 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ec:	699a      	ldr	r2, [r3, #24]
 800a4ee:	6a3b      	ldr	r3, [r7, #32]
 800a4f0:	18d1      	adds	r1, r2, r3
 800a4f2:	6a3b      	ldr	r3, [r7, #32]
 800a4f4:	6a3a      	ldr	r2, [r7, #32]
 800a4f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a4f8:	f7ff ff20 	bl	800a33c <prvInsertTimerInActiveList>
					break;
 800a4fc:	e017      	b.n	800a52e <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a500:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a504:	f003 0302 	and.w	r3, r3, #2
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d103      	bne.n	800a514 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800a50c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a50e:	f000 fbeb 	bl	800ace8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a512:	e00c      	b.n	800a52e <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a516:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a51a:	f023 0301 	bic.w	r3, r3, #1
 800a51e:	b2da      	uxtb	r2, r3
 800a520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a522:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800a526:	e002      	b.n	800a52e <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800a528:	bf00      	nop
 800a52a:	e000      	b.n	800a52e <prvProcessReceivedCommands+0x16e>
					break;
 800a52c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a52e:	4b08      	ldr	r3, [pc, #32]	@ (800a550 <prvProcessReceivedCommands+0x190>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f107 0108 	add.w	r1, r7, #8
 800a536:	2200      	movs	r2, #0
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe fbcf 	bl	8008cdc <xQueueReceive>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	f47f af41 	bne.w	800a3c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a546:	bf00      	nop
 800a548:	bf00      	nop
 800a54a:	3728      	adds	r7, #40	@ 0x28
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	20001184 	.word	0x20001184

0800a554 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b088      	sub	sp, #32
 800a558:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a55a:	e049      	b.n	800a5f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a55c:	4b2e      	ldr	r3, [pc, #184]	@ (800a618 <prvSwitchTimerLists+0xc4>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a566:	4b2c      	ldr	r3, [pc, #176]	@ (800a618 <prvSwitchTimerLists+0xc4>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	3304      	adds	r3, #4
 800a574:	4618      	mov	r0, r3
 800a576:	f7fe f8e0 	bl	800873a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6a1b      	ldr	r3, [r3, #32]
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a588:	f003 0304 	and.w	r3, r3, #4
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d02f      	beq.n	800a5f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	4413      	add	r3, r2
 800a598:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d90e      	bls.n	800a5c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	68ba      	ldr	r2, [r7, #8]
 800a5a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5ae:	4b1a      	ldr	r3, [pc, #104]	@ (800a618 <prvSwitchTimerLists+0xc4>)
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	f7fe f885 	bl	80086c8 <vListInsert>
 800a5be:	e017      	b.n	800a5f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f7ff fd74 	bl	800a0b8 <xTimerGenericCommand>
 800a5d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10b      	bne.n	800a5f0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	603b      	str	r3, [r7, #0]
}
 800a5ea:	bf00      	nop
 800a5ec:	bf00      	nop
 800a5ee:	e7fd      	b.n	800a5ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5f0:	4b09      	ldr	r3, [pc, #36]	@ (800a618 <prvSwitchTimerLists+0xc4>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1b0      	bne.n	800a55c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a5fa:	4b07      	ldr	r3, [pc, #28]	@ (800a618 <prvSwitchTimerLists+0xc4>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a600:	4b06      	ldr	r3, [pc, #24]	@ (800a61c <prvSwitchTimerLists+0xc8>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a04      	ldr	r2, [pc, #16]	@ (800a618 <prvSwitchTimerLists+0xc4>)
 800a606:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a608:	4a04      	ldr	r2, [pc, #16]	@ (800a61c <prvSwitchTimerLists+0xc8>)
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	6013      	str	r3, [r2, #0]
}
 800a60e:	bf00      	nop
 800a610:	3718      	adds	r7, #24
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	2000117c 	.word	0x2000117c
 800a61c:	20001180 	.word	0x20001180

0800a620 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a626:	f000 f96f 	bl	800a908 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a62a:	4b15      	ldr	r3, [pc, #84]	@ (800a680 <prvCheckForValidListAndQueue+0x60>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d120      	bne.n	800a674 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a632:	4814      	ldr	r0, [pc, #80]	@ (800a684 <prvCheckForValidListAndQueue+0x64>)
 800a634:	f7fd fff7 	bl	8008626 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a638:	4813      	ldr	r0, [pc, #76]	@ (800a688 <prvCheckForValidListAndQueue+0x68>)
 800a63a:	f7fd fff4 	bl	8008626 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a63e:	4b13      	ldr	r3, [pc, #76]	@ (800a68c <prvCheckForValidListAndQueue+0x6c>)
 800a640:	4a10      	ldr	r2, [pc, #64]	@ (800a684 <prvCheckForValidListAndQueue+0x64>)
 800a642:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a644:	4b12      	ldr	r3, [pc, #72]	@ (800a690 <prvCheckForValidListAndQueue+0x70>)
 800a646:	4a10      	ldr	r2, [pc, #64]	@ (800a688 <prvCheckForValidListAndQueue+0x68>)
 800a648:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a64a:	2300      	movs	r3, #0
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	4b11      	ldr	r3, [pc, #68]	@ (800a694 <prvCheckForValidListAndQueue+0x74>)
 800a650:	4a11      	ldr	r2, [pc, #68]	@ (800a698 <prvCheckForValidListAndQueue+0x78>)
 800a652:	210c      	movs	r1, #12
 800a654:	200a      	movs	r0, #10
 800a656:	f7fe f905 	bl	8008864 <xQueueGenericCreateStatic>
 800a65a:	4603      	mov	r3, r0
 800a65c:	4a08      	ldr	r2, [pc, #32]	@ (800a680 <prvCheckForValidListAndQueue+0x60>)
 800a65e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a660:	4b07      	ldr	r3, [pc, #28]	@ (800a680 <prvCheckForValidListAndQueue+0x60>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d005      	beq.n	800a674 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a668:	4b05      	ldr	r3, [pc, #20]	@ (800a680 <prvCheckForValidListAndQueue+0x60>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	490b      	ldr	r1, [pc, #44]	@ (800a69c <prvCheckForValidListAndQueue+0x7c>)
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fe fd26 	bl	80090c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a674:	f000 f97a 	bl	800a96c <vPortExitCritical>
}
 800a678:	bf00      	nop
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	20001184 	.word	0x20001184
 800a684:	20001154 	.word	0x20001154
 800a688:	20001168 	.word	0x20001168
 800a68c:	2000117c 	.word	0x2000117c
 800a690:	20001180 	.word	0x20001180
 800a694:	20001208 	.word	0x20001208
 800a698:	20001190 	.word	0x20001190
 800a69c:	0800c164 	.word	0x0800c164

0800a6a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	3b04      	subs	r3, #4
 800a6b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a6b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3b04      	subs	r3, #4
 800a6be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	f023 0201 	bic.w	r2, r3, #1
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	3b04      	subs	r3, #4
 800a6ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6d0:	4a0c      	ldr	r2, [pc, #48]	@ (800a704 <pxPortInitialiseStack+0x64>)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	3b14      	subs	r3, #20
 800a6da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3b04      	subs	r3, #4
 800a6e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f06f 0202 	mvn.w	r2, #2
 800a6ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	3b20      	subs	r3, #32
 800a6f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr
 800a704:	0800a709 	.word	0x0800a709

0800a708 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a70e:	2300      	movs	r3, #0
 800a710:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a712:	4b13      	ldr	r3, [pc, #76]	@ (800a760 <prvTaskExitError+0x58>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71a:	d00b      	beq.n	800a734 <prvTaskExitError+0x2c>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	60fb      	str	r3, [r7, #12]
}
 800a72e:	bf00      	nop
 800a730:	bf00      	nop
 800a732:	e7fd      	b.n	800a730 <prvTaskExitError+0x28>
	__asm volatile
 800a734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	60bb      	str	r3, [r7, #8]
}
 800a746:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a748:	bf00      	nop
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d0fc      	beq.n	800a74a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a750:	bf00      	nop
 800a752:	bf00      	nop
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	2000000c 	.word	0x2000000c
	...

0800a770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a770:	4b07      	ldr	r3, [pc, #28]	@ (800a790 <pxCurrentTCBConst2>)
 800a772:	6819      	ldr	r1, [r3, #0]
 800a774:	6808      	ldr	r0, [r1, #0]
 800a776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77a:	f380 8809 	msr	PSP, r0
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f04f 0000 	mov.w	r0, #0
 800a786:	f380 8811 	msr	BASEPRI, r0
 800a78a:	4770      	bx	lr
 800a78c:	f3af 8000 	nop.w

0800a790 <pxCurrentTCBConst2>:
 800a790:	20001028 	.word	0x20001028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a794:	bf00      	nop
 800a796:	bf00      	nop

0800a798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a798:	4808      	ldr	r0, [pc, #32]	@ (800a7bc <prvPortStartFirstTask+0x24>)
 800a79a:	6800      	ldr	r0, [r0, #0]
 800a79c:	6800      	ldr	r0, [r0, #0]
 800a79e:	f380 8808 	msr	MSP, r0
 800a7a2:	f04f 0000 	mov.w	r0, #0
 800a7a6:	f380 8814 	msr	CONTROL, r0
 800a7aa:	b662      	cpsie	i
 800a7ac:	b661      	cpsie	f
 800a7ae:	f3bf 8f4f 	dsb	sy
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	df00      	svc	0
 800a7b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7ba:	bf00      	nop
 800a7bc:	e000ed08 	.word	0xe000ed08

0800a7c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7c6:	4b47      	ldr	r3, [pc, #284]	@ (800a8e4 <xPortStartScheduler+0x124>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a47      	ldr	r2, [pc, #284]	@ (800a8e8 <xPortStartScheduler+0x128>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d10b      	bne.n	800a7e8 <xPortStartScheduler+0x28>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	613b      	str	r3, [r7, #16]
}
 800a7e2:	bf00      	nop
 800a7e4:	bf00      	nop
 800a7e6:	e7fd      	b.n	800a7e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a7e8:	4b3e      	ldr	r3, [pc, #248]	@ (800a8e4 <xPortStartScheduler+0x124>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a3f      	ldr	r2, [pc, #252]	@ (800a8ec <xPortStartScheduler+0x12c>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d10b      	bne.n	800a80a <xPortStartScheduler+0x4a>
	__asm volatile
 800a7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	60fb      	str	r3, [r7, #12]
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop
 800a808:	e7fd      	b.n	800a806 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a80a:	4b39      	ldr	r3, [pc, #228]	@ (800a8f0 <xPortStartScheduler+0x130>)
 800a80c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	b2db      	uxtb	r3, r3
 800a814:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	22ff      	movs	r2, #255	@ 0xff
 800a81a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	b2db      	uxtb	r3, r3
 800a822:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a824:	78fb      	ldrb	r3, [r7, #3]
 800a826:	b2db      	uxtb	r3, r3
 800a828:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a82c:	b2da      	uxtb	r2, r3
 800a82e:	4b31      	ldr	r3, [pc, #196]	@ (800a8f4 <xPortStartScheduler+0x134>)
 800a830:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a832:	4b31      	ldr	r3, [pc, #196]	@ (800a8f8 <xPortStartScheduler+0x138>)
 800a834:	2207      	movs	r2, #7
 800a836:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a838:	e009      	b.n	800a84e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a83a:	4b2f      	ldr	r3, [pc, #188]	@ (800a8f8 <xPortStartScheduler+0x138>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	3b01      	subs	r3, #1
 800a840:	4a2d      	ldr	r2, [pc, #180]	@ (800a8f8 <xPortStartScheduler+0x138>)
 800a842:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a844:	78fb      	ldrb	r3, [r7, #3]
 800a846:	b2db      	uxtb	r3, r3
 800a848:	005b      	lsls	r3, r3, #1
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a84e:	78fb      	ldrb	r3, [r7, #3]
 800a850:	b2db      	uxtb	r3, r3
 800a852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a856:	2b80      	cmp	r3, #128	@ 0x80
 800a858:	d0ef      	beq.n	800a83a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a85a:	4b27      	ldr	r3, [pc, #156]	@ (800a8f8 <xPortStartScheduler+0x138>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f1c3 0307 	rsb	r3, r3, #7
 800a862:	2b04      	cmp	r3, #4
 800a864:	d00b      	beq.n	800a87e <xPortStartScheduler+0xbe>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	60bb      	str	r3, [r7, #8]
}
 800a878:	bf00      	nop
 800a87a:	bf00      	nop
 800a87c:	e7fd      	b.n	800a87a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a87e:	4b1e      	ldr	r3, [pc, #120]	@ (800a8f8 <xPortStartScheduler+0x138>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	021b      	lsls	r3, r3, #8
 800a884:	4a1c      	ldr	r2, [pc, #112]	@ (800a8f8 <xPortStartScheduler+0x138>)
 800a886:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a888:	4b1b      	ldr	r3, [pc, #108]	@ (800a8f8 <xPortStartScheduler+0x138>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a890:	4a19      	ldr	r2, [pc, #100]	@ (800a8f8 <xPortStartScheduler+0x138>)
 800a892:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	b2da      	uxtb	r2, r3
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a89c:	4b17      	ldr	r3, [pc, #92]	@ (800a8fc <xPortStartScheduler+0x13c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a16      	ldr	r2, [pc, #88]	@ (800a8fc <xPortStartScheduler+0x13c>)
 800a8a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a8a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8a8:	4b14      	ldr	r3, [pc, #80]	@ (800a8fc <xPortStartScheduler+0x13c>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a13      	ldr	r2, [pc, #76]	@ (800a8fc <xPortStartScheduler+0x13c>)
 800a8ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a8b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8b4:	f000 f8da 	bl	800aa6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8b8:	4b11      	ldr	r3, [pc, #68]	@ (800a900 <xPortStartScheduler+0x140>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8be:	f000 f8f9 	bl	800aab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8c2:	4b10      	ldr	r3, [pc, #64]	@ (800a904 <xPortStartScheduler+0x144>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a0f      	ldr	r2, [pc, #60]	@ (800a904 <xPortStartScheduler+0x144>)
 800a8c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a8cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8ce:	f7ff ff63 	bl	800a798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8d2:	f7ff f81f 	bl	8009914 <vTaskSwitchContext>
	prvTaskExitError();
 800a8d6:	f7ff ff17 	bl	800a708 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	e000ed00 	.word	0xe000ed00
 800a8e8:	410fc271 	.word	0x410fc271
 800a8ec:	410fc270 	.word	0x410fc270
 800a8f0:	e000e400 	.word	0xe000e400
 800a8f4:	20001250 	.word	0x20001250
 800a8f8:	20001254 	.word	0x20001254
 800a8fc:	e000ed20 	.word	0xe000ed20
 800a900:	2000000c 	.word	0x2000000c
 800a904:	e000ef34 	.word	0xe000ef34

0800a908 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	607b      	str	r3, [r7, #4]
}
 800a920:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a922:	4b10      	ldr	r3, [pc, #64]	@ (800a964 <vPortEnterCritical+0x5c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3301      	adds	r3, #1
 800a928:	4a0e      	ldr	r2, [pc, #56]	@ (800a964 <vPortEnterCritical+0x5c>)
 800a92a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a92c:	4b0d      	ldr	r3, [pc, #52]	@ (800a964 <vPortEnterCritical+0x5c>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d110      	bne.n	800a956 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a934:	4b0c      	ldr	r3, [pc, #48]	@ (800a968 <vPortEnterCritical+0x60>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00b      	beq.n	800a956 <vPortEnterCritical+0x4e>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	603b      	str	r3, [r7, #0]
}
 800a950:	bf00      	nop
 800a952:	bf00      	nop
 800a954:	e7fd      	b.n	800a952 <vPortEnterCritical+0x4a>
	}
}
 800a956:	bf00      	nop
 800a958:	370c      	adds	r7, #12
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	2000000c 	.word	0x2000000c
 800a968:	e000ed04 	.word	0xe000ed04

0800a96c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a972:	4b12      	ldr	r3, [pc, #72]	@ (800a9bc <vPortExitCritical+0x50>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d10b      	bne.n	800a992 <vPortExitCritical+0x26>
	__asm volatile
 800a97a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	607b      	str	r3, [r7, #4]
}
 800a98c:	bf00      	nop
 800a98e:	bf00      	nop
 800a990:	e7fd      	b.n	800a98e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a992:	4b0a      	ldr	r3, [pc, #40]	@ (800a9bc <vPortExitCritical+0x50>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	3b01      	subs	r3, #1
 800a998:	4a08      	ldr	r2, [pc, #32]	@ (800a9bc <vPortExitCritical+0x50>)
 800a99a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a99c:	4b07      	ldr	r3, [pc, #28]	@ (800a9bc <vPortExitCritical+0x50>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d105      	bne.n	800a9b0 <vPortExitCritical+0x44>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	f383 8811 	msr	BASEPRI, r3
}
 800a9ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	2000000c 	.word	0x2000000c

0800a9c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9c0:	f3ef 8009 	mrs	r0, PSP
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	4b15      	ldr	r3, [pc, #84]	@ (800aa20 <pxCurrentTCBConst>)
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	f01e 0f10 	tst.w	lr, #16
 800a9d0:	bf08      	it	eq
 800a9d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9da:	6010      	str	r0, [r2, #0]
 800a9dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a9e4:	f380 8811 	msr	BASEPRI, r0
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f7fe ff90 	bl	8009914 <vTaskSwitchContext>
 800a9f4:	f04f 0000 	mov.w	r0, #0
 800a9f8:	f380 8811 	msr	BASEPRI, r0
 800a9fc:	bc09      	pop	{r0, r3}
 800a9fe:	6819      	ldr	r1, [r3, #0]
 800aa00:	6808      	ldr	r0, [r1, #0]
 800aa02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa06:	f01e 0f10 	tst.w	lr, #16
 800aa0a:	bf08      	it	eq
 800aa0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa10:	f380 8809 	msr	PSP, r0
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	f3af 8000 	nop.w

0800aa20 <pxCurrentTCBConst>:
 800aa20:	20001028 	.word	0x20001028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa24:	bf00      	nop
 800aa26:	bf00      	nop

0800aa28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	607b      	str	r3, [r7, #4]
}
 800aa40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa42:	f7fe fead 	bl	80097a0 <xTaskIncrementTick>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d003      	beq.n	800aa54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa4c:	4b06      	ldr	r3, [pc, #24]	@ (800aa68 <SysTick_Handler+0x40>)
 800aa4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa52:	601a      	str	r2, [r3, #0]
 800aa54:	2300      	movs	r3, #0
 800aa56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	f383 8811 	msr	BASEPRI, r3
}
 800aa5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa60:	bf00      	nop
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	e000ed04 	.word	0xe000ed04

0800aa6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa70:	4b0b      	ldr	r3, [pc, #44]	@ (800aaa0 <vPortSetupTimerInterrupt+0x34>)
 800aa72:	2200      	movs	r2, #0
 800aa74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa76:	4b0b      	ldr	r3, [pc, #44]	@ (800aaa4 <vPortSetupTimerInterrupt+0x38>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa7c:	4b0a      	ldr	r3, [pc, #40]	@ (800aaa8 <vPortSetupTimerInterrupt+0x3c>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a0a      	ldr	r2, [pc, #40]	@ (800aaac <vPortSetupTimerInterrupt+0x40>)
 800aa82:	fba2 2303 	umull	r2, r3, r2, r3
 800aa86:	099b      	lsrs	r3, r3, #6
 800aa88:	4a09      	ldr	r2, [pc, #36]	@ (800aab0 <vPortSetupTimerInterrupt+0x44>)
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa8e:	4b04      	ldr	r3, [pc, #16]	@ (800aaa0 <vPortSetupTimerInterrupt+0x34>)
 800aa90:	2207      	movs	r2, #7
 800aa92:	601a      	str	r2, [r3, #0]
}
 800aa94:	bf00      	nop
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	e000e010 	.word	0xe000e010
 800aaa4:	e000e018 	.word	0xe000e018
 800aaa8:	20000000 	.word	0x20000000
 800aaac:	10624dd3 	.word	0x10624dd3
 800aab0:	e000e014 	.word	0xe000e014

0800aab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aab4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800aac4 <vPortEnableVFP+0x10>
 800aab8:	6801      	ldr	r1, [r0, #0]
 800aaba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aabe:	6001      	str	r1, [r0, #0]
 800aac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aac2:	bf00      	nop
 800aac4:	e000ed88 	.word	0xe000ed88

0800aac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aace:	f3ef 8305 	mrs	r3, IPSR
 800aad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2b0f      	cmp	r3, #15
 800aad8:	d915      	bls.n	800ab06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aada:	4a18      	ldr	r2, [pc, #96]	@ (800ab3c <vPortValidateInterruptPriority+0x74>)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aae4:	4b16      	ldr	r3, [pc, #88]	@ (800ab40 <vPortValidateInterruptPriority+0x78>)
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	7afa      	ldrb	r2, [r7, #11]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d20b      	bcs.n	800ab06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	607b      	str	r3, [r7, #4]
}
 800ab00:	bf00      	nop
 800ab02:	bf00      	nop
 800ab04:	e7fd      	b.n	800ab02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab06:	4b0f      	ldr	r3, [pc, #60]	@ (800ab44 <vPortValidateInterruptPriority+0x7c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ab0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ab48 <vPortValidateInterruptPriority+0x80>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d90b      	bls.n	800ab2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	603b      	str	r3, [r7, #0]
}
 800ab28:	bf00      	nop
 800ab2a:	bf00      	nop
 800ab2c:	e7fd      	b.n	800ab2a <vPortValidateInterruptPriority+0x62>
	}
 800ab2e:	bf00      	nop
 800ab30:	3714      	adds	r7, #20
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop
 800ab3c:	e000e3f0 	.word	0xe000e3f0
 800ab40:	20001250 	.word	0x20001250
 800ab44:	e000ed0c 	.word	0xe000ed0c
 800ab48:	20001254 	.word	0x20001254

0800ab4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b08a      	sub	sp, #40	@ 0x28
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab54:	2300      	movs	r3, #0
 800ab56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab58:	f7fe fd66 	bl	8009628 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab5c:	4b5c      	ldr	r3, [pc, #368]	@ (800acd0 <pvPortMalloc+0x184>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab64:	f000 f924 	bl	800adb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab68:	4b5a      	ldr	r3, [pc, #360]	@ (800acd4 <pvPortMalloc+0x188>)
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4013      	ands	r3, r2
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f040 8095 	bne.w	800aca0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d01e      	beq.n	800abba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ab7c:	2208      	movs	r2, #8
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4413      	add	r3, r2
 800ab82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f003 0307 	and.w	r3, r3, #7
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d015      	beq.n	800abba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f023 0307 	bic.w	r3, r3, #7
 800ab94:	3308      	adds	r3, #8
 800ab96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f003 0307 	and.w	r3, r3, #7
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00b      	beq.n	800abba <pvPortMalloc+0x6e>
	__asm volatile
 800aba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	617b      	str	r3, [r7, #20]
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop
 800abb8:	e7fd      	b.n	800abb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d06f      	beq.n	800aca0 <pvPortMalloc+0x154>
 800abc0:	4b45      	ldr	r3, [pc, #276]	@ (800acd8 <pvPortMalloc+0x18c>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d86a      	bhi.n	800aca0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abca:	4b44      	ldr	r3, [pc, #272]	@ (800acdc <pvPortMalloc+0x190>)
 800abcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800abce:	4b43      	ldr	r3, [pc, #268]	@ (800acdc <pvPortMalloc+0x190>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abd4:	e004      	b.n	800abe0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800abd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d903      	bls.n	800abf2 <pvPortMalloc+0xa6>
 800abea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1f1      	bne.n	800abd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abf2:	4b37      	ldr	r3, [pc, #220]	@ (800acd0 <pvPortMalloc+0x184>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d051      	beq.n	800aca0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2208      	movs	r2, #8
 800ac02:	4413      	add	r3, r2
 800ac04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	1ad2      	subs	r2, r2, r3
 800ac16:	2308      	movs	r3, #8
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d920      	bls.n	800ac60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4413      	add	r3, r2
 800ac24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	f003 0307 	and.w	r3, r3, #7
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00b      	beq.n	800ac48 <pvPortMalloc+0xfc>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	613b      	str	r3, [r7, #16]
}
 800ac42:	bf00      	nop
 800ac44:	bf00      	nop
 800ac46:	e7fd      	b.n	800ac44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4a:	685a      	ldr	r2, [r3, #4]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	1ad2      	subs	r2, r2, r3
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac5a:	69b8      	ldr	r0, [r7, #24]
 800ac5c:	f000 f90a 	bl	800ae74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac60:	4b1d      	ldr	r3, [pc, #116]	@ (800acd8 <pvPortMalloc+0x18c>)
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	4a1b      	ldr	r2, [pc, #108]	@ (800acd8 <pvPortMalloc+0x18c>)
 800ac6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac6e:	4b1a      	ldr	r3, [pc, #104]	@ (800acd8 <pvPortMalloc+0x18c>)
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	4b1b      	ldr	r3, [pc, #108]	@ (800ace0 <pvPortMalloc+0x194>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d203      	bcs.n	800ac82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac7a:	4b17      	ldr	r3, [pc, #92]	@ (800acd8 <pvPortMalloc+0x18c>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a18      	ldr	r2, [pc, #96]	@ (800ace0 <pvPortMalloc+0x194>)
 800ac80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac84:	685a      	ldr	r2, [r3, #4]
 800ac86:	4b13      	ldr	r3, [pc, #76]	@ (800acd4 <pvPortMalloc+0x188>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	431a      	orrs	r2, r3
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac92:	2200      	movs	r2, #0
 800ac94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac96:	4b13      	ldr	r3, [pc, #76]	@ (800ace4 <pvPortMalloc+0x198>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	4a11      	ldr	r2, [pc, #68]	@ (800ace4 <pvPortMalloc+0x198>)
 800ac9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aca0:	f7fe fcd0 	bl	8009644 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	f003 0307 	and.w	r3, r3, #7
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00b      	beq.n	800acc6 <pvPortMalloc+0x17a>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	60fb      	str	r3, [r7, #12]
}
 800acc0:	bf00      	nop
 800acc2:	bf00      	nop
 800acc4:	e7fd      	b.n	800acc2 <pvPortMalloc+0x176>
	return pvReturn;
 800acc6:	69fb      	ldr	r3, [r7, #28]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3728      	adds	r7, #40	@ 0x28
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	20001e60 	.word	0x20001e60
 800acd4:	20001e74 	.word	0x20001e74
 800acd8:	20001e64 	.word	0x20001e64
 800acdc:	20001e58 	.word	0x20001e58
 800ace0:	20001e68 	.word	0x20001e68
 800ace4:	20001e6c 	.word	0x20001e6c

0800ace8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d04f      	beq.n	800ad9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800acfa:	2308      	movs	r3, #8
 800acfc:	425b      	negs	r3, r3
 800acfe:	697a      	ldr	r2, [r7, #20]
 800ad00:	4413      	add	r3, r2
 800ad02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	685a      	ldr	r2, [r3, #4]
 800ad0c:	4b25      	ldr	r3, [pc, #148]	@ (800ada4 <vPortFree+0xbc>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4013      	ands	r3, r2
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10b      	bne.n	800ad2e <vPortFree+0x46>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	60fb      	str	r3, [r7, #12]
}
 800ad28:	bf00      	nop
 800ad2a:	bf00      	nop
 800ad2c:	e7fd      	b.n	800ad2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00b      	beq.n	800ad4e <vPortFree+0x66>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	60bb      	str	r3, [r7, #8]
}
 800ad48:	bf00      	nop
 800ad4a:	bf00      	nop
 800ad4c:	e7fd      	b.n	800ad4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	685a      	ldr	r2, [r3, #4]
 800ad52:	4b14      	ldr	r3, [pc, #80]	@ (800ada4 <vPortFree+0xbc>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4013      	ands	r3, r2
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d01e      	beq.n	800ad9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d11a      	bne.n	800ad9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	685a      	ldr	r2, [r3, #4]
 800ad68:	4b0e      	ldr	r3, [pc, #56]	@ (800ada4 <vPortFree+0xbc>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	43db      	mvns	r3, r3
 800ad6e:	401a      	ands	r2, r3
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad74:	f7fe fc58 	bl	8009628 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	4b0a      	ldr	r3, [pc, #40]	@ (800ada8 <vPortFree+0xc0>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4413      	add	r3, r2
 800ad82:	4a09      	ldr	r2, [pc, #36]	@ (800ada8 <vPortFree+0xc0>)
 800ad84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad86:	6938      	ldr	r0, [r7, #16]
 800ad88:	f000 f874 	bl	800ae74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad8c:	4b07      	ldr	r3, [pc, #28]	@ (800adac <vPortFree+0xc4>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	3301      	adds	r3, #1
 800ad92:	4a06      	ldr	r2, [pc, #24]	@ (800adac <vPortFree+0xc4>)
 800ad94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ad96:	f7fe fc55 	bl	8009644 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad9a:	bf00      	nop
 800ad9c:	3718      	adds	r7, #24
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	20001e74 	.word	0x20001e74
 800ada8:	20001e64 	.word	0x20001e64
 800adac:	20001e70 	.word	0x20001e70

0800adb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800adb6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800adba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800adbc:	4b27      	ldr	r3, [pc, #156]	@ (800ae5c <prvHeapInit+0xac>)
 800adbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f003 0307 	and.w	r3, r3, #7
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00c      	beq.n	800ade4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	3307      	adds	r3, #7
 800adce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f023 0307 	bic.w	r3, r3, #7
 800add6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800add8:	68ba      	ldr	r2, [r7, #8]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	4a1f      	ldr	r2, [pc, #124]	@ (800ae5c <prvHeapInit+0xac>)
 800ade0:	4413      	add	r3, r2
 800ade2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ade8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae60 <prvHeapInit+0xb0>)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800adee:	4b1c      	ldr	r3, [pc, #112]	@ (800ae60 <prvHeapInit+0xb0>)
 800adf0:	2200      	movs	r2, #0
 800adf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	68ba      	ldr	r2, [r7, #8]
 800adf8:	4413      	add	r3, r2
 800adfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800adfc:	2208      	movs	r2, #8
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	1a9b      	subs	r3, r3, r2
 800ae02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f023 0307 	bic.w	r3, r3, #7
 800ae0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	4a15      	ldr	r2, [pc, #84]	@ (800ae64 <prvHeapInit+0xb4>)
 800ae10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae12:	4b14      	ldr	r3, [pc, #80]	@ (800ae64 <prvHeapInit+0xb4>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2200      	movs	r2, #0
 800ae18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae1a:	4b12      	ldr	r3, [pc, #72]	@ (800ae64 <prvHeapInit+0xb4>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	1ad2      	subs	r2, r2, r3
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae30:	4b0c      	ldr	r3, [pc, #48]	@ (800ae64 <prvHeapInit+0xb4>)
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	4a0a      	ldr	r2, [pc, #40]	@ (800ae68 <prvHeapInit+0xb8>)
 800ae3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	4a09      	ldr	r2, [pc, #36]	@ (800ae6c <prvHeapInit+0xbc>)
 800ae46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae48:	4b09      	ldr	r3, [pc, #36]	@ (800ae70 <prvHeapInit+0xc0>)
 800ae4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ae4e:	601a      	str	r2, [r3, #0]
}
 800ae50:	bf00      	nop
 800ae52:	3714      	adds	r7, #20
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr
 800ae5c:	20001258 	.word	0x20001258
 800ae60:	20001e58 	.word	0x20001e58
 800ae64:	20001e60 	.word	0x20001e60
 800ae68:	20001e68 	.word	0x20001e68
 800ae6c:	20001e64 	.word	0x20001e64
 800ae70:	20001e74 	.word	0x20001e74

0800ae74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae7c:	4b28      	ldr	r3, [pc, #160]	@ (800af20 <prvInsertBlockIntoFreeList+0xac>)
 800ae7e:	60fb      	str	r3, [r7, #12]
 800ae80:	e002      	b.n	800ae88 <prvInsertBlockIntoFreeList+0x14>
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	60fb      	str	r3, [r7, #12]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d8f7      	bhi.n	800ae82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d108      	bne.n	800aeb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	685a      	ldr	r2, [r3, #4]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	441a      	add	r2, r3
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	441a      	add	r2, r3
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d118      	bne.n	800aefc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	4b15      	ldr	r3, [pc, #84]	@ (800af24 <prvInsertBlockIntoFreeList+0xb0>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d00d      	beq.n	800aef2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	685a      	ldr	r2, [r3, #4]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	441a      	add	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	601a      	str	r2, [r3, #0]
 800aef0:	e008      	b.n	800af04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aef2:	4b0c      	ldr	r3, [pc, #48]	@ (800af24 <prvInsertBlockIntoFreeList+0xb0>)
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	e003      	b.n	800af04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d002      	beq.n	800af12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af12:	bf00      	nop
 800af14:	3714      	adds	r7, #20
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	20001e58 	.word	0x20001e58
 800af24:	20001e60 	.word	0x20001e60

0800af28 <sbrk_aligned>:
 800af28:	b570      	push	{r4, r5, r6, lr}
 800af2a:	4e0f      	ldr	r6, [pc, #60]	@ (800af68 <sbrk_aligned+0x40>)
 800af2c:	460c      	mov	r4, r1
 800af2e:	6831      	ldr	r1, [r6, #0]
 800af30:	4605      	mov	r5, r0
 800af32:	b911      	cbnz	r1, 800af3a <sbrk_aligned+0x12>
 800af34:	f000 fb42 	bl	800b5bc <_sbrk_r>
 800af38:	6030      	str	r0, [r6, #0]
 800af3a:	4621      	mov	r1, r4
 800af3c:	4628      	mov	r0, r5
 800af3e:	f000 fb3d 	bl	800b5bc <_sbrk_r>
 800af42:	1c43      	adds	r3, r0, #1
 800af44:	d103      	bne.n	800af4e <sbrk_aligned+0x26>
 800af46:	f04f 34ff 	mov.w	r4, #4294967295
 800af4a:	4620      	mov	r0, r4
 800af4c:	bd70      	pop	{r4, r5, r6, pc}
 800af4e:	1cc4      	adds	r4, r0, #3
 800af50:	f024 0403 	bic.w	r4, r4, #3
 800af54:	42a0      	cmp	r0, r4
 800af56:	d0f8      	beq.n	800af4a <sbrk_aligned+0x22>
 800af58:	1a21      	subs	r1, r4, r0
 800af5a:	4628      	mov	r0, r5
 800af5c:	f000 fb2e 	bl	800b5bc <_sbrk_r>
 800af60:	3001      	adds	r0, #1
 800af62:	d1f2      	bne.n	800af4a <sbrk_aligned+0x22>
 800af64:	e7ef      	b.n	800af46 <sbrk_aligned+0x1e>
 800af66:	bf00      	nop
 800af68:	20001e78 	.word	0x20001e78

0800af6c <_malloc_r>:
 800af6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af70:	1ccd      	adds	r5, r1, #3
 800af72:	f025 0503 	bic.w	r5, r5, #3
 800af76:	3508      	adds	r5, #8
 800af78:	2d0c      	cmp	r5, #12
 800af7a:	bf38      	it	cc
 800af7c:	250c      	movcc	r5, #12
 800af7e:	2d00      	cmp	r5, #0
 800af80:	4606      	mov	r6, r0
 800af82:	db01      	blt.n	800af88 <_malloc_r+0x1c>
 800af84:	42a9      	cmp	r1, r5
 800af86:	d904      	bls.n	800af92 <_malloc_r+0x26>
 800af88:	230c      	movs	r3, #12
 800af8a:	6033      	str	r3, [r6, #0]
 800af8c:	2000      	movs	r0, #0
 800af8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b068 <_malloc_r+0xfc>
 800af96:	f000 f869 	bl	800b06c <__malloc_lock>
 800af9a:	f8d8 3000 	ldr.w	r3, [r8]
 800af9e:	461c      	mov	r4, r3
 800afa0:	bb44      	cbnz	r4, 800aff4 <_malloc_r+0x88>
 800afa2:	4629      	mov	r1, r5
 800afa4:	4630      	mov	r0, r6
 800afa6:	f7ff ffbf 	bl	800af28 <sbrk_aligned>
 800afaa:	1c43      	adds	r3, r0, #1
 800afac:	4604      	mov	r4, r0
 800afae:	d158      	bne.n	800b062 <_malloc_r+0xf6>
 800afb0:	f8d8 4000 	ldr.w	r4, [r8]
 800afb4:	4627      	mov	r7, r4
 800afb6:	2f00      	cmp	r7, #0
 800afb8:	d143      	bne.n	800b042 <_malloc_r+0xd6>
 800afba:	2c00      	cmp	r4, #0
 800afbc:	d04b      	beq.n	800b056 <_malloc_r+0xea>
 800afbe:	6823      	ldr	r3, [r4, #0]
 800afc0:	4639      	mov	r1, r7
 800afc2:	4630      	mov	r0, r6
 800afc4:	eb04 0903 	add.w	r9, r4, r3
 800afc8:	f000 faf8 	bl	800b5bc <_sbrk_r>
 800afcc:	4581      	cmp	r9, r0
 800afce:	d142      	bne.n	800b056 <_malloc_r+0xea>
 800afd0:	6821      	ldr	r1, [r4, #0]
 800afd2:	1a6d      	subs	r5, r5, r1
 800afd4:	4629      	mov	r1, r5
 800afd6:	4630      	mov	r0, r6
 800afd8:	f7ff ffa6 	bl	800af28 <sbrk_aligned>
 800afdc:	3001      	adds	r0, #1
 800afde:	d03a      	beq.n	800b056 <_malloc_r+0xea>
 800afe0:	6823      	ldr	r3, [r4, #0]
 800afe2:	442b      	add	r3, r5
 800afe4:	6023      	str	r3, [r4, #0]
 800afe6:	f8d8 3000 	ldr.w	r3, [r8]
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	bb62      	cbnz	r2, 800b048 <_malloc_r+0xdc>
 800afee:	f8c8 7000 	str.w	r7, [r8]
 800aff2:	e00f      	b.n	800b014 <_malloc_r+0xa8>
 800aff4:	6822      	ldr	r2, [r4, #0]
 800aff6:	1b52      	subs	r2, r2, r5
 800aff8:	d420      	bmi.n	800b03c <_malloc_r+0xd0>
 800affa:	2a0b      	cmp	r2, #11
 800affc:	d917      	bls.n	800b02e <_malloc_r+0xc2>
 800affe:	1961      	adds	r1, r4, r5
 800b000:	42a3      	cmp	r3, r4
 800b002:	6025      	str	r5, [r4, #0]
 800b004:	bf18      	it	ne
 800b006:	6059      	strne	r1, [r3, #4]
 800b008:	6863      	ldr	r3, [r4, #4]
 800b00a:	bf08      	it	eq
 800b00c:	f8c8 1000 	streq.w	r1, [r8]
 800b010:	5162      	str	r2, [r4, r5]
 800b012:	604b      	str	r3, [r1, #4]
 800b014:	4630      	mov	r0, r6
 800b016:	f000 f82f 	bl	800b078 <__malloc_unlock>
 800b01a:	f104 000b 	add.w	r0, r4, #11
 800b01e:	1d23      	adds	r3, r4, #4
 800b020:	f020 0007 	bic.w	r0, r0, #7
 800b024:	1ac2      	subs	r2, r0, r3
 800b026:	bf1c      	itt	ne
 800b028:	1a1b      	subne	r3, r3, r0
 800b02a:	50a3      	strne	r3, [r4, r2]
 800b02c:	e7af      	b.n	800af8e <_malloc_r+0x22>
 800b02e:	6862      	ldr	r2, [r4, #4]
 800b030:	42a3      	cmp	r3, r4
 800b032:	bf0c      	ite	eq
 800b034:	f8c8 2000 	streq.w	r2, [r8]
 800b038:	605a      	strne	r2, [r3, #4]
 800b03a:	e7eb      	b.n	800b014 <_malloc_r+0xa8>
 800b03c:	4623      	mov	r3, r4
 800b03e:	6864      	ldr	r4, [r4, #4]
 800b040:	e7ae      	b.n	800afa0 <_malloc_r+0x34>
 800b042:	463c      	mov	r4, r7
 800b044:	687f      	ldr	r7, [r7, #4]
 800b046:	e7b6      	b.n	800afb6 <_malloc_r+0x4a>
 800b048:	461a      	mov	r2, r3
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	42a3      	cmp	r3, r4
 800b04e:	d1fb      	bne.n	800b048 <_malloc_r+0xdc>
 800b050:	2300      	movs	r3, #0
 800b052:	6053      	str	r3, [r2, #4]
 800b054:	e7de      	b.n	800b014 <_malloc_r+0xa8>
 800b056:	230c      	movs	r3, #12
 800b058:	6033      	str	r3, [r6, #0]
 800b05a:	4630      	mov	r0, r6
 800b05c:	f000 f80c 	bl	800b078 <__malloc_unlock>
 800b060:	e794      	b.n	800af8c <_malloc_r+0x20>
 800b062:	6005      	str	r5, [r0, #0]
 800b064:	e7d6      	b.n	800b014 <_malloc_r+0xa8>
 800b066:	bf00      	nop
 800b068:	20001e7c 	.word	0x20001e7c

0800b06c <__malloc_lock>:
 800b06c:	4801      	ldr	r0, [pc, #4]	@ (800b074 <__malloc_lock+0x8>)
 800b06e:	f000 baf2 	b.w	800b656 <__retarget_lock_acquire_recursive>
 800b072:	bf00      	nop
 800b074:	20001fc0 	.word	0x20001fc0

0800b078 <__malloc_unlock>:
 800b078:	4801      	ldr	r0, [pc, #4]	@ (800b080 <__malloc_unlock+0x8>)
 800b07a:	f000 baed 	b.w	800b658 <__retarget_lock_release_recursive>
 800b07e:	bf00      	nop
 800b080:	20001fc0 	.word	0x20001fc0

0800b084 <std>:
 800b084:	2300      	movs	r3, #0
 800b086:	b510      	push	{r4, lr}
 800b088:	4604      	mov	r4, r0
 800b08a:	e9c0 3300 	strd	r3, r3, [r0]
 800b08e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b092:	6083      	str	r3, [r0, #8]
 800b094:	8181      	strh	r1, [r0, #12]
 800b096:	6643      	str	r3, [r0, #100]	@ 0x64
 800b098:	81c2      	strh	r2, [r0, #14]
 800b09a:	6183      	str	r3, [r0, #24]
 800b09c:	4619      	mov	r1, r3
 800b09e:	2208      	movs	r2, #8
 800b0a0:	305c      	adds	r0, #92	@ 0x5c
 800b0a2:	f000 f9f9 	bl	800b498 <memset>
 800b0a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b0dc <std+0x58>)
 800b0a8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b0aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b0e0 <std+0x5c>)
 800b0ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b0ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b0e4 <std+0x60>)
 800b0b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b0b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b0e8 <std+0x64>)
 800b0b4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b0b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b0ec <std+0x68>)
 800b0b8:	6224      	str	r4, [r4, #32]
 800b0ba:	429c      	cmp	r4, r3
 800b0bc:	d006      	beq.n	800b0cc <std+0x48>
 800b0be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b0c2:	4294      	cmp	r4, r2
 800b0c4:	d002      	beq.n	800b0cc <std+0x48>
 800b0c6:	33d0      	adds	r3, #208	@ 0xd0
 800b0c8:	429c      	cmp	r4, r3
 800b0ca:	d105      	bne.n	800b0d8 <std+0x54>
 800b0cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b0d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0d4:	f000 babe 	b.w	800b654 <__retarget_lock_init_recursive>
 800b0d8:	bd10      	pop	{r4, pc}
 800b0da:	bf00      	nop
 800b0dc:	0800b2e9 	.word	0x0800b2e9
 800b0e0:	0800b30b 	.word	0x0800b30b
 800b0e4:	0800b343 	.word	0x0800b343
 800b0e8:	0800b367 	.word	0x0800b367
 800b0ec:	20001e80 	.word	0x20001e80

0800b0f0 <stdio_exit_handler>:
 800b0f0:	4a02      	ldr	r2, [pc, #8]	@ (800b0fc <stdio_exit_handler+0xc>)
 800b0f2:	4903      	ldr	r1, [pc, #12]	@ (800b100 <stdio_exit_handler+0x10>)
 800b0f4:	4803      	ldr	r0, [pc, #12]	@ (800b104 <stdio_exit_handler+0x14>)
 800b0f6:	f000 b869 	b.w	800b1cc <_fwalk_sglue>
 800b0fa:	bf00      	nop
 800b0fc:	20000010 	.word	0x20000010
 800b100:	0800bdb5 	.word	0x0800bdb5
 800b104:	20000020 	.word	0x20000020

0800b108 <cleanup_stdio>:
 800b108:	6841      	ldr	r1, [r0, #4]
 800b10a:	4b0c      	ldr	r3, [pc, #48]	@ (800b13c <cleanup_stdio+0x34>)
 800b10c:	4299      	cmp	r1, r3
 800b10e:	b510      	push	{r4, lr}
 800b110:	4604      	mov	r4, r0
 800b112:	d001      	beq.n	800b118 <cleanup_stdio+0x10>
 800b114:	f000 fe4e 	bl	800bdb4 <_fflush_r>
 800b118:	68a1      	ldr	r1, [r4, #8]
 800b11a:	4b09      	ldr	r3, [pc, #36]	@ (800b140 <cleanup_stdio+0x38>)
 800b11c:	4299      	cmp	r1, r3
 800b11e:	d002      	beq.n	800b126 <cleanup_stdio+0x1e>
 800b120:	4620      	mov	r0, r4
 800b122:	f000 fe47 	bl	800bdb4 <_fflush_r>
 800b126:	68e1      	ldr	r1, [r4, #12]
 800b128:	4b06      	ldr	r3, [pc, #24]	@ (800b144 <cleanup_stdio+0x3c>)
 800b12a:	4299      	cmp	r1, r3
 800b12c:	d004      	beq.n	800b138 <cleanup_stdio+0x30>
 800b12e:	4620      	mov	r0, r4
 800b130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b134:	f000 be3e 	b.w	800bdb4 <_fflush_r>
 800b138:	bd10      	pop	{r4, pc}
 800b13a:	bf00      	nop
 800b13c:	20001e80 	.word	0x20001e80
 800b140:	20001ee8 	.word	0x20001ee8
 800b144:	20001f50 	.word	0x20001f50

0800b148 <global_stdio_init.part.0>:
 800b148:	b510      	push	{r4, lr}
 800b14a:	4b0b      	ldr	r3, [pc, #44]	@ (800b178 <global_stdio_init.part.0+0x30>)
 800b14c:	4c0b      	ldr	r4, [pc, #44]	@ (800b17c <global_stdio_init.part.0+0x34>)
 800b14e:	4a0c      	ldr	r2, [pc, #48]	@ (800b180 <global_stdio_init.part.0+0x38>)
 800b150:	601a      	str	r2, [r3, #0]
 800b152:	4620      	mov	r0, r4
 800b154:	2200      	movs	r2, #0
 800b156:	2104      	movs	r1, #4
 800b158:	f7ff ff94 	bl	800b084 <std>
 800b15c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b160:	2201      	movs	r2, #1
 800b162:	2109      	movs	r1, #9
 800b164:	f7ff ff8e 	bl	800b084 <std>
 800b168:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b16c:	2202      	movs	r2, #2
 800b16e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b172:	2112      	movs	r1, #18
 800b174:	f7ff bf86 	b.w	800b084 <std>
 800b178:	20001fb8 	.word	0x20001fb8
 800b17c:	20001e80 	.word	0x20001e80
 800b180:	0800b0f1 	.word	0x0800b0f1

0800b184 <__sfp_lock_acquire>:
 800b184:	4801      	ldr	r0, [pc, #4]	@ (800b18c <__sfp_lock_acquire+0x8>)
 800b186:	f000 ba66 	b.w	800b656 <__retarget_lock_acquire_recursive>
 800b18a:	bf00      	nop
 800b18c:	20001fc1 	.word	0x20001fc1

0800b190 <__sfp_lock_release>:
 800b190:	4801      	ldr	r0, [pc, #4]	@ (800b198 <__sfp_lock_release+0x8>)
 800b192:	f000 ba61 	b.w	800b658 <__retarget_lock_release_recursive>
 800b196:	bf00      	nop
 800b198:	20001fc1 	.word	0x20001fc1

0800b19c <__sinit>:
 800b19c:	b510      	push	{r4, lr}
 800b19e:	4604      	mov	r4, r0
 800b1a0:	f7ff fff0 	bl	800b184 <__sfp_lock_acquire>
 800b1a4:	6a23      	ldr	r3, [r4, #32]
 800b1a6:	b11b      	cbz	r3, 800b1b0 <__sinit+0x14>
 800b1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1ac:	f7ff bff0 	b.w	800b190 <__sfp_lock_release>
 800b1b0:	4b04      	ldr	r3, [pc, #16]	@ (800b1c4 <__sinit+0x28>)
 800b1b2:	6223      	str	r3, [r4, #32]
 800b1b4:	4b04      	ldr	r3, [pc, #16]	@ (800b1c8 <__sinit+0x2c>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1f5      	bne.n	800b1a8 <__sinit+0xc>
 800b1bc:	f7ff ffc4 	bl	800b148 <global_stdio_init.part.0>
 800b1c0:	e7f2      	b.n	800b1a8 <__sinit+0xc>
 800b1c2:	bf00      	nop
 800b1c4:	0800b109 	.word	0x0800b109
 800b1c8:	20001fb8 	.word	0x20001fb8

0800b1cc <_fwalk_sglue>:
 800b1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1d0:	4607      	mov	r7, r0
 800b1d2:	4688      	mov	r8, r1
 800b1d4:	4614      	mov	r4, r2
 800b1d6:	2600      	movs	r6, #0
 800b1d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1dc:	f1b9 0901 	subs.w	r9, r9, #1
 800b1e0:	d505      	bpl.n	800b1ee <_fwalk_sglue+0x22>
 800b1e2:	6824      	ldr	r4, [r4, #0]
 800b1e4:	2c00      	cmp	r4, #0
 800b1e6:	d1f7      	bne.n	800b1d8 <_fwalk_sglue+0xc>
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ee:	89ab      	ldrh	r3, [r5, #12]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d907      	bls.n	800b204 <_fwalk_sglue+0x38>
 800b1f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	d003      	beq.n	800b204 <_fwalk_sglue+0x38>
 800b1fc:	4629      	mov	r1, r5
 800b1fe:	4638      	mov	r0, r7
 800b200:	47c0      	blx	r8
 800b202:	4306      	orrs	r6, r0
 800b204:	3568      	adds	r5, #104	@ 0x68
 800b206:	e7e9      	b.n	800b1dc <_fwalk_sglue+0x10>

0800b208 <iprintf>:
 800b208:	b40f      	push	{r0, r1, r2, r3}
 800b20a:	b507      	push	{r0, r1, r2, lr}
 800b20c:	4906      	ldr	r1, [pc, #24]	@ (800b228 <iprintf+0x20>)
 800b20e:	ab04      	add	r3, sp, #16
 800b210:	6808      	ldr	r0, [r1, #0]
 800b212:	f853 2b04 	ldr.w	r2, [r3], #4
 800b216:	6881      	ldr	r1, [r0, #8]
 800b218:	9301      	str	r3, [sp, #4]
 800b21a:	f000 faa1 	bl	800b760 <_vfiprintf_r>
 800b21e:	b003      	add	sp, #12
 800b220:	f85d eb04 	ldr.w	lr, [sp], #4
 800b224:	b004      	add	sp, #16
 800b226:	4770      	bx	lr
 800b228:	2000001c 	.word	0x2000001c

0800b22c <_puts_r>:
 800b22c:	6a03      	ldr	r3, [r0, #32]
 800b22e:	b570      	push	{r4, r5, r6, lr}
 800b230:	6884      	ldr	r4, [r0, #8]
 800b232:	4605      	mov	r5, r0
 800b234:	460e      	mov	r6, r1
 800b236:	b90b      	cbnz	r3, 800b23c <_puts_r+0x10>
 800b238:	f7ff ffb0 	bl	800b19c <__sinit>
 800b23c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b23e:	07db      	lsls	r3, r3, #31
 800b240:	d405      	bmi.n	800b24e <_puts_r+0x22>
 800b242:	89a3      	ldrh	r3, [r4, #12]
 800b244:	0598      	lsls	r0, r3, #22
 800b246:	d402      	bmi.n	800b24e <_puts_r+0x22>
 800b248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b24a:	f000 fa04 	bl	800b656 <__retarget_lock_acquire_recursive>
 800b24e:	89a3      	ldrh	r3, [r4, #12]
 800b250:	0719      	lsls	r1, r3, #28
 800b252:	d502      	bpl.n	800b25a <_puts_r+0x2e>
 800b254:	6923      	ldr	r3, [r4, #16]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d135      	bne.n	800b2c6 <_puts_r+0x9a>
 800b25a:	4621      	mov	r1, r4
 800b25c:	4628      	mov	r0, r5
 800b25e:	f000 f8c5 	bl	800b3ec <__swsetup_r>
 800b262:	b380      	cbz	r0, 800b2c6 <_puts_r+0x9a>
 800b264:	f04f 35ff 	mov.w	r5, #4294967295
 800b268:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b26a:	07da      	lsls	r2, r3, #31
 800b26c:	d405      	bmi.n	800b27a <_puts_r+0x4e>
 800b26e:	89a3      	ldrh	r3, [r4, #12]
 800b270:	059b      	lsls	r3, r3, #22
 800b272:	d402      	bmi.n	800b27a <_puts_r+0x4e>
 800b274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b276:	f000 f9ef 	bl	800b658 <__retarget_lock_release_recursive>
 800b27a:	4628      	mov	r0, r5
 800b27c:	bd70      	pop	{r4, r5, r6, pc}
 800b27e:	2b00      	cmp	r3, #0
 800b280:	da04      	bge.n	800b28c <_puts_r+0x60>
 800b282:	69a2      	ldr	r2, [r4, #24]
 800b284:	429a      	cmp	r2, r3
 800b286:	dc17      	bgt.n	800b2b8 <_puts_r+0x8c>
 800b288:	290a      	cmp	r1, #10
 800b28a:	d015      	beq.n	800b2b8 <_puts_r+0x8c>
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	6022      	str	r2, [r4, #0]
 800b292:	7019      	strb	r1, [r3, #0]
 800b294:	68a3      	ldr	r3, [r4, #8]
 800b296:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b29a:	3b01      	subs	r3, #1
 800b29c:	60a3      	str	r3, [r4, #8]
 800b29e:	2900      	cmp	r1, #0
 800b2a0:	d1ed      	bne.n	800b27e <_puts_r+0x52>
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	da11      	bge.n	800b2ca <_puts_r+0x9e>
 800b2a6:	4622      	mov	r2, r4
 800b2a8:	210a      	movs	r1, #10
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	f000 f85f 	bl	800b36e <__swbuf_r>
 800b2b0:	3001      	adds	r0, #1
 800b2b2:	d0d7      	beq.n	800b264 <_puts_r+0x38>
 800b2b4:	250a      	movs	r5, #10
 800b2b6:	e7d7      	b.n	800b268 <_puts_r+0x3c>
 800b2b8:	4622      	mov	r2, r4
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	f000 f857 	bl	800b36e <__swbuf_r>
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	d1e7      	bne.n	800b294 <_puts_r+0x68>
 800b2c4:	e7ce      	b.n	800b264 <_puts_r+0x38>
 800b2c6:	3e01      	subs	r6, #1
 800b2c8:	e7e4      	b.n	800b294 <_puts_r+0x68>
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	1c5a      	adds	r2, r3, #1
 800b2ce:	6022      	str	r2, [r4, #0]
 800b2d0:	220a      	movs	r2, #10
 800b2d2:	701a      	strb	r2, [r3, #0]
 800b2d4:	e7ee      	b.n	800b2b4 <_puts_r+0x88>
	...

0800b2d8 <puts>:
 800b2d8:	4b02      	ldr	r3, [pc, #8]	@ (800b2e4 <puts+0xc>)
 800b2da:	4601      	mov	r1, r0
 800b2dc:	6818      	ldr	r0, [r3, #0]
 800b2de:	f7ff bfa5 	b.w	800b22c <_puts_r>
 800b2e2:	bf00      	nop
 800b2e4:	2000001c 	.word	0x2000001c

0800b2e8 <__sread>:
 800b2e8:	b510      	push	{r4, lr}
 800b2ea:	460c      	mov	r4, r1
 800b2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2f0:	f000 f952 	bl	800b598 <_read_r>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	bfab      	itete	ge
 800b2f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b2fa:	89a3      	ldrhlt	r3, [r4, #12]
 800b2fc:	181b      	addge	r3, r3, r0
 800b2fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b302:	bfac      	ite	ge
 800b304:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b306:	81a3      	strhlt	r3, [r4, #12]
 800b308:	bd10      	pop	{r4, pc}

0800b30a <__swrite>:
 800b30a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b30e:	461f      	mov	r7, r3
 800b310:	898b      	ldrh	r3, [r1, #12]
 800b312:	05db      	lsls	r3, r3, #23
 800b314:	4605      	mov	r5, r0
 800b316:	460c      	mov	r4, r1
 800b318:	4616      	mov	r6, r2
 800b31a:	d505      	bpl.n	800b328 <__swrite+0x1e>
 800b31c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b320:	2302      	movs	r3, #2
 800b322:	2200      	movs	r2, #0
 800b324:	f000 f926 	bl	800b574 <_lseek_r>
 800b328:	89a3      	ldrh	r3, [r4, #12]
 800b32a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b32e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b332:	81a3      	strh	r3, [r4, #12]
 800b334:	4632      	mov	r2, r6
 800b336:	463b      	mov	r3, r7
 800b338:	4628      	mov	r0, r5
 800b33a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b33e:	f000 b94d 	b.w	800b5dc <_write_r>

0800b342 <__sseek>:
 800b342:	b510      	push	{r4, lr}
 800b344:	460c      	mov	r4, r1
 800b346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b34a:	f000 f913 	bl	800b574 <_lseek_r>
 800b34e:	1c43      	adds	r3, r0, #1
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	bf15      	itete	ne
 800b354:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b356:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b35a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b35e:	81a3      	strheq	r3, [r4, #12]
 800b360:	bf18      	it	ne
 800b362:	81a3      	strhne	r3, [r4, #12]
 800b364:	bd10      	pop	{r4, pc}

0800b366 <__sclose>:
 800b366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b36a:	f000 b89d 	b.w	800b4a8 <_close_r>

0800b36e <__swbuf_r>:
 800b36e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b370:	460e      	mov	r6, r1
 800b372:	4614      	mov	r4, r2
 800b374:	4605      	mov	r5, r0
 800b376:	b118      	cbz	r0, 800b380 <__swbuf_r+0x12>
 800b378:	6a03      	ldr	r3, [r0, #32]
 800b37a:	b90b      	cbnz	r3, 800b380 <__swbuf_r+0x12>
 800b37c:	f7ff ff0e 	bl	800b19c <__sinit>
 800b380:	69a3      	ldr	r3, [r4, #24]
 800b382:	60a3      	str	r3, [r4, #8]
 800b384:	89a3      	ldrh	r3, [r4, #12]
 800b386:	071a      	lsls	r2, r3, #28
 800b388:	d501      	bpl.n	800b38e <__swbuf_r+0x20>
 800b38a:	6923      	ldr	r3, [r4, #16]
 800b38c:	b943      	cbnz	r3, 800b3a0 <__swbuf_r+0x32>
 800b38e:	4621      	mov	r1, r4
 800b390:	4628      	mov	r0, r5
 800b392:	f000 f82b 	bl	800b3ec <__swsetup_r>
 800b396:	b118      	cbz	r0, 800b3a0 <__swbuf_r+0x32>
 800b398:	f04f 37ff 	mov.w	r7, #4294967295
 800b39c:	4638      	mov	r0, r7
 800b39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3a0:	6823      	ldr	r3, [r4, #0]
 800b3a2:	6922      	ldr	r2, [r4, #16]
 800b3a4:	1a98      	subs	r0, r3, r2
 800b3a6:	6963      	ldr	r3, [r4, #20]
 800b3a8:	b2f6      	uxtb	r6, r6
 800b3aa:	4283      	cmp	r3, r0
 800b3ac:	4637      	mov	r7, r6
 800b3ae:	dc05      	bgt.n	800b3bc <__swbuf_r+0x4e>
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	f000 fcfe 	bl	800bdb4 <_fflush_r>
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	d1ed      	bne.n	800b398 <__swbuf_r+0x2a>
 800b3bc:	68a3      	ldr	r3, [r4, #8]
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	60a3      	str	r3, [r4, #8]
 800b3c2:	6823      	ldr	r3, [r4, #0]
 800b3c4:	1c5a      	adds	r2, r3, #1
 800b3c6:	6022      	str	r2, [r4, #0]
 800b3c8:	701e      	strb	r6, [r3, #0]
 800b3ca:	6962      	ldr	r2, [r4, #20]
 800b3cc:	1c43      	adds	r3, r0, #1
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d004      	beq.n	800b3dc <__swbuf_r+0x6e>
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	07db      	lsls	r3, r3, #31
 800b3d6:	d5e1      	bpl.n	800b39c <__swbuf_r+0x2e>
 800b3d8:	2e0a      	cmp	r6, #10
 800b3da:	d1df      	bne.n	800b39c <__swbuf_r+0x2e>
 800b3dc:	4621      	mov	r1, r4
 800b3de:	4628      	mov	r0, r5
 800b3e0:	f000 fce8 	bl	800bdb4 <_fflush_r>
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	d0d9      	beq.n	800b39c <__swbuf_r+0x2e>
 800b3e8:	e7d6      	b.n	800b398 <__swbuf_r+0x2a>
	...

0800b3ec <__swsetup_r>:
 800b3ec:	b538      	push	{r3, r4, r5, lr}
 800b3ee:	4b29      	ldr	r3, [pc, #164]	@ (800b494 <__swsetup_r+0xa8>)
 800b3f0:	4605      	mov	r5, r0
 800b3f2:	6818      	ldr	r0, [r3, #0]
 800b3f4:	460c      	mov	r4, r1
 800b3f6:	b118      	cbz	r0, 800b400 <__swsetup_r+0x14>
 800b3f8:	6a03      	ldr	r3, [r0, #32]
 800b3fa:	b90b      	cbnz	r3, 800b400 <__swsetup_r+0x14>
 800b3fc:	f7ff fece 	bl	800b19c <__sinit>
 800b400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b404:	0719      	lsls	r1, r3, #28
 800b406:	d422      	bmi.n	800b44e <__swsetup_r+0x62>
 800b408:	06da      	lsls	r2, r3, #27
 800b40a:	d407      	bmi.n	800b41c <__swsetup_r+0x30>
 800b40c:	2209      	movs	r2, #9
 800b40e:	602a      	str	r2, [r5, #0]
 800b410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b414:	81a3      	strh	r3, [r4, #12]
 800b416:	f04f 30ff 	mov.w	r0, #4294967295
 800b41a:	e033      	b.n	800b484 <__swsetup_r+0x98>
 800b41c:	0758      	lsls	r0, r3, #29
 800b41e:	d512      	bpl.n	800b446 <__swsetup_r+0x5a>
 800b420:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b422:	b141      	cbz	r1, 800b436 <__swsetup_r+0x4a>
 800b424:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b428:	4299      	cmp	r1, r3
 800b42a:	d002      	beq.n	800b432 <__swsetup_r+0x46>
 800b42c:	4628      	mov	r0, r5
 800b42e:	f000 f923 	bl	800b678 <_free_r>
 800b432:	2300      	movs	r3, #0
 800b434:	6363      	str	r3, [r4, #52]	@ 0x34
 800b436:	89a3      	ldrh	r3, [r4, #12]
 800b438:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b43c:	81a3      	strh	r3, [r4, #12]
 800b43e:	2300      	movs	r3, #0
 800b440:	6063      	str	r3, [r4, #4]
 800b442:	6923      	ldr	r3, [r4, #16]
 800b444:	6023      	str	r3, [r4, #0]
 800b446:	89a3      	ldrh	r3, [r4, #12]
 800b448:	f043 0308 	orr.w	r3, r3, #8
 800b44c:	81a3      	strh	r3, [r4, #12]
 800b44e:	6923      	ldr	r3, [r4, #16]
 800b450:	b94b      	cbnz	r3, 800b466 <__swsetup_r+0x7a>
 800b452:	89a3      	ldrh	r3, [r4, #12]
 800b454:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b45c:	d003      	beq.n	800b466 <__swsetup_r+0x7a>
 800b45e:	4621      	mov	r1, r4
 800b460:	4628      	mov	r0, r5
 800b462:	f000 fcf5 	bl	800be50 <__smakebuf_r>
 800b466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b46a:	f013 0201 	ands.w	r2, r3, #1
 800b46e:	d00a      	beq.n	800b486 <__swsetup_r+0x9a>
 800b470:	2200      	movs	r2, #0
 800b472:	60a2      	str	r2, [r4, #8]
 800b474:	6962      	ldr	r2, [r4, #20]
 800b476:	4252      	negs	r2, r2
 800b478:	61a2      	str	r2, [r4, #24]
 800b47a:	6922      	ldr	r2, [r4, #16]
 800b47c:	b942      	cbnz	r2, 800b490 <__swsetup_r+0xa4>
 800b47e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b482:	d1c5      	bne.n	800b410 <__swsetup_r+0x24>
 800b484:	bd38      	pop	{r3, r4, r5, pc}
 800b486:	0799      	lsls	r1, r3, #30
 800b488:	bf58      	it	pl
 800b48a:	6962      	ldrpl	r2, [r4, #20]
 800b48c:	60a2      	str	r2, [r4, #8]
 800b48e:	e7f4      	b.n	800b47a <__swsetup_r+0x8e>
 800b490:	2000      	movs	r0, #0
 800b492:	e7f7      	b.n	800b484 <__swsetup_r+0x98>
 800b494:	2000001c 	.word	0x2000001c

0800b498 <memset>:
 800b498:	4402      	add	r2, r0
 800b49a:	4603      	mov	r3, r0
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d100      	bne.n	800b4a2 <memset+0xa>
 800b4a0:	4770      	bx	lr
 800b4a2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4a6:	e7f9      	b.n	800b49c <memset+0x4>

0800b4a8 <_close_r>:
 800b4a8:	b538      	push	{r3, r4, r5, lr}
 800b4aa:	4d06      	ldr	r5, [pc, #24]	@ (800b4c4 <_close_r+0x1c>)
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	4608      	mov	r0, r1
 800b4b2:	602b      	str	r3, [r5, #0]
 800b4b4:	f7f6 f949 	bl	800174a <_close>
 800b4b8:	1c43      	adds	r3, r0, #1
 800b4ba:	d102      	bne.n	800b4c2 <_close_r+0x1a>
 800b4bc:	682b      	ldr	r3, [r5, #0]
 800b4be:	b103      	cbz	r3, 800b4c2 <_close_r+0x1a>
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	bd38      	pop	{r3, r4, r5, pc}
 800b4c4:	20001fbc 	.word	0x20001fbc

0800b4c8 <_reclaim_reent>:
 800b4c8:	4b29      	ldr	r3, [pc, #164]	@ (800b570 <_reclaim_reent+0xa8>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4283      	cmp	r3, r0
 800b4ce:	b570      	push	{r4, r5, r6, lr}
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	d04b      	beq.n	800b56c <_reclaim_reent+0xa4>
 800b4d4:	69c3      	ldr	r3, [r0, #28]
 800b4d6:	b1ab      	cbz	r3, 800b504 <_reclaim_reent+0x3c>
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	b16b      	cbz	r3, 800b4f8 <_reclaim_reent+0x30>
 800b4dc:	2500      	movs	r5, #0
 800b4de:	69e3      	ldr	r3, [r4, #28]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	5959      	ldr	r1, [r3, r5]
 800b4e4:	2900      	cmp	r1, #0
 800b4e6:	d13b      	bne.n	800b560 <_reclaim_reent+0x98>
 800b4e8:	3504      	adds	r5, #4
 800b4ea:	2d80      	cmp	r5, #128	@ 0x80
 800b4ec:	d1f7      	bne.n	800b4de <_reclaim_reent+0x16>
 800b4ee:	69e3      	ldr	r3, [r4, #28]
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	68d9      	ldr	r1, [r3, #12]
 800b4f4:	f000 f8c0 	bl	800b678 <_free_r>
 800b4f8:	69e3      	ldr	r3, [r4, #28]
 800b4fa:	6819      	ldr	r1, [r3, #0]
 800b4fc:	b111      	cbz	r1, 800b504 <_reclaim_reent+0x3c>
 800b4fe:	4620      	mov	r0, r4
 800b500:	f000 f8ba 	bl	800b678 <_free_r>
 800b504:	6961      	ldr	r1, [r4, #20]
 800b506:	b111      	cbz	r1, 800b50e <_reclaim_reent+0x46>
 800b508:	4620      	mov	r0, r4
 800b50a:	f000 f8b5 	bl	800b678 <_free_r>
 800b50e:	69e1      	ldr	r1, [r4, #28]
 800b510:	b111      	cbz	r1, 800b518 <_reclaim_reent+0x50>
 800b512:	4620      	mov	r0, r4
 800b514:	f000 f8b0 	bl	800b678 <_free_r>
 800b518:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b51a:	b111      	cbz	r1, 800b522 <_reclaim_reent+0x5a>
 800b51c:	4620      	mov	r0, r4
 800b51e:	f000 f8ab 	bl	800b678 <_free_r>
 800b522:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b524:	b111      	cbz	r1, 800b52c <_reclaim_reent+0x64>
 800b526:	4620      	mov	r0, r4
 800b528:	f000 f8a6 	bl	800b678 <_free_r>
 800b52c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b52e:	b111      	cbz	r1, 800b536 <_reclaim_reent+0x6e>
 800b530:	4620      	mov	r0, r4
 800b532:	f000 f8a1 	bl	800b678 <_free_r>
 800b536:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b538:	b111      	cbz	r1, 800b540 <_reclaim_reent+0x78>
 800b53a:	4620      	mov	r0, r4
 800b53c:	f000 f89c 	bl	800b678 <_free_r>
 800b540:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b542:	b111      	cbz	r1, 800b54a <_reclaim_reent+0x82>
 800b544:	4620      	mov	r0, r4
 800b546:	f000 f897 	bl	800b678 <_free_r>
 800b54a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b54c:	b111      	cbz	r1, 800b554 <_reclaim_reent+0x8c>
 800b54e:	4620      	mov	r0, r4
 800b550:	f000 f892 	bl	800b678 <_free_r>
 800b554:	6a23      	ldr	r3, [r4, #32]
 800b556:	b14b      	cbz	r3, 800b56c <_reclaim_reent+0xa4>
 800b558:	4620      	mov	r0, r4
 800b55a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b55e:	4718      	bx	r3
 800b560:	680e      	ldr	r6, [r1, #0]
 800b562:	4620      	mov	r0, r4
 800b564:	f000 f888 	bl	800b678 <_free_r>
 800b568:	4631      	mov	r1, r6
 800b56a:	e7bb      	b.n	800b4e4 <_reclaim_reent+0x1c>
 800b56c:	bd70      	pop	{r4, r5, r6, pc}
 800b56e:	bf00      	nop
 800b570:	2000001c 	.word	0x2000001c

0800b574 <_lseek_r>:
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	4d07      	ldr	r5, [pc, #28]	@ (800b594 <_lseek_r+0x20>)
 800b578:	4604      	mov	r4, r0
 800b57a:	4608      	mov	r0, r1
 800b57c:	4611      	mov	r1, r2
 800b57e:	2200      	movs	r2, #0
 800b580:	602a      	str	r2, [r5, #0]
 800b582:	461a      	mov	r2, r3
 800b584:	f7f6 f908 	bl	8001798 <_lseek>
 800b588:	1c43      	adds	r3, r0, #1
 800b58a:	d102      	bne.n	800b592 <_lseek_r+0x1e>
 800b58c:	682b      	ldr	r3, [r5, #0]
 800b58e:	b103      	cbz	r3, 800b592 <_lseek_r+0x1e>
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	bd38      	pop	{r3, r4, r5, pc}
 800b594:	20001fbc 	.word	0x20001fbc

0800b598 <_read_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	4d07      	ldr	r5, [pc, #28]	@ (800b5b8 <_read_r+0x20>)
 800b59c:	4604      	mov	r4, r0
 800b59e:	4608      	mov	r0, r1
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	602a      	str	r2, [r5, #0]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	f7f6 f896 	bl	80016d8 <_read>
 800b5ac:	1c43      	adds	r3, r0, #1
 800b5ae:	d102      	bne.n	800b5b6 <_read_r+0x1e>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	b103      	cbz	r3, 800b5b6 <_read_r+0x1e>
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	bd38      	pop	{r3, r4, r5, pc}
 800b5b8:	20001fbc 	.word	0x20001fbc

0800b5bc <_sbrk_r>:
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	4d06      	ldr	r5, [pc, #24]	@ (800b5d8 <_sbrk_r+0x1c>)
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	4608      	mov	r0, r1
 800b5c6:	602b      	str	r3, [r5, #0]
 800b5c8:	f7f6 f8f4 	bl	80017b4 <_sbrk>
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	d102      	bne.n	800b5d6 <_sbrk_r+0x1a>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	b103      	cbz	r3, 800b5d6 <_sbrk_r+0x1a>
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
 800b5d8:	20001fbc 	.word	0x20001fbc

0800b5dc <_write_r>:
 800b5dc:	b538      	push	{r3, r4, r5, lr}
 800b5de:	4d07      	ldr	r5, [pc, #28]	@ (800b5fc <_write_r+0x20>)
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	4608      	mov	r0, r1
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	602a      	str	r2, [r5, #0]
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	f7f6 f891 	bl	8001712 <_write>
 800b5f0:	1c43      	adds	r3, r0, #1
 800b5f2:	d102      	bne.n	800b5fa <_write_r+0x1e>
 800b5f4:	682b      	ldr	r3, [r5, #0]
 800b5f6:	b103      	cbz	r3, 800b5fa <_write_r+0x1e>
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	bd38      	pop	{r3, r4, r5, pc}
 800b5fc:	20001fbc 	.word	0x20001fbc

0800b600 <__errno>:
 800b600:	4b01      	ldr	r3, [pc, #4]	@ (800b608 <__errno+0x8>)
 800b602:	6818      	ldr	r0, [r3, #0]
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	2000001c 	.word	0x2000001c

0800b60c <__libc_init_array>:
 800b60c:	b570      	push	{r4, r5, r6, lr}
 800b60e:	4d0d      	ldr	r5, [pc, #52]	@ (800b644 <__libc_init_array+0x38>)
 800b610:	4c0d      	ldr	r4, [pc, #52]	@ (800b648 <__libc_init_array+0x3c>)
 800b612:	1b64      	subs	r4, r4, r5
 800b614:	10a4      	asrs	r4, r4, #2
 800b616:	2600      	movs	r6, #0
 800b618:	42a6      	cmp	r6, r4
 800b61a:	d109      	bne.n	800b630 <__libc_init_array+0x24>
 800b61c:	4d0b      	ldr	r5, [pc, #44]	@ (800b64c <__libc_init_array+0x40>)
 800b61e:	4c0c      	ldr	r4, [pc, #48]	@ (800b650 <__libc_init_array+0x44>)
 800b620:	f000 fc74 	bl	800bf0c <_init>
 800b624:	1b64      	subs	r4, r4, r5
 800b626:	10a4      	asrs	r4, r4, #2
 800b628:	2600      	movs	r6, #0
 800b62a:	42a6      	cmp	r6, r4
 800b62c:	d105      	bne.n	800b63a <__libc_init_array+0x2e>
 800b62e:	bd70      	pop	{r4, r5, r6, pc}
 800b630:	f855 3b04 	ldr.w	r3, [r5], #4
 800b634:	4798      	blx	r3
 800b636:	3601      	adds	r6, #1
 800b638:	e7ee      	b.n	800b618 <__libc_init_array+0xc>
 800b63a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b63e:	4798      	blx	r3
 800b640:	3601      	adds	r6, #1
 800b642:	e7f2      	b.n	800b62a <__libc_init_array+0x1e>
 800b644:	0800c1e8 	.word	0x0800c1e8
 800b648:	0800c1e8 	.word	0x0800c1e8
 800b64c:	0800c1e8 	.word	0x0800c1e8
 800b650:	0800c1ec 	.word	0x0800c1ec

0800b654 <__retarget_lock_init_recursive>:
 800b654:	4770      	bx	lr

0800b656 <__retarget_lock_acquire_recursive>:
 800b656:	4770      	bx	lr

0800b658 <__retarget_lock_release_recursive>:
 800b658:	4770      	bx	lr

0800b65a <memcpy>:
 800b65a:	440a      	add	r2, r1
 800b65c:	4291      	cmp	r1, r2
 800b65e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b662:	d100      	bne.n	800b666 <memcpy+0xc>
 800b664:	4770      	bx	lr
 800b666:	b510      	push	{r4, lr}
 800b668:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b66c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b670:	4291      	cmp	r1, r2
 800b672:	d1f9      	bne.n	800b668 <memcpy+0xe>
 800b674:	bd10      	pop	{r4, pc}
	...

0800b678 <_free_r>:
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	4605      	mov	r5, r0
 800b67c:	2900      	cmp	r1, #0
 800b67e:	d041      	beq.n	800b704 <_free_r+0x8c>
 800b680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b684:	1f0c      	subs	r4, r1, #4
 800b686:	2b00      	cmp	r3, #0
 800b688:	bfb8      	it	lt
 800b68a:	18e4      	addlt	r4, r4, r3
 800b68c:	f7ff fcee 	bl	800b06c <__malloc_lock>
 800b690:	4a1d      	ldr	r2, [pc, #116]	@ (800b708 <_free_r+0x90>)
 800b692:	6813      	ldr	r3, [r2, #0]
 800b694:	b933      	cbnz	r3, 800b6a4 <_free_r+0x2c>
 800b696:	6063      	str	r3, [r4, #4]
 800b698:	6014      	str	r4, [r2, #0]
 800b69a:	4628      	mov	r0, r5
 800b69c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6a0:	f7ff bcea 	b.w	800b078 <__malloc_unlock>
 800b6a4:	42a3      	cmp	r3, r4
 800b6a6:	d908      	bls.n	800b6ba <_free_r+0x42>
 800b6a8:	6820      	ldr	r0, [r4, #0]
 800b6aa:	1821      	adds	r1, r4, r0
 800b6ac:	428b      	cmp	r3, r1
 800b6ae:	bf01      	itttt	eq
 800b6b0:	6819      	ldreq	r1, [r3, #0]
 800b6b2:	685b      	ldreq	r3, [r3, #4]
 800b6b4:	1809      	addeq	r1, r1, r0
 800b6b6:	6021      	streq	r1, [r4, #0]
 800b6b8:	e7ed      	b.n	800b696 <_free_r+0x1e>
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	b10b      	cbz	r3, 800b6c4 <_free_r+0x4c>
 800b6c0:	42a3      	cmp	r3, r4
 800b6c2:	d9fa      	bls.n	800b6ba <_free_r+0x42>
 800b6c4:	6811      	ldr	r1, [r2, #0]
 800b6c6:	1850      	adds	r0, r2, r1
 800b6c8:	42a0      	cmp	r0, r4
 800b6ca:	d10b      	bne.n	800b6e4 <_free_r+0x6c>
 800b6cc:	6820      	ldr	r0, [r4, #0]
 800b6ce:	4401      	add	r1, r0
 800b6d0:	1850      	adds	r0, r2, r1
 800b6d2:	4283      	cmp	r3, r0
 800b6d4:	6011      	str	r1, [r2, #0]
 800b6d6:	d1e0      	bne.n	800b69a <_free_r+0x22>
 800b6d8:	6818      	ldr	r0, [r3, #0]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	6053      	str	r3, [r2, #4]
 800b6de:	4408      	add	r0, r1
 800b6e0:	6010      	str	r0, [r2, #0]
 800b6e2:	e7da      	b.n	800b69a <_free_r+0x22>
 800b6e4:	d902      	bls.n	800b6ec <_free_r+0x74>
 800b6e6:	230c      	movs	r3, #12
 800b6e8:	602b      	str	r3, [r5, #0]
 800b6ea:	e7d6      	b.n	800b69a <_free_r+0x22>
 800b6ec:	6820      	ldr	r0, [r4, #0]
 800b6ee:	1821      	adds	r1, r4, r0
 800b6f0:	428b      	cmp	r3, r1
 800b6f2:	bf04      	itt	eq
 800b6f4:	6819      	ldreq	r1, [r3, #0]
 800b6f6:	685b      	ldreq	r3, [r3, #4]
 800b6f8:	6063      	str	r3, [r4, #4]
 800b6fa:	bf04      	itt	eq
 800b6fc:	1809      	addeq	r1, r1, r0
 800b6fe:	6021      	streq	r1, [r4, #0]
 800b700:	6054      	str	r4, [r2, #4]
 800b702:	e7ca      	b.n	800b69a <_free_r+0x22>
 800b704:	bd38      	pop	{r3, r4, r5, pc}
 800b706:	bf00      	nop
 800b708:	20001e7c 	.word	0x20001e7c

0800b70c <__sfputc_r>:
 800b70c:	6893      	ldr	r3, [r2, #8]
 800b70e:	3b01      	subs	r3, #1
 800b710:	2b00      	cmp	r3, #0
 800b712:	b410      	push	{r4}
 800b714:	6093      	str	r3, [r2, #8]
 800b716:	da08      	bge.n	800b72a <__sfputc_r+0x1e>
 800b718:	6994      	ldr	r4, [r2, #24]
 800b71a:	42a3      	cmp	r3, r4
 800b71c:	db01      	blt.n	800b722 <__sfputc_r+0x16>
 800b71e:	290a      	cmp	r1, #10
 800b720:	d103      	bne.n	800b72a <__sfputc_r+0x1e>
 800b722:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b726:	f7ff be22 	b.w	800b36e <__swbuf_r>
 800b72a:	6813      	ldr	r3, [r2, #0]
 800b72c:	1c58      	adds	r0, r3, #1
 800b72e:	6010      	str	r0, [r2, #0]
 800b730:	7019      	strb	r1, [r3, #0]
 800b732:	4608      	mov	r0, r1
 800b734:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <__sfputs_r>:
 800b73a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73c:	4606      	mov	r6, r0
 800b73e:	460f      	mov	r7, r1
 800b740:	4614      	mov	r4, r2
 800b742:	18d5      	adds	r5, r2, r3
 800b744:	42ac      	cmp	r4, r5
 800b746:	d101      	bne.n	800b74c <__sfputs_r+0x12>
 800b748:	2000      	movs	r0, #0
 800b74a:	e007      	b.n	800b75c <__sfputs_r+0x22>
 800b74c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b750:	463a      	mov	r2, r7
 800b752:	4630      	mov	r0, r6
 800b754:	f7ff ffda 	bl	800b70c <__sfputc_r>
 800b758:	1c43      	adds	r3, r0, #1
 800b75a:	d1f3      	bne.n	800b744 <__sfputs_r+0xa>
 800b75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b760 <_vfiprintf_r>:
 800b760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b764:	460d      	mov	r5, r1
 800b766:	b09d      	sub	sp, #116	@ 0x74
 800b768:	4614      	mov	r4, r2
 800b76a:	4698      	mov	r8, r3
 800b76c:	4606      	mov	r6, r0
 800b76e:	b118      	cbz	r0, 800b778 <_vfiprintf_r+0x18>
 800b770:	6a03      	ldr	r3, [r0, #32]
 800b772:	b90b      	cbnz	r3, 800b778 <_vfiprintf_r+0x18>
 800b774:	f7ff fd12 	bl	800b19c <__sinit>
 800b778:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b77a:	07d9      	lsls	r1, r3, #31
 800b77c:	d405      	bmi.n	800b78a <_vfiprintf_r+0x2a>
 800b77e:	89ab      	ldrh	r3, [r5, #12]
 800b780:	059a      	lsls	r2, r3, #22
 800b782:	d402      	bmi.n	800b78a <_vfiprintf_r+0x2a>
 800b784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b786:	f7ff ff66 	bl	800b656 <__retarget_lock_acquire_recursive>
 800b78a:	89ab      	ldrh	r3, [r5, #12]
 800b78c:	071b      	lsls	r3, r3, #28
 800b78e:	d501      	bpl.n	800b794 <_vfiprintf_r+0x34>
 800b790:	692b      	ldr	r3, [r5, #16]
 800b792:	b99b      	cbnz	r3, 800b7bc <_vfiprintf_r+0x5c>
 800b794:	4629      	mov	r1, r5
 800b796:	4630      	mov	r0, r6
 800b798:	f7ff fe28 	bl	800b3ec <__swsetup_r>
 800b79c:	b170      	cbz	r0, 800b7bc <_vfiprintf_r+0x5c>
 800b79e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7a0:	07dc      	lsls	r4, r3, #31
 800b7a2:	d504      	bpl.n	800b7ae <_vfiprintf_r+0x4e>
 800b7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a8:	b01d      	add	sp, #116	@ 0x74
 800b7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ae:	89ab      	ldrh	r3, [r5, #12]
 800b7b0:	0598      	lsls	r0, r3, #22
 800b7b2:	d4f7      	bmi.n	800b7a4 <_vfiprintf_r+0x44>
 800b7b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7b6:	f7ff ff4f 	bl	800b658 <__retarget_lock_release_recursive>
 800b7ba:	e7f3      	b.n	800b7a4 <_vfiprintf_r+0x44>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7c0:	2320      	movs	r3, #32
 800b7c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7ca:	2330      	movs	r3, #48	@ 0x30
 800b7cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b97c <_vfiprintf_r+0x21c>
 800b7d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7d4:	f04f 0901 	mov.w	r9, #1
 800b7d8:	4623      	mov	r3, r4
 800b7da:	469a      	mov	sl, r3
 800b7dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7e0:	b10a      	cbz	r2, 800b7e6 <_vfiprintf_r+0x86>
 800b7e2:	2a25      	cmp	r2, #37	@ 0x25
 800b7e4:	d1f9      	bne.n	800b7da <_vfiprintf_r+0x7a>
 800b7e6:	ebba 0b04 	subs.w	fp, sl, r4
 800b7ea:	d00b      	beq.n	800b804 <_vfiprintf_r+0xa4>
 800b7ec:	465b      	mov	r3, fp
 800b7ee:	4622      	mov	r2, r4
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	f7ff ffa1 	bl	800b73a <__sfputs_r>
 800b7f8:	3001      	adds	r0, #1
 800b7fa:	f000 80a7 	beq.w	800b94c <_vfiprintf_r+0x1ec>
 800b7fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b800:	445a      	add	r2, fp
 800b802:	9209      	str	r2, [sp, #36]	@ 0x24
 800b804:	f89a 3000 	ldrb.w	r3, [sl]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f000 809f 	beq.w	800b94c <_vfiprintf_r+0x1ec>
 800b80e:	2300      	movs	r3, #0
 800b810:	f04f 32ff 	mov.w	r2, #4294967295
 800b814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b818:	f10a 0a01 	add.w	sl, sl, #1
 800b81c:	9304      	str	r3, [sp, #16]
 800b81e:	9307      	str	r3, [sp, #28]
 800b820:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b824:	931a      	str	r3, [sp, #104]	@ 0x68
 800b826:	4654      	mov	r4, sl
 800b828:	2205      	movs	r2, #5
 800b82a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b82e:	4853      	ldr	r0, [pc, #332]	@ (800b97c <_vfiprintf_r+0x21c>)
 800b830:	f7f4 fcf6 	bl	8000220 <memchr>
 800b834:	9a04      	ldr	r2, [sp, #16]
 800b836:	b9d8      	cbnz	r0, 800b870 <_vfiprintf_r+0x110>
 800b838:	06d1      	lsls	r1, r2, #27
 800b83a:	bf44      	itt	mi
 800b83c:	2320      	movmi	r3, #32
 800b83e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b842:	0713      	lsls	r3, r2, #28
 800b844:	bf44      	itt	mi
 800b846:	232b      	movmi	r3, #43	@ 0x2b
 800b848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b84c:	f89a 3000 	ldrb.w	r3, [sl]
 800b850:	2b2a      	cmp	r3, #42	@ 0x2a
 800b852:	d015      	beq.n	800b880 <_vfiprintf_r+0x120>
 800b854:	9a07      	ldr	r2, [sp, #28]
 800b856:	4654      	mov	r4, sl
 800b858:	2000      	movs	r0, #0
 800b85a:	f04f 0c0a 	mov.w	ip, #10
 800b85e:	4621      	mov	r1, r4
 800b860:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b864:	3b30      	subs	r3, #48	@ 0x30
 800b866:	2b09      	cmp	r3, #9
 800b868:	d94b      	bls.n	800b902 <_vfiprintf_r+0x1a2>
 800b86a:	b1b0      	cbz	r0, 800b89a <_vfiprintf_r+0x13a>
 800b86c:	9207      	str	r2, [sp, #28]
 800b86e:	e014      	b.n	800b89a <_vfiprintf_r+0x13a>
 800b870:	eba0 0308 	sub.w	r3, r0, r8
 800b874:	fa09 f303 	lsl.w	r3, r9, r3
 800b878:	4313      	orrs	r3, r2
 800b87a:	9304      	str	r3, [sp, #16]
 800b87c:	46a2      	mov	sl, r4
 800b87e:	e7d2      	b.n	800b826 <_vfiprintf_r+0xc6>
 800b880:	9b03      	ldr	r3, [sp, #12]
 800b882:	1d19      	adds	r1, r3, #4
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	9103      	str	r1, [sp, #12]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	bfbb      	ittet	lt
 800b88c:	425b      	neglt	r3, r3
 800b88e:	f042 0202 	orrlt.w	r2, r2, #2
 800b892:	9307      	strge	r3, [sp, #28]
 800b894:	9307      	strlt	r3, [sp, #28]
 800b896:	bfb8      	it	lt
 800b898:	9204      	strlt	r2, [sp, #16]
 800b89a:	7823      	ldrb	r3, [r4, #0]
 800b89c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b89e:	d10a      	bne.n	800b8b6 <_vfiprintf_r+0x156>
 800b8a0:	7863      	ldrb	r3, [r4, #1]
 800b8a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8a4:	d132      	bne.n	800b90c <_vfiprintf_r+0x1ac>
 800b8a6:	9b03      	ldr	r3, [sp, #12]
 800b8a8:	1d1a      	adds	r2, r3, #4
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	9203      	str	r2, [sp, #12]
 800b8ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8b2:	3402      	adds	r4, #2
 800b8b4:	9305      	str	r3, [sp, #20]
 800b8b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b98c <_vfiprintf_r+0x22c>
 800b8ba:	7821      	ldrb	r1, [r4, #0]
 800b8bc:	2203      	movs	r2, #3
 800b8be:	4650      	mov	r0, sl
 800b8c0:	f7f4 fcae 	bl	8000220 <memchr>
 800b8c4:	b138      	cbz	r0, 800b8d6 <_vfiprintf_r+0x176>
 800b8c6:	9b04      	ldr	r3, [sp, #16]
 800b8c8:	eba0 000a 	sub.w	r0, r0, sl
 800b8cc:	2240      	movs	r2, #64	@ 0x40
 800b8ce:	4082      	lsls	r2, r0
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	3401      	adds	r4, #1
 800b8d4:	9304      	str	r3, [sp, #16]
 800b8d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8da:	4829      	ldr	r0, [pc, #164]	@ (800b980 <_vfiprintf_r+0x220>)
 800b8dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8e0:	2206      	movs	r2, #6
 800b8e2:	f7f4 fc9d 	bl	8000220 <memchr>
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	d03f      	beq.n	800b96a <_vfiprintf_r+0x20a>
 800b8ea:	4b26      	ldr	r3, [pc, #152]	@ (800b984 <_vfiprintf_r+0x224>)
 800b8ec:	bb1b      	cbnz	r3, 800b936 <_vfiprintf_r+0x1d6>
 800b8ee:	9b03      	ldr	r3, [sp, #12]
 800b8f0:	3307      	adds	r3, #7
 800b8f2:	f023 0307 	bic.w	r3, r3, #7
 800b8f6:	3308      	adds	r3, #8
 800b8f8:	9303      	str	r3, [sp, #12]
 800b8fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8fc:	443b      	add	r3, r7
 800b8fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800b900:	e76a      	b.n	800b7d8 <_vfiprintf_r+0x78>
 800b902:	fb0c 3202 	mla	r2, ip, r2, r3
 800b906:	460c      	mov	r4, r1
 800b908:	2001      	movs	r0, #1
 800b90a:	e7a8      	b.n	800b85e <_vfiprintf_r+0xfe>
 800b90c:	2300      	movs	r3, #0
 800b90e:	3401      	adds	r4, #1
 800b910:	9305      	str	r3, [sp, #20]
 800b912:	4619      	mov	r1, r3
 800b914:	f04f 0c0a 	mov.w	ip, #10
 800b918:	4620      	mov	r0, r4
 800b91a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b91e:	3a30      	subs	r2, #48	@ 0x30
 800b920:	2a09      	cmp	r2, #9
 800b922:	d903      	bls.n	800b92c <_vfiprintf_r+0x1cc>
 800b924:	2b00      	cmp	r3, #0
 800b926:	d0c6      	beq.n	800b8b6 <_vfiprintf_r+0x156>
 800b928:	9105      	str	r1, [sp, #20]
 800b92a:	e7c4      	b.n	800b8b6 <_vfiprintf_r+0x156>
 800b92c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b930:	4604      	mov	r4, r0
 800b932:	2301      	movs	r3, #1
 800b934:	e7f0      	b.n	800b918 <_vfiprintf_r+0x1b8>
 800b936:	ab03      	add	r3, sp, #12
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	462a      	mov	r2, r5
 800b93c:	4b12      	ldr	r3, [pc, #72]	@ (800b988 <_vfiprintf_r+0x228>)
 800b93e:	a904      	add	r1, sp, #16
 800b940:	4630      	mov	r0, r6
 800b942:	f3af 8000 	nop.w
 800b946:	4607      	mov	r7, r0
 800b948:	1c78      	adds	r0, r7, #1
 800b94a:	d1d6      	bne.n	800b8fa <_vfiprintf_r+0x19a>
 800b94c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b94e:	07d9      	lsls	r1, r3, #31
 800b950:	d405      	bmi.n	800b95e <_vfiprintf_r+0x1fe>
 800b952:	89ab      	ldrh	r3, [r5, #12]
 800b954:	059a      	lsls	r2, r3, #22
 800b956:	d402      	bmi.n	800b95e <_vfiprintf_r+0x1fe>
 800b958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b95a:	f7ff fe7d 	bl	800b658 <__retarget_lock_release_recursive>
 800b95e:	89ab      	ldrh	r3, [r5, #12]
 800b960:	065b      	lsls	r3, r3, #25
 800b962:	f53f af1f 	bmi.w	800b7a4 <_vfiprintf_r+0x44>
 800b966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b968:	e71e      	b.n	800b7a8 <_vfiprintf_r+0x48>
 800b96a:	ab03      	add	r3, sp, #12
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	462a      	mov	r2, r5
 800b970:	4b05      	ldr	r3, [pc, #20]	@ (800b988 <_vfiprintf_r+0x228>)
 800b972:	a904      	add	r1, sp, #16
 800b974:	4630      	mov	r0, r6
 800b976:	f000 f879 	bl	800ba6c <_printf_i>
 800b97a:	e7e4      	b.n	800b946 <_vfiprintf_r+0x1e6>
 800b97c:	0800c1ac 	.word	0x0800c1ac
 800b980:	0800c1b6 	.word	0x0800c1b6
 800b984:	00000000 	.word	0x00000000
 800b988:	0800b73b 	.word	0x0800b73b
 800b98c:	0800c1b2 	.word	0x0800c1b2

0800b990 <_printf_common>:
 800b990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b994:	4616      	mov	r6, r2
 800b996:	4698      	mov	r8, r3
 800b998:	688a      	ldr	r2, [r1, #8]
 800b99a:	690b      	ldr	r3, [r1, #16]
 800b99c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	bfb8      	it	lt
 800b9a4:	4613      	movlt	r3, r2
 800b9a6:	6033      	str	r3, [r6, #0]
 800b9a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b9ac:	4607      	mov	r7, r0
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	b10a      	cbz	r2, 800b9b6 <_printf_common+0x26>
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	6033      	str	r3, [r6, #0]
 800b9b6:	6823      	ldr	r3, [r4, #0]
 800b9b8:	0699      	lsls	r1, r3, #26
 800b9ba:	bf42      	ittt	mi
 800b9bc:	6833      	ldrmi	r3, [r6, #0]
 800b9be:	3302      	addmi	r3, #2
 800b9c0:	6033      	strmi	r3, [r6, #0]
 800b9c2:	6825      	ldr	r5, [r4, #0]
 800b9c4:	f015 0506 	ands.w	r5, r5, #6
 800b9c8:	d106      	bne.n	800b9d8 <_printf_common+0x48>
 800b9ca:	f104 0a19 	add.w	sl, r4, #25
 800b9ce:	68e3      	ldr	r3, [r4, #12]
 800b9d0:	6832      	ldr	r2, [r6, #0]
 800b9d2:	1a9b      	subs	r3, r3, r2
 800b9d4:	42ab      	cmp	r3, r5
 800b9d6:	dc26      	bgt.n	800ba26 <_printf_common+0x96>
 800b9d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b9dc:	6822      	ldr	r2, [r4, #0]
 800b9de:	3b00      	subs	r3, #0
 800b9e0:	bf18      	it	ne
 800b9e2:	2301      	movne	r3, #1
 800b9e4:	0692      	lsls	r2, r2, #26
 800b9e6:	d42b      	bmi.n	800ba40 <_printf_common+0xb0>
 800b9e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b9ec:	4641      	mov	r1, r8
 800b9ee:	4638      	mov	r0, r7
 800b9f0:	47c8      	blx	r9
 800b9f2:	3001      	adds	r0, #1
 800b9f4:	d01e      	beq.n	800ba34 <_printf_common+0xa4>
 800b9f6:	6823      	ldr	r3, [r4, #0]
 800b9f8:	6922      	ldr	r2, [r4, #16]
 800b9fa:	f003 0306 	and.w	r3, r3, #6
 800b9fe:	2b04      	cmp	r3, #4
 800ba00:	bf02      	ittt	eq
 800ba02:	68e5      	ldreq	r5, [r4, #12]
 800ba04:	6833      	ldreq	r3, [r6, #0]
 800ba06:	1aed      	subeq	r5, r5, r3
 800ba08:	68a3      	ldr	r3, [r4, #8]
 800ba0a:	bf0c      	ite	eq
 800ba0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba10:	2500      	movne	r5, #0
 800ba12:	4293      	cmp	r3, r2
 800ba14:	bfc4      	itt	gt
 800ba16:	1a9b      	subgt	r3, r3, r2
 800ba18:	18ed      	addgt	r5, r5, r3
 800ba1a:	2600      	movs	r6, #0
 800ba1c:	341a      	adds	r4, #26
 800ba1e:	42b5      	cmp	r5, r6
 800ba20:	d11a      	bne.n	800ba58 <_printf_common+0xc8>
 800ba22:	2000      	movs	r0, #0
 800ba24:	e008      	b.n	800ba38 <_printf_common+0xa8>
 800ba26:	2301      	movs	r3, #1
 800ba28:	4652      	mov	r2, sl
 800ba2a:	4641      	mov	r1, r8
 800ba2c:	4638      	mov	r0, r7
 800ba2e:	47c8      	blx	r9
 800ba30:	3001      	adds	r0, #1
 800ba32:	d103      	bne.n	800ba3c <_printf_common+0xac>
 800ba34:	f04f 30ff 	mov.w	r0, #4294967295
 800ba38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba3c:	3501      	adds	r5, #1
 800ba3e:	e7c6      	b.n	800b9ce <_printf_common+0x3e>
 800ba40:	18e1      	adds	r1, r4, r3
 800ba42:	1c5a      	adds	r2, r3, #1
 800ba44:	2030      	movs	r0, #48	@ 0x30
 800ba46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba4a:	4422      	add	r2, r4
 800ba4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba54:	3302      	adds	r3, #2
 800ba56:	e7c7      	b.n	800b9e8 <_printf_common+0x58>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	4622      	mov	r2, r4
 800ba5c:	4641      	mov	r1, r8
 800ba5e:	4638      	mov	r0, r7
 800ba60:	47c8      	blx	r9
 800ba62:	3001      	adds	r0, #1
 800ba64:	d0e6      	beq.n	800ba34 <_printf_common+0xa4>
 800ba66:	3601      	adds	r6, #1
 800ba68:	e7d9      	b.n	800ba1e <_printf_common+0x8e>
	...

0800ba6c <_printf_i>:
 800ba6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba70:	7e0f      	ldrb	r7, [r1, #24]
 800ba72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba74:	2f78      	cmp	r7, #120	@ 0x78
 800ba76:	4691      	mov	r9, r2
 800ba78:	4680      	mov	r8, r0
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	469a      	mov	sl, r3
 800ba7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba82:	d807      	bhi.n	800ba94 <_printf_i+0x28>
 800ba84:	2f62      	cmp	r7, #98	@ 0x62
 800ba86:	d80a      	bhi.n	800ba9e <_printf_i+0x32>
 800ba88:	2f00      	cmp	r7, #0
 800ba8a:	f000 80d2 	beq.w	800bc32 <_printf_i+0x1c6>
 800ba8e:	2f58      	cmp	r7, #88	@ 0x58
 800ba90:	f000 80b9 	beq.w	800bc06 <_printf_i+0x19a>
 800ba94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba9c:	e03a      	b.n	800bb14 <_printf_i+0xa8>
 800ba9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800baa2:	2b15      	cmp	r3, #21
 800baa4:	d8f6      	bhi.n	800ba94 <_printf_i+0x28>
 800baa6:	a101      	add	r1, pc, #4	@ (adr r1, 800baac <_printf_i+0x40>)
 800baa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800baac:	0800bb05 	.word	0x0800bb05
 800bab0:	0800bb19 	.word	0x0800bb19
 800bab4:	0800ba95 	.word	0x0800ba95
 800bab8:	0800ba95 	.word	0x0800ba95
 800babc:	0800ba95 	.word	0x0800ba95
 800bac0:	0800ba95 	.word	0x0800ba95
 800bac4:	0800bb19 	.word	0x0800bb19
 800bac8:	0800ba95 	.word	0x0800ba95
 800bacc:	0800ba95 	.word	0x0800ba95
 800bad0:	0800ba95 	.word	0x0800ba95
 800bad4:	0800ba95 	.word	0x0800ba95
 800bad8:	0800bc19 	.word	0x0800bc19
 800badc:	0800bb43 	.word	0x0800bb43
 800bae0:	0800bbd3 	.word	0x0800bbd3
 800bae4:	0800ba95 	.word	0x0800ba95
 800bae8:	0800ba95 	.word	0x0800ba95
 800baec:	0800bc3b 	.word	0x0800bc3b
 800baf0:	0800ba95 	.word	0x0800ba95
 800baf4:	0800bb43 	.word	0x0800bb43
 800baf8:	0800ba95 	.word	0x0800ba95
 800bafc:	0800ba95 	.word	0x0800ba95
 800bb00:	0800bbdb 	.word	0x0800bbdb
 800bb04:	6833      	ldr	r3, [r6, #0]
 800bb06:	1d1a      	adds	r2, r3, #4
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	6032      	str	r2, [r6, #0]
 800bb0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb14:	2301      	movs	r3, #1
 800bb16:	e09d      	b.n	800bc54 <_printf_i+0x1e8>
 800bb18:	6833      	ldr	r3, [r6, #0]
 800bb1a:	6820      	ldr	r0, [r4, #0]
 800bb1c:	1d19      	adds	r1, r3, #4
 800bb1e:	6031      	str	r1, [r6, #0]
 800bb20:	0606      	lsls	r6, r0, #24
 800bb22:	d501      	bpl.n	800bb28 <_printf_i+0xbc>
 800bb24:	681d      	ldr	r5, [r3, #0]
 800bb26:	e003      	b.n	800bb30 <_printf_i+0xc4>
 800bb28:	0645      	lsls	r5, r0, #25
 800bb2a:	d5fb      	bpl.n	800bb24 <_printf_i+0xb8>
 800bb2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb30:	2d00      	cmp	r5, #0
 800bb32:	da03      	bge.n	800bb3c <_printf_i+0xd0>
 800bb34:	232d      	movs	r3, #45	@ 0x2d
 800bb36:	426d      	negs	r5, r5
 800bb38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb3c:	4859      	ldr	r0, [pc, #356]	@ (800bca4 <_printf_i+0x238>)
 800bb3e:	230a      	movs	r3, #10
 800bb40:	e011      	b.n	800bb66 <_printf_i+0xfa>
 800bb42:	6821      	ldr	r1, [r4, #0]
 800bb44:	6833      	ldr	r3, [r6, #0]
 800bb46:	0608      	lsls	r0, r1, #24
 800bb48:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb4c:	d402      	bmi.n	800bb54 <_printf_i+0xe8>
 800bb4e:	0649      	lsls	r1, r1, #25
 800bb50:	bf48      	it	mi
 800bb52:	b2ad      	uxthmi	r5, r5
 800bb54:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb56:	4853      	ldr	r0, [pc, #332]	@ (800bca4 <_printf_i+0x238>)
 800bb58:	6033      	str	r3, [r6, #0]
 800bb5a:	bf14      	ite	ne
 800bb5c:	230a      	movne	r3, #10
 800bb5e:	2308      	moveq	r3, #8
 800bb60:	2100      	movs	r1, #0
 800bb62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb66:	6866      	ldr	r6, [r4, #4]
 800bb68:	60a6      	str	r6, [r4, #8]
 800bb6a:	2e00      	cmp	r6, #0
 800bb6c:	bfa2      	ittt	ge
 800bb6e:	6821      	ldrge	r1, [r4, #0]
 800bb70:	f021 0104 	bicge.w	r1, r1, #4
 800bb74:	6021      	strge	r1, [r4, #0]
 800bb76:	b90d      	cbnz	r5, 800bb7c <_printf_i+0x110>
 800bb78:	2e00      	cmp	r6, #0
 800bb7a:	d04b      	beq.n	800bc14 <_printf_i+0x1a8>
 800bb7c:	4616      	mov	r6, r2
 800bb7e:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb82:	fb03 5711 	mls	r7, r3, r1, r5
 800bb86:	5dc7      	ldrb	r7, [r0, r7]
 800bb88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb8c:	462f      	mov	r7, r5
 800bb8e:	42bb      	cmp	r3, r7
 800bb90:	460d      	mov	r5, r1
 800bb92:	d9f4      	bls.n	800bb7e <_printf_i+0x112>
 800bb94:	2b08      	cmp	r3, #8
 800bb96:	d10b      	bne.n	800bbb0 <_printf_i+0x144>
 800bb98:	6823      	ldr	r3, [r4, #0]
 800bb9a:	07df      	lsls	r7, r3, #31
 800bb9c:	d508      	bpl.n	800bbb0 <_printf_i+0x144>
 800bb9e:	6923      	ldr	r3, [r4, #16]
 800bba0:	6861      	ldr	r1, [r4, #4]
 800bba2:	4299      	cmp	r1, r3
 800bba4:	bfde      	ittt	le
 800bba6:	2330      	movle	r3, #48	@ 0x30
 800bba8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bbac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bbb0:	1b92      	subs	r2, r2, r6
 800bbb2:	6122      	str	r2, [r4, #16]
 800bbb4:	f8cd a000 	str.w	sl, [sp]
 800bbb8:	464b      	mov	r3, r9
 800bbba:	aa03      	add	r2, sp, #12
 800bbbc:	4621      	mov	r1, r4
 800bbbe:	4640      	mov	r0, r8
 800bbc0:	f7ff fee6 	bl	800b990 <_printf_common>
 800bbc4:	3001      	adds	r0, #1
 800bbc6:	d14a      	bne.n	800bc5e <_printf_i+0x1f2>
 800bbc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbcc:	b004      	add	sp, #16
 800bbce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbd2:	6823      	ldr	r3, [r4, #0]
 800bbd4:	f043 0320 	orr.w	r3, r3, #32
 800bbd8:	6023      	str	r3, [r4, #0]
 800bbda:	4833      	ldr	r0, [pc, #204]	@ (800bca8 <_printf_i+0x23c>)
 800bbdc:	2778      	movs	r7, #120	@ 0x78
 800bbde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bbe2:	6823      	ldr	r3, [r4, #0]
 800bbe4:	6831      	ldr	r1, [r6, #0]
 800bbe6:	061f      	lsls	r7, r3, #24
 800bbe8:	f851 5b04 	ldr.w	r5, [r1], #4
 800bbec:	d402      	bmi.n	800bbf4 <_printf_i+0x188>
 800bbee:	065f      	lsls	r7, r3, #25
 800bbf0:	bf48      	it	mi
 800bbf2:	b2ad      	uxthmi	r5, r5
 800bbf4:	6031      	str	r1, [r6, #0]
 800bbf6:	07d9      	lsls	r1, r3, #31
 800bbf8:	bf44      	itt	mi
 800bbfa:	f043 0320 	orrmi.w	r3, r3, #32
 800bbfe:	6023      	strmi	r3, [r4, #0]
 800bc00:	b11d      	cbz	r5, 800bc0a <_printf_i+0x19e>
 800bc02:	2310      	movs	r3, #16
 800bc04:	e7ac      	b.n	800bb60 <_printf_i+0xf4>
 800bc06:	4827      	ldr	r0, [pc, #156]	@ (800bca4 <_printf_i+0x238>)
 800bc08:	e7e9      	b.n	800bbde <_printf_i+0x172>
 800bc0a:	6823      	ldr	r3, [r4, #0]
 800bc0c:	f023 0320 	bic.w	r3, r3, #32
 800bc10:	6023      	str	r3, [r4, #0]
 800bc12:	e7f6      	b.n	800bc02 <_printf_i+0x196>
 800bc14:	4616      	mov	r6, r2
 800bc16:	e7bd      	b.n	800bb94 <_printf_i+0x128>
 800bc18:	6833      	ldr	r3, [r6, #0]
 800bc1a:	6825      	ldr	r5, [r4, #0]
 800bc1c:	6961      	ldr	r1, [r4, #20]
 800bc1e:	1d18      	adds	r0, r3, #4
 800bc20:	6030      	str	r0, [r6, #0]
 800bc22:	062e      	lsls	r6, r5, #24
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	d501      	bpl.n	800bc2c <_printf_i+0x1c0>
 800bc28:	6019      	str	r1, [r3, #0]
 800bc2a:	e002      	b.n	800bc32 <_printf_i+0x1c6>
 800bc2c:	0668      	lsls	r0, r5, #25
 800bc2e:	d5fb      	bpl.n	800bc28 <_printf_i+0x1bc>
 800bc30:	8019      	strh	r1, [r3, #0]
 800bc32:	2300      	movs	r3, #0
 800bc34:	6123      	str	r3, [r4, #16]
 800bc36:	4616      	mov	r6, r2
 800bc38:	e7bc      	b.n	800bbb4 <_printf_i+0x148>
 800bc3a:	6833      	ldr	r3, [r6, #0]
 800bc3c:	1d1a      	adds	r2, r3, #4
 800bc3e:	6032      	str	r2, [r6, #0]
 800bc40:	681e      	ldr	r6, [r3, #0]
 800bc42:	6862      	ldr	r2, [r4, #4]
 800bc44:	2100      	movs	r1, #0
 800bc46:	4630      	mov	r0, r6
 800bc48:	f7f4 faea 	bl	8000220 <memchr>
 800bc4c:	b108      	cbz	r0, 800bc52 <_printf_i+0x1e6>
 800bc4e:	1b80      	subs	r0, r0, r6
 800bc50:	6060      	str	r0, [r4, #4]
 800bc52:	6863      	ldr	r3, [r4, #4]
 800bc54:	6123      	str	r3, [r4, #16]
 800bc56:	2300      	movs	r3, #0
 800bc58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc5c:	e7aa      	b.n	800bbb4 <_printf_i+0x148>
 800bc5e:	6923      	ldr	r3, [r4, #16]
 800bc60:	4632      	mov	r2, r6
 800bc62:	4649      	mov	r1, r9
 800bc64:	4640      	mov	r0, r8
 800bc66:	47d0      	blx	sl
 800bc68:	3001      	adds	r0, #1
 800bc6a:	d0ad      	beq.n	800bbc8 <_printf_i+0x15c>
 800bc6c:	6823      	ldr	r3, [r4, #0]
 800bc6e:	079b      	lsls	r3, r3, #30
 800bc70:	d413      	bmi.n	800bc9a <_printf_i+0x22e>
 800bc72:	68e0      	ldr	r0, [r4, #12]
 800bc74:	9b03      	ldr	r3, [sp, #12]
 800bc76:	4298      	cmp	r0, r3
 800bc78:	bfb8      	it	lt
 800bc7a:	4618      	movlt	r0, r3
 800bc7c:	e7a6      	b.n	800bbcc <_printf_i+0x160>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	4632      	mov	r2, r6
 800bc82:	4649      	mov	r1, r9
 800bc84:	4640      	mov	r0, r8
 800bc86:	47d0      	blx	sl
 800bc88:	3001      	adds	r0, #1
 800bc8a:	d09d      	beq.n	800bbc8 <_printf_i+0x15c>
 800bc8c:	3501      	adds	r5, #1
 800bc8e:	68e3      	ldr	r3, [r4, #12]
 800bc90:	9903      	ldr	r1, [sp, #12]
 800bc92:	1a5b      	subs	r3, r3, r1
 800bc94:	42ab      	cmp	r3, r5
 800bc96:	dcf2      	bgt.n	800bc7e <_printf_i+0x212>
 800bc98:	e7eb      	b.n	800bc72 <_printf_i+0x206>
 800bc9a:	2500      	movs	r5, #0
 800bc9c:	f104 0619 	add.w	r6, r4, #25
 800bca0:	e7f5      	b.n	800bc8e <_printf_i+0x222>
 800bca2:	bf00      	nop
 800bca4:	0800c1bd 	.word	0x0800c1bd
 800bca8:	0800c1ce 	.word	0x0800c1ce

0800bcac <__sflush_r>:
 800bcac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bcb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb4:	0716      	lsls	r6, r2, #28
 800bcb6:	4605      	mov	r5, r0
 800bcb8:	460c      	mov	r4, r1
 800bcba:	d454      	bmi.n	800bd66 <__sflush_r+0xba>
 800bcbc:	684b      	ldr	r3, [r1, #4]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	dc02      	bgt.n	800bcc8 <__sflush_r+0x1c>
 800bcc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	dd48      	ble.n	800bd5a <__sflush_r+0xae>
 800bcc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcca:	2e00      	cmp	r6, #0
 800bccc:	d045      	beq.n	800bd5a <__sflush_r+0xae>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bcd4:	682f      	ldr	r7, [r5, #0]
 800bcd6:	6a21      	ldr	r1, [r4, #32]
 800bcd8:	602b      	str	r3, [r5, #0]
 800bcda:	d030      	beq.n	800bd3e <__sflush_r+0x92>
 800bcdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcde:	89a3      	ldrh	r3, [r4, #12]
 800bce0:	0759      	lsls	r1, r3, #29
 800bce2:	d505      	bpl.n	800bcf0 <__sflush_r+0x44>
 800bce4:	6863      	ldr	r3, [r4, #4]
 800bce6:	1ad2      	subs	r2, r2, r3
 800bce8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bcea:	b10b      	cbz	r3, 800bcf0 <__sflush_r+0x44>
 800bcec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcee:	1ad2      	subs	r2, r2, r3
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcf4:	6a21      	ldr	r1, [r4, #32]
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	47b0      	blx	r6
 800bcfa:	1c43      	adds	r3, r0, #1
 800bcfc:	89a3      	ldrh	r3, [r4, #12]
 800bcfe:	d106      	bne.n	800bd0e <__sflush_r+0x62>
 800bd00:	6829      	ldr	r1, [r5, #0]
 800bd02:	291d      	cmp	r1, #29
 800bd04:	d82b      	bhi.n	800bd5e <__sflush_r+0xb2>
 800bd06:	4a2a      	ldr	r2, [pc, #168]	@ (800bdb0 <__sflush_r+0x104>)
 800bd08:	410a      	asrs	r2, r1
 800bd0a:	07d6      	lsls	r6, r2, #31
 800bd0c:	d427      	bmi.n	800bd5e <__sflush_r+0xb2>
 800bd0e:	2200      	movs	r2, #0
 800bd10:	6062      	str	r2, [r4, #4]
 800bd12:	04d9      	lsls	r1, r3, #19
 800bd14:	6922      	ldr	r2, [r4, #16]
 800bd16:	6022      	str	r2, [r4, #0]
 800bd18:	d504      	bpl.n	800bd24 <__sflush_r+0x78>
 800bd1a:	1c42      	adds	r2, r0, #1
 800bd1c:	d101      	bne.n	800bd22 <__sflush_r+0x76>
 800bd1e:	682b      	ldr	r3, [r5, #0]
 800bd20:	b903      	cbnz	r3, 800bd24 <__sflush_r+0x78>
 800bd22:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd26:	602f      	str	r7, [r5, #0]
 800bd28:	b1b9      	cbz	r1, 800bd5a <__sflush_r+0xae>
 800bd2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd2e:	4299      	cmp	r1, r3
 800bd30:	d002      	beq.n	800bd38 <__sflush_r+0x8c>
 800bd32:	4628      	mov	r0, r5
 800bd34:	f7ff fca0 	bl	800b678 <_free_r>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd3c:	e00d      	b.n	800bd5a <__sflush_r+0xae>
 800bd3e:	2301      	movs	r3, #1
 800bd40:	4628      	mov	r0, r5
 800bd42:	47b0      	blx	r6
 800bd44:	4602      	mov	r2, r0
 800bd46:	1c50      	adds	r0, r2, #1
 800bd48:	d1c9      	bne.n	800bcde <__sflush_r+0x32>
 800bd4a:	682b      	ldr	r3, [r5, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d0c6      	beq.n	800bcde <__sflush_r+0x32>
 800bd50:	2b1d      	cmp	r3, #29
 800bd52:	d001      	beq.n	800bd58 <__sflush_r+0xac>
 800bd54:	2b16      	cmp	r3, #22
 800bd56:	d11e      	bne.n	800bd96 <__sflush_r+0xea>
 800bd58:	602f      	str	r7, [r5, #0]
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	e022      	b.n	800bda4 <__sflush_r+0xf8>
 800bd5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd62:	b21b      	sxth	r3, r3
 800bd64:	e01b      	b.n	800bd9e <__sflush_r+0xf2>
 800bd66:	690f      	ldr	r7, [r1, #16]
 800bd68:	2f00      	cmp	r7, #0
 800bd6a:	d0f6      	beq.n	800bd5a <__sflush_r+0xae>
 800bd6c:	0793      	lsls	r3, r2, #30
 800bd6e:	680e      	ldr	r6, [r1, #0]
 800bd70:	bf08      	it	eq
 800bd72:	694b      	ldreq	r3, [r1, #20]
 800bd74:	600f      	str	r7, [r1, #0]
 800bd76:	bf18      	it	ne
 800bd78:	2300      	movne	r3, #0
 800bd7a:	eba6 0807 	sub.w	r8, r6, r7
 800bd7e:	608b      	str	r3, [r1, #8]
 800bd80:	f1b8 0f00 	cmp.w	r8, #0
 800bd84:	dde9      	ble.n	800bd5a <__sflush_r+0xae>
 800bd86:	6a21      	ldr	r1, [r4, #32]
 800bd88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd8a:	4643      	mov	r3, r8
 800bd8c:	463a      	mov	r2, r7
 800bd8e:	4628      	mov	r0, r5
 800bd90:	47b0      	blx	r6
 800bd92:	2800      	cmp	r0, #0
 800bd94:	dc08      	bgt.n	800bda8 <__sflush_r+0xfc>
 800bd96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd9e:	81a3      	strh	r3, [r4, #12]
 800bda0:	f04f 30ff 	mov.w	r0, #4294967295
 800bda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda8:	4407      	add	r7, r0
 800bdaa:	eba8 0800 	sub.w	r8, r8, r0
 800bdae:	e7e7      	b.n	800bd80 <__sflush_r+0xd4>
 800bdb0:	dfbffffe 	.word	0xdfbffffe

0800bdb4 <_fflush_r>:
 800bdb4:	b538      	push	{r3, r4, r5, lr}
 800bdb6:	690b      	ldr	r3, [r1, #16]
 800bdb8:	4605      	mov	r5, r0
 800bdba:	460c      	mov	r4, r1
 800bdbc:	b913      	cbnz	r3, 800bdc4 <_fflush_r+0x10>
 800bdbe:	2500      	movs	r5, #0
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	bd38      	pop	{r3, r4, r5, pc}
 800bdc4:	b118      	cbz	r0, 800bdce <_fflush_r+0x1a>
 800bdc6:	6a03      	ldr	r3, [r0, #32]
 800bdc8:	b90b      	cbnz	r3, 800bdce <_fflush_r+0x1a>
 800bdca:	f7ff f9e7 	bl	800b19c <__sinit>
 800bdce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d0f3      	beq.n	800bdbe <_fflush_r+0xa>
 800bdd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bdd8:	07d0      	lsls	r0, r2, #31
 800bdda:	d404      	bmi.n	800bde6 <_fflush_r+0x32>
 800bddc:	0599      	lsls	r1, r3, #22
 800bdde:	d402      	bmi.n	800bde6 <_fflush_r+0x32>
 800bde0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bde2:	f7ff fc38 	bl	800b656 <__retarget_lock_acquire_recursive>
 800bde6:	4628      	mov	r0, r5
 800bde8:	4621      	mov	r1, r4
 800bdea:	f7ff ff5f 	bl	800bcac <__sflush_r>
 800bdee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdf0:	07da      	lsls	r2, r3, #31
 800bdf2:	4605      	mov	r5, r0
 800bdf4:	d4e4      	bmi.n	800bdc0 <_fflush_r+0xc>
 800bdf6:	89a3      	ldrh	r3, [r4, #12]
 800bdf8:	059b      	lsls	r3, r3, #22
 800bdfa:	d4e1      	bmi.n	800bdc0 <_fflush_r+0xc>
 800bdfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdfe:	f7ff fc2b 	bl	800b658 <__retarget_lock_release_recursive>
 800be02:	e7dd      	b.n	800bdc0 <_fflush_r+0xc>

0800be04 <__swhatbuf_r>:
 800be04:	b570      	push	{r4, r5, r6, lr}
 800be06:	460c      	mov	r4, r1
 800be08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be0c:	2900      	cmp	r1, #0
 800be0e:	b096      	sub	sp, #88	@ 0x58
 800be10:	4615      	mov	r5, r2
 800be12:	461e      	mov	r6, r3
 800be14:	da0d      	bge.n	800be32 <__swhatbuf_r+0x2e>
 800be16:	89a3      	ldrh	r3, [r4, #12]
 800be18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be1c:	f04f 0100 	mov.w	r1, #0
 800be20:	bf14      	ite	ne
 800be22:	2340      	movne	r3, #64	@ 0x40
 800be24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be28:	2000      	movs	r0, #0
 800be2a:	6031      	str	r1, [r6, #0]
 800be2c:	602b      	str	r3, [r5, #0]
 800be2e:	b016      	add	sp, #88	@ 0x58
 800be30:	bd70      	pop	{r4, r5, r6, pc}
 800be32:	466a      	mov	r2, sp
 800be34:	f000 f848 	bl	800bec8 <_fstat_r>
 800be38:	2800      	cmp	r0, #0
 800be3a:	dbec      	blt.n	800be16 <__swhatbuf_r+0x12>
 800be3c:	9901      	ldr	r1, [sp, #4]
 800be3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be46:	4259      	negs	r1, r3
 800be48:	4159      	adcs	r1, r3
 800be4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be4e:	e7eb      	b.n	800be28 <__swhatbuf_r+0x24>

0800be50 <__smakebuf_r>:
 800be50:	898b      	ldrh	r3, [r1, #12]
 800be52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be54:	079d      	lsls	r5, r3, #30
 800be56:	4606      	mov	r6, r0
 800be58:	460c      	mov	r4, r1
 800be5a:	d507      	bpl.n	800be6c <__smakebuf_r+0x1c>
 800be5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	6123      	str	r3, [r4, #16]
 800be64:	2301      	movs	r3, #1
 800be66:	6163      	str	r3, [r4, #20]
 800be68:	b003      	add	sp, #12
 800be6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be6c:	ab01      	add	r3, sp, #4
 800be6e:	466a      	mov	r2, sp
 800be70:	f7ff ffc8 	bl	800be04 <__swhatbuf_r>
 800be74:	9f00      	ldr	r7, [sp, #0]
 800be76:	4605      	mov	r5, r0
 800be78:	4639      	mov	r1, r7
 800be7a:	4630      	mov	r0, r6
 800be7c:	f7ff f876 	bl	800af6c <_malloc_r>
 800be80:	b948      	cbnz	r0, 800be96 <__smakebuf_r+0x46>
 800be82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be86:	059a      	lsls	r2, r3, #22
 800be88:	d4ee      	bmi.n	800be68 <__smakebuf_r+0x18>
 800be8a:	f023 0303 	bic.w	r3, r3, #3
 800be8e:	f043 0302 	orr.w	r3, r3, #2
 800be92:	81a3      	strh	r3, [r4, #12]
 800be94:	e7e2      	b.n	800be5c <__smakebuf_r+0xc>
 800be96:	89a3      	ldrh	r3, [r4, #12]
 800be98:	6020      	str	r0, [r4, #0]
 800be9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be9e:	81a3      	strh	r3, [r4, #12]
 800bea0:	9b01      	ldr	r3, [sp, #4]
 800bea2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bea6:	b15b      	cbz	r3, 800bec0 <__smakebuf_r+0x70>
 800bea8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800beac:	4630      	mov	r0, r6
 800beae:	f000 f81d 	bl	800beec <_isatty_r>
 800beb2:	b128      	cbz	r0, 800bec0 <__smakebuf_r+0x70>
 800beb4:	89a3      	ldrh	r3, [r4, #12]
 800beb6:	f023 0303 	bic.w	r3, r3, #3
 800beba:	f043 0301 	orr.w	r3, r3, #1
 800bebe:	81a3      	strh	r3, [r4, #12]
 800bec0:	89a3      	ldrh	r3, [r4, #12]
 800bec2:	431d      	orrs	r5, r3
 800bec4:	81a5      	strh	r5, [r4, #12]
 800bec6:	e7cf      	b.n	800be68 <__smakebuf_r+0x18>

0800bec8 <_fstat_r>:
 800bec8:	b538      	push	{r3, r4, r5, lr}
 800beca:	4d07      	ldr	r5, [pc, #28]	@ (800bee8 <_fstat_r+0x20>)
 800becc:	2300      	movs	r3, #0
 800bece:	4604      	mov	r4, r0
 800bed0:	4608      	mov	r0, r1
 800bed2:	4611      	mov	r1, r2
 800bed4:	602b      	str	r3, [r5, #0]
 800bed6:	f7f5 fc44 	bl	8001762 <_fstat>
 800beda:	1c43      	adds	r3, r0, #1
 800bedc:	d102      	bne.n	800bee4 <_fstat_r+0x1c>
 800bede:	682b      	ldr	r3, [r5, #0]
 800bee0:	b103      	cbz	r3, 800bee4 <_fstat_r+0x1c>
 800bee2:	6023      	str	r3, [r4, #0]
 800bee4:	bd38      	pop	{r3, r4, r5, pc}
 800bee6:	bf00      	nop
 800bee8:	20001fbc 	.word	0x20001fbc

0800beec <_isatty_r>:
 800beec:	b538      	push	{r3, r4, r5, lr}
 800beee:	4d06      	ldr	r5, [pc, #24]	@ (800bf08 <_isatty_r+0x1c>)
 800bef0:	2300      	movs	r3, #0
 800bef2:	4604      	mov	r4, r0
 800bef4:	4608      	mov	r0, r1
 800bef6:	602b      	str	r3, [r5, #0]
 800bef8:	f7f5 fc43 	bl	8001782 <_isatty>
 800befc:	1c43      	adds	r3, r0, #1
 800befe:	d102      	bne.n	800bf06 <_isatty_r+0x1a>
 800bf00:	682b      	ldr	r3, [r5, #0]
 800bf02:	b103      	cbz	r3, 800bf06 <_isatty_r+0x1a>
 800bf04:	6023      	str	r3, [r4, #0]
 800bf06:	bd38      	pop	{r3, r4, r5, pc}
 800bf08:	20001fbc 	.word	0x20001fbc

0800bf0c <_init>:
 800bf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0e:	bf00      	nop
 800bf10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf12:	bc08      	pop	{r3}
 800bf14:	469e      	mov	lr, r3
 800bf16:	4770      	bx	lr

0800bf18 <_fini>:
 800bf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1a:	bf00      	nop
 800bf1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf1e:	bc08      	pop	{r3}
 800bf20:	469e      	mov	lr, r3
 800bf22:	4770      	bx	lr
